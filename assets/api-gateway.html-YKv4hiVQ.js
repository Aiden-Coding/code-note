import{_ as o,r as l,o as n,c,a as t,b as e,d as s,e as i}from"./app-3RcBQnkC.js";const r={},d=i('<h1 id="api网关-中间件设计和实践" tabindex="-1"><a class="header-anchor" href="#api网关-中间件设计和实践" aria-hidden="true">#</a> API网关：中间件设计和实践</h1><div align="center"><img src="https://bugstack.cn/images/article/assembly/api-gateway/api-gateway-logo.png?raw=true"><div style="font-size:12px;"><a href="https://t.zsxq.com/Ja27ujq">星球介绍：码农会锁 - 实战项目、专属小册、问题解答、简历指导、架构图稿、视频课程</a></div></div>',2),h=t("br",null,null,-1),p={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},_=t("br",null,null,-1),g={href:"https://t.zsxq.com/0diYdgP5u",target:"_blank",rel:"noopener noreferrer"},E=t("blockquote",null,[t("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),u=t("hr",null,null,-1),b=t("p",null,[e("是滴，小傅哥又要准备搞事情了！这次准备下手"),t("strong",null,"API网关"),e("项目，因为这是所有互联网大厂都有的一个核心服务，承接着来自用户的滴滴打车、美团外卖、京东购物、微信支付，更是大促期间千万级访问量的核心系统。")],-1),B=t("p",null,"🤔 那么它是一个什么样的项目呢？为什么会有它的存在？它是怎么设计实现的呢？都用到了哪些技术栈呢？",-1),A=t("h2",{id:"一、前言-网关是啥东西",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#一、前言-网关是啥东西","aria-hidden":"true"},"#"),e(" 一、前言：网关是啥东西")],-1),y={href:"https://zh.wikipedia.org/wiki/%E7%BD%91%E5%85%B3",target:"_blank",rel:"noopener noreferrer"},k=t("strong",null,"网关",-1),m=i('<p>而<strong>API网关</strong>也是随着对传统庞大的单体应用（All in one）拆分为众多的微服务（Microservice）以后，所引入的统一通信管理系统。用于运行在外部http请求与内部rpc服务之间的一个流量入口，实现对外部请求的<code>协议转换</code>、<code>参数校验</code>、<code>鉴权</code>、<code>切量</code>、<code>熔断</code>、<code>限流</code>、<code>监控</code>、<code>风控</code>等各类共性的通用服务。</p><h2 id="二、大厂-为啥都做网关" tabindex="-1"><a class="header-anchor" href="#二、大厂-为啥都做网关" aria-hidden="true">#</a> 二、大厂：为啥都做网关</h2><p>各大厂做网关，其实做的就是一套统一方案。将分布式微服务下的RPC到HTTP通信的同类共性的需求，凝练成通用的组件服务，减少在业务需求场景开发下，非业务需求的同类技术诉求的开发成本。</p><p>那么以往没有网关的时候怎么做，基本的做法就是再 RPC 服务之上再开发一个对应的 WEB 服务，这些 WEB 服务可以是 Spring MVC 工程，在 Spring MVC 工程中调用 RPC 服务，最终提供 HTTP 接口给到 H5、Web、小程序、APP 等应用中进行使用。如图 1-1 所示</p><p><img src="https://bugstack.cn/images/article/assembly/api-gateway/api-gateway-220809-01.png" alt="图 1-1 从传统方式到网关设计"></p><p>传统开发 WEB 服务的几个问题：</p><ul><li>问题1：每一个 WEB 应用，都需要与之匹配申请一套工程、域名、机器等资源，一直到部署，研发效率降低，维护成本增加。</li><li>问题2：每一个 WEB 应用，都会有所涉及共性需求，限流、熔断、降级、切量等诉求，维护代码成本增加。</li><li>问题3：每一个 WEB 应用，在整个使用生命周期内，都会涉及到文档的维护、工程的调试、联调的诉求，类似刀耕火种一样的开发势必降低研发效率。</li></ul><p><strong>所以</strong>：综上在微服务下的传统开发所遇到的这些问题，让各个大厂都有了自己自研网关的诉求，包括；<code>阿里</code>、<code>腾讯</code>、<code>百度</code>、<code>美团</code>、<code>京东</code>、<code>网易</code>、<code>亚马逊</code>等，都有自己成熟的 API 网关解决方案。毕竟这可以降低沟通成本、提升研发效率、提升资源利用率。</p><h2 id="三、网关-系统架构设计" tabindex="-1"><a class="header-anchor" href="#三、网关-系统架构设计" aria-hidden="true">#</a> 三、网关：系统架构设计</h2><p>如果希望实现一个能支撑百亿级吞吐量的网关，那么它就应该是按照分布式架构思维做去中心化设计，支持横向扩展。让每一台网关服务都成为一个算力，把不同的微服务RPC接口，按照权重策略计算动态分配到各个算力组中，做到分布式运算的能力。</p><p>此外从设计实现上，要把网关的通信模块、管理服务、SDK、注册中心、运营平台等依次分开单独开发实现，这样才能进行独立的组合包装使用。</p><p>这就像为什么 ORM 框架在开发的时候不是与 Spring 强绑定在一起，而是开发一个独立的组件，当需要有 Spring 融合使用的时候，再单独开发一个 Mybatis-Spring 来整合服务。</p><p>所以在这里设计网关的时候也是同样的思路，就像官网的通信不应该一开始就把 Netty 相关的服务全部绑定到 Spring 容器，这样即增加了维护成本，也降低了系统的扩展性。</p><p>诸如此类的软件架构设计，都会在这套网关微服务架构中体现，整体架构如图 1-2 所示</p><p><img src="https://bugstack.cn/images/article/assembly/api-gateway/api-gateway-220809-02.png" alt="图 1-2 网关架构设计"></p><p>整个<strong>API网关</strong>设计核心内容分为这么五块；</p><ul><li><code>第一块</code>：是关于通信的协议处理，也是网关最本质的处理内容。这里需要借助 NIO 框架 Netty 处理 HTTP 请求，并进行协议转换泛化调用到 RPC 服务返回数据信息。</li><li><code>第二块</code>：是关于注册中心，这里需要把网关通信系统当做一个算力，每部署一个网关服务，都需要向注册中心注册一个算力。而注册中心还需要接收 RPC 接口的注册，这部分可以是基于 SDK 自动扫描注册也可以是人工介入管理。当 RPC 注册完成后，会被注册中心经过AHP权重计算分配到一组网关算力上进行使用。</li><li><code>第三块</code>：是关于路由服务，每一个注册上来的Netty通信服务，都会与他对应提供的分组网关相关联，例如：wg/(a/b/c)/user/... a/b/c 需要匹配到 Nginx 路由配置上，以确保不同的接口调用请求到对应的 Netty 服务上。PS：如果对应错误或者为启动，可能会发生类似B站事故。</li><li><code>第四块</code>：责任链下插件模块的调用，鉴权、授信、熔断、降级、限流、切量等，这些服务虽然不算是网关的定义下的内容，但作为共性通用的服务，它们通常也是被放到网关层统一设计实现和使用的。</li><li><code>第五块</code>：管理后台，作为一个网关项目少不了一个与之对应的管理后台，用户接口的注册维护、mock测试、日志查询、流量整形、网关管理等服务。</li></ul><p>综上系统微服务模块结构如下：</p><table><thead><tr><th style="text-align:center;">序号</th><th>系统</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td>api-gateway-core</td><td>网关核心系统：用于网络通信转换处理，承接http请求，调用RPC服务，责任链模块调用</td></tr><tr><td style="text-align:center;">2</td><td>api-gateway-admin</td><td>网关管理系统：用于网关接口后台管理，注册下线停用控制</td></tr><tr><td style="text-align:center;">3</td><td>api-gateway-sdk</td><td>网关注册组件：用于注解方式采集接口，发送消息注册接口</td></tr><tr><td style="text-align:center;">4</td><td>api-gateway-center</td><td>网关注册中心：提供网关注册中心服务，登记网关接口信息</td></tr><tr><td style="text-align:center;">5</td><td>api-gateway-test-provider</td><td>网关测试工程：提供RPC接口</td></tr><tr><td style="text-align:center;">6</td><td>api-gateway-test-consumer</td><td>网关测试工程：消费RPC接口</td></tr></tbody></table><h2 id="四、演示-网关运行效果" tabindex="-1"><a class="header-anchor" href="#四、演示-网关运行效果" aria-hidden="true">#</a> 四、演示：网关运行效果</h2>',20),C={href:"https://bugstack.cn/md/spring/develop-mybatis/2022-03-20-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Mybatis%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://bugstack.cn/md/spring/develop-spring/2021-05-16-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Spring%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},x=t("p",null,[t("img",{src:"https://bugstack.cn/images/article/assembly/api-gateway/api-gateway-220809-03.png",alt:"图 1-3 网关运行效果"})],-1),P=t("ul",null,[t("li",null,"左侧是API网关核心通信模块，右侧是RPC(Dubbo)服务。通过对网页端发起的 http 请求，经过API网关的协议转换和对RPC的泛化调用包装结果数据并返回到页面，就是中间这张图的运行效果了。"),t("li",null,"左侧工程的实现，以渐进式分拆模块逐步完成，例如： core-01(Netty通信)、core-02(泛化调用)、core-03(执行器)等，让每一个对API网关感兴趣的读者都能从中学习到；架构的分层、功能的设计、代码的实现。")],-1),w=t("h2",{id:"五、邀请-一起学习技术",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#五、邀请-一起学习技术","aria-hidden":"true"},"#"),e(" 五、邀请：一起学习技术")],-1),F=t("strong",null,"API网关",-1),R={href:"https://t.zsxq.com/Ja27ujq",target:"_blank",rel:"noopener noreferrer"},D=t("code",null,"周末",-1),I=t("code",null,"假期",-1),S=t("code",null,"视频",-1),N=t("code",null,"小册",-1),v=t("code",null,"代码",-1),T=t("code",null,"直播",-1),M=t("code",null,"作业",-1),q=i('<h3 id="_1-适合谁学" tabindex="-1"><a class="header-anchor" href="#_1-适合谁学" aria-hidden="true">#</a> 1. 适合谁学</h3><ol><li>一直使用 SpringMVC，想了解分布式架构。</li><li>常年做CRUD开发，手里缺少硬核项目，面试张不开嘴。</li><li>在校准备校招，市面都是流水账项目，面试没竞争力。</li><li>希望多沉淀核心技术，让自己能公司留的下来，也能走的出去。</li></ol><h3 id="_2-能学到啥" tabindex="-1"><a class="header-anchor" href="#_2-能学到啥" aria-hidden="true">#</a> 2. 能学到啥</h3><ol><li>优秀架构：学习微服务架构设计方案</li><li>整洁编码：学习源码级工程编程实现</li><li>扩充技术：学习开发中间件所需技术（Netty、CGlib、SPI、GenericReference）</li><li>打开思路：学习让自己开眼界的项目（技术并不难，但没人告诉你，就走的很难！）</li></ol><h3 id="_3-开发计划" tabindex="-1"><a class="header-anchor" href="#_3-开发计划" aria-hidden="true">#</a> 3. 开发计划</h3><ol><li>每周末和假期编写API网关，并同时录制设计和实现的视频、编写小册和定期组织直播解决读者疑惑以及分享。<strong>稳定输出，可靠学习</strong></li><li>整个系统的设计和实现，遵循分治和抽象的设计分层原则，按照微服务构建服务模块，以源码级体验学习。</li><li>关于API网关会更注重骨架的结构和核心流程的功能，把最干净的部分交给读者，让读者更加易懂，也易扩展。</li></ol><p><strong>目录：</strong></p>',7),H={class:"contains-task-list"},V={class:"task-list-item"},W=t("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"},null,-1),z={href:"https://bugstack.cn/md/assembly/api-gateway/2022-08-13-%E7%AC%AC1%E7%AB%A0%EF%BC%9AHTTP%E8%AF%B7%E6%B1%82%E4%BC%9A%E8%AF%9D%E5%8D%8F%E8%AE%AE%E5%A4%84%E7%90%86.html",target:"_blank",rel:"noopener noreferrer"},G=t("img",{src:"https://bugstack.cn/images/article/assembly/api-gateway/api-gateway-220809-07.png",alt:""},null,-1),j={class:"task-list-item"},J=t("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"},null,-1),K={href:"https://bugstack.cn/md/assembly/api-gateway/2022-08-20-%E7%AC%AC2%E7%AB%A0%EF%BC%9A%E4%BB%A3%E7%90%86RPC%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8.html",target:"_blank",rel:"noopener noreferrer"},L={class:"task-list-item"},O=t("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"},null,-1),Y={href:"https://bugstack.cn/md/assembly/api-gateway/2022-08-27-%E7%AC%AC3%E7%AB%A0%EF%BC%9A%E5%88%86%E6%B2%BB%E5%A4%84%E7%90%86%E4%BC%9A%E8%AF%9D%E6%B5%81%E7%A8%8B.html",target:"_blank",rel:"noopener noreferrer"},U=i('<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> <a href="#">第4章：方法执行器封装</a></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 梳理中 ... 每周更新</li>',2);function Q(X,Z){const a=l("ExternalLinkIcon");return n(),c("div",null,[d,t("p",null,[e("作者：小傅哥 "),h,e("博客："),t("a",p,[e("https://bugstack.cn"),s(a)]),_,e("星球："),t("a",g,[e("https://t.zsxq.com/0diYdgP5u"),s(a)]),e(" - 课程入口")]),E,u,b,B,A,t("p",null,[e("在计算机网络中，"),t("a",y,[k,s(a)]),e("（Gateway）是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。")]),m,t("p",null,[e("趁着周末假期小傅哥已经做了一部分的功能实现，就像小傅哥以前"),t("a",C,[e("《手写Spring》"),s(a)]),e("、"),t("a",f,[e("《手写Mybatis》"),s(a)]),e("一样，此项目也是渐进式的逐步完成各个模块功能的开发。并参照优秀源码级的项目架构设计，运用抽象和分治的设计技巧，解决功能间的耦合调用和服务设计。同时也结合设计原则和相应场景下的设计模式，开发出高质量易于迭代和维护的代码。部分代码实现和运行如图 1-3 所示")]),x,P,w,t("p",null,[e("💐以上关"),F,e("的项目，也是小傅哥的星球【"),t("a",R,[e("码农会锁"),s(a)]),e("】准备带着读者一起利用"),D,e("和"),I,e("学习实践的内容。现在上车你将会通过小傅哥的"),S,e("+"),N,e("+"),v,e("+"),T,e("+"),M,e("，5方面来与你一起学习，帮助你提升技术实力，为你的职业生涯续期，也为你可以走的更远，可以多赚些钱。")]),q,t("ul",H,[t("li",V,[W,e(),t("a",z,[e("第1章：HTTP请求会话协议处理"),s(a)]),G]),t("li",j,[J,e(),t("a",K,[e("第2章：代理RPC泛化调用"),s(a)])]),t("li",L,[O,e(),t("a",Y,[e("第3章：分治处理会话流程"),s(a)])]),U])])}const tt=o(r,[["render",Q],["__file","api-gateway.html.vue"]]);export{tt as default};
