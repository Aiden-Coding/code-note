import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"调研字节码插桩技术-用于系统监控设计和实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#调研字节码插桩技术-用于系统监控设计和实现","aria-hidden":"true"},"#"),s(" 调研字节码插桩技术，用于系统监控设计和实现")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/9g7O3MSxh5q3F6z-Mxalzg",target:"_blank",rel:"noopener noreferrer"},v=e('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、来自深夜的电话" tabindex="-1"><a class="header-anchor" href="#一、来自深夜的电话" aria-hidden="true">#</a> 一、来自深夜的电话！</h2><p><code>咋滴，你那上线的系统是裸奔呢？</code></p><p><img src="https://bugstack.cn/assets/images/framework/framework-6-1.png" alt=""></p><p>周末熟睡的深夜，突然接到老板电话☎的催促。“赶紧看微信、看微信，咋系统出问题了，我们都不知道，还得用户反馈才知道的！！！”深夜爬起来，打开电脑连上 VPN ，打着哈欠、睁开朦胧的眼睛，查查系统日志，原来是系统挂了，赶紧重启恢复！</p><p>虽然重启恢复了系统，也重置了老板扭曲的表情。但系统是怎么挂的呢，因为没有一个监控系统，也不知道是流量太大导致，还是因为程序问题引起，通过一片片的日志，也仅能粗略估计出一些打着<code>好像的标签</code>给老板汇报。不过老板<em>也不傻</em>，聊来聊去，让把所有的系统运行状况都监控出来。</p>',6),b=n("strong",null,"难道在每个方法上都硬编码上执行耗时计算",-1),g={href:"https://echarts.apache.org/zh/index.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><img src="https://bugstack.cn/assets/images/framework/framework-6-2.png" alt=""></p><ul><li>但这么硬编码也不叫玩意呀，这不把我们部门搬砖的码农累岔气呀！再说了，这么干他们肯定瞧不起我。<em>啥架构师，要监控系统，还得硬编码，傻了不是！！！</em></li><li>这么一想整的没法睡觉，得找找资料，明天给老板汇报！</li></ul><hr><p>其实一套线上系统是否稳定运行，取决于它的运行健康度，而这包括；调用量、可用率、影响时长以及服务器性能等各项指标的一个综合值。并且在系统出现异常问题时，可以抓取整个业务方法执行链路并输出；当时的入参、出参、异常信息等等。当然还包括一些JVM、Redis、Mysql的各项性能指标，以用于快速定位并解决问题。</p><p>那么要做到这样的事情有什么处理方案呢，其实做法还是比较多的，比如；</p><ol><li>最简单粗暴的就是硬编码在方法中，收取执行耗时以及出入参和异常信息。但这样的编码成本实在太大，而且硬编码完还需要大量回归测试，可能给系统带来一定的风险。<em>万一谁手抖给复制粘贴错了呢！</em></li><li>可以选择切面方式做一套统一监控的组件，相对来说还是好一些的。但也需要硬编码，比如写入注解，同时维护成本也不低。</li><li>其实市面上对于这样的监控其实是有整套的非入侵监控方案的，比如；Google Dapper、Zipkin等都可以实现监控系统需求，他们都是基于探针技术非入侵的采用字节码增强的方式采集系统运行信息进行分析和监控运行状态。</li></ol><p>好，那么本文就来带着大家来尝试下几种不同方式，监控系统运行状态的实现思路。</p><h2 id="二、准备工作" tabindex="-1"><a class="header-anchor" href="#二、准备工作" aria-hidden="true">#</a> 二、准备工作</h2><p>本文会基于 <code>AOP</code>、字节码框架(<code>ASM</code>、<code>Javassist</code>、<code>Byte-Buddy</code>)，分别实现不同的监控实现代码。整个工程结构如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MonitorDesign</span>
├── cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>aop
├── cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>asm
├── cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>bytebuddy
├── cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>javassist
├── cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>test
└──	pom<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),y={href:"https://github.com/fuzhengwei/MonitorDesign",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"简单介绍：aop、asm、bytebuddy、javassist，分别是四种不同的实现方案。test 是一个基于 SpringBoot 的简单测试工程。",-1),w=n("li",null,"技术使用：SpringBoot、asm、byte-buddy、javassist",-1),q=e(`<p><strong>cn-bugstack-middleware-test</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">UserController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 测试：http://localhost:8081/api/queryUserInfo?userId=aaa
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/api/queryUserInfo&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户信息，userId：{}&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token string">&quot;虫虫:&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;天津市东丽区万科赏溪苑14-0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接下来的各类监控代码实现，都会以监控 <code>UserController#queryUserInfo</code> 的方法执行信息为主，看看各类技术都是怎么操作的。</li></ul><h2 id="三、使用-aop-做个切面监控" tabindex="-1"><a class="header-anchor" href="#三、使用-aop-做个切面监控" aria-hidden="true">#</a> 三、使用 AOP 做个切面监控</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>aop
└── src
    ├── main
    │   └── java
    │       ├── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor
    │       │   ├── annotation
    │       │   │   └── <span class="token class-name">DoMonitor</span><span class="token punctuation">.</span>java
    │       │   ├── config
    │       │   │   └── <span class="token class-name">MonitorAutoConfigure</span><span class="token punctuation">.</span>java
    │       │   └── <span class="token class-name">DoJoinPoint</span><span class="token punctuation">.</span>java
    │       └── resources
    │           └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span> 
    │               └── spring<span class="token punctuation">.</span>factories
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于 AOP 实现的监控系统，核心逻辑的以上工程并不复杂，其核心点在于对切面的理解和运用，以及一些配置项需要按照 SpringBoot 中的实现方式进行开发。</p><ul><li>DoMonitor，是一个自定义注解。它作用就是在需要使用到的方法监控接口上，添加此注解并配置必要的信息。</li><li>MonitorAutoConfigure，配置下是可以对 SpringBoot yml 文件的使用，可以处理一些 Bean 的初始化操作。</li><li>DoJoinPoint，是整个中间件的核心部分，它负责对所有添加自定义注解的方法进行拦截和逻辑处理。</li></ul><h3 id="_2-定义监控注解" tabindex="-1"><a class="header-anchor" href="#_2-定义监控注解" aria-hidden="true">#</a> 2. 定义监控注解</h3><p><strong>cn.bugstack.middleware.monitor.annotation.DoMonitor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DoMonitor</span> <span class="token punctuation">{</span>

   <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
   <span class="token class-name">String</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@Retention(RetentionPolicy.RUNTIME)，<code>Annotations are to be recorded in the class file by the compiler and retained by the VM at run time, so they may be read reflectively.</code></li><li>@Retention 是注解的注解，也称作元注解。这个注解里面有一个入参信息 <code>RetentionPolicy.RUNTIME</code> 在它的注释中有这样一段描述：<code>Annotations are to be recorded in the class file by the compiler and retained by the VM at run time, so they may be read reflectively.</code> 其实说的就是加了这个注解，它的信息会被带到JVM运行时，当你在调用方法时可以通过反射拿到注解信息。除此之外，RetentionPolicy 还有两个属性 <code>SOURCE</code>、<code>CLASS</code>，其实这三个枚举正式对应了Java代码的加载和运行顺序，Java源码文件 -&gt; .class文件 -&gt; 内存字节码。并且后者范围大于前者，所以一般情况下只需要使用 RetentionPolicy.RUNTIME 即可。</li><li>@Target 也是元注解起到标记作用，它的注解名称就是它的含义，<strong>目标</strong>，也就是我们这个自定义注解 DoWhiteList 要放在类、接口还是方法上。<em>在 JDK1.8 中 ElementType 一共提供了10中目标枚举，TYPE、FIELD、METHOD、PARAMETER、CONSTRUCTOR、LOCAL_VARIABLE、ANNOTATION_TYPE、PACKAGE、TYPE_PARAMETER、TYPE_USE，可以参考自己的自定义注解作用域进行设置</em></li><li>自定义注解 @DoMonitor 提供了监控的 key 和 desc描述，这个主要记录你监控方法的为唯一值配置和对监控方法的文字描述。</li></ul><h3 id="_3-定义切面拦截" tabindex="-1"><a class="header-anchor" href="#_3-定义切面拦截" aria-hidden="true">#</a> 3. 定义切面拦截</h3><p><strong>cn.bugstack.middleware.monitor.DoJoinPoint</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoJoinPoint</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(cn.bugstack.middleware.monitor.annotation.DoMonitor)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;aopPoint() &amp;&amp; @annotation(doMonitor)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doRouter</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">DoMonitor</span> doMonitor<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token function">getMethod</span><span class="token punctuation">(</span>jp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - Begin By AOP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控索引：&quot;</span> <span class="token operator">+</span> doMonitor<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控描述：&quot;</span> <span class="token operator">+</span> doMonitor<span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法名称：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法耗时：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - End\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Method</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Signature</span> sig <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MethodSignature</span> methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> sig<span class="token punctuation">;</span>
        <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodSignature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodSignature<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用注解 @Aspect，定义切面类。这是一个非常常用的切面定义方式。</li><li><code>@Pointcut(&quot;@annotation(cn.bugstack.middleware.monitor.annotation.DoMonitor)&quot;)</code>，定义切点。在 Pointcut 中提供了很多的切点寻找方式，有指定方法名称的、有范围筛选表达式的，也有我们现在通过自定义注解方式的。一般在中间件开发中，自定义注解方式使用的比较多，因为它可以更加灵活的运用到各个业务系统中。</li><li><code>@Around(&quot;aopPoint() &amp;&amp; @annotation(doMonitor)&quot;)</code>，可以理解为是对方法增强的织入动作，有了这个注解的效果就是在你调用已经加了自定义注解 @DoMonitor 的方法时，会先进入到此切点增强的方法。那么这个时候就你可以做一些对方法的操作动作了，比如我们要做一些方法监控和日志打印等。</li><li>最后在 <code>doRouter</code> 方法体中获取把方法执行 <code>jp.proceed();</code> 使用 <code>try finally</code> 包装起来，并打印相关的监控信息。这些监控信息的获取最后都是可以通过异步消息的方式发送给服务端，再由服务器进行处理监控数据和处理展示到监控页面。</li></ul><h3 id="_4-初始化切面类" tabindex="-1"><a class="header-anchor" href="#_4-初始化切面类" aria-hidden="true">#</a> 4. 初始化切面类</h3><p><strong>cn.bugstack.middleware.monitor.config.MonitorAutoConfigure</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorAutoConfigure</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">DoJoinPoint</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DoJoinPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@Configuration，可以算作是一个组件注解，在 SpringBoot 启动时可以进行加载创建出 Bean 文件。<em>因为 @Configuration 注解有一个 @Component 注解</em></li><li>MonitorAutoConfigure 可以处理自定义在 yml 中的配置信息，也可以用于初始化 Bean 对象，比如在这里我们实例化了 DoJoinPoint 切面对象。</li></ul><h3 id="_5-运行测试" tabindex="-1"><a class="header-anchor" href="#_5-运行测试" aria-hidden="true">#</a> 5. 运行测试</h3><h4 id="_5-1-引入-pom-配置" tabindex="-1"><a class="header-anchor" href="#_5-1-引入-pom-配置" aria-hidden="true">#</a> 5.1 引入 POM 配置</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 监控方式：<span class="token constant">AOP</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>aop<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.0</span><span class="token operator">-</span><span class="token constant">SNAPSHOT</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-方法上配置监控注册" tabindex="-1"><a class="header-anchor" href="#_5-2-方法上配置监控注册" aria-hidden="true">#</a> 5.2 方法上配置监控注册</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DoMonitor</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;cn.bugstack.middleware.UserController.queryUserInfo&quot;</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">&quot;查询用户信息&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/api/queryUserInfo&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户信息，userId：{}&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token string">&quot;虫虫:&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;天津市东丽区万科赏溪苑14-0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在通过 POM 引入自己的开发的组件后，就可以通过自定义的注解，拦截方法获取监控信息。</li></ul><h4 id="_5-3-测试结果" tabindex="-1"><a class="header-anchor" href="#_5-3-测试结果" aria-hidden="true">#</a> 5.3 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2021</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">10.710</span>  <span class="token constant">INFO</span> <span class="token number">19376</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8081</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>test<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span>UserController</span>     <span class="token operator">:</span> 查询用户信息，userId：aaa
监控 <span class="token operator">-</span> <span class="token class-name">Begin</span> <span class="token class-name">By</span> <span class="token constant">AOP</span>
监控索引：<span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span></span>UserController</span><span class="token punctuation">.</span>queryUserInfo
监控描述：查询用户信息
方法名称：queryUserInfo
方法耗时：<span class="token number">6</span>ms
监控 <span class="token operator">-</span> <span class="token class-name">End</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过启动 SpringBoot 程序，在网页中打开 URL 地址：<code>http://localhost:8081/api/queryUserInfo?userId=aaa</code>，可以看到已经可以把监控信息打印到控制台了。</li><li>此种通过自定义注解的配置方式，能解决一定的硬编码工作，但如果在方法上大量的添加注解，也是需要一定的开发工作的。</li></ul><hr><p><strong>接下来我们开始介绍关于使用字节码插桩非入侵的方式进行系统监控，关于字节码插桩常用的有三个组件，包括：ASM、Javassit、Byte-Buddy，接下来我们分别介绍它们是如何使用的。</strong></p><h2 id="四、asm" tabindex="-1"><a class="header-anchor" href="#四、asm" aria-hidden="true">#</a> 四、ASM</h2><blockquote><p>ASM 是一个 Java 字节码操控框架。它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p></blockquote><h3 id="_1-先来个测试" tabindex="-1"><a class="header-anchor" href="#_1-先来个测试" aria-hidden="true">#</a> 1. 先来个测试</h3><p><strong>cn.bugstack.middleware.monitor.test.ApiTest</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassWriter</span> classWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 定义对象头；版本号、修饰符、全类名、签名、父类、实现的接口</span>
    classWriter<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">V1_7</span><span class="token punctuation">,</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token string">&quot;cn/bugstack/demo/asm/AsmHelloWorld&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加方法；修饰符、方法名、描述符、签名、异常</span>
    <span class="token class-name">MethodVisitor</span> methodVisitor <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_STATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;([Ljava/lang/String;)V&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行指令；获取静态属性</span>
    methodVisitor<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ljava/io/PrintStream;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 加载常量 load constant</span>
    methodVisitor<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World ASM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用方法</span>
    methodVisitor<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">INVOKEVIRTUAL</span><span class="token punctuation">,</span> <span class="token string">&quot;java/io/PrintStream&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;println&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;)V&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回</span>
    methodVisitor<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置操作数栈的深度和局部变量的大小</span>
    methodVisitor<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 方法结束</span>
    methodVisitor<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 类完成</span>
    classWriter<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 生成字节数组</span>
    <span class="token keyword">return</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>以上这段代码就是基于 ASM 编写的 HelloWorld，整个过程包括：定义一个类的生成 ClassWriter、设定版本、修饰符、全类名、签名、父类、实现的接口，其实也就是那句；<code>public class HelloWorld</code></p></li><li><p>类型描述符：</p><table><thead><tr><th style="text-align:left;">Java 类型</th><th style="text-align:left;">类型描述符</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">Z</td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">C</td></tr><tr><td style="text-align:left;">byte</td><td style="text-align:left;">B</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">S</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">I</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">F</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">J</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">D</td></tr><tr><td style="text-align:left;">Object</td><td style="text-align:left;">Ljava/lang/Object;</td></tr><tr><td style="text-align:left;">int[]</td><td style="text-align:left;">[I</td></tr><tr><td style="text-align:left;">Object[][]</td><td style="text-align:left;">[[Ljava/lang/Object;</td></tr></tbody></table></li><li><p>方法描述符：</p><table><thead><tr><th style="text-align:left;">源文件中的方法声明</th><th style="text-align:left;">方法描述符</th></tr></thead><tbody><tr><td style="text-align:left;">void m(int i, float f)</td><td style="text-align:left;">(IF)V</td></tr><tr><td style="text-align:left;">int m(Object o)</td><td style="text-align:left;">(Ljava/lang/Object;)I</td></tr><tr><td style="text-align:left;">int[] m(int i, String s)</td><td style="text-align:left;">(ILjava/lang/String;)[I</td></tr><tr><td style="text-align:left;">Object m(int[] i)</td><td style="text-align:left;">([I)Ljava/lang/Object;</td></tr></tbody></table></li><li><p>执行指令；获取静态属性。主要是获得 System.out</p></li><li><p>加载常量 load constant，输出我们的HelloWorld <code>methodVisitor.visitLdcInsn(&quot;Hello World&quot;);</code></p></li><li><p>最后是调用输出方法并设置空返回，同时在结尾要设置操作数栈的深度和局部变量的大小。</p></li><li><p>这样输出一个 <code>HelloWorld</code> 是不还是蛮有意思的，虽然你可能觉得这编码起来实在太难了吧，也非常难理解。不过你可以安装一个 ASM 在 IDEA 中的插件 ASM Bytecode Outline，能更加方便的查看一个普通的代码在使用 ASM 的方式该如何处理。</p></li><li><p>另外以上这段代码的测试结果，主要是生成一个 class 文件和输出 <code>Hello World ASM!</code> 结果。</p></li></ul><h3 id="_2-监控设计工程结构" tabindex="-1"><a class="header-anchor" href="#_2-监控设计工程结构" aria-hidden="true">#</a> 2. 监控设计工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>asm
└── src
    ├── main
    │   ├── java
    │   │   └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor
    │   │       ├── config
    │   │       │   ├── <span class="token class-name">MethodInfo</span><span class="token punctuation">.</span>java
    │   │       │   └── <span class="token class-name">ProfilingFilter</span><span class="token punctuation">.</span>java
    │   │       ├── probe
    │   │       │   ├── <span class="token class-name">ProfilingAspect</span><span class="token punctuation">.</span>java
    │   │       │   ├── <span class="token class-name">ProfilingClassAdapter</span><span class="token punctuation">.</span>java
    │   │       │   ├── <span class="token class-name">ProfilingMethodVisitor</span><span class="token punctuation">.</span>java
    │   │       │   └── <span class="token class-name">ProfilingTransformer</span><span class="token punctuation">.</span>java
    │   │       └── <span class="token class-name">PreMain</span><span class="token punctuation">.</span>java
    │   └── resources	
    │       └── <span class="token constant">META_INF</span>
    │           └── <span class="token constant">MANIFEST</span><span class="token punctuation">.</span><span class="token constant">MF</span>
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上工程结构是使用 ASM 框架给系统方法做增强操作，也就是相当于通过框架完成硬编码写入方法前后的监控信息。不过这个过程转移到了 Java 程序启动时在 Javaagent#premain 进行处理。</p><ul><li>MethodInfo 是方法的定义，主要是描述类名、方法名、描述、入参、出参信息。</li><li>ProfilingFilter 是监控的配置信息，主要是过滤一些不需要字节码增强操作的方法，比如main、hashCode、javax/等</li><li>ProfilingAspect、ProfilingClassAdapter、ProfilingMethodVisitor、ProfilingTransformer，这四个类主要是完成字节码插装操作和输出监控结果的类。</li><li>PreMain 提供了 Javaagent 的入口，JVM 首先尝试在代理类上调用 premain 方法。</li><li>MANIFEST.MF 是配置信息，主要是找到 Premain-Class <code>Premain-Class: cn.bugstack.middleware.monitor.PreMain</code></li></ul><h3 id="_3-监控类入口" tabindex="-1"><a class="header-anchor" href="#_3-监控类入口" aria-hidden="true">#</a> 3. 监控类入口</h3><p><strong>cn.bugstack.middleware.monitor.PreMain</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreMain</span> <span class="token punctuation">{</span>

    <span class="token comment">//JVM 首先尝试在代理类上调用以下方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProfilingTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个是 Javaagent 技术的固定入口方法类，同时还需要把这个类的路径配置到 MANIFEST.MF 中。</li></ul><h3 id="_4-字节码方法处理" tabindex="-1"><a class="header-anchor" href="#_4-字节码方法处理" aria-hidden="true">#</a> 4. 字节码方法处理</h3><p><strong>cn.bugstack.middleware.monitor.probe.ProfilingTransformer</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfilingTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> classBeingRedefined<span class="token punctuation">,</span> <span class="token class-name">ProtectionDomain</span> protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalClassFormatException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ProfilingFilter</span><span class="token punctuation">.</span><span class="token function">isNotNeedInject</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token function">getBytes</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> className<span class="token punctuation">,</span> classfileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>classfileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>cr<span class="token punctuation">,</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">.</span><span class="token constant">COMPUTE_MAXS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClassVisitor</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProfilingClassAdapter</span><span class="token punctuation">(</span>cw<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">,</span> <span class="token class-name">ClassReader</span><span class="token punctuation">.</span><span class="token constant">EXPAND_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),j=n("li",null,"使用 ASM 核心类 ClassReader、ClassWriter、ClassVisitor，处理传入进行的类加载器、类名、字节码等，负责字节码的增强操作。",-1),M={href:"https://bugstack.cn/itstack/itstack-demo-bytecode.html",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="_5-字节码方法解析" tabindex="-1"><a class="header-anchor" href="#_5-字节码方法解析" aria-hidden="true">#</a> 5.字节码方法解析</h3><p><strong>cn.bugstack.middleware.monitor.probe.ProfilingMethodVisitor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfilingMethodVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">AdviceAdapter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterTypeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> parameterTypeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 参数个数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> startTimeIdentifier<span class="token punctuation">;</span>        <span class="token comment">// 启动时间标记</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> parameterIdentifier<span class="token punctuation">;</span>        <span class="token comment">// 入参内容标记</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> methodId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">// 方法全局唯一标记</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> currentLocal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">// 当前局部变量值</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isStaticMethod<span class="token punctuation">;</span>   <span class="token comment">// true；静态方法，false；非静态方法</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">ProfilingMethodVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">String</span> fullClassName<span class="token punctuation">,</span> <span class="token class-name">String</span> simpleClassName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM5</span><span class="token punctuation">,</span> mv<span class="token punctuation">,</span> access<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>
        <span class="token comment">// 判断是否为静态方法，非静态方法中局部变量第一个值是this，静态方法是第一个入参参数</span>
        isStaticMethod <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>access <span class="token operator">&amp;</span> <span class="token constant">ACC_STATIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//(String var1,Object var2,String var3,int var4,long var5,int[] var6,Object[][] var7,Req var8)==&quot;(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;IJ[I[[Ljava/lang/Object;Lorg/itstack/test/Req;)V&quot;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(L.*?;|\\\\[{0,2}L.*?;|[ZCBSIFJD]|\\\\[{0,2}[ZCBSIFJD]{1})&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> desc<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parameterTypeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        parameterTypeCount <span class="token operator">=</span> parameterTypeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodId <span class="token operator">=</span> <span class="token class-name">ProfilingAspect</span><span class="token punctuation">.</span><span class="token function">generateMethodId</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInfo</span><span class="token punctuation">(</span>fullClassName<span class="token punctuation">,</span> simpleClassName<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> parameterTypeList<span class="token punctuation">,</span> desc<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>     

    <span class="token comment">//... 一些字节码插桩操作 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当程序启动加载的时候，每个类的每一个方法都会被监控到。类的名称、方法的名称、方法入参出参的描述等，都可以在这里获取。</li><li>为了可以在后续监控处理不至于每一次都去传参（方法信息）浪费消耗性能，一般这里都会给每个方法生产一个全局防重的 <code>id</code> ，通过这个 <code>id</code> 就可以查询到对应的方法。</li><li>另外从这里可以看到的方法的入参和出参被描述成一段指定的码，<code>(II)Ljava/lang/String;</code> ，为了我们后续对参数进行解析，那么需要将这段字符串进行拆解。</li></ul><h3 id="_6-运行测试" tabindex="-1"><a class="header-anchor" href="#_6-运行测试" aria-hidden="true">#</a> 6. 运行测试</h3><h4 id="_6-1-配置-vm-参数-javaagent" tabindex="-1"><a class="header-anchor" href="#_6-1-配置-vm-参数-javaagent" aria-hidden="true">#</a> 6.1 配置 VM 参数 Javaagent</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token class-name">E</span><span class="token operator">:</span>\\itstack\\git\\github<span class="token punctuation">.</span>com\\<span class="token class-name">MonitorDesign</span>\\cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>asm\\target\\cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>asm<span class="token punctuation">.</span>jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>IDEA 运行时候配置到 <code>VM options</code> 中，jar包地址按照自己的路径进行配置。</li></ul><h4 id="_6-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_6-2-测试结果" aria-hidden="true">#</a> 6.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>监控 <span class="token operator">-</span> <span class="token class-name">Begin</span> <span class="token class-name">By</span> <span class="token constant">ASM</span>
方法：<span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>test<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span>UserController</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span>$$<span class="token number">8f</span><span class="token number">5</span>a18ca<span class="token punctuation">.</span>queryUserInfo
入参：<span class="token keyword">null</span> 入参类型：<span class="token punctuation">[</span><span class="token string">&quot;Ljava/lang/String;&quot;</span><span class="token punctuation">]</span> 入数<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token punctuation">[</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">]</span>
出参：<span class="token class-name">Lcn</span><span class="token operator">/</span>bugstack<span class="token operator">/</span>middleware<span class="token operator">/</span>test<span class="token operator">/</span>interfaces<span class="token operator">/</span>dto<span class="token operator">/</span><span class="token class-name">UserInfo</span><span class="token punctuation">;</span> 出参<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;天津市东丽区万科赏溪苑14-0000&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;0000&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;info&quot;</span><span class="token operator">:</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;虫虫:aaa&quot;</span><span class="token punctuation">}</span>
耗时：<span class="token function">54</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
监控 <span class="token operator">-</span> <span class="token class-name">End</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从运行测试结果可以看到，在使用 ASM 监控后，就不需要硬编码也不需要 AOP 的方式在代码中操作了。同时还可以监控到更完整的方法执行信息，包括入参类型、入参值和出参信息、出参值。</li><li>但可能大家会发现 ASM 操作起来还是挺麻烦的，尤其是一些很复杂的编码逻辑中，可能会遇到各种各样问题，因此接下来我们还会介绍一些基于 ASM 开发的组件，这些组件也可以实现同样的功能。</li></ul><h2 id="五、javassist" tabindex="-1"><a class="header-anchor" href="#五、javassist" aria-hidden="true">#</a> 五、Javassist</h2><blockquote><p>Javassist是一个开源的分析、编辑和创建Java字节码的类库。是由东京工业大学的数学和计算机科学系的 Shigeru Chiba （千叶 滋）所创建的。它已加入了开放源代码JBoss 应用服务器项目，通过使用Javassist对字节码操作为JBoss实现动态&quot;AOP&quot;框架。</p></blockquote><h3 id="_1-先来个测试-1" tabindex="-1"><a class="header-anchor" href="#_1-先来个测试-1" aria-hidden="true">#</a> 1. 先来个测试</h3><p><strong>cn.bugstack.middleware.monitor.test.ApiTest</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">&quot;cn.bugstack.middleware.javassist.MathUtil&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 属性字段</span>
        <span class="token class-name">CtField</span> ctField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">,</span> <span class="token string">&quot;π&quot;</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctField<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>ctField<span class="token punctuation">,</span> <span class="token string">&quot;3.14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 方法：求圆面积</span>
        <span class="token class-name">CtMethod</span> calculateCircularArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">,</span> <span class="token string">&quot;calculateCircularArea&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">}</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        calculateCircularArea<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calculateCircularArea<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;{return π * $1 * $1;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>calculateCircularArea<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 方法；两数之和</span>
        <span class="token class-name">CtMethod</span> sumOfTwoNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;sumOfTwoNumbers&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">}</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumOfTwoNumbers<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumOfTwoNumbers<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;{return Double.valueOf($1 + $2);}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>sumOfTwoNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出类的内容</span>
        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 测试调用</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Method</span> method_calculateCircularArea <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;calculateCircularArea&quot;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj_01 <span class="token operator">=</span> method_calculateCircularArea<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;圆面积：&quot;</span> <span class="token operator">+</span> obj_01<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Method</span> method_sumOfTwoNumbers <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;sumOfTwoNumbers&quot;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj_02 <span class="token operator">=</span> method_sumOfTwoNumbers<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;两数和：&quot;</span> <span class="token operator">+</span> obj_02<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是一个使用 Javassist 生成的求圆面积和抽象的类和方法并运行结果的过程，可以看到 Javassist 主要是 ClassPool、CtClass、CtField、CtMethod 等方法的使用。</li><li>测试结果主要包括会生成一个指定路径下的类 <code>cn.bugstack.middleware.javassist.MathUtil</code>，同时还会在控制台输出结果。</li></ul><p><strong>生成的类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathUtil</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> π <span class="token operator">=</span> <span class="token number">3.14D</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateCircularArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">3.14D</span> <span class="token operator">*</span> var1 <span class="token operator">*</span> var1<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">sumOfTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">double</span> var1<span class="token punctuation">,</span> <span class="token keyword">double</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> var1 <span class="token operator">+</span> var3<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">MathUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>圆面积：<span class="token number">4.750506</span>
两数和：<span class="token number">3.0</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-监控设计工程结构-1" tabindex="-1"><a class="header-anchor" href="#_2-监控设计工程结构-1" aria-hidden="true">#</a> 2. 监控设计工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>javassist
└── src
    ├── main
    │   ├── java
    │   │   └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor
    │   │       ├── config
    │   │       │   └── <span class="token class-name">MethodDescription</span><span class="token punctuation">.</span>java
    │   │       ├── probe
    │   │       │   ├── <span class="token class-name">Monitor</span><span class="token punctuation">.</span>java
    │   │       │   └── <span class="token class-name">MyMonitorTransformer</span><span class="token punctuation">.</span>java
    │   │       └── <span class="token class-name">PreMain</span><span class="token punctuation">.</span>java
    │   └── resources
    │       └── <span class="token constant">META_INF</span>
    │           └── <span class="token constant">MANIFEST</span><span class="token punctuation">.</span><span class="token constant">MF</span>
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整个使用 javassist 实现的监控框架来看，与 ASM 的结构非常相似，但大部分操作字节码的工作都交给了 javassist 框架来处理，所以整个代码结构看上去更简单了。</li></ul><h3 id="_3-监控方法插桩" tabindex="-1"><a class="header-anchor" href="#_3-监控方法插桩" aria-hidden="true">#</a> 3. 监控方法插桩</h3><p><strong>cn.bugstack.middleware.monitor.probe.MyMonitorTransformer</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMonitorTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> classNameSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        classNameSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;cn.bugstack.middleware.test.interfaces.UserController&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> classBeingRedefined<span class="token punctuation">,</span> <span class="token class-name">ProtectionDomain</span> protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> currentClassName <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>classNameSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>currentClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 提升classNameSet中含有的类</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 获取类</span>
            <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> clazzName <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 获取方法</span>
            <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> methodName <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 方法信息：methodInfo.getDescriptor();</span>
            <span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 方法：入参信息</span>
            <span class="token class-name">CodeAttribute</span> codeAttribute <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span><span class="token function">getCodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">LocalVariableAttribute</span> attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LocalVariableAttribute</span><span class="token punctuation">)</span> codeAttribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">LocalVariableAttribute</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">boolean</span> isStatic <span class="token operator">=</span> <span class="token punctuation">(</span>methodInfo<span class="token punctuation">.</span><span class="token function">getAccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">AccessFlag</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否为静态方法</span>
            <span class="token keyword">int</span> parameterSize <span class="token operator">=</span> isStatic <span class="token operator">?</span> attr<span class="token punctuation">.</span><span class="token function">tableLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> attr<span class="token punctuation">.</span><span class="token function">tableLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 静态类型取值</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterNameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parameterSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 入参名称</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterTypeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parameterSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 入参类型</span>
            <span class="token class-name">StringBuilder</span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// 参数组装；$1、$2...，$$可以获取全部，但是不能放到数组初始化</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parameterNameList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">variableName</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>isStatic <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 静态类型去掉第一个this参数</span>
                parameterTypeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> parameterSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    parameters<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    parameters<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 方法：出参信息</span>
            <span class="token class-name">CtClass</span> returnType <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> returnTypeName <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 方法：生成方法唯一标识ID</span>
            <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token class-name">Monitor</span><span class="token punctuation">.</span><span class="token function">generateMethodId</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> parameterNameList<span class="token punctuation">,</span> parameterTypeList<span class="token punctuation">,</span> returnTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 定义属性</span>
            ctMethod<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">&quot;startNanos&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>longType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctMethod<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">&quot;parameterValues&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 方法前加强</span>
            ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">&quot;{ startNanos = System.nanoTime(); parameterValues = new Object[]{&quot;</span> <span class="token operator">+</span> parameters<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}; }&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 方法后加强</span>
            ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">&quot;{ cn.bugstack.middleware.monitor.probe.Monitor.point(&quot;</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">&quot;, startNanos, parameterValues, $_);}&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果返回类型非对象类型，$_ 需要进行类型转换</span>

            <span class="token comment">// 方法；添加TryCatch</span>
            ctMethod<span class="token punctuation">.</span><span class="token function">addCatch</span><span class="token punctuation">(</span><span class="token string">&quot;{ cn.bugstack.middleware.monitor.probe.Monitor.point(&quot;</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">&quot;, $e); throw $e; }&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 添加异常捕获</span>

            <span class="token keyword">return</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与 ASM 实现相比，整体的监控方法都是类似的，所以这里只展示下不同的地方。</li><li>通过 Javassist 的操作，主要是实现一个 <code>ClassFileTransformer</code> 接口的 transform 方法，在这个方法中获取字节码并进行相应的处理。</li><li>处理过程包括：获取类、获取方法、获取入参信息、获取出参信息、给方法生成唯一ID、之后开始进行方法的前后增强操作，这个增强也就是在方法块中添加监控代码。</li><li>最后返回字节码信息 <code>return ctClass.toBytecode();</code> 现在你新加入的字节码就已经可以被程序加载处理了。</li></ul><h3 id="_4-运行测试" tabindex="-1"><a class="header-anchor" href="#_4-运行测试" aria-hidden="true">#</a> 4. 运行测试</h3><h4 id="_4-1-配置-vm-参数-javaagent" tabindex="-1"><a class="header-anchor" href="#_4-1-配置-vm-参数-javaagent" aria-hidden="true">#</a> 4.1 配置 VM 参数 Javaagent</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token class-name">E</span><span class="token operator">:</span>\\itstack\\git\\github<span class="token punctuation">.</span>com\\<span class="token class-name">MonitorDesign</span>\\cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>javassist\\target\\cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>javassist<span class="token punctuation">.</span>jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>IDEA 运行时候配置到 <code>VM options</code> 中，jar包地址按照自己的路径进行配置。</li></ul><h4 id="_4-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_4-2-测试结果" aria-hidden="true">#</a> 4.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>监控 <span class="token operator">-</span>  <span class="token class-name">Begin</span> <span class="token class-name">By</span> <span class="token class-name">Javassist</span>
方法：<span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>test<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span>UserController</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span>$$<span class="token number">8f</span><span class="token number">5</span>a18ca<span class="token punctuation">.</span>queryUserInfo
入参：<span class="token keyword">null</span> 入参类型：<span class="token punctuation">[</span><span class="token string">&quot;Ljava/lang/String;&quot;</span><span class="token punctuation">]</span> 入数<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token punctuation">[</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">]</span>
出参：<span class="token class-name">Lcn</span><span class="token operator">/</span>bugstack<span class="token operator">/</span>middleware<span class="token operator">/</span>test<span class="token operator">/</span>interfaces<span class="token operator">/</span>dto<span class="token operator">/</span><span class="token class-name">UserInfo</span><span class="token punctuation">;</span> 出参<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;天津市东丽区万科赏溪苑14-0000&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;0000&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;info&quot;</span><span class="token operator">:</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;虫虫:aaa&quot;</span><span class="token punctuation">}</span>
耗时：<span class="token function">46</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
监控 <span class="token operator">-</span> <span class="token class-name">End</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果来看与 ASM 做字节码插桩的效果是一样，都可以做到监控系统执行信息。但是这样的框架会使开发流程更简单，也更容易控制。</li></ul><h2 id="六、byte-buddy" tabindex="-1"><a class="header-anchor" href="#六、byte-buddy" aria-hidden="true">#</a> 六、Byte-Buddy</h2><blockquote><p>2015年10月，Byte Buddy被 Oracle 授予了 Duke&#39;s Choice大奖。该奖项对Byte Buddy的“ Java技术方面的巨大创新 ”表示赞赏。我们为获得此奖项感到非常荣幸，并感谢所有帮助Byte Buddy取得成功的用户以及其他所有人。我们真的很感激！</p></blockquote><p><code>Byte Buddy</code> 是一个代码生成和操作库，用于在 <code>Java</code> 应用程序运行时创建和修改 <code>Java</code> 类，而无需编译器的帮助。除了 <code>Java</code> 类库附带的代码生成实用程序外，<code>Byte Buddy</code> 还允许创建任意类，并且不限于实现用于创建运行时代理的接口。此外，<code>Byte Buddy</code> 提供了一种方便的 API，可以使用 <code>Java</code> 代理或在构建过程中手动更改类。</p><ul><li>无需理解字节码指令，即可使用简单的 API 就能很容易操作字节码，控制类和方法。</li><li>已支持Java 11，库轻量，仅取决于Java字节代码解析器库ASM的访问者API，它本身不需要任何其他依赖项。</li><li>比起JDK动态代理、cglib、Javassist，Byte Buddy在性能上具有一定的优势。</li></ul><h3 id="_1-先来个测试-2" tabindex="-1"><a class="header-anchor" href="#_1-先来个测试-2" aria-hidden="true">#</a> 1. 先来个测试</h3><p><strong>cn.bugstack.middleware.monitor.test.ApiTest</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> helloWorld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBuddy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">subclass</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">FixedValue</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">ApiTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是一个使用 ByteBuddy 语法生成的 &quot;Hello World!&quot; 案例，他的运行结果就是一行，<code>Hello World!</code>，整个代码块核心功能就是通过 <code>method(named(&quot;toString&quot;))</code>，找到 <em>toString</em> 方法，再通过拦截 <code>intercept</code>，设定此方法的返回值。<code>FixedValue.value(&quot;Hello World!&quot;)</code>。到这里其实一个基本的方法就通过 <code>Byte-buddy</code> ，最后加载、初始化和调用输出。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-监控设计工程结构-2" tabindex="-1"><a class="header-anchor" href="#_2-监控设计工程结构-2" aria-hidden="true">#</a> 2. 监控设计工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>bytebuddy
└── src
    ├── main
    │   ├── java
    │   │   └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor
    │   │       ├── <span class="token class-name">MonitorMethod</span>
    │   │       └── <span class="token class-name">PreMain</span><span class="token punctuation">.</span>java
    │   └── resources
    │       └── <span class="token constant">META_INF</span>
    │           └── <span class="token constant">MANIFEST</span><span class="token punctuation">.</span><span class="token constant">MF</span>
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是我个人最喜欢的一个框架，因为它操作的方便性，可以像使用普通的业务代码一样使用字节码增强的操作。从现在的工程结构你能看得出来，代码类数量越来越少了。</li></ul><h3 id="_3-监控方法插桩-1" tabindex="-1"><a class="header-anchor" href="#_3-监控方法插桩-1" aria-hidden="true">#</a> 3. 监控方法插桩</h3><p><strong>cn.bugstack.middleware.monitor.MonitorMethod</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorMethod</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RuntimeType</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Origin</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@SuperCall</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">,</span> <span class="token annotation punctuation">@AllArguments</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> resObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            resObj <span class="token operator">=</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> resObj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - Begin By Byte-buddy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法名称：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参个数：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参 Idx：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 类型：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 内容：&quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参类型：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参结果：&quot;</span> <span class="token operator">+</span> resObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法耗时：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - End\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@Origin</code>，用于拦截原有方法，这样就可以获取到方法中的相关信息。</li><li>这一部分的信息相对来说比较全，尤其也获取到了参数的个数和类型，这样就可以在后续的处理参数时进行循环输出。</li></ul><p><strong>常用注解说明</strong></p><p>除了以上为了获取方法的执行信息使用到的注解外，Byte Buddy 还提供了很多其他的注解。如下；</p><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">@Argument</td><td style="text-align:left;">绑定单个参数</td></tr><tr><td style="text-align:left;">@AllArguments</td><td style="text-align:left;">绑定所有参数的数组</td></tr><tr><td style="text-align:left;">@This</td><td style="text-align:left;">当前被拦截的、动态生成的那个对象</td></tr><tr><td style="text-align:left;">@Super</td><td style="text-align:left;">当前被拦截的、动态生成的那个对象的父类对象</td></tr><tr><td style="text-align:left;">@Origin</td><td style="text-align:left;">可以绑定到以下类型的参数：Method 被调用的原始方法 Constructor 被调用的原始构造器 Class 当前动态创建的类 MethodHandle MethodType String 动态类的toString()的返回值 int 动态方法的修饰符</td></tr><tr><td style="text-align:left;">@DefaultCall</td><td style="text-align:left;">调用默认方法而非super的方法</td></tr><tr><td style="text-align:left;">@SuperCall</td><td style="text-align:left;">用于调用父类版本的方法</td></tr><tr><td style="text-align:left;">@Super</td><td style="text-align:left;">注入父类型对象，可以是接口，从而调用它的任何方法</td></tr><tr><td style="text-align:left;">@RuntimeType</td><td style="text-align:left;">可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查</td></tr><tr><td style="text-align:left;">@Empty</td><td style="text-align:left;">注入参数的类型的默认值</td></tr><tr><td style="text-align:left;">@StubValue</td><td style="text-align:left;">注入一个存根值。对于返回引用、void的方法，注入null；对于返回原始类型的方法，注入0</td></tr><tr><td style="text-align:left;">@FieldValue</td><td style="text-align:left;">注入被拦截对象的一个字段的值</td></tr><tr><td style="text-align:left;">@Morph</td><td style="text-align:left;">类似于@SuperCall，但是允许指定调用参数</td></tr></tbody></table><p><strong>常用核心API</strong></p><ol><li><p>ByteBuddy</p><ul><li>流式API方式的入口类</li><li>提供Subclassing/Redefining/Rebasing方式改写字节码</li><li>所有的操作依赖DynamicType.Builder进行,创建不可变的对象</li></ul></li><li><p>ElementMatchers(ElementMatcher)</p><ul><li>提供一系列的元素匹配的工具类(named/any/nameEndsWith等等)</li><li>ElementMatcher(提供对类型、方法、字段、注解进行matches的方式,类似于Predicate)</li><li>Junction对多个ElementMatcher进行了and/or操作</li></ul></li><li><p>DynamicType</p><p>(动态类型,所有字节码操作的开始,非常值得关注)</p><ul><li>Unloaded(动态创建的字节码还未加载进入到虚拟机,需要类加载器进行加载)</li><li>Loaded(已加载到jvm中后,解析出Class表示)</li><li>Default(DynamicType的默认实现,完成相关实际操作)</li></ul></li><li><p>\`Implementation</p><p>(用于提供动态方法的实现)</p><ul><li>FixedValue(方法调用返回固定值)</li><li>MethodDelegation(方法调用委托,支持两种方式: Class的static方法调用、object的instance method方法调用)</li></ul></li><li><p>Builder</p><p>(用于创建DynamicType,相关接口以及实现后续待详解)</p><ul><li>MethodDefinition</li><li>FieldDefinition</li><li>AbstractBase</li></ul></li></ol><h3 id="_4-配置入口方法" tabindex="-1"><a class="header-anchor" href="#_4-配置入口方法" aria-hidden="true">#</a> 4. 配置入口方法</h3><p><strong>cn.bugstack.middleware.monitor.PreMain</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreMain</span> <span class="token punctuation">{</span>

    <span class="token comment">//JVM 首先尝试在代理类上调用以下方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AgentBuilder<span class="token punctuation">.</span>Transformer</span> transformer <span class="token operator">=</span> <span class="token punctuation">(</span>builder<span class="token punctuation">,</span> typeDescription<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> javaModule<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> builder
                    <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 拦截任意方法</span>
                    <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">MethodDelegation</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">MonitorMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">AgentBuilder
                <span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">nameStartsWith</span><span class="token punctuation">(</span>agentArgs<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 指定需要拦截的类 &quot;cn.bugstack.demo.test&quot;</span>
                <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">installOn</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>premain 方法中主要是对实现的 MonitorMethod 进行委托使用，同时还在 method 设置了拦截的方法，这个拦截方法还可以到类路径等。</li></ul><h3 id="_5-运行测试-1" tabindex="-1"><a class="header-anchor" href="#_5-运行测试-1" aria-hidden="true">#</a> 5. 运行测试</h3><h4 id="_5-1-配置-vm-参数-javaagent" tabindex="-1"><a class="header-anchor" href="#_5-1-配置-vm-参数-javaagent" aria-hidden="true">#</a> 5.1 配置 VM 参数 Javaagent</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token class-name">E</span><span class="token operator">:</span>\\itstack\\git\\github<span class="token punctuation">.</span>com\\<span class="token class-name">MonitorDesign</span>\\cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>bytebuddy\\target\\cn<span class="token operator">-</span>bugstack<span class="token operator">-</span>middleware<span class="token operator">-</span>bytebuddy<span class="token punctuation">.</span>jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>IDEA 运行时候配置到 <code>VM options</code> 中，jar包地址按照自己的路径进行配置。</li></ul><h4 id="_5-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_5-2-测试结果" aria-hidden="true">#</a> 5.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>监控 <span class="token operator">-</span> <span class="token class-name">Begin</span> <span class="token class-name">By</span> <span class="token class-name">Byte</span><span class="token operator">-</span>buddy
方法名称：queryUserInfo
入参个数：<span class="token number">1</span>
入参 <span class="token class-name">Idx</span>：<span class="token number">1</span> 类型：<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> 内容：aaa
出参类型：<span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>test<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span>UserInfo</span>
出参结果：cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>test<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>@<span class="token number">214</span>b199c
方法耗时：<span class="token number">1</span>ms
监控 <span class="token operator">-</span> <span class="token class-name">End</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Byte-buddy 是我们整个测试过程的几个字节码框架中，操作起来最简单，最方便的，也非常容易扩容信息。整个过程就像最初使用 AOP 一样简单，但却满足了非入侵的监控需求。</li><li>所以在使用字节码框架的时候，可以考虑选择使用 Byte-buddy 这个非常好用的字节码框架。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2>`,69),x=n("li",null,"ASM 这种字节码编程的应用是非常广的，但可能确实平时看不到的，因为他都是与其他框架结合一起作为支撑服务使用。像这样的技术还有很多，比如 javassit、Cglib、jacoco等等。",-1),S=n("li",null,"在一些全链路监控中的组件中 Javassist 的使用非常多，它即可使用编码的方式操作字节码增强，也可以像 ASM 那样进行处理。",-1),A={href:"https://bytebuddy.net/#/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"https://bytebuddy.net",-1),I=n("code",null,"Byte Buddy",-1),T={href:"https://github.com/fuzhengwei/MonitorDesign",target:"_blank",rel:"noopener noreferrer"};function B(P,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/9g7O3MSxh5q3F6z-Mxalzg"),t(a)])]),v,n("p",null,[s("双手拖着困倦的脑袋，一时半会也想不出什么好方法，"),b,s("。之后把信息在统一收集起来，展示到一个监控页面呢，监控页面使用阿帕奇的 "),n("a",g,[s("echarts"),t(a)]),s("，别说要是这样显示了，还真能挺好看还好用。")]),h,n("ul",null,[n("li",null,[s("源码地址："),n("a",y,[s("https://github.com/fuzhengwei/MonitorDesign"),t(a)])]),f,w]),q,n("ul",null,[j,n("li",null,[s("此处主要是关于 ASM 的操作类，ClassReader、ClassWriter、ClassVisitor，关于字节码编程的文章："),n("a",M,[s("ASM、Javassist、Byte-bu 系列文章"),t(a)])])]),C,n("ul",null,[x,S,n("li",null,[s("Byte-buddy 是一个非常方便的框架，目前使用也越来越广泛，并且上手使用的学习难度也是几个框架中最低的。除了本章节的案例使用介绍外，还可以通过官网："),n("a",A,[_,t(a)]),s("，去了解更多关于 "),I,s(" 的内容。")]),n("li",null,[s("本章节所有的源码已经上传到GitHub："),n("a",T,[s("https://github.com/fuzhengwei/MonitorDesign"),t(a)])])])])}const E=p(i,[["render",B],["__file","2021-07-19-diaoyanzijiemachazhuangjishu，yongyuxitongjiankongshejiheshixian.html.vue"]]);export{E as default};
