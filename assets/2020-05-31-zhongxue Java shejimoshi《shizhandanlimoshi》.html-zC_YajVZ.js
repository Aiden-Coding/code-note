import{_ as p,r as c,o,c as l,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战单例模式「7种单例模式案例-effective-java-作者推荐枚举单例模式」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战单例模式「7种单例模式案例-effective-java-作者推荐枚举单例模式」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战单例模式「7种单例模式案例，Effective Java 作者推荐枚举单例模式」")],-1),d=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=637618884&bvid=BV1KY4y1q7EX&cid=559170828&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>5个创建型模式的最后一个</code></p><p>在设计模式中按照不同的处理方式共包含三大类；<strong>创建型模式</strong>、<strong>结构型模式</strong>和<strong>行为模式</strong>，其中创建型模式目前已经介绍了其中的四个；<code>工厂方法模式</code>、<code>抽象工厂模式</code>、<code>生成器模式</code>和<code>原型模式</code>，除此之外还有最后一个<code>单例模式</code>。</p><p><code>掌握了的知识才是自己的</code></p><p>在本次编写的<strong>重学 Java 设计模式</strong>的编写中尽可能多的用各种场景案例还介绍设计的使用，包括我们已经使用过的场景；<code>各种类型奖品发放</code>、<code>多套Redis缓存集群升级</code>、<code>装修公司报价清单</code>和<code>百份考卷题目与答案乱序</code>，通过这些场景案例的实践感受设计模式的思想。但这些场景都是作者通过经验分离出来的，还并不是读者的知识，所以你如果希望可以融会贯通的掌握那么一定要亲力亲为的操作，事必躬亲的完成。</p><p><code>书不是看的是用的</code></p><p>在这里还是想强调一下学习方法，总有很多小伙伴对学习知识有疑惑，明明看了、看的时候也懂了，但到了实际使用的时候却用不上。或者有时候在想是不要是有更加生动的漫画或者什么对比会好些，当然这些方式可能会加快一个新人对知识的理解速度。但只要你把学习视频当电影看、学习书籍当故事看，就很难掌握这项技术栈。只有你把它用起来，逐字逐句的深挖，一点点的探求，把各项遇到的盲点全部扫清，才能让你真的掌握这项技能。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),h=n("li",null,"Idea + Maven",-1),g=n("strong",null,"公众号",-1),_={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"bugstack虫洞栈",-1),y=n("code",null,"源码下载",-1),f=n("h2",{id:"三、单例模式介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、单例模式介绍","aria-hidden":"true"},"#"),s(" 三、单例模式介绍")],-1),S=n("p",null,[n("img",{src:"https://bugstack.cn/assets/images/2020/itstack-demo-design-5-01.png",alt:"单例模式，图片来自 refactoringguru.cn"})],-1),j={href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>单例模式可以说是整个设计中最简单的模式之一，而且这种方式即使在没有看设计模式相关资料也会常用在编码开发中。</p><p>因为在编程开发中经常会遇到这样一种场景，那就是需要保证一个类只有一个实例哪怕多线程同时访问，并需要提供一个全局访问此实例的点。</p><p>综上以及我们平常的开发中，可以总结一条经验，单例模式主要解决的是，一个全局使用的类频繁的创建和消费，从而提升提升整体的代码的性能。</p><h2 id="四、案例场景" tabindex="-1"><a class="header-anchor" href="#四、案例场景" aria-hidden="true">#</a> 四、案例场景</h2><p>本章节的技术所出现的场景非常简单也是我们日常开发所能见到的，例如；</p><ol><li>数据库的连接池不会反复创建</li><li>spring中一个单例模式bean的生成和使用</li><li>在我们平常的代码中需要设置全局的的一些属性保存</li></ol><p>在我们的日常开发中大致上会出现如上这些场景中使用到单例模式，虽然单例模式并不复杂但是使用面却比较广。</p><h2 id="五、7种单例模式实现" tabindex="-1"><a class="header-anchor" href="#五、7种单例模式实现" aria-hidden="true">#</a> 五、7种单例模式实现</h2><p>单例模式的实现方式比较多，主要在实现上是否支持懒汉模式、是否线程安全中运用各项技巧。当然也有一些场景不需要考虑懒加载也就是懒汉模式的情况，会直接使用<code>static</code>静态类或属性和方法的方式进行处理，供外部调用。</p><p>那么接下来我们就通过实现不同方式的实现进行讲解单例模式。</p><h3 id="_0-静态类使用" tabindex="-1"><a class="header-anchor" href="#_0-静态类使用" aria-hidden="true">#</a> 0. 静态类使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_00</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上这种方式在我们平常的业务开发中非常常见，这样静态类的方式可以在第一次运行的时候直接初始化Map类，同时这里我们也不需要到延迟加载在使用。</li><li>在不需要维持任何状态下，仅仅用于全局访问，这个使用使用静态类的方式更加方便。</li><li>但如果需要被继承以及需要维持一些特定状态的情况下，就适合使用单例模式。</li></ul><h3 id="_1-懒汉模式-线程不安全" tabindex="-1"><a class="header-anchor" href="#_1-懒汉模式-线程不安全" aria-hidden="true">#</a> 1. 懒汉模式(线程不安全)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_01</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_01</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_01</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> instance<span class="token punctuation">)</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单例模式有一个特点就是不允许外部直接创建，也就是<code>new Singleton_01()</code>，因此这里在默认的构造函数上添加了私有属性 <code>private</code>。</li><li>目前此种方式的单例确实满足了懒加载，但是如果有多个访问者同时去获取对象实例<em>你可以想象成一堆人在抢厕所</em>，就会造成多个同样的实例并存，从而没有达到单例的要求。</li></ul><h3 id="_2-懒汉模式-线程安全" tabindex="-1"><a class="header-anchor" href="#_2-懒汉模式-线程安全" aria-hidden="true">#</a> 2. 懒汉模式(线程安全)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_02</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_02</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton_02</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> instance<span class="token punctuation">)</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此种模式虽然是安全的，但由于把锁加到方法上后，所有的访问都因需要锁占用导致资源的浪费。如果不是特殊情况下，不建议此种方式实现单例模式。</li></ul><h3 id="_3-饿汉模式-线程安全" tabindex="-1"><a class="header-anchor" href="#_3-饿汉模式-线程安全" aria-hidden="true">#</a> 3. 饿汉模式(线程安全)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_03</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_03</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_03</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此种方式与我们开头的第一个实例化<code>Map</code>基本一致，在程序启动的时候直接运行加载，后续有外部需要使用的时候获取即可。</li><li>但此种方式并不是懒加载，也就是说无论你程序中是否用到这样的类都会在程序启动之初进行创建。</li><li>那么这种方式导致的问题就像你下载个游戏软件，可能你游戏地图还没有打开呢，但是程序已经将这些地图全部实例化。到你手机上最明显体验就一开游戏内存满了，手机卡了，需要换了。</li></ul><h3 id="_4-使用类的内部类-线程安全" tabindex="-1"><a class="header-anchor" href="#_4-使用类的内部类-线程安全" aria-hidden="true">#</a> 4. 使用类的内部类(线程安全)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_04</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_04</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton_04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_04</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用类的静态内部类实现的单例模式，既保证了线程安全有保证了懒加载，同时不会因为加锁的方式耗费性能。</li><li>这主要是因为JVM虚拟机可以保证多线程并发访问的正确性，也就是一个类的构造方法在多线程环境下可以被正确的加载。</li><li>此种方式也是非常推荐使用的一种单例模式</li></ul><h3 id="_5-双重锁校验-线程安全" tabindex="-1"><a class="header-anchor" href="#_5-双重锁校验-线程安全" aria-hidden="true">#</a> 5. 双重锁校验(线程安全)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_05</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton_05</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton_05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton_05</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> instance<span class="token punctuation">)</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton_05</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span>
               instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>双重锁的方式是方法级锁的优化，减少了部分获取实例的耗时。</li><li>同时这种方式也满足了懒加载。</li></ul><h3 id="_6-cas「atomicreference」-线程安全" tabindex="-1"><a class="header-anchor" href="#_6-cas「atomicreference」-线程安全" aria-hidden="true">#</a> 6. CAS「AtomicReference」(线程安全)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_06</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Singleton_06</span><span class="token punctuation">&gt;</span></span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Singleton_06</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton_06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton_06</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Singleton_06</span> instance <span class="token operator">=</span> <span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> instance<span class="token punctuation">)</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
            <span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Singleton_06</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// org.itstack.demo.design.Singleton_06@2b193f2d</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Singleton_06</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// org.itstack.demo.design.Singleton_06@2b193f2d</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>java并发库提供了很多原子类来支持并发访问的数据安全性；<code>AtomicInteger</code>、<code>AtomicBoolean</code>、<code>AtomicLong</code>、<code>AtomicReference</code>。</li><li><code>AtomicReference&lt;V&gt;</code> 可以封装引用一个V实例，支持并发访问如上的单例方式就是使用了这样的一个特点。</li><li>使用CAS的好处就是不需要使用传统的加锁方式保证线程安全，而是依赖于CAS的忙等算法，依赖于底层硬件的实现，来保证线程安全。相对于其他锁的实现没有线程的切换和阻塞也就没有了额外的开销，并且可以支持较大的并发性。</li><li>当然CAS也有一个缺点就是忙等，如果一直没有获取到将会处于死循环中。</li></ul><h3 id="_7-effective-java作者推荐的枚举单例-线程安全" tabindex="-1"><a class="header-anchor" href="#_7-effective-java作者推荐的枚举单例-线程安全" aria-hidden="true">#</a> 7. Effective Java作者推荐的枚举单例(线程安全)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton_07</span> <span class="token punctuation">{</span>

    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hi~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>约书亚·布洛克（英语：Joshua J. Bloch，1961年8月28日－），美国著名程序员。他为Java平台设计并实作了许多的功能，曾担任Google的首席Java架构师（Chief Java Architect）。</p></blockquote><ul><li>Effective Java 作者推荐使用枚举的方式解决单例模式，此种方式可能是平时最少用到的。</li><li>这种方式解决了最主要的；线程安全、自由串行化、单一实例。</li></ul><p><strong>调用方式</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Singleton_07</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>这种写法在功能上与共有域方法相近，但是它更简洁，无偿地提供了串行化机制，绝对防止对此实例化，即使是在面对复杂的串行化或者反射攻击的时候。虽然这中方法还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。</em></p><p>但也要知道此种方式在存在继承场景下是不可用的。</p><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2>`,40),A=n("li",null,"虽然只是一个很平常的单例模式，但在各种的实现上真的可以看到java的基本功的体现，这里包括了；懒汉、饿汉、线程是否安全、静态类、内部类、加锁、串行化等等。",-1),I=n("li",null,"在平时的开发中如果可以确保此类是全局可用不需要做懒加载，那么直接创建并给外部调用即可。但如果是很多的类，有些需要在用户触发一定的条件后(游戏关卡)才显示，那么一定要用懒加载。线程的安全上可以按需选择。",-1),N=n("code",null,"Effective Java",-1),J={href:"https://github.com/jbloch",target:"_blank",rel:"noopener noreferrer"};function E(C,V){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",r,[s("https://bugstack.cn"),e(a)])]),k,v,m,n("ol",null,[b,h,n("li",null,[s("涉及工程1个，可以通过关注"),g,s("："),n("a",_,[w,e(a)]),s("，回复"),y,s("获取(打开获取的链接，找到序号18)")])]),f,S,n("ul",null,[n("li",null,[s("图片来自："),n("a",j,[s("https://refactoringguru.cn/design-patterns/singleton"),e(a)])])]),x,n("ul",null,[A,I,n("li",null,[s("建议在学习的过程中一定要加以实践，否则很难完完整整的掌握一整套的知识体系。例如案例中的出现的"),N,s("一书也非常建议大家阅读。另外推荐下这位大神的Github："),n("a",J,[s("https://github.com/jbloch"),e(a)])])])])}const q=p(i,[["render",E],["__file","2020-05-31-zhongxue Java shejimoshi《shizhandanlimoshi》.html.vue"]]);export{q as default};
