import{_ as e,r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"数据结构-字典树-trie",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-字典树-trie","aria-hidden":"true"},"#"),s(" 数据结构：字典树 Trie")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v={href:"https://mp.weixin.qq.com/s/4scA6vlno0TzBZWQrCXI_w",target:"_blank",rel:"noopener noreferrer"},m=p('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>Trie 的历史</code></p><p>字典树 Trie 这个词来自于 re<strong>trie</strong>val，于 1912 年，Axel Thue 首次抽象地描述了一组字符串数据结构的存放方式为 Trie 的想法。这个想法于 1960 年由 Edward Fredkin 独立描述，并创造了 Trie 一词。<em>你看看，多少程序员为了一个词、方法名、属性名，想破脑袋！</em></p><h2 id="二、字典树数据结构" tabindex="-1"><a class="header-anchor" href="#二、字典树数据结构" aria-hidden="true">#</a> 二、字典树数据结构</h2><p>在计算机科学中，字典树(Trie)也被称为”单词查找树“或”数字树“，有时候也被称为基数树或前缀树（因为可以通过前缀的方式进行索引）。—— 它是一种搜索树，一种已排序的数据结构，通常用于存储动态集或键为字符串的关联数组。</p><p>与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/trie-01.png?raw=true" width="500px"></div><ul><li>这是一个把 battle 单词字符串，按照字母拆分到字典树进行存放的图。</li><li>键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。也就是26个字母对应的 ASCII 转换后的值。</li></ul><h2 id="三、字典树结构实现" tabindex="-1"><a class="header-anchor" href="#三、字典树结构实现" aria-hidden="true">#</a> 三、字典树结构实现</h2><p>字典树字母的存放有26个，也就是说在实现的过程中，每一个节点的分支都有26个槽位用来存放可能出现的字母组合。同理如果是数字树的话就是10个数字的组合，每个字典树上的节点对应的分支则有10个操作存放可能出现组合的数字。</p><p>接下来我们就基于 Java 语言实现一个字典树的存放和遍历索引的功能。</p>',12),b={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/trie",target:"_blank",rel:"noopener noreferrer"},g=p(`<h3 id="_1-树枝节点" tabindex="-1"><a class="header-anchor" href="#_1-树枝节点" aria-hidden="true">#</a> 1. 树枝节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** 形成一个链 */</span>
    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> slot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 字母 */</span>
    <span class="token keyword">public</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 单词：数量 &gt; 0 表示一个单词 */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isWord<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 前缀 */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> prefix<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 单词：具体的一个单词字符串 */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> word<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 解释：单词的注释说明 */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> explain<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字典的树的节点需要包括此节点内嵌的关联节点，之后是节点的字母、到此字母是否为单词、单词的前缀、单词字符串和当前单词的非必要注释。</li></ul><h3 id="_2-插入元素" tabindex="-1"><a class="header-anchor" href="#_2-插入元素" aria-hidden="true">#</a> 2. 插入元素</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/trie-02.png?raw=true" width="600px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> words<span class="token punctuation">,</span> <span class="token class-name">String</span> explain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TrieNode</span> root <span class="token operator">=</span> wordsTree<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">// - a 从 0 开始，参考 ASCII 码表</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        root <span class="token operator">=</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>prefix<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    root<span class="token punctuation">.</span>explain <span class="token operator">=</span> explain<span class="token punctuation">;</span> <span class="token comment">// 单词的注释说明信息</span>
    root<span class="token punctuation">.</span>isWord <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment">// 循环拆解单词后标记</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>insert 方法接收单词和注释信息，并对一个单词按照 char 进行拆分，拆分后则计算出索引位置并以此存放。存放完成后标记单词和附属上单词的注释信息。</li></ul><h3 id="_3-索引元素" tabindex="-1"><a class="header-anchor" href="#_3-索引元素" aria-hidden="true">#</a> 3. 索引元素</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/trie-03.png?raw=true" width="600px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TrieNode</span> root <span class="token operator">=</span> wordsTree<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 精准匹配：根据前置精准查找</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">// 匹配为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">.</span>length <span class="token operator">||</span> idx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cache<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 模糊匹配：根据前缀的最后一个单词，递归遍历所有的单词</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>prefix <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">collect</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">,</span> list<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">TrieNode</span> trieNode<span class="token punctuation">,</span> <span class="token class-name">String</span> pre<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">,</span> <span class="token keyword">int</span> resultLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找到单词</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>trieNode<span class="token punctuation">.</span>isWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        trieNode<span class="token punctuation">.</span>word <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        <span class="token comment">// 保存检索到的单词到 queue</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trieNode<span class="token punctuation">.</span>word <span class="token operator">+</span> <span class="token string">&quot; -&gt; &quot;</span> <span class="token operator">+</span> trieNode<span class="token punctuation">.</span>explain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> resultLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 递归调用，查找单词</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> trieNode<span class="token punctuation">.</span>slot<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trieNode<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">collect</span><span class="token punctuation">(</span>trieNode<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pre <span class="token operator">+</span> c<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> resultLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从字典树从检索元素的过程分为2部分，第1部分是根据提供的索引前缀精准匹配到单词信息，第2部分是根据索引前缀的最后一个单词开始，循环递归遍历从当前位置所能关联到的字母直至判断为是单词标记为结束，通过这样的方式把所有匹配动的单词索引出来。</li><li>list.size() &gt;= 15 是判定索引的最大长度，超过这个数量就停止索引了，毕竟这是一种O(n)时间复杂度的操作，如果加载数十万单词进行匹配，执行速度还是比较耗时的。</li></ul><h2 id="四、字典树功能测试" tabindex="-1"><a class="header-anchor" href="#四、字典树功能测试" aria-hidden="true">#</a> 四、字典树功能测试</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Trie</span> trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 存入</span>
    trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;bat&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;大厂&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;batch&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;批量&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;bitch&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;彪子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;battle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;战斗&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>trie<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 检索</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> trieNodes <span class="token operator">=</span> trie<span class="token punctuation">.</span><span class="token function">searchPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;ba&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>trieNodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里提供一些有相近字母的单词和名词，用于测试。你也可以尝试读取txt文件，检索存入数十万单词进行检索验证。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">06</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">38.226</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> trie<span class="token punctuation">.</span>__test__<span class="token punctuation">.</span>TrieTest <span class="token operator">-</span> 测试结果：<span class="token punctuation">[</span><span class="token string">&quot;bat -&gt; 大厂&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;batch -&gt; 批量&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;battle -&gt; 战斗&quot;</span><span class="token punctuation">]</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过测试结果可以看到，把所有以 <strong>ba</strong> 开头的单词全部检索出来了。这也是字典树最核心功能的体现。</li><li>读者在学习的过程中，可以尝试在检索的方法体内打一些断点看一下具体的执行过程，方便学习整个执行步骤。</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2>`,18),w=n("li",null,"简述字典树的数据结构",-1),f=n("li",null,"叙述你怎么来实现一个字典树",-1),_=n("li",null,"字典树的实际业务场景举例【排序、全文搜索、网络搜索引擎、生物信息】",-1),y=n("li",null,"字典树的存入和检索的时间复杂度",-1),x={href:"https://en.wikipedia.org/wiki/Suffix_tree",target:"_blank",rel:"noopener noreferrer"},q={href:"https://en.wikipedia.org/wiki/Hash_trie",target:"_blank",rel:"noopener noreferrer"},T={href:"https://en.wikipedia.org/wiki/HAT-trie",target:"_blank",rel:"noopener noreferrer"};function N(j,S){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)]),d,s("原文："),n("a",v,[s("https://mp.weixin.qq.com/s/4scA6vlno0TzBZWQrCXI_w"),t(a)])]),m,n("ul",null,[n("li",null,[s("源码地址："),n("a",b,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),n("li",null,[s("本章源码："),n("a",h,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/trie"),t(a)])])]),g,n("ul",null,[w,f,_,y,n("li",null,[s("还有哪些字典树的实现方式【"),n("a",x,[s("后缀树"),t(a)]),s("、"),n("a",q,[s("哈希树"),t(a)]),s("、"),n("a",T,[s("帽子树"),t(a)]),s("】")])])])}const A=e(l,[["render",N],["__file","2022-09-14-trie.html.vue"]]);export{A as default};
