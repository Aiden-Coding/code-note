import{_ as i,r as o,o as p,c as t,a,b as n,d as c,e}from"./app-3RcBQnkC.js";const d={},l=e('<h1 id="程序员需要了解的硬核知识之操作系统和应用" tabindex="-1"><a class="header-anchor" href="#程序员需要了解的硬核知识之操作系统和应用" aria-hidden="true">#</a> 程序员需要了解的硬核知识之操作系统和应用</h1><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E7%A1%AC%E6%A0%B8%E7%9F%A5%E8%AF%86%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%BA%94%E7%94%A8">程序员需要了解的硬核知识之操作系统和应用</a><ul><li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8E%86%E5%8F%B2">操作系统功能的历史</a></li><li><a href="#%E8%A6%81%E6%8A%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%94%BE%E5%9C%A8%E7%AC%AC%E4%B8%80%E4%BD%8D">要把操作系统放在第一位</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%92%8C%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A7%BB%E6%A4%8D%E6%80%A7">系统调用和编程语言的移植性</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%92%8C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%A1%AC%E4%BB%B6%E6%8A%BD%E8%B1%A1%E5%8C%96">操作系统和高级编程语言使硬件抽象化</a></li><li><a href="#windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81">Windows 操作系统的特征</a><ul><li><a href="#32%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">32位操作系统</a></li><li><a href="#%E9%80%9A%E8%BF%87-api-%E5%87%BD%E6%95%B0%E9%9B%86%E6%9D%A5%E6%8F%90%E4%BE%9B%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">通过 API 函数集来提供系统调用</a></li><li><a href="#%E6%8F%90%E4%BE%9B%E9%87%87%E7%94%A8%E4%BA%86-gui-%E7%9A%84%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2">提供采用了 GUI 的用户界面</a></li><li><a href="#%E9%80%9A%E8%BF%87-wysiwyg-%E5%AE%9E%E7%8E%B0%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA">通过 WYSIWYG 实现打印输出</a></li><li><a href="#%E6%8F%90%E4%BE%9B%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD">提供多任务功能</a></li><li><a href="#%E6%8F%90%E4%BE%9B%E7%BD%91%E7%BB%9C%E5%8A%9F%E8%83%BD%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8A%9F%E8%83%BD">提供网络功能和数据库功能</a></li><li><a href="#%E9%80%9A%E8%BF%87%E5%8D%B3%E6%8F%92%E5%8D%B3%E7%94%A8%E5%AE%9E%E7%8E%B0%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%9A%84%E8%87%AA%E5%8A%A8%E8%AE%BE%E5%AE%9A">通过即插即用实现设备驱动的自动设定</a></li></ul></li></ul></li></ul><p>利用计算机运行程序大部分都是为了提高处理效率。例如，Microsoft Word 这样的文字处理软件，是用来提高文本文件处理效率的程序，Microsoft Excel 等表格计算软件，是用来提高账本处理效率的程序。这种为了提高特定处理效率的程序统称为 <code>应用</code></p><p>程序员的工作就是编写各种各样的应用来提高工作效率，程序员一般不编写操作系统，但是程序员编写的应用离不开操作系统，此篇文章我们就针对 Windows 操作系统来说明一下操作系统和应用之间的关系。</p><h2 id="操作系统功能的历史" tabindex="-1"><a class="header-anchor" href="#操作系统功能的历史" aria-hidden="true">#</a> 操作系统功能的历史</h2><p><code>操作系统</code>其实也是一种软件，任何新事物的出现肯定都有它的历史背景，那么操作系统也不是凭空出现的，肯定有它的历史背景。</p><p>在计算机尚不存在操作系统的年代，完全没有任何程序，人们通过各种<code>按钮</code>来控制计算机，这一过程非常麻烦。于是，有人开发出了仅具有加载和运行功能的<code>监控程序</code>，这就是操作系统的原型。通过事先启动监控程序，程序员可以根据需要将各种程序加载到内存中运行。虽然仍旧比较麻烦，但比起在没有任何程序的状态下进行开发，工作量得到了很大的缓解。</p><p><img src="http://www.cxuan.vip/image-20230129140749055.png" alt=""></p><p>随着时代的发展，人们在利用监控程序编写程序的过程中发现很多程序都有公共的部分。例如，通过键盘进行文字输入，显示器进行数据展示等，如果每编写一个新的应用程序都需要相同的处理的话，那真是太浪费时间了。因此，基本的输入输出部分的程序就被追加到了监控程序中。初期的操作系统就是这样诞生了。</p><p><img src="http://www.cxuan.vip/image-20230129140803722.png" alt=""></p><p>类似的想法可以共用，人们又发现有更多的应用程序可以追加到监控程序中，比如<code>硬件控制程序</code>，<code>编程语言处理器(汇编、编译、解析)</code>以及各种应用程序等，结果就形成了和现在差异不大的操作系统，也就是说，其实操作系统是多个程序的集合体。</p><p><img src="http://www.cxuan.vip/image-20230129140813985.png" alt=""></p>',12),r={href:"https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&mid=2247484585&idx=1&sn=0d6c3ccf8cc5bec2fea80eb437213801&chksm=fc45f95acb32704c7dcc952a803e88e8a9b0e67c86d8c27abf4e6c776e48b1fcd770dd2dcc8d&token=1570031031&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},u=a("p",null,[n("汇编语言是一种低级语言，也被称为"),a("code",null,"符号语言"),n("。汇编语言是第二代计算机语言，在汇编语言中，用助记符代替机器指令的操作码，用地址符号或标号代替指令或操作数的地址。用一些容易理解和记忆的字母，单词来代替一个特定的指令，比如：用"),a("code",null,"ADD"),n("代表数字逻辑上的加减，"),a("code",null,"MOV"),n("代表数据传递等等，通过这种方法，人们很容易去阅读已经完成的程序或者理解程序正在执行的功能，对现有程序的bug修复以及运营维护都变得更加简单方便")],-1),E=e(`<p><strong>可以说共用思想真是人类前进的一大步，对于解放生产力而言简直是太重要了</strong>。</p><h2 id="要把操作系统放在第一位" tabindex="-1"><a class="header-anchor" href="#要把操作系统放在第一位" aria-hidden="true">#</a> 要把操作系统放在第一位</h2><p>对于程序员来说，程序员创造的不是硬件，而是各种应用程序，但是如果程序员只做应用不懂硬件层面的知识的话，是无法成为硬核程序员的。<strong>现在培训机构培养出了一批怎么用的人才，却没有培训出为什么这么做的人才</strong>，毕竟<code>为什么</code>不是培训机构教的，而是学校教的，我很相信耗子叔说的话：学习没有速成这回事。言归正题。</p><p>在操作系统诞生之后，程序员不需要在硬件层面考虑问题，所以程序员的数量就增加了。哪怕自称<code>对硬件一窍不通</code>的人也可能制作出一个有模有样的程序。不过，要想成为一个全面的程序员，有一点需要清楚的就是，掌握硬件的基本知识，并借助操作系统进行抽象化，可以大大提高编程效率。</p><p>下面就看一下操作系统是如何给开发人员带来便利的，在 Windows 操作系统下，用 C 语言制作一个具有表示当前时间功能的应用。<code>time()</code> 是用来取得当前日期和时间的函数，<code>printf()</code> 是把结果打印到显示器上的函数，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 保存当前日期和时间信息</span>
  <span class="token class-name">time_t</span> tm<span class="token punctuation">;</span>
  
  <span class="token comment">// 取得当前的日期和时间</span>
  <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 在显示器上显示日期和时间</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读者可以自行运行程序查看结果，我们主要关注硬件在这段代码中做了什么事情</p><ul><li>通过 time_t tm，为 time_t 类型的变量申请分配内存空间；</li><li>通过 time(&amp;tm) ，将当前的日期和时间数据保存到变量的内存空间中</li><li>通过 printf(&quot;%s\\n&quot;，ctime(&amp;tm))， 把变量内存空间的内容输出到显示器上。</li></ul><p>应用的可执行文件指的是，计算机的 CPU 可以直接解释并运行的本地代码，不过这些代码是无法直接控制硬件的，事实上，这些代码是通过操作系统来间接控制硬件的。变量中涉及到的内存分配情况，以及 time() 和 printf() 这些函数的运行结果，都不是面向硬件而是面向<code>操作系统</code>的。操作系统收到应用发出的指令后，首先会对该指令进行解释，然后会对 <code>时钟IC</code> 和显示器用的 I/O 进行控制。</p><blockquote><p>计算机中都安装有保存日期和时间的实时时钟(Real-time clock)，上面提到的时钟IC 就是值该实时时钟。</p></blockquote><p><img src="http://www.cxuan.vip/image-20230129140826419.png" alt=""></p><h2 id="系统调用和编程语言的移植性" tabindex="-1"><a class="header-anchor" href="#系统调用和编程语言的移植性" aria-hidden="true">#</a> 系统调用和编程语言的移植性</h2><p>操作系统控制硬件的功能，都是通过一些小的函数集合体的形式来提供的。这些函数以及调用函数的行为称为<code>系统调用</code>，也就是通过应用进而调用操作系统的意思。在前面的程序中用到了 <code>time()</code> 以及 <code>printf()</code> 函数，这些函数内部也封装了系统调用。</p><p>C 语言等高级编程语言并不依存于特定的操作系统，这是因为人们希望不管是<code>Windows</code> 操作系统还是 <code>Linux</code> 操作系统都能够使用相同的源代码。因此，高级编程语言的机制就是，使用独自的函数名，然后在编译的时候将其转换为系统调用的方式（也有可能是多个系统调用的组合）。也就是说，<strong>高级语言编写的应用在编译后，就转换成了利用系统调用的本地代码</strong>。</p><p><img src="http://www.cxuan.vip/image-20230129140838046.png" alt=""></p><p>不过，在高级语言中也存在直接调用系统调用的编程语言，不过，利用这种方式做成应用，移植性并不友好。</p><blockquote><p>移植性：移植性指的是同样的程序在不同操作系统下运行时所花费的时间，时间越少证明移植性越好。</p></blockquote><h2 id="操作系统和高级编程语言使硬件抽象化" tabindex="-1"><a class="header-anchor" href="#操作系统和高级编程语言使硬件抽象化" aria-hidden="true">#</a> 操作系统和高级编程语言使硬件抽象化</h2><p>通过使用操作系统提供的系统调用，程序员不必直接编写控制硬件的程序，而且，通过使用高级编程语言，有时也无需考虑系统调用的存在，系统调用往往是自动触发的，操作系统和高级编程语言能够使硬件抽象化，这很了不起。</p><p>下面让我们看一个硬件抽象化的具体实例</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
  <span class="token comment">// 打开文件</span>
  FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;MyFile.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 写入文件</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 关闭文件</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码使用 C 编写的程序，<code>fputs()</code> 是用来往文件中写入字符串的函数，<code>fclose()</code> 是用来关闭文件的函数。</p>`,22),h={href:"https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&mid=2247484654&idx=1&sn=9b6f5aaad05a49416e8f30e6b86691ae&chksm=fc45f91dcb32700b683b9a13d0d94d261171d346333d73967a4d501de3ecc273d67e8251aeae&token=491076752&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},B=e('<p>但是，在上面代码中，扇区压根就没有出现过传递给 fopen() 函数的参数，是文件名 <code>MyFile.txt</code> 和指定文件写入的 <code>w</code>。传递给 fputs() 的参数，是往文件中写入的字符串&quot;你好&quot; 和 fp，传递给 fclose() 的参数，也仅仅是 fp，也就是说磁盘通过打开文件这个操作，把磁盘抽象化了，打开文件这个操作就可以说是操作硬件的指令。</p><p><img src="http://www.cxuan.vip/image-20230129140848298.png" alt=""></p><p>下面让我们来看一下代码清单中 fp 的功能，变量 fp 中被赋予的是 fopen() 函数的返回值，该值被称为<code>文件指针</code>。应用打开文件后，操作系统就会自动申请分配用来管理文件读写的内存空间。内存地址可以通过 fopen() 函数的返回值获得。用 fopen() 打开文件后，接下来就是通过制定的文件指针进行操作，正因为如此，fputs() 和 fclose() 以及 fclose() 参数中都制定了文件指针。</p><p>由此我们可以得出一个结论，应用程序是通过系统调用，磁盘抽象来实现对硬盘的控制的。</p><h2 id="windows-操作系统的特征" tabindex="-1"><a class="header-anchor" href="#windows-操作系统的特征" aria-hidden="true">#</a> Windows 操作系统的特征</h2><p>Windows 操作系统是世界上用户数量最庞大的群体，作为 Windows 操作系统的<code>资深</code>用户，你都知道 Windows 操作系统有哪些特征吗？下面列举了一些 Windows 操作系统的特性</p><ul><li>Windows 操作系统有两个版本：32位和64位</li><li>通过 <code>API</code> 函数集成来提供系统调用</li><li>提供了采用图形用户界面的用户界面</li><li>通过 <code>WYSIWYG</code> 实现打印输出，WYSIWYG 其实就是 What You See Is What You Get ，值得是显示器上显示的图形和文本都是可以原样输出到打印机打印的。</li><li>提供多任务功能，即能够同时开启多个任务</li><li>提供网络功能和数据库功能</li><li>通过即插即用实现设备驱动的自设定</li></ul><p>这些是对程序员来讲比较有意义的一些特征，下面针对这些特征来进行分别的介绍</p><h3 id="_32位操作系统" tabindex="-1"><a class="header-anchor" href="#_32位操作系统" aria-hidden="true">#</a> 32位操作系统</h3><p>这里表示的32位操作系统表示的是<strong>处理效率最高的数据大小</strong>。Windows 处理数据的基本单位是 32 位。这与最一开始在 <code>MS-DOS</code> 等16位操作系统不同，因为在16位操作系统中处理32位数据需要两次，而32位操作系统只需要一次就能够处理32位的数据，所以一般在 windows 上的应用，它们的最高能够处理的数据都是 32 位的。</p><p>比如，用 C 语言来处理整数数据时，有8位的 <code>char</code> 类型，16位的<code>short</code>类型，以及32位的<code>long</code>类型三个选项，使用位数较大的 long 类型进行处理的话，增加的只是内存以及磁盘的开销，对性能影响不大。</p><p>现在市面上大部分都是64位操作系统了，64位操作系统也是如此。</p><h3 id="通过-api-函数集来提供系统调用" tabindex="-1"><a class="header-anchor" href="#通过-api-函数集来提供系统调用" aria-hidden="true">#</a> 通过 API 函数集来提供系统调用</h3><p>Windows 是通过名为 <code>API</code> 的函数集来提供系统调用的。API是联系应用程序和操作系统之间的接口，全称叫做 <code>Application Programming Interface</code>,应用程序接口。</p><p>当前主流的32位版 Windows API 也称为 <code>Win32 API</code>，之所以这样命名，是需要和不同的操作系统进行区分，比如最一开始的 16 位版的 <code>Win16 API</code>，和后来流行的 <code>Win64 API</code> 。</p><p>API 通过多个 DLL 文件来提供，各个 API 的实体都是用 C 语言编写的函数。所以，在 C 语言环境下，使用 API 更加容易，比如 API 所用到的 <code>MessageBox()</code> 函数，就被保存在了 Windows 提供的 user32.dll 这个 DLL 文件中。</p><h3 id="提供采用了-gui-的用户界面" tabindex="-1"><a class="header-anchor" href="#提供采用了-gui-的用户界面" aria-hidden="true">#</a> 提供采用了 GUI 的用户界面</h3><p><code>GUI(Graphical User Interface)</code> 指得就是图形用户界面，通过点击显示器中的窗口以及图标等可视化的用户界面，举个例子：Linux 操作系统就有两个版本，一种是简洁版，直接通过命令行控制硬件，还有一种是可视化版，通过光标点击图形界面来控制硬件。</p><h3 id="通过-wysiwyg-实现打印输出" tabindex="-1"><a class="header-anchor" href="#通过-wysiwyg-实现打印输出" aria-hidden="true">#</a> 通过 WYSIWYG 实现打印输出</h3><p>WYSIWYG 指的是显示器上输出的内容可以直接通过打印机打印输出。在 Windows 中，显示器和打印机被认作同等的图形输出设备处理的，该功能也为 WYSIWYG 提供了条件。</p><p>借助 WYSIWYG 功能，程序员可以轻松不少。最初，为了是现在显示器中显示和在打印机中打印，就必须分别编写各自的程序，而在 Windows 中，可以借助 WYSIWYG 基本上在一个程序中就可以做到显示和打印这两个功能了。</p><h3 id="提供多任务功能" tabindex="-1"><a class="header-anchor" href="#提供多任务功能" aria-hidden="true">#</a> 提供多任务功能</h3><p>多任务指的就是同时能够运行多个应用程序的功能，Windows 是通过<code>时钟分割</code>技术来实现多任务功能的。时钟分割指的是短时间间隔内，多个程序切换运行的方式。在用户看来，就好像是多个程序在同时运行，其底层是 <code>CPU 时间切片</code>，这也是多线程多任务的核心。</p><p><img src="http://www.cxuan.vip/image-20230129140857982.png" alt=""></p><h3 id="提供网络功能和数据库功能" tabindex="-1"><a class="header-anchor" href="#提供网络功能和数据库功能" aria-hidden="true">#</a> 提供网络功能和数据库功能</h3><p>Windows 中，网络功能是作为标准功能提供的。数据库(数据库服务器)功能有时也会在后面追加。网络功能和数据库功能虽然并不是操作系统不可或缺的，但因为它们和操作系统很接近，所以被统称为<code>中间件</code>而不是应用。意思是处于操作系统和应用的中间层，操作系统和中间件组合在一起，称为<code>系统软件</code>。应用不仅可以利用操作系统，也可以利用中间件的功能。</p><p><img src="http://www.cxuan.vip/image-20230129140908528.png" alt=""></p><p>相对于操作系统一旦安装就不能轻易更换，中间件可以根据需要进行更换，不过，对于大部分应用来说，更换中间件的话，会造成应用也随之更换，从这个角度来说，更换中间件也不是那么容易。</p><h3 id="通过即插即用实现设备驱动的自动设定" tabindex="-1"><a class="header-anchor" href="#通过即插即用实现设备驱动的自动设定" aria-hidden="true">#</a> 通过即插即用实现设备驱动的自动设定</h3><p><code>即插即用(Plug-and-Play)</code>指的是新的设备连接(plug) 后就可以直接使用的机制，新设备连接计算机后，计算机就会自动安装和设定用来控制该设备的<code>驱动程序</code></p><p>设备驱动是操作系统的一部分，提供了同硬件进行基本的输入输出的功能。键盘、鼠标、显示器、磁盘装置等，这些计算机中必备的硬件的设备驱动，一般都是随操作系统一起安装的。</p><p>有时 DLL 文件也会同设备驱动文件一起安装。这些 DLL 文件中存储着用来利用该新追加的硬件API，通过 API ，可以制作出运行该硬件的心应用。</p><p>如果你在阅读文章的过程中发现错误和问题，请及时与我联系！</p><p>如果文章对你有帮助，希望小伙伴们三连走起！</p>',34);function m(A,k){const s=o("ExternalLinkIcon");return p(),t("div",null,[l,a("blockquote",null,[a("p",null,[n("我在 "),a("a",r,[n("程序员需要了解的硬核知识之CPU"),c(s)]),n("这篇文章中提到了汇编语言，这里简单再提一下。")]),u]),E,a("p",null,[n('上述应用在编译运行后，会向文件中写入 "你好" 字符串。文件是操作系统对磁盘空间的抽象化，就如同我们在 '),a("a",h,[n("程序员需要了解的硬核知识之磁盘"),c(s)]),n(" 这篇文章提到的一样，磁盘就如同树的年轮，磁盘的读写是以扇区为单位的，通过磁道来寻址，如果直接对硬件读写的话，那么就会变为通过向磁盘用的 I/O 指定扇区位置来对数据进行读写了。")]),B])}const v=i(d,[["render",m],["__file","computer-osandapp.html.vue"]]);export{v as default};
