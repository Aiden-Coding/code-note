import{_ as p,r as e,o,c,a as n,b as a,d as t,e as l}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"第9节-通过inspection机制-对静态代码安全审查",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第9节-通过inspection机制-对静态代码安全审查","aria-hidden":"true"},"#"),a(" 第9节：通过Inspection机制，对静态代码安全审查")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>真能闹，怕喇喇蛄，还不种稻子了？</code></p><p>喇喇蛄，是东北的一种害虫，经常在种水稻的季节，在池埂子上盗洞，导致稻田里的水悄悄的流没了，影响稻苗发育。</p><p>后来发现原来写代码，也能碰见“蝲蝲蛄”，无论你写的是什么功能、哪种技术、作何目的，蝲蝲蛄总能给盗几个洞出来。“你这已经有其他的某某了你怎么还造轮子”、“你这方案不行程序员不要浪费时间”、“也没看出来你这有啥优势和价值呀怎么给业务赋能”，这种话听上去“贼”有道理，吹的叮当的，但让他去做又能搞的稀的囊的。</p><p>所以，远离蝲蝲蛄，做你想做的、搞你想搞的、学你想学的，知识是不断沉淀的积累、方案是积累后的创造。</p><h2 id="二、需求目的" tabindex="-1"><a class="header-anchor" href="#二、需求目的" aria-hidden="true">#</a> 二、需求目的</h2><p>怎么办，都有标准的研发规范，但还是没法控制住到具体的每个研发下，给写出什么代码了。</p><p>有时候标准只是文档，看和执行的这个过程中就会一定的转行失效性，你可能会想加手段；评审、扣钱、罚绩效、检讨等等，但这样可能还只是增加过程成本，最终效果也不会太好。不太可能一个写代码还得配一个保姆，所以就像 p3c、pmd-idea，这样的插件出来了，帮助程序员把代码写好，治理掉一些不合标准的问题代码。</p><p>那么，你好奇这个事是怎么干的吗，怎么你就在 IDEA 写代码，它就能给你检测出来，告诉你有问题，并提醒你修改以及有些还可以一键帮助你修改呢？那如果你想再增加点你们公司个性的要求的时候，怎么扩展呢？<strong>本章节我们就使用 IDEA 插件开发能力，把这个事办喽</strong></p><h2 id="三、案例开发" tabindex="-1"><a class="header-anchor" href="#三、案例开发" aria-hidden="true">#</a> 三、案例开发</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>guide<span class="token operator">-</span>idea<span class="token operator">-</span>plugin<span class="token operator">-</span>pmd
├── <span class="token punctuation">.</span>gradle
└── src
    ├── main
    │   └── java
    │   	└── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>guide<span class="token punctuation">.</span>idea<span class="token punctuation">.</span>plugin 
    │       	├── rule
    │       	│	├── <span class="token class-name">FastJsonAutoType</span><span class="token punctuation">.</span>java
    │       	│	├── <span class="token class-name">HardcodedIp</span><span class="token punctuation">.</span>java
    │       	│	└── <span class="token class-name">ReplacePseudorandomGenerator</span><span class="token punctuation">.</span>java
    │       	└── utils
    │       	 	└── <span class="token class-name">InspectionBundle</span><span class="token punctuation">.</span>java
    ├── resources
    │   ├── inspectionDescriptions
    │   │   ├── <span class="token class-name">FastJsonAutoType</span><span class="token punctuation">.</span>html
    │   │   ├── <span class="token class-name">HardcodedIp</span><span class="token punctuation">.</span>html  
    │   │   └── <span class="token class-name">ReplacePseudorandomGenerator</span><span class="token punctuation">.</span>html
    │   └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span>
    │       └── plugin<span class="token punctuation">.</span>xml 
    ├── build<span class="token punctuation">.</span>gradle  
    └── gradle<span class="token punctuation">.</span>properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源码获取</strong>：#公众号：<code>bugstack虫洞栈</code> 回复：<code>idea</code> 即可下载全部 IDEA 插件开发源码</p><p>在此 IDEA 插件工程中，主要分为3块区域：</p><ul><li>rule：规则配置区域，以继承 IDEA 原生 Inspection 检查类，扩展自身需要扫描的代码片段，进行警告、注释、修复。</li><li>inspectionDescriptions：是对应的警告注释，编写到 html 中，最终展示到 IDEA 下对应的问题代码片段上。</li><li>plugin.xml：中需要配置 localInspection 也就是配置你自定义的代码检测实现类。</li></ul><h3 id="_2-伪随机数检测" tabindex="-1"><a class="header-anchor" href="#_2-伪随机数检测" aria-hidden="true">#</a> 2. 伪随机数检测</h3><p><strong>目的</strong>：把代码中的 <code>new Random</code> 不安全伪随机数警告并提供修复，处理为 <code>new SecureRandom</code></p><p><strong>RandomRule</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211222-7-01.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PsiElementFactory</span> factory <span class="token operator">=</span> <span class="token class-name">JavaPsiFacade</span><span class="token punctuation">.</span><span class="token function">getElementFactory</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span><span class="token punctuation">;</span>
typeElement<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">createTypeElementFromText</span><span class="token punctuation">(</span><span class="token string">&quot;SecureRandom&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PsiNewExpression</span> secureNewExp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PsiNewExpression</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">createExpressionFromText</span><span class="token punctuation">(</span><span class="token string">&quot;new SecureRandom()&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newExp<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>secureNewExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过继承 <code>AbstractBaseJavaLocalInspectionTool</code> Override <code>buildVisitor</code> 方法，扩展检测代码。<em>当你写了这段方法后，IDEA 会把一行行的代码都通过这个方法传进来</em></li><li>在 <code>visitNewExpression</code> 方法中扩展自身的检测处理，遇到了哪种代码片段，要提供什么样的提醒以及提醒的级别，最后是提供一个 Fix 修复能力，这个修复能力就在替换这段代码片段，通过还可以操作引入新包的动作 <code>import xxx</code></li></ul><h3 id="_3-fastjson检测" tabindex="-1"><a class="header-anchor" href="#_3-fastjson检测" aria-hidden="true">#</a> 3. FastJson检测</h3><p><strong>目的</strong>：<code>com.alibaba:fastjson</code> 在开启 AutoTypeSupport 时，存在反序列化风险。如果程序中有 <code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code> 代码直接提醒删除处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PsiElementVisitor</span> <span class="token function">buildVisitor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ProblemsHolder</span> holder<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isOnTheFly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JavaElementVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMethodCallExpression</span><span class="token punctuation">(</span><span class="token class-name">PsiMethodCallExpression</span> expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasFullQualifiedName</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> <span class="token string">&quot;com.alibaba.fastjson.parser.ParserConfig&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;setAutoTypeSupport&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">PsiExpression</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">getArgumentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpressions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
                        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">PsiLiteralExpression</span> <span class="token operator">&amp;&amp;</span>
                        <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PsiLiteralExpression</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    holder<span class="token punctuation">.</span><span class="token function">registerProblem</span><span class="token punctuation">(</span>
                            expression<span class="token punctuation">,</span>
                            <span class="token string">&quot;FastJson unserialization risk&quot;</span><span class="token punctuation">,</span>
                            <span class="token class-name">ProblemHighlightType</span><span class="token punctuation">.</span><span class="token constant">GENERIC_ERROR_OR_WARNING</span><span class="token punctuation">,</span>
                            <span class="token keyword">new</span> <span class="token class-name">DeleteElementQuickFix</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> <span class="token string">&quot;!Fix: remove setAutoTypeSupport&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整个对代码检测的操作基本都是类似的，这个无非也是检测出代码库，并进行删除的提醒处理 <code>DeleteElementQuickFix</code></li></ul><h3 id="_4-提醒模板" tabindex="-1"><a class="header-anchor" href="#_4-提醒模板" aria-hidden="true">#</a> 4. 提醒模板</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>小傅哥-提醒:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 不安全的伪随机数生成器 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>java.util.Random 依赖一个可被预测的伪随机数生成器。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #629460<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>最佳实践:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>使用java.security.SecureRandom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>提醒模板需要编写 html 格式的内容，这个内容会被展示到错误代码的详情里。<em>后面我们做测试的可以查看</em></li></ul><h3 id="_5-检测配置" tabindex="-1"><a class="header-anchor" href="#_5-检测配置" aria-hidden="true">#</a> 5. 检测配置</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span> <span class="token attr-name">defaultExtensionNs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.intellij<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localInspection</span>
            <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JAVA<span class="token punctuation">&quot;</span></span>       <span class="token attr-name">groupPath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Java<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">groupName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-PMD<span class="token punctuation">&quot;</span></span>   <span class="token attr-name">enabledByDefault</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>   <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ERROR<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">bundle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>InspectionBundle<span class="token punctuation">&quot;</span></span>     <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>replace.pseudorandom.generator.name<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">implementationClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.guide.idea.plugin.rule.RandomRule<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localInspection</span>
            <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JAVA<span class="token punctuation">&quot;</span></span>       <span class="token attr-name">groupPath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Java<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">groupName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-PMD<span class="token punctuation">&quot;</span></span>   <span class="token attr-name">enabledByDefault</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>   <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ERROR<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">bundle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>InspectionBundle<span class="token punctuation">&quot;</span></span>     <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fastjson.auto.type.name<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">implementationClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.guide.idea.plugin.rule.FastJsonRule<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localInspection</span>
            <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JAVA<span class="token punctuation">&quot;</span></span>      <span class="token attr-name">groupPath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Java<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">groupName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-PMD<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">enabledByDefault</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>     <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>WARNING<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">bundle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>InspectionBundle<span class="token punctuation">&quot;</span></span>     <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hardcoded.ip.name<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">implementationClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.guide.idea.plugin.rule.IPRule<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 plugin.xml 中配置我们自己开发好的代码静态检测对象，这样你的检测类就生效了。</li></ul><h2 id="四、测试验证" tabindex="-1"><a class="header-anchor" href="#四、测试验证" aria-hidden="true">#</a> 四、测试验证</h2><p><strong>启动插件</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211222-7-02.png" alt=""></p><ul><li>如果你下载代码后，没有 Plugin 可以自己配置一下，在 Tasks 中配置 <code>:runIde</code></li></ul><p><strong>错误提醒</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211222-7-03.png" alt=""></p><p><strong>错误详情</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211222-7-04.png" alt=""></p><ul><li>当你点击 Fix，那么接下来就可以进行自动替换代码并修复了，就是把 <code>Random random = new Random()</code> 替换为 <code>SecureRandom random = new SecureRandom();</code></li><li>其他2个也可以在获取代码后进行测试验证，一个是IP，另外一个是使用 <code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code> 的错误提醒。</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2>`,42),m=n("li",null,"本章节我们学习了如何使用 IDEA 原生 Inspection 检查机制，扩展我们自己需要添加的代码检测逻辑，以及使用 LocalQuickFix 的实现类，做代码的替换和引入响应包的操作。",-1),v=n("li",null,"另外对于代码检测，还有一个更加标准的工具叫 PMD 它是一款采用 BSD 协议的代码检查工具，你可以扩展实现为自己的标准和规范以及完善个性的提醒和修复操作。",-1),g={href:"https://github.com/ybroeker/pmd-idea",target:"_blank",rel:"noopener noreferrer"};function b(h,q){const s=e("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[a("作者：小傅哥 "),r,a("博客："),n("a",k,[a("https://bugstack.cn"),t(s)])]),d,n("ul",null,[m,v,n("li",null,[a("像 p3c 就是一款静态代码检测工具，用的人也非常多，不过它的插件开发不是基于 Java 实现的，代码开发上也并没有一些注释。所以非常建议阅读 pmd-idea，这款代码写的非常好，抽象充足、结构清晰、内容完整："),n("a",g,[a("https://github.com/ybroeker/pmd-idea"),t(s)])])])])}const f=p(u,[["render",b],["__file","2021-12-22-《IntelliJ IDEA chajiankaifa》di7jie：tongguoInspectionjizhi，weijingtaidaimaanquanshencha.html.vue"]]);export{f as default};
