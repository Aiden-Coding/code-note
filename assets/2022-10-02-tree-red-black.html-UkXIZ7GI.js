import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-3RcBQnkC.js";const r={},i=n("h1",{id:"数据结构-红黑树-red-back-tree",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-红黑树-red-back-tree","aria-hidden":"true"},"#"),s(" 数据结构：红黑树 Red Back Tree")],-1),u=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=t(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>红黑树的历史</code></p><p>红黑树（Red Black Tree）是一种自平衡二叉查找树，于 1972 年由 Rudolf Bayer 发明的对称二叉B树演化而来，并以2-3-4树、2-3树流行。最终在 1978 年由 Leonidas J. Guibas 和 Robert Sedgewick 从对称二叉 B 树中推导出红黑树。PS：之所以选择“红色”，是因为它是作者在Xerox PARC工作时可用的彩色激光打印机产生的最好看的颜色。</p><h2 id="二、红黑树数据结构" tabindex="-1"><a class="header-anchor" href="#二、红黑树数据结构" aria-hidden="true">#</a> 二、红黑树数据结构</h2><p>建立在 BST 二叉搜索树的基础上，AVL、2-3树、红黑树都是自平衡二叉树（统称B-树）。但相比于AVL树，高度平衡所带来的时间复杂度，红黑树对平衡的控制要宽松一些，红黑树只需要保证黑色节点平衡即可。也正因红黑树在插入和删除时不需要太多的平衡操作，也让它成为；Java中HashMap的元素碰撞后的转换、Linux的CFS进行调度算法、多路复用技术的Epoll等各类底层的数据结构实现。</p><p>但红黑树并不是一个那么容易理解的知识点，甚至很多资料都只是给出红黑树的理论，但为什么要染色、为什么要左旋、为什么还要左旋接右旋。这样的知识点本就不应该是考死记硬背来学习的，这根本不是学习编程的”套路“。—— 你背的再溜，也没法理解核心本质，忘也只是时间的问题！</p><p>其实根据红黑树的历史来看，最早红黑树就是来自于2-3树的结构，所以要学习清楚的结构就要学习 2-3树。但同时对于 2-3树的学习也不能只是依靠一份理论，否则对于红黑的学习来看，就是用不太理解的 2-3树理论套红黑树理论，依旧没法理解。所以小傅哥在上一章专门讲解了 2-3树，并做了具体的代码实现。</p><p>现在来本章，我们在来看看红黑树与2-3树的关系；</p><table><thead><tr><th style="text-align:center;">红黑树</th><th style="text-align:center;">红黑树</th><th style="text-align:center;">2-3树</th></tr></thead><tbody><tr><td style="text-align:center;"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-01.png" alt=""></td><td style="text-align:center;"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-02.png" alt=""></td><td style="text-align:center;"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-03.png" alt=""></td></tr><tr><td style="text-align:center;">一棵标准二叉红黑树</td><td style="text-align:center;">红黑树演化（红色节点拉平）</td><td style="text-align:center;">最终恢复到2-3树</td></tr></tbody></table><p>红黑树一棵在2-3树基础上的左倾红黑树，这样就可以把红色节点与对应的父节点拉平，再把两个拉平的节点放到一个节点中。就是我们熟悉的2-3树了。<em>如果你还没有学习过2-3树，最好先看下小傅哥的<a href="#">2-3树</a>，否则你会看的很吃力</em></p><p>现在再来看下红黑树的五条定义；</p><ol><li><strong>每个节点不是红色就是黑色。</strong><ul><li>黑色决定平衡，红色不决定平衡。这对应了2-3树中一个节点内可以存放1~2个节点。</li></ul></li><li><strong>根是黑色的。</strong><ul><li>这条规则有时会被省略。由于根总是可以从红色变为黑色，但不一定相反，因此该规则对分析几乎没有影响。</li></ul></li><li><strong>所有叶子 (NIL) 都是黑色的。</strong><ul><li>这里指的是红黑树都会有一个空的叶子节点，是红黑树自己的规则。</li></ul></li><li><strong>如果一个节点是红色的，那么它的两个子节点都是黑色的。</strong><ul><li>通常这条规则也叫不会有连续的红色节点。这体现在2-3树中，一个节点最多临时会有3个节点，中间是黑色节点，左右是红色节点。2-3树中出现这样的情况后，会进行节点迁移，中间节点成为父节点，左右节点成为子节点。</li></ul></li><li><strong>从给定节点到其任何后代 NIL 节点的每条路径都包含相同数量的黑色节点。</strong><ul><li>对应2-3树中，每一层都只是有一个节点贡献了树高决定平衡性，也就是对应红黑树中的黑色节点。</li></ul></li></ol><p>好啦，现在再看这5条理论是不就不需要再死记硬背了。因为编程本就是对数学逻辑的具体实现，只要把核心逻辑理顺其实很好理解。接下来小傅哥就带着大家动手实现一下红黑树。</p><h2 id="三、红黑树结构实现" tabindex="-1"><a class="header-anchor" href="#三、红黑树结构实现" aria-hidden="true">#</a> 三、红黑树结构实现</h2><p>基于 BST 二叉搜索树的基础上，AVL树添加了树高作为计算平衡因子的条件，那么红黑树也需要添加一个新的颜色属性，用于处理平衡操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>

    <span class="token comment">// AVL 树所需属性</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token comment">// 红黑树所需属性</span>
    <span class="token keyword">public</span> <span class="token class-name">Color</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于AVL树通过左右旋转平衡树高，红黑树则是在2-3树的基础上，只对黑色节点维护树高，所以它会使用到染色和左右旋来对树高调衡。<em>染色与左右旋相比，减少了平衡操作</em></p>`,18),v={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="_1-左倾染色" tabindex="-1"><a class="header-anchor" href="#_1-左倾染色" aria-hidden="true">#</a> 1. 左倾染色</h3><p>新增节点1，相当于2-3树中在节点2上添加了一个节点，这个时候并不影响树高，只需要染色保持红黑树的规则即可。染色过程如图所示。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-04.png?raw=true" width="750px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Node</span> uncle <span class="token operator">=</span> grandParent<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
<span class="token comment">// 染色</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>uncle<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    parent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
    uncle<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
    grandParent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
    current <span class="token operator">=</span> grandParent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>染色时根据当前节点的爷爷节点，找到当前节点的叔叔节点。</li><li>再把父节点染黑、叔叔节点染黑，爷爷节点染红。但爷爷节点染红是临时的，当平衡树高操作后会把根节点染黑。<em>具体参考源码</em></li></ul><h3 id="_2-右倾染色" tabindex="-1"><a class="header-anchor" href="#_2-右倾染色" aria-hidden="true">#</a> 2. 右倾染色</h3><p>新增节点4，相当于2-3树中在节点3上添加了一个节点，这个时候并不影响树高，只需要染色保持红黑树的规则即可。染色过程如图所示。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-05.png?raw=true" width="750px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Node</span> uncle <span class="token operator">=</span> grandParent<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
<span class="token comment">// 染色</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>uncle<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    parent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
    uncle<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
    grandParent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
    current<span class="token operator">=</span> grandParent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>染色时根据当前节点的爷爷节点，找到当前节点的叔叔节点。</li><li>再把父节点染黑、叔叔节点染黑，爷爷节点染红。但爷爷节点染红是临时的，当平衡树高操作后会把根节点染黑。<em>具体参考源码</em></li></ul><h3 id="_3-左旋调衡" tabindex="-1"><a class="header-anchor" href="#_3-左旋调衡" aria-hidden="true">#</a> 3. 左旋调衡</h3><h4 id="_3-1-一次左旋" tabindex="-1"><a class="header-anchor" href="#_3-1-一次左旋" aria-hidden="true">#</a> 3.1 一次左旋</h4><p>对照2-3树，只有当一个节点内有3个节点的时候，才需要调衡。那么红黑树则是判断当前节点的叔叔节点是否为红色节点，如果不是则没法通过染色调衡，也就是需要选择进行调衡。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-06.png?raw=true" width="750px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>parent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
grandParent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>grandParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当你把红黑树对照理解成2-3树，如图中第1步骤下的左侧小图，新增的节点5倒置2-3树不平衡。</li><li>那么这个时候需要把2-3树中节点4提起来，而对应红黑树则需要先进行染色，待操作的节点4为黑色，两个孩子节点为红色。</li><li>最后是把节点3进行一次左旋操作，完成树的平衡。对应步骤3中的左侧小图是2-3树调衡后的结果。</li></ul><h4 id="_3-2-右旋-左旋" tabindex="-1"><a class="header-anchor" href="#_3-2-右旋-左旋" aria-hidden="true">#</a> 3.2 右旋 + 左旋</h4>`,17),h={href:"https://bugstack.cn/md/algorithm/data-structures/2022-09-26-tree-avl.html#_3-%E5%B7%A6%E6%97%8B-%E5%8F%B3%E6%97%8B",target:"_blank",rel:"noopener noreferrer"},f=t(`<div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-07.png?raw=true" width="750px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 偏左↙，先右旋一次调衡</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
    current <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parent <span class="token operator">=</span> current<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
parent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
grandParent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>grandParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>红黑树新增节点4以后，4↙5 结构偏左，需要先进行右旋调衡树结构，再进行左旋。其实这个时候再进行的左旋就和上面一次左旋操作一致了。</li></ul><h3 id="_4-右旋调衡" tabindex="-1"><a class="header-anchor" href="#_4-右旋调衡" aria-hidden="true">#</a> 4. 右旋调衡</h3><h4 id="_4-1-一次右旋" tabindex="-1"><a class="header-anchor" href="#_4-1-一次右旋" aria-hidden="true">#</a> 4.1 一次右旋</h4><p>对照2-3树，只有当一个节点内有3个节点的时候，才需要调衡。那么红黑树则是判断当前节点的叔叔节点是否为红色节点，如果不是则没法通过染色调衡，也就是需要选择进行调衡。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-08.png?raw=true" width="750px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>parent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
grandParent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>grandParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当你把红黑树对照理解成2-3树，如图中第1步骤下的右侧小图，新增的节点1倒置2-3树不平衡。</li><li>那么这个时候需要把2-3树中节点2提起来，而对应红黑树则需要先进行染色，待操作的节点2为黑色，两个孩子节点为红色。</li><li>最后是把节点2进行一次右旋操作，完成树的平衡。对应步骤3中的右侧小图是2-3树调衡后的结果。</li></ul><h4 id="_4-2-左旋-右旋" tabindex="-1"><a class="header-anchor" href="#_4-2-左旋-右旋" aria-hidden="true">#</a> 4.2 左旋 + 右旋</h4><p>当一次左旋没法调衡，需要左旋+右旋的情况，在AVL树中有同样的场景。本身树需要右旋操作，但整体分支树节点偏右，此时需要左旋调整树结构再右旋。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-rbt-09.png?raw=true" width="650px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 偏右↘，先左旋一次调衡</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
    current <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parent <span class="token operator">=</span> current<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
parent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">;</span>
grandParent<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Node<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>grandParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>红黑树新增节点2以后，1↘2 结构偏右，需要先进行左旋调衡树结构，再进行右旋。其实这个时候再进行的右旋就和上面一次右旋操作一致了。</li></ul><h2 id="四、红黑树实现测试" tabindex="-1"><a class="header-anchor" href="#四、红黑树实现测试" aria-hidden="true">#</a> 四、红黑树实现测试</h2><p>为了验证红黑树的实现正确与否，这里我们做一下随机节点的插入，如果它能一直保持平衡，那么它就是一颗可靠红黑平衡树。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_binary_search_tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Tree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBlackTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RedBlackTree</span>，输入节点：<span class="token number">79</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span>

                         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
                 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">98</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
                 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">92</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
         <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
         <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">80</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
         <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">79</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">72</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">66</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>               <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">56</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">39</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
 <span class="token operator">|</span>                       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
<span class="token function">36</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
 <span class="token operator">|</span>                       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">35</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>               <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">33</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">30</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">28</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">26</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
         <span class="token operator">|</span>                       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
         <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">25</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
         <span class="token operator">|</span>               <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
         <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">23</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
         <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
         <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">22</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
         <span class="token operator">|</span>       <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">22</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
                 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
                 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">11</span><span class="token punctuation">(</span>黑<span class="token punctuation">)</span>
                         <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>
                         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">1</span><span class="token punctuation">(</span>红<span class="token punctuation">)</span>
                                 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token generics"><span class="token punctuation">&lt;</span>NIL<span class="token punctuation">&gt;</span></span>

对照<span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span>树结构
                 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span>
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span>
         <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span>
         <span class="token operator">|</span>       
         <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span>
                 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span>                                 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>随机插入20个节点，每个节点的顺序已经打印，经过红黑树的染色和左右旋调衡后，二叉结构始终保持树保持平衡，那么验证通过。</li><li>另外本文出现的案例已经在单元测试中都有编写，读者可以在源码中进行测试。</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2><ul><li>红黑树都有哪些使用场景？</li><li>相比于BST树，红黑树有什么用途？</li><li>B-树是什么意思，都包括哪些？</li><li>新增加一个节点后，什么情况下需要染色、什么情况要左旋、什么情况要左旋+右旋？</li><li>红黑树的特点是什么？</li></ul>`,22);function _(w,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("作者：小傅哥 "),u,s("博客："),n("a",k,[s("https://bugstack.cn"),p(a)])]),d,n("ul",null,[n("li",null,[s("源码地址："),n("a",v,[s("https://github.com/fuzhengwei/java-algorithms"),p(a)])]),n("li",null,[s("本章源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree"),p(a)])]),n("li",null,[s("动画演示："),n("a",b,[s("https://www.cs.usfca.edu/~galles/visualization/RedBlack.html"),p(a)]),s("—— 红黑树初次理解还是比较困难的，可以结合学习内容的同时做一些动画演示。")])]),g,n("p",null,[s("当一次左旋没法调衡，需要右旋+左旋的情况，在AVL树中有同样的场景。本身树需要左旋操作，但整体分支树节点偏左，此时需要右旋调整树结构再左旋。"),n("em",null,[s("此处可参考小傅哥编写的"),n("a",h,[s("AVL树"),p(a)])])]),f])}const L=e(r,[["render",_],["__file","2022-10-02-tree-red-black.html.vue"]]);export{L as default};
