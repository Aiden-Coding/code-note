import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战组合模式「营销差异化人群发券-决策树引擎搭建场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战组合模式「营销差异化人群发券-决策树引擎搭建场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战组合模式「营销差异化人群发券，决策树引擎搭建场景」")],-1),k=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=552891221&bvid=BV1vi4y1S7ZK&cid=567982681&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=e('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>小朋友才做选择题，成年人我都要</code></p><p>头几年只要群里一问我该学哪个开发语言，哪个语言最好。群里肯定聊的特别火热，有人支持PHP、有人喊号Java、也有C++和C#。但这几年开始好像大家并不会真的<code>刀枪棍棒、斧钺钩叉</code>般讨论了，大多数时候都是开玩笑的闹一闹。于此同时在整体的互联网开发中很多时候是一些开发语言公用的，共同打造整体的生态圈。而大家选择的方式也是更偏向于不同领域下选择适合的架构，而不是一味地追求某个语言。这可以给很多初学编程的新人一些提议，不要刻意的觉得某个语言好，某个语言不好，只是在适合的场景下选择最需要的。而你要选择的那个语言可以参考招聘网站的需求量和薪资水平决定。</p><p><code>编程开发不是炫技</code></p><p>总会有人喜欢在整体的项目开发中用上点新特性，把自己新学的知识实践试试。不能说这样就是不好，甚至可以说这是一部分很热爱学习的人，喜欢创新，喜欢实践。但编程除了用上新特性外，还需要考虑整体的扩展性、可读性、可维护、易扩展等方面的考虑。就像你家里雇佣了一伙装修师傅，有那么一个小工喜欢炫技搞花活，在家的淋浴下🚿安装了马桶🚽。</p><p><code>即使是写CRUD也应该有设计模式</code></p><p>往往很多大需求都是通过增删改查堆出来的，今天要一个需求<code>if</code>一下，明天加个内容<code>else</code>扩展一下。日积月累需求也就越来越大，扩展和维护的成本也就越来越高。往往大部分研发是不具备产品思维和整体业务需求导向的，总以为写好代码完成功能即可。但这样的不考虑扩展性的实现，很难让后续的需求都快速迭代，久而久之就会被陷入恶性循环，每天都有bug要改。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("strong",null,"公众号",-1),f={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"bugstack虫洞栈",-1),L=n("code",null,"源码下载",-1),y=e('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-8-01</td><td>使用一坨代码实现业务需求</td></tr><tr><td>itstack-demo-design-8-02</td><td>通过设计模式优化改造代码，产生对比性从而学习</td></tr></tbody></table><h2 id="三、组合模式介绍" tabindex="-1"><a class="header-anchor" href="#三、组合模式介绍" aria-hidden="true">#</a> 三、组合模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-8-01.png" alt="组合模式，图片来自 refactoringguru.cn"></p>',3),_={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},w=e(`<p>从上图可以看到这有点像螺丝🔩和螺母，通过一堆的链接组织出一棵结构树。而这种通过把相似对象(<em>也可以称作是方法</em>)组合成一组可被调用的结构树对象的设计思路叫做组合模式。</p><p>这种设计方式可以让你的服务组节点进行自由组合对外提供服务，例如你有三个原子校验功能(<code>A：身份证</code>、<code>B：银行卡</code>、<code>C：手机号</code>)服务并对外提供调用使用。有些调用方需要使用AB组合，有些调用方需要使用到CBA组合，还有一些可能只使用三者中的一个。那么这个时候你就可以使用组合模式进行构建服务，对于不同类型的调用方配置不同的组织关系树，而这个树结构你可以配置到数据库中也可以不断的通过图形界面来控制树结构。</p><p>所以不同的设计模式用在恰当好处的场景可以让代码逻辑非常清晰并易于扩展，同时也可以减少团队新增人员对项目的学习成本。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-8-02.png" alt="场景模式；营销决策树"></p><p>以上是一个非常简化版的营销规则<code>决策树</code>，根据<code>性别</code>、<code>年龄</code>来发放不同类型的优惠券，来刺激消费起到精准用户促活的目的。</p><p>虽然一部分小伙伴可能并没有开发过营销场景，但你可能时时刻刻的被营销着。比如你去经常浏览男性喜欢的机械键盘、笔记本电脑、汽车装饰等等，那么久给你推荐此类的优惠券刺激你消费。那么如果你购物不多，或者钱不在自己手里。那么你是否打过车，有一段时间经常有小伙伴喊，为什么同样的距离他就10元，我就15元呢？其实这些都是被营销的案例，一般对于不常使用软件的小伙伴，经常会进行稍微大力度的促活，增加用户粘性。</p><p>那么在这里我们就模拟一个类似的决策场景，体现出组合模式在其中起到的重要性。另外，组合模式不只是可以运用于规则决策树，还可以做服务包装将不同的接口进行组合配置，对外提供服务能力，减少开发成本。</p><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p>这里我们举一个关于<code>ifelse</code>诞生的例子，介绍小姐姐与程序员👨‍💻‍之间的<code>故事</code>导致的<code>事故</code>。</p><table><thead><tr><th style="text-align:center;">日期</th><th style="text-align:left;">需求</th><th style="text-align:left;">紧急程度</th><th style="text-align:left;">程序员(话外音)</th></tr></thead><tbody><tr><td style="text-align:center;">星期一.早上</td><td style="text-align:left;">猿哥哥，老板说要搞一下营销拉拉量，给男生女生发不同的优惠券，促活消费。</td><td style="text-align:left;">很紧急，下班就要</td><td style="text-align:left;">行吧，也不难，加下判断就上线</td></tr><tr><td style="text-align:center;">星期二.下午</td><td style="text-align:left;">小哥哥，咱们上线后非常好。要让咱们按照年轻、中年、成年，不同年龄加下判断，准确刺激消费。</td><td style="text-align:left;">超紧急，明天就要</td><td style="text-align:left;">也不难，加就加吧</td></tr><tr><td style="text-align:center;">星期三.晚上</td><td style="text-align:left;">喂，小哥哥！睡了吗！老板说咱们这次活动很成功，可以不可以在细分下，把单身、结婚、有娃的都加上不同判断。这样更能刺激用户消费。</td><td style="text-align:left;">贼紧急，最快上线。</td><td style="text-align:left;">已经意识到<code>ifelse</code>越来越多了</td></tr><tr><td style="text-align:center;">星期四.凌晨</td><td style="text-align:left;">哇！小哥哥你们太棒了，上的真快。嘻嘻！有个小请求，需要调整下年龄段，因为现在学生处对象的都比较早，有对象的更容易买某某某东西。要改下值！辛苦辛苦！</td><td style="text-align:left;">老板，在等着呢！</td><td style="text-align:left;">一大片的值要修改，哎！这么多<code>ifelse</code>了</td></tr><tr><td style="text-align:center;">星期五.半夜</td><td style="text-align:left;">歪歪喂！巴巴，坏了，怎么发的优惠券不对了，有客诉了，很多女生都来投诉。你快看看。老板，他...</td><td style="text-align:left;">(一头汗)，哎，值粘错位置了！</td><td style="text-align:left;">终究还是一个人扛下了所有</td></tr></tbody></table><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                └── <span class="token class-name">EngineController</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>公司里要都是这样的程序员绝对省下不少成本，根本不要搭建微服务，一个工程搞定所有业务！</li><li>但千万不要这么干！<code>酒肉穿肠过，佛祖心中留。世人若学我，如同进魔道。</code></li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EngineController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">EngineController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> userSex<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> userAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ifelse实现方式判断用户结果。userId：{} userSex：{} userAge：{}&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> userSex<span class="token punctuation">,</span> userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;man&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userSex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>userAge <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">&quot;果实A&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>userAge <span class="token operator">&gt;=</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">&quot;果实B&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;woman&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userSex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>userAge <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">&quot;果实C&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>userAge <span class="token operator">&gt;=</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">&quot;果实D&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>除了我们说的扩展性和每次的维护以外，这样的代码实现起来是最快的。而且从样子来看也很适合新人理解。</li><li>但是<code>我劝你别写</code>，写这样代码不是被扣绩效就是被开除。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_EngineController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">EngineController</span> engineController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EngineController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> process <span class="token operator">=</span> engineController<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token string">&quot;Oli09pLkdjh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们模拟了一个用户ID，并传输性别：man、年龄：29，我们的预期结果是：果实B。实际对应业务就是给<code>头秃的程序员发一张枸杞优惠券</code>。</li></ul><h4 id="_3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">12.891</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span></span>EngineController</span> <span class="token operator">-</span> ifelse实现方式判断用户结果。userId：<span class="token class-name">Oli09pLkdjh</span> userSex：man userAge：<span class="token number">29</span>
<span class="token number">22</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">12.898</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：果实<span class="token class-name">B</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果上看我们的程序运行正常并且符合预期，只不过实现上并不是我们推荐的。接下来我们会采用<code>组合模式</code>来优化这部分代码。</li></ul><h2 id="六、组合模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、组合模式重构代码" aria-hidden="true">#</a> 六、组合模式重构代码</h2><p><code>接下来使用组合模式来进行代码优化，也算是一次很小的重构。</code></p><p>接下来的重构部分代码改动量相对来说会比较大一些，为了让我们可以把不同类型的决策节点和最终的果实组装成一棵可被运行的决策树，需要做适配设计和工厂方法调用，具体会体现在定义接口以及抽象类和初始化配置决策节点(<code>性别</code>、<code>年龄</code>)上。建议这部分代码多阅读几次，最好实践下。</p><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    ├── main
    │   └── java
    │      └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>domain
    │          ├── model
    │          │   ├── aggregates
    │          │   │   └── <span class="token class-name">TreeRich</span><span class="token punctuation">.</span>java
    │          │   └── vo
    │          │       ├── <span class="token class-name">EngineResult</span><span class="token punctuation">.</span>java
    │          │       ├── <span class="token class-name">TreeNode</span><span class="token punctuation">.</span>java
    │          │       ├── <span class="token class-name">TreeNodeLink</span><span class="token punctuation">.</span>java    
    │          │       └── <span class="token class-name">TreeRoot</span><span class="token punctuation">.</span>java	
    │          └── service
    │              ├── engine
    │              │   ├── impl	
    │              │   │   └── <span class="token class-name">TreeEngineHandle</span><span class="token punctuation">.</span>java
    │              │   ├── <span class="token class-name">EngineBase</span><span class="token punctuation">.</span>java 
    │              │   ├── <span class="token class-name">EngineConfig</span><span class="token punctuation">.</span>java
    │              │   └── <span class="token class-name">IEngine</span><span class="token punctuation">.</span>java	
    │              └── logic
    │                  ├── impl	
    │                  │   ├── <span class="token class-name">UserAgeFilter</span><span class="token punctuation">.</span>java
    │                  │   └── <span class="token class-name">UserGenderFilter</span><span class="token punctuation">.</span>java
    │                  └── <span class="token class-name">LogicFilter</span><span class="token punctuation">.</span>java	
    └── test
         └── java
             └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test
                 └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组合模式模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-8-03.png" alt="组合模式模型结构"></p><ul><li><p>首先可以看下黑色框框的模拟指导树结构；<code>1</code>、<code>11</code>、<code>12</code>、<code>111</code>、<code>112</code>、<code>121</code>、<code>122</code>，这是一组树结构的ID，并由节点串联组合出一棵关系树。</p></li><li><p>接下来是类图部分，左侧是从<code>LogicFilter</code>开始定义适配的决策过滤器，<code>BaseLogic</code>是对接口的实现，提供最基本的通用方法。<code>UserAgeFilter</code>、<code>UserGenerFilter</code>，是两个具体的实现类用于判断<code>年龄</code>和<code>性别</code>。</p></li><li><p>最后则是对这颗可以被组织出来的决策树，进行执行的引擎。同样定义了引擎接口和基础的配置，在配置里面设定了需要的模式决策节点。</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>
     logicFilterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     logicFilterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userAge&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserAgeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     logicFilterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userGender&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserGenderFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>接下来会对每一个类进行细致的讲解，如果感觉没有读懂一定是我作者的表述不够清晰，可以添加我的微信(fustack)与我交流。</p></li></ul><h3 id="_2-代码实现-1" tabindex="-1"><a class="header-anchor" href="#_2-代码实现-1" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-基础对象" tabindex="-1"><a class="header-anchor" href="#_2-1-基础对象" aria-hidden="true">#</a> 2.1 基础对象</h4><table><thead><tr><th>包路径</th><th>类</th><th>介绍</th></tr></thead><tbody><tr><td>model.aggregates</td><td>TreeRich</td><td>聚合对象，包含组织树信息</td></tr><tr><td>model.vo</td><td>EngineResult</td><td>决策返回对象信息</td></tr><tr><td>model.vo</td><td>TreeNode</td><td>树节点；子叶节点、果实节点</td></tr><tr><td>model.vo</td><td>TreeNodeLink</td><td>树节点链接链路</td></tr><tr><td>model.vo</td><td>TreeRoot</td><td>树根信息</td></tr></tbody></table><ul><li>以上这部分简单介绍，不包含逻辑只是各项必要属性的<code>get/set</code>，整个源代码可以通过关注微信公众号：<code>bugstack虫洞栈</code>，回复源码下载打开链接获取。</li></ul><h4 id="_2-2-树节点逻辑过滤器接口" tabindex="-1"><a class="header-anchor" href="#_2-2-树节点逻辑过滤器接口" aria-hidden="true">#</a> 2.2 树节点逻辑过滤器接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LogicFilter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 逻辑决策器
     *
     * <span class="token keyword">@param</span> <span class="token parameter">matterValue</span>          决策值
     * <span class="token keyword">@param</span> <span class="token parameter">treeNodeLineInfoList</span> 决策节点
     * <span class="token keyword">@return</span> 下一个节点Id
     */</span>
    <span class="token class-name">Long</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> matterValue<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeLink</span><span class="token punctuation">&gt;</span></span> treeNodeLineInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取决策值
     *
     * <span class="token keyword">@param</span> <span class="token parameter">decisionMatter</span> 决策物料
     * <span class="token keyword">@return</span> 决策值
     */</span>
    <span class="token class-name">String</span> <span class="token function">matterValue</span><span class="token punctuation">(</span><span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这一部分定义了适配的通用接口，逻辑决策器、获取决策值，让每一个提供决策能力的节点都必须实现此接口，保证统一性。</li></ul><h4 id="_2-3-决策抽象类提供基础服务" tabindex="-1"><a class="header-anchor" href="#_2-3-决策抽象类提供基础服务" aria-hidden="true">#</a> 2.3 决策抽象类提供基础服务</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseLogic</span> <span class="token keyword">implements</span> <span class="token class-name">LogicFilter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> matterValue<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeLink</span><span class="token punctuation">&gt;</span></span> treeNodeLinkList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNodeLink</span> nodeLine <span class="token operator">:</span> treeNodeLinkList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">decisionLogic</span><span class="token punctuation">(</span>matterValue<span class="token punctuation">,</span> nodeLine<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nodeLine<span class="token punctuation">.</span><span class="token function">getNodeIdTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">matterValue</span><span class="token punctuation">(</span><span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">decisionLogic</span><span class="token punctuation">(</span><span class="token class-name">String</span> matterValue<span class="token punctuation">,</span> <span class="token class-name">TreeNodeLink</span> nodeLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>nodeLink<span class="token punctuation">.</span><span class="token function">getRuleLimitType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token keyword">return</span> matterValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nodeLink<span class="token punctuation">.</span><span class="token function">getRuleLimitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>matterValue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>nodeLink<span class="token punctuation">.</span><span class="token function">getRuleLimitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>matterValue<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>nodeLink<span class="token punctuation">.</span><span class="token function">getRuleLimitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>matterValue<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>nodeLink<span class="token punctuation">.</span><span class="token function">getRuleLimitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>matterValue<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>nodeLink<span class="token punctuation">.</span><span class="token function">getRuleLimitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在抽象方法中实现了接口方法，同时定义了基本的决策方法；<code>1、2、3、4、5</code>，<code>等于、小于、大于、小于等于、大于等于</code>的判断逻辑。</li><li>同时定义了抽象方法，让每一个实现接口的类都必须按照规则提供<code>决策值</code>，这个决策值用于做逻辑比对。</li></ul><h4 id="_2-4-树节点逻辑实现类" tabindex="-1"><a class="header-anchor" href="#_2-4-树节点逻辑实现类" aria-hidden="true">#</a> 2.4 树节点逻辑实现类</h4><p><strong>年龄节点</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAgeFilter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseLogic</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">matterValue</span><span class="token punctuation">(</span><span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> decisionMatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>性别节点</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserGenderFilter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseLogic</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">matterValue</span><span class="token punctuation">(</span><span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> decisionMatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上两个决策逻辑的节点获取值的方式都非常简单，只是获取用户的入参即可。实际的业务开发可以从数据库、RPC接口、缓存运算等各种方式获取。</li></ul><h4 id="_2-5-决策引擎接口定义" tabindex="-1"><a class="header-anchor" href="#_2-5-决策引擎接口定义" aria-hidden="true">#</a> 2.5 决策引擎接口定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEngine</span> <span class="token punctuation">{</span>

    <span class="token class-name">EngineResult</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">TreeRich</span> treeRich<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于使用方来说也同样需要定义统一的接口操作，这样的好处非常方便后续拓展出不同类型的决策引擎，也就是可以建造不同的决策工厂。</li></ul><h4 id="_2-6-决策节点配置" tabindex="-1"><a class="header-anchor" href="#_2-6-决策节点配置" aria-hidden="true">#</a> 2.6 决策节点配置</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EngineConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LogicFilter</span><span class="token punctuation">&gt;</span></span> logicFilterMap<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        logicFilterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logicFilterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userAge&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserAgeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logicFilterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userGender&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserGenderFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LogicFilter</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLogicFilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> logicFilterMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogicFilterMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LogicFilter</span><span class="token punctuation">&gt;</span></span> logicFilterMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>logicFilterMap <span class="token operator">=</span> logicFilterMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这里将可提供服务的决策节点配置到<code>map</code>结构中，对于这样的<code>map</code>结构可以抽取到数据库中，那么就可以非常方便的管理。</li></ul><h4 id="_2-7-基础决策引擎功能" tabindex="-1"><a class="header-anchor" href="#_2-7-基础决策引擎功能" aria-hidden="true">#</a> 2.7 基础决策引擎功能</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">EngineBase</span> <span class="token keyword">extends</span> <span class="token class-name">EngineConfig</span> <span class="token keyword">implements</span> <span class="token class-name">IEngine</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">EngineBase</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">EngineResult</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">TreeRich</span> treeRich<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">TreeNode</span> <span class="token function">engineDecisionMaker</span><span class="token punctuation">(</span><span class="token class-name">TreeRich</span> treeRich<span class="token punctuation">,</span> <span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeRoot</span> treeRoot <span class="token operator">=</span> treeRich<span class="token punctuation">.</span><span class="token function">getTreeRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> treeNodeMap <span class="token operator">=</span> treeRich<span class="token punctuation">.</span><span class="token function">getTreeNodeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 规则树根ID</span>
        <span class="token class-name">Long</span> rootNodeId <span class="token operator">=</span> treeRoot<span class="token punctuation">.</span><span class="token function">getTreeRootNodeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> treeNodeInfo <span class="token operator">=</span> treeNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rootNodeId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//节点类型[NodeType]；1子叶、2果实</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>treeNodeInfo<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> ruleKey <span class="token operator">=</span> treeNodeInfo<span class="token punctuation">.</span><span class="token function">getRuleKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">LogicFilter</span> logicFilter <span class="token operator">=</span> logicFilterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ruleKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> matterValue <span class="token operator">=</span> logicFilter<span class="token punctuation">.</span><span class="token function">matterValue</span><span class="token punctuation">(</span>treeId<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> decisionMatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> nextNode <span class="token operator">=</span> logicFilter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>matterValue<span class="token punctuation">,</span> treeNodeInfo<span class="token punctuation">.</span><span class="token function">getTreeNodeLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            treeNodeInfo <span class="token operator">=</span> treeNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;决策树引擎=&gt;{} userId：{} treeId：{} treeNode：{} ruleKey：{} matterValue：{}&quot;</span><span class="token punctuation">,</span> treeRoot<span class="token punctuation">.</span><span class="token function">getTreeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> treeId<span class="token punctuation">,</span> treeNodeInfo<span class="token punctuation">.</span><span class="token function">getTreeNodeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ruleKey<span class="token punctuation">,</span> matterValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> treeNodeInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里主要提供决策树流程的处理过程，有点像通过链路的关系(<code>性别</code>、<code>年龄</code>)在二叉树中寻找果实节点的过程。</li><li>同时提供一个抽象方法，执行决策流程的方法供外部去做具体的实现。</li></ul><h4 id="_2-8-决策引擎的实现" tabindex="-1"><a class="header-anchor" href="#_2-8-决策引擎的实现" aria-hidden="true">#</a> 2.8 决策引擎的实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeEngineHandle</span> <span class="token keyword">extends</span> <span class="token class-name">EngineBase</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">EngineResult</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Long</span> treeId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">TreeRich</span> treeRich<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 决策流程</span>
        <span class="token class-name">TreeNode</span> treeNode <span class="token operator">=</span> <span class="token function">engineDecisionMaker</span><span class="token punctuation">(</span>treeRich<span class="token punctuation">,</span> treeId<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> decisionMatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 决策结果</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EngineResult</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> treeId<span class="token punctuation">,</span> treeNode<span class="token punctuation">.</span><span class="token function">getTreeNodeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> treeNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里对于决策引擎的实现就非常简单了，通过传递进来的必要信息；决策树信息、决策物料值，来做具体的树形结构决策。</li></ul><h3 id="_3-测试验证-1" tabindex="-1"><a class="header-anchor" href="#_3-测试验证-1" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-组装树关系" tabindex="-1"><a class="header-anchor" href="#_3-1-组装树关系" aria-hidden="true">#</a> 3.1 组装树关系</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Before</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 节点：1</span>
    <span class="token class-name">TreeNode</span> treeNode_01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_01<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_01<span class="token punctuation">.</span><span class="token function">setTreeNodeId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_01<span class="token punctuation">.</span><span class="token function">setNodeType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_01<span class="token punctuation">.</span><span class="token function">setNodeValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_01<span class="token punctuation">.</span><span class="token function">setRuleKey</span><span class="token punctuation">(</span><span class="token string">&quot;userGender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_01<span class="token punctuation">.</span><span class="token function">setRuleDesc</span><span class="token punctuation">(</span><span class="token string">&quot;用户性别[男/女]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 链接：1-&gt;11</span>
    <span class="token class-name">TreeNodeLink</span> treeNodeLink_11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_11<span class="token punctuation">.</span><span class="token function">setNodeIdFrom</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_11<span class="token punctuation">.</span><span class="token function">setNodeIdTo</span><span class="token punctuation">(</span><span class="token number">11L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_11<span class="token punctuation">.</span><span class="token function">setRuleLimitType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_11<span class="token punctuation">.</span><span class="token function">setRuleLimitValue</span><span class="token punctuation">(</span><span class="token string">&quot;man&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 链接：1-&gt;12</span>
    <span class="token class-name">TreeNodeLink</span> treeNodeLink_12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_12<span class="token punctuation">.</span><span class="token function">setNodeIdTo</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_12<span class="token punctuation">.</span><span class="token function">setNodeIdTo</span><span class="token punctuation">(</span><span class="token number">12L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_12<span class="token punctuation">.</span><span class="token function">setRuleLimitType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_12<span class="token punctuation">.</span><span class="token function">setRuleLimitValue</span><span class="token punctuation">(</span><span class="token string">&quot;woman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeLink</span><span class="token punctuation">&gt;</span></span> treeNodeLinkList_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLinkList_1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNodeLink_11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLinkList_1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNodeLink_12<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_01<span class="token punctuation">.</span><span class="token function">setTreeNodeLinkList</span><span class="token punctuation">(</span>treeNodeLinkList_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点：11</span>
    <span class="token class-name">TreeNode</span> treeNode_11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_11<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_11<span class="token punctuation">.</span><span class="token function">setTreeNodeId</span><span class="token punctuation">(</span><span class="token number">11L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_11<span class="token punctuation">.</span><span class="token function">setNodeType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_11<span class="token punctuation">.</span><span class="token function">setNodeValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_11<span class="token punctuation">.</span><span class="token function">setRuleKey</span><span class="token punctuation">(</span><span class="token string">&quot;userAge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_11<span class="token punctuation">.</span><span class="token function">setRuleDesc</span><span class="token punctuation">(</span><span class="token string">&quot;用户年龄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 链接：11-&gt;111</span>
    <span class="token class-name">TreeNodeLink</span> treeNodeLink_111 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_111<span class="token punctuation">.</span><span class="token function">setNodeIdFrom</span><span class="token punctuation">(</span><span class="token number">11L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_111<span class="token punctuation">.</span><span class="token function">setNodeIdTo</span><span class="token punctuation">(</span><span class="token number">111L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_111<span class="token punctuation">.</span><span class="token function">setRuleLimitType</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_111<span class="token punctuation">.</span><span class="token function">setRuleLimitValue</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 链接：11-&gt;112</span>
    <span class="token class-name">TreeNodeLink</span> treeNodeLink_112 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_112<span class="token punctuation">.</span><span class="token function">setNodeIdFrom</span><span class="token punctuation">(</span><span class="token number">11L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_112<span class="token punctuation">.</span><span class="token function">setNodeIdTo</span><span class="token punctuation">(</span><span class="token number">112L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_112<span class="token punctuation">.</span><span class="token function">setRuleLimitType</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_112<span class="token punctuation">.</span><span class="token function">setRuleLimitValue</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeLink</span><span class="token punctuation">&gt;</span></span> treeNodeLinkList_11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLinkList_11<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNodeLink_111<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLinkList_11<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNodeLink_112<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_11<span class="token punctuation">.</span><span class="token function">setTreeNodeLinkList</span><span class="token punctuation">(</span>treeNodeLinkList_11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点：12</span>
    <span class="token class-name">TreeNode</span> treeNode_12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_12<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_12<span class="token punctuation">.</span><span class="token function">setTreeNodeId</span><span class="token punctuation">(</span><span class="token number">12L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_12<span class="token punctuation">.</span><span class="token function">setNodeType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_12<span class="token punctuation">.</span><span class="token function">setNodeValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_12<span class="token punctuation">.</span><span class="token function">setRuleKey</span><span class="token punctuation">(</span><span class="token string">&quot;userAge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_12<span class="token punctuation">.</span><span class="token function">setRuleDesc</span><span class="token punctuation">(</span><span class="token string">&quot;用户年龄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 链接：12-&gt;121</span>
    <span class="token class-name">TreeNodeLink</span> treeNodeLink_121 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_121<span class="token punctuation">.</span><span class="token function">setNodeIdFrom</span><span class="token punctuation">(</span><span class="token number">12L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_121<span class="token punctuation">.</span><span class="token function">setNodeIdTo</span><span class="token punctuation">(</span><span class="token number">121L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_121<span class="token punctuation">.</span><span class="token function">setRuleLimitType</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_121<span class="token punctuation">.</span><span class="token function">setRuleLimitValue</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 链接：12-&gt;122</span>
    <span class="token class-name">TreeNodeLink</span> treeNodeLink_122 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_122<span class="token punctuation">.</span><span class="token function">setNodeIdFrom</span><span class="token punctuation">(</span><span class="token number">12L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_122<span class="token punctuation">.</span><span class="token function">setNodeIdTo</span><span class="token punctuation">(</span><span class="token number">122L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_122<span class="token punctuation">.</span><span class="token function">setRuleLimitType</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLink_122<span class="token punctuation">.</span><span class="token function">setRuleLimitValue</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeLink</span><span class="token punctuation">&gt;</span></span> treeNodeLinkList_12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLinkList_12<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNodeLink_121<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeLinkList_12<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNodeLink_122<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_12<span class="token punctuation">.</span><span class="token function">setTreeNodeLinkList</span><span class="token punctuation">(</span>treeNodeLinkList_12<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点：111</span>
    <span class="token class-name">TreeNode</span> treeNode_111 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_111<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_111<span class="token punctuation">.</span><span class="token function">setTreeNodeId</span><span class="token punctuation">(</span><span class="token number">111L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_111<span class="token punctuation">.</span><span class="token function">setNodeType</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_111<span class="token punctuation">.</span><span class="token function">setNodeValue</span><span class="token punctuation">(</span><span class="token string">&quot;果实A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点：112</span>
    <span class="token class-name">TreeNode</span> treeNode_112 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_112<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_112<span class="token punctuation">.</span><span class="token function">setTreeNodeId</span><span class="token punctuation">(</span><span class="token number">112L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_112<span class="token punctuation">.</span><span class="token function">setNodeType</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_112<span class="token punctuation">.</span><span class="token function">setNodeValue</span><span class="token punctuation">(</span><span class="token string">&quot;果实B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点：121</span>
    <span class="token class-name">TreeNode</span> treeNode_121 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_121<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_121<span class="token punctuation">.</span><span class="token function">setTreeNodeId</span><span class="token punctuation">(</span><span class="token number">121L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_121<span class="token punctuation">.</span><span class="token function">setNodeType</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_121<span class="token punctuation">.</span><span class="token function">setNodeValue</span><span class="token punctuation">(</span><span class="token string">&quot;果实C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点：122</span>
    <span class="token class-name">TreeNode</span> treeNode_122 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_122<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_122<span class="token punctuation">.</span><span class="token function">setTreeNodeId</span><span class="token punctuation">(</span><span class="token number">122L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_122<span class="token punctuation">.</span><span class="token function">setNodeType</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNode_122<span class="token punctuation">.</span><span class="token function">setNodeValue</span><span class="token punctuation">(</span><span class="token string">&quot;果实D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 树根</span>
    <span class="token class-name">TreeRoot</span> treeRoot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeRoot<span class="token punctuation">.</span><span class="token function">setTreeId</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeRoot<span class="token punctuation">.</span><span class="token function">setTreeRootNodeId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeRoot<span class="token punctuation">.</span><span class="token function">setTreeName</span><span class="token punctuation">(</span><span class="token string">&quot;规则决策树&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> treeNodeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> treeNode_01<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">11L</span><span class="token punctuation">,</span> treeNode_11<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">12L</span><span class="token punctuation">,</span> treeNode_12<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">111L</span><span class="token punctuation">,</span> treeNode_111<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">112L</span><span class="token punctuation">,</span> treeNode_112<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">121L</span><span class="token punctuation">,</span> treeNode_121<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">122L</span><span class="token punctuation">,</span> treeNode_122<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeRich <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeRich</span><span class="token punctuation">(</span>treeRoot<span class="token punctuation">,</span> treeNodeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-8-04.png" alt="树形结构的组织关系"></p><ul><li><strong>重要</strong>，这一部分是组合模式非常重要的使用，在我们已经建造好的决策树关系下，可以创建出树的各个节点，以及对节点间使用链路进行串联。</li><li>及时后续你需要做任何业务的扩展都可以在里面添加相应的节点，并做动态化的配置。</li><li>关于这部分手动组合的方式可以提取到数据库中，那么也就可以扩展到图形界面的进行配置操作。</li></ul><h4 id="_3-2-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-2-编写测试类" aria-hidden="true">#</a> 3.2 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;决策树组合结构信息：\\r\\n&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>treeRich<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">IEngine</span> treeEngineHandle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeEngineHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decisionMatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    decisionMatter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    decisionMatter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;29&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">EngineResult</span> result <span class="token operator">=</span> treeEngineHandle<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token number">10001L</span><span class="token punctuation">,</span> <span class="token string">&quot;Oli09pLkdjh&quot;</span><span class="token punctuation">,</span> treeRich<span class="token punctuation">,</span> decisionMatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这里提供了调用的通过组织模式创建出来的流程决策树，调用的时候传入了决策树的ID，那么如果是业务开发中就可以方便的解耦决策树与业务的绑定关系，按需传入决策树ID即可。</li><li>此外入参我们还提供了需要处理；<code>男</code>(man)、<code>年龄</code>(29岁)，的参数信息。</li></ul><h4 id="_3-3-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-3-测试结果" aria-hidden="true">#</a> 3.3 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">05.711</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>d<span class="token punctuation">.</span>d<span class="token punctuation">.</span>d<span class="token punctuation">.</span>service<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span>EngineBase</span> <span class="token operator">-</span> 决策树引擎<span class="token operator">=</span><span class="token operator">&gt;</span>规则决策树 userId：<span class="token class-name">Oli09pLkdjh</span> treeId：<span class="token number">10001</span> treeNode：<span class="token number">11</span> ruleKey：userGender matterValue：man
<span class="token number">23</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">05.712</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>d<span class="token punctuation">.</span>d<span class="token punctuation">.</span>d<span class="token punctuation">.</span>service<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span>EngineBase</span> <span class="token operator">-</span> 决策树引擎<span class="token operator">=</span><span class="token operator">&gt;</span>规则决策树 userId：<span class="token class-name">Oli09pLkdjh</span> treeId：<span class="token number">10001</span> treeNode：<span class="token number">112</span> ruleKey：userAge matterValue：<span class="token number">29</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">05.715</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;nodeId&quot;</span><span class="token operator">:</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token string">&quot;nodeValue&quot;</span><span class="token operator">:</span><span class="token string">&quot;果实B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;success&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">&quot;treeId&quot;</span><span class="token operator">:</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;Oli09pLkdjh&quot;</span><span class="token punctuation">}</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果上看这与我们使用<code>ifelse</code>是一样的，但是目前这与的组合模式设计下，就非常方便后续的拓展和修改。</li><li>整体的组织关系框架以及调用决策流程已经搭建完成，如果阅读到此没有完全理解，可以下载代码观察结构并运行调试。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>从以上的决策树场景来看，组合模式的主要解决的是一系列简单逻辑节点或者扩展的复杂逻辑节点在不同结构的组织下，对于外部的调用是仍然可以非常简单的。</li><li>这部分设计模式保证了开闭原则，无需更改模型结构你就可以提供新的逻辑节点的使用并配合组织出新的关系树。但如果是一些功能差异化非常大的接口进行包装就会变得比较困难，但也不是不能很好的处理，只不过需要做一些适配和特定化的开发。</li><li>很多时候因为你的极致追求和稍有倔强的工匠精神，即使在面对同样的业务需求，你能完成出最好的代码结构和最易于扩展的技术架构。<code>不要被远不能给你指导提升能力的影响到放弃自己的追求！</code></li></ul>`,73);function T(q,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",d,[s("https://bugstack.cn"),t(a)])]),r,m,v,n("ol",null,[b,g,n("li",null,[s("涉及工程三个，可以通过关注"),h,s("："),n("a",f,[N,t(a)]),s("，回复"),L,s("获取(打开获取的链接，找到序号18)")])]),y,n("ul",null,[n("li",null,[s("图片来自："),n("a",_,[s("https://refactoringguru.cn/design-patterns/composite"),t(a)])])]),w])}const j=p(i,[["render",T],["__file","2020-06-08-zhongxue Java shejimoshi《shizhanzuhemoshi》.html.vue"]]);export{j as default};
