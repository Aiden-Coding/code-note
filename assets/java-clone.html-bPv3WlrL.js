import{_ as n,o as s,c as a,e as p}from"./app-3RcBQnkC.js";const t={},e=p(`<h1 id="细数浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#细数浅拷贝和深拷贝" aria-hidden="true">#</a> 细数浅拷贝和深拷贝</h1><ul><li><a href="#%E7%BB%86%E6%95%B0%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D">细数浅拷贝和深拷贝</a><ul><li><a href="#%E5%85%B3%E4%BA%8E%E5%BC%95%E7%94%A8">关于引用</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D">关于浅拷贝和深拷贝</a><ul><li><a href="#%E6%B5%85%E6%8B%B7%E8%B4%9D">浅拷贝</a></li><li><a href="#%E6%B7%B1%E6%8B%B7%E8%B4%9D">深拷贝</a></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">序列化</a></li><li><a href="#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E6%8B%B7%E8%B4%9D%E6%96%B9%E5%BC%8F">如何选择拷贝方式</a></li><li><a href="#%E5%85%B6%E4%BB%96%E6%8B%B7%E8%B4%9D%E6%96%B9%E5%BC%8F">其他拷贝方式</a></li></ul></li><li><a href="#%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E">一些说明</a></li></ul></li></ul><p>Java 对象拷贝是为对象赋值的一种方式，简单来说就是创建一个和原对象相同的对象，新创建的对象是原对象的一个<code>副本</code>，面试官贼拉喜欢在面试的时候问一问你浅拷贝和深拷贝的原理。因为它涉及到对象的引用关系，涉及到 Java 是传值还是传递引用关系，这通常是面试的重点。所以在聊深拷贝和浅拷贝之前，我们先来聊一聊引用关系。</p><h2 id="关于引用" tabindex="-1"><a class="header-anchor" href="#关于引用" aria-hidden="true">#</a> 关于引用</h2><p>在 Java 中，除了<strong>基本数据类型</strong>（四类八种数据类型）之外，还存在引用数据类型。一般使用 <code>=</code> 号做赋值操作的时候，对于基本数据类型，实际上是拷贝的它的值，但是对于对象而言，其实赋值的只是这个对象的引用，也就是将原对象的引用传递过去，但是他们实际上还是指向的同一个对象。如下代码所示</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>

    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token class-name">String</span> taste<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		get and <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">;</span> <span class="token comment">// 基本数据类型的拷贝，拷贝值</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i2 = &quot;</span> <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Food</span> milk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token string">&quot;milk&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;fragrance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Food</span> food <span class="token operator">=</span> milk<span class="token punctuation">;</span> 
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;food = &quot;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;milk = &quot;</span> <span class="token operator">+</span> milk<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// milk 和 food 都指向同一个堆内存对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用图表示的话，应该是下面这样的：</p><p><img src="http://www.cxuan.vip/image-20230203222438167.png" alt=""></p><blockquote><p>不用纠结 Java 中到底是值传递还是引用传递这种无意义的争论中，你只要记得对于基本数据类型，传递的是数据类型的值，而对于引用类型来说，传递的是对象的引用，也就是对象的地址就可以了。</p></blockquote><h2 id="关于浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#关于浅拷贝和深拷贝" aria-hidden="true">#</a> 关于浅拷贝和深拷贝</h2><p>浅拷贝和深拷贝其实就是在<code>引用</code>的这个基础上来做区分的，如果在拷贝的时候，只对基本数据类型进行拷贝，对引用数据类型只是进行了引用的传递，没有真正的创建一个新的对象，这种拷贝方式就认为是<code>浅拷贝</code>。反之，在对引用数据类型进行拷贝的时候，创建了一个新的对象，并且复制其内的成员变量，这种拷贝方式就被认为是<code>深拷贝</code>。</p><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h3><p>那么如何实现<code>浅拷贝(Shallow copy)</code>呢？很简单，就是在需要拷贝的类上实现 Cloneable 接口并重写其 clone() 方法就可以了。</p><p>下面我们对 Food 类进行修改，我们让他实现 Cloneable 接口，并重写 clone() 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Food</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>
  
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>      
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在测试类中的代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Food</span> milk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token string">&quot;milk&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;fragrance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Food</span> food <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Food</span><span class="token punctuation">)</span>milk<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;milk = &quot;</span> <span class="token operator">+</span> milk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;food = &quot;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，现在的 food 对象是由 milk 对象拷贝出来的，那么此时的 food 对象和 milk 对象是同一个对象吗？我们通过打印，可以看到这两个对象的原生 <code>hashcode</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>milk <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cxuan<span class="token punctuation">.</span>objectclone<span class="token punctuation">.</span></span>Food</span><span class="token annotation punctuation">@3cd1a2f1</span>
food <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cxuan<span class="token punctuation">.</span>objectclone<span class="token punctuation">.</span></span>Food</span><span class="token annotation punctuation">@4d7e1886</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，<strong>food 和 milk 并不是同一个对象</strong>，那 milk 中还有三个属性值，这三个属性值在 food 中是不是也一样呢？为了验证这个猜想，我们重写了 toString 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Food{&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
    <span class="token string">&quot;, num=&quot;</span> <span class="token operator">+</span> num <span class="token operator">+</span>
    <span class="token string">&quot;, taste=&#39;&quot;</span> <span class="token operator">+</span> taste <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
    <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次打印 food 和 milk ，可以观察到如下结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>milk <span class="token operator">=</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token char">&#39;milk&#39;</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> taste<span class="token operator">=</span>&#39;fragrance&#39;<span class="token punctuation">}</span>
food <span class="token operator">=</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token char">&#39;milk&#39;</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> taste<span class="token operator">=</span>&#39;fragrance&#39;<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>嗯哼，虽然看起来&quot;cxuan 哥&quot;和&quot;cuan 哥&quot;是两种完全不同的称呼！但是他们却有一种共同的能力：<strong>写作</strong>！</p><p>我们还是通过图示来说明一下：</p><p><img src="http://www.cxuan.vip/image-20230203222450341.png" alt=""></p><p>这幅图看出门道了么？在堆区分别出现了两个 Food 对象，这同时表明 clone 方法会重新创建一个对象并为其分配一块内存区域；虽然出现了两个对象，但是两个对象中的属性值是一样的，这也是换汤不换药，虽然汤和药是不同的东西（对象），但是他们都溶于水（属性值）。</p><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>虽然浅拷贝是一种换汤不换药的说法，但是在 Java 世界中还是有一种说法是。。。。。。是啥来着？</p><p>词穷了。。。。。。</p><p><img src="http://www.cxuan.vip/image-20230203222503708.png" alt=""></p><p>哦对，还有一种改头换面的形式，它就是我们所熟悉的<code>深拷贝(Deep copy)</code>，先来抛出一下深拷贝的定义：<strong>在进行对象拷贝的基础上，对对象的成员变量也依次拷贝的方式被称为深拷贝</strong>。</p><p>哈哈哈哈，这故作高深的深拷贝原来就是在浅拷贝的基础上再复制一下它的属性值啊，我还以为是啥高深的东西呢！上代码！</p><p>我们先增加一个饮品类 Drink 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    get and <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后更改一下 Food 类，因为 Drink 也算是 Food ，所以我们在 Food 类中增加对 Drink 的引用，然后再修改 get set 、toString 、clone 、构造方法，修改后的 Food 类代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Food</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>

    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token class-name">String</span> taste<span class="token punctuation">;</span>
    <span class="token class-name">Drink</span> drink<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">String</span> taste<span class="token punctuation">,</span><span class="token class-name">Drink</span> drink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>taste <span class="token operator">=</span> taste<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>drink <span class="token operator">=</span> drink<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    get and set<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Food</span> food <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Food</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        food<span class="token punctuation">.</span>drink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Drink</span><span class="token punctuation">)</span> drink<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Food{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, num=&quot;</span> <span class="token operator">+</span> num <span class="token operator">+</span>
                <span class="token string">&quot;, taste=&#39;&quot;</span> <span class="token operator">+</span> taste <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, drink=&quot;</span> <span class="token operator">+</span> drink <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到最大的改变是 clone 方法，我们在 clone 方法中，实现了对 Food 对象的拷贝，同时也实现了对 Drink 对象的拷贝，这就是我们上面所说的<strong>复制对象并复制对象的成员变量</strong>。</p><p>然后我们进行一下 Deep Copy的测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>

  <span class="token class-name">Drink</span> drink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drink</span><span class="token punctuation">(</span><span class="token string">&quot;milk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Food</span> food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token string">&quot;humberge&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;fragrance&quot;</span><span class="token punctuation">,</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Food</span> foodClone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Food</span><span class="token punctuation">)</span>food<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Drink</span> tea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drink</span><span class="token punctuation">(</span><span class="token string">&quot;tea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  food<span class="token punctuation">.</span><span class="token function">setDrink</span><span class="token punctuation">(</span>tea<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;food = &quot;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;foodClone = &quot;</span> <span class="token operator">+</span> foodClone<span class="token punctuation">.</span><span class="token function">getDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行完成后的输出结果如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>food <span class="token operator">=</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>name<span class="token operator">=</span>&#39;humberge&#39;<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> taste<span class="token operator">=</span>&#39;fragrance&#39;<span class="token punctuation">,</span> drink<span class="token operator">=</span><span class="token class-name">Drink</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token char">&#39;tea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
foodClone <span class="token operator">=</span> <span class="token class-name">Drink</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token char">&#39;milk&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们把 foodClone 拷贝出来之后，修改 food 中的 drink 变量，却不会对 foodClone 造成改变，这就说明 foodClone 已经成功实现了深拷贝。</p><p>用图示表示的话，应该是下面这样的：</p><p><img src="http://www.cxuan.vip/image-20230203222516077.png" alt=""></p><p>这是深拷贝之后的内存分配图，现在可以看到，food 和 foodClone 完全是两个不同的对象，它们之间不存在纽带关系。</p><p>我们上面主要探讨实现对象拷贝的方式是对象实现 <code>Cloneable</code> 接口，并且调用重写之后的 clone 方法，在 Java 中，还有一种实现对象拷贝的方式是使用 <code>序列化</code>。</p><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h3><p>使用序列化的方式主要是使用 <code>Serializable</code> 接口，这种方式还以解决多层拷贝的问题，<strong>多层拷贝就是引用类型里面又有引用类型</strong>，层层嵌套下去。使用 Serializable 的关键代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将流序列化成对象</span>
    <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>
    person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> person<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用序列化可以实现深拷贝，它的原理是将二进制字节流内容写到一个文本或字节数组，然后是从这个文本或者字节数组中读取数据，原对象写入这个文本或者字节数组后再拷贝给 clone 对象，原对象的修改不会影响 clone 对象，因为 clone 对象是从文本或者字节数组中读取的。</p><h3 id="如何选择拷贝方式" tabindex="-1"><a class="header-anchor" href="#如何选择拷贝方式" aria-hidden="true">#</a> 如何选择拷贝方式</h3><p>到现在我们已经把浅拷贝和深拷贝都介绍完了，那么如何选择浅拷贝和深拷贝呢？下面是几点注意事项⚠️</p><ul><li><p>如果对象的属性都是基本数据类型，那么可以使用浅拷贝。</p></li><li><p>如果对象有引用类型，那就要基于具体的需求来选择浅拷贝还是深拷贝。</p></li><li><p>如果对象嵌套层数比较多，推荐使用 Serializable 接口实现深拷贝。</p></li><li><p>如果对象引用任何时候都不会被改变，那么没必要使用深拷贝，只需要使用浅拷贝就行了。如果对象引用经常改变，那么就要使用深拷贝。没有一成不变的规则，一切都取决于具体需求。</p></li></ul><h3 id="其他拷贝方式" tabindex="-1"><a class="header-anchor" href="#其他拷贝方式" aria-hidden="true">#</a> 其他拷贝方式</h3><p>除了对象的拷贝，Java 中还提供了其他的拷贝方式</p><p>比如数组的拷贝，你可以使用 <code>Arrays.copyof</code> 实现数组拷贝，还可以使用默认的 clone 进行拷贝，不过这两者都是浅拷贝。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lNumbers1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rNumbers1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>lNumbers1<span class="token punctuation">,</span> lNumbers1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lNumbers2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rNumbers2 <span class="token operator">=</span> lNumbers2<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了基本数组数据类型之外的拷贝，还有对象的拷贝，不过用法基本是一样的。</p><p>集合也可以实现拷贝，因为集合的底层就使用的是数组，所以用法也是一样的。</p><h2 id="一些说明" tabindex="-1"><a class="header-anchor" href="#一些说明" aria-hidden="true">#</a> 一些说明</h2><p>针对 Cloneable 接口，有下面三点使用说明</p><ul><li><p>如果类实现了 Cloneable 接口，再调用 Object 的 clone() 方法<strong>可以合法地对该类实例进行按字段复制</strong>。</p></li><li><p>如果在没有实现 Cloneable 接口的实例上调用 Object 的 clone() 方法，则会导致抛出<code>CloneNotSupporteddException</code>。</p></li><li><p>实现此接口的类应该使用公共方法重写 Object 的clone() 方法，因为 Object 的 clone() 方法是一个受保护的方法。</p></li></ul><p>如果你在阅读文章的过程中发现错误和问题，请及时与我联系！</p><p>如果文章对你有帮助，希望小伙伴们三连走起！</p>`,67),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","java-clone.html.vue"]]);export{k as default};
