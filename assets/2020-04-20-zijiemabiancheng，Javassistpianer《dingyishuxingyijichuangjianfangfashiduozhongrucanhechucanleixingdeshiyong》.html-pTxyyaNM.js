import{_ as t,r as e,o as p,c as o,a as s,b as n,d as c,e as l}from"./app-3RcBQnkC.js";const i={},u=s("h1",{id:"字节码编程-javassist篇二《定义属性以及创建方法时多种入参和出参类型的使用》",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字节码编程-javassist篇二《定义属性以及创建方法时多种入参和出参类型的使用》","aria-hidden":"true"},"#"),n(" 字节码编程，Javassist篇二《定义属性以及创建方法时多种入参和出参类型的使用》")],-1),d=s("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>在上一篇 <strong>Helloworld</strong> 中，我们初步尝试使用了 <code>Javassist</code>字节编程的方式，来创建我们的方法体并通过反射调用运行了结果。大致了解到创建在使用字节码编程的时候基本离不开三个核心类；<code>ClassPool</code>、<code>CtClass</code>、<code>CtMethod</code>，它们分别管理着对象容器、类和方法。但是我们还少用一样就是字段；<code>CtFields</code>，在这一章节中我们不止会使用字段，还会创建多个不同入参类型和返回值的学习。</p><p>在学习之前先重点列一下相关的知识点，如下；</p><ol><li><code>CtClass.doubleType</code>、<code>intType</code>、<code>floatType</code>等 <strong>8</strong> 个基本类型和一个<code>voidType</code>，也就是空的返回类型。</li><li>传递和返回的是对象类型时，那么需要时用；<code>pool.get(Double.class.getName()</code>，进行设置。</li><li>当需要设置多个入参时，需要在数组中以此设置入参类型；<code>new CtClass[]{CtClass.doubleType, CtClass.doubleType}</code>。</li><li>在方法体中需要取得入参并计算时，需要使用 <code>$1</code>、<code>$2</code> ...，数字表示入参的位置。<code>$0</code> 是 <em>this</em>。</li><li><code>CtField</code> 设置属性字段，并赋值。</li><li><code>Javassist</code> 中的装箱/拆箱。</li></ol><p><strong>好</strong>！那么我们就开始对这些知识点进行应用，创建出类和对应的方法。<em>「所有代码都可以关注公众号：<code>bugstack虫洞栈</code>，回复码下载获取」</em></p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2><ol><li>JDK 1.8.0</li><li>javassist 3.12.1.GA</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.12.1.GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、案例目标" tabindex="-1"><a class="header-anchor" href="#三、案例目标" aria-hidden="true">#</a> 三、案例目标</h2><p>为了练习属性字段和方法的不同的入参、出参，我们使用 <code>javassist</code> 创建如下这样的方法。当然你也可以尝试去扩展其他类型的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">double</span> π <span class="token operator">=</span> <span class="token number">3.14D</span><span class="token punctuation">;</span>

    <span class="token comment">//S = πr²</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateCircularArea</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> π <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//S = a + b</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">sumOfTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、技术实现" tabindex="-1"><a class="header-anchor" href="#四、技术实现" aria-hidden="true">#</a> 四、技术实现</h2><blockquote><p>GenerateClazzMethod.java &amp; 生成类和方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 公众号：bugstack虫洞栈
 * 博客栈：https://bugstack.cn - 沉淀、分享、成长，让自己和他人都能有所收获！
 * 本专栏是小傅哥多年从事一线互联网Java开发的学习历程技术汇总，旨在为大家提供一个清晰详细的学习教程，侧重点更倾向编写Java核心内容。如果能为您提供帮助，请给予支持(关注、点赞、分享)！
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenerateClazzMethod</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span><span class="token punctuation">,</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span>

        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.javassist.MathUtil&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 属性字段</span>
        <span class="token class-name">CtField</span> ctField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">,</span> <span class="token string">&quot;π&quot;</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctField<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>ctField<span class="token punctuation">,</span> <span class="token string">&quot;3.14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 方法：求圆面积</span>
        <span class="token class-name">CtMethod</span> calculateCircularArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">,</span> <span class="token string">&quot;calculateCircularArea&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">}</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        calculateCircularArea<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calculateCircularArea<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;{return π * $1 * $1;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>calculateCircularArea<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 方法；两数之和</span>
        <span class="token class-name">CtMethod</span> sumOfTwoNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;sumOfTwoNumbers&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">}</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumOfTwoNumbers<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumOfTwoNumbers<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;{return Double.valueOf($1 + $2);}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>sumOfTwoNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出类的内容</span>
        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这里面有几个核心点，讲解如下；</strong></p><ol><li><code>CtField</code>，属性字段的创建。这就像我们正常写代码一样，需要设定属性的；名称、类型以及是 <code>public</code> 的还是 <code>private</code> 的以及 <code>static</code> 和 <code>final</code> 等。都可以通过 <code>Modifier.PRIVATE</code> + <code>Modifier.STATIC</code> + <code>Modifier.FINAL</code>，通过组合来控制。同样这也适用于对方法类型的设置。同时需要在添加属性的地方，设置初始值。</li><li>接下来是我们设置了一个求圆面积的方法，如果说在方法体中需要使用到入参类型。那么需要通过符号 <em>$</em>+数字，来获取入参。这个数字就是当前入参的位置。比如取第一个入参：<code>$1</code>，以此类推。</li><li>之后是我们的多种入参类型，在这开始我们也提到了。如果是基本类型入参都可以使用 <code>CtClass.doubleType</code>，对象类型入参使用 <code>pool.get(类.class.getName)</code> 获取。</li><li>最终同样我们会把使用字节码编译的 <em>class</em> 输出到工程目录下 <code>ctClass.writeFile()</code>。</li><li>在Javassist中并不会给类型做拆箱和装箱操作，需要显式的处理。例如上面案例中，需要将 <code>double</code> 使用 <code>Double.valueOf</code> 进行转换。</li></ol><p>下面这张基本描述了一个类方法在创建时候不同参数的含义，可以参考。</p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-bytecode-1-02-1.png" alt="Javassist 创建类方法入参描述"></p><h2 id="五、测试结果" tabindex="-1"><a class="header-anchor" href="#五、测试结果" aria-hidden="true">#</a> 五、测试结果</h2><h3 id="_1-反射调用字节码类方法" tabindex="-1"><a class="header-anchor" href="#_1-反射调用字节码类方法" aria-hidden="true">#</a> 1. 反射调用字节码类方法</h3><p><strong>在测试之前，我们需要写一点反射代码来调用类的方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试调用</span>
<span class="token class-name">Class</span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Method</span> method_calculateCircularArea <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;calculateCircularArea&quot;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj_01 <span class="token operator">=</span> method_calculateCircularArea<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;圆面积：&quot;</span> <span class="token operator">+</span> obj_01<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Method</span> method_sumOfTwoNumbers <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;sumOfTwoNumbers&quot;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj_02 <span class="token operator">=</span> method_sumOfTwoNumbers<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;两数和：&quot;</span> <span class="token operator">+</span> obj_02<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>圆面积：<span class="token number">4.750506</span>
两数和：<span class="token number">3.0</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查看使用javassist生成的类" tabindex="-1"><a class="header-anchor" href="#_2-查看使用javassist生成的类" aria-hidden="true">#</a> 2. 查看使用Javassist生成的类</h3><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-bytecode-1-02-2.png" alt="Javassist 生成的类内容"></p><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ol><li>本篇案例中重点强调了属性字段创建，同时需要给属性字段赋值。</li><li>在 <code>Javassist</code> 是不会进行类型的自动装箱和拆箱的，需要我们进行手动处理，否则生成类在执行会报类型错误。</li><li>当需要使用入参的时候，可以使用 <code>$1</code> 来获取。这也是后续做一些监控获取入参的方法。</li></ol>`,29);function m(v,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("作者：小傅哥 "),d,n("博客："),s("a",k,[n("https://bugstack.cn"),c(a)])]),r])}const h=t(i,[["render",m],["__file","2020-04-20-zijiemabiancheng，Javassistpianer《dingyishuxingyijichuangjianfangfashiduozhongrucanhechucanleixingdeshiyong》.html.vue"]]);export{h as default};
