import{_ as s,o as a,c as n,e as p}from"./app-3RcBQnkC.js";const i={},e=p(`<h1 id="suppresswarnings-用法" tabindex="-1"><a class="header-anchor" href="#suppresswarnings-用法" aria-hidden="true">#</a> @SuppressWarnings 用法</h1><ul><li><a href="#suppresswarnings-%E7%94%A8%E6%B3%95">@SuppressWarnings 用法</a><ul><li><a href="#idea-%E8%AE%BE%E7%BD%AE%E6%B3%9B%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%8F%98%E9%87%8F%E6%96%B9%E6%B3%95%E6%9C%AA%E4%BD%BF%E7%94%A8%E6%A3%80%E6%9F%A5">Idea 设置泛型检查，变量、方法未使用检查</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE%E6%B3%9B%E5%9E%8B%E6%A3%80%E6%9F%A5">设置泛型检查</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F%E6%9C%AA%E4%BD%BF%E7%94%A8%E6%8F%90%E7%A4%BA">设置变量未使用提示</a></li><li><a href="#%E5%8F%98%E9%87%8F%E6%9C%AA%E4%BD%BF%E7%94%A8%E4%BA%A7%E7%94%9F%E7%9A%84%E8%AD%A6%E5%91%8A">变量未使用产生的警告</a></li></ul></li></ul></li></ul><p>从Java 5.0起，您可以使用<code>java.lang.SuppressWarning</code>注释，来停用与编译单元子集相关的编译警告</p><p><strong>作用</strong>：用于抑制编译器产生警告信息。</p><h2 id="idea-设置泛型检查-变量、方法未使用检查" tabindex="-1"><a class="header-anchor" href="#idea-设置泛型检查-变量、方法未使用检查" aria-hidden="true">#</a> Idea 设置泛型检查，变量、方法未使用检查</h2><p>从 eclipse 转换到idea 发现有很多不习惯的地方，比如说</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s<span class="token punctuation">;</span>
<span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>没有未使用的变量，未检查泛型，未使用的方法提示，特意查找了一下相关资料</p><h3 id="设置泛型检查" tabindex="-1"><a class="header-anchor" href="#设置泛型检查" aria-hidden="true">#</a> 设置泛型检查</h3><p>我使用的是mac电脑，windows电脑应该类似</p><p>打开如图</p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094526617-1947420796.png" style="zoom:50%;"><p>会出现如下页面</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094538295-5183882.png" alt=""></p><p>选择 editor —&gt; inspections —&gt; 搜索 Raw use of —&gt; 勾上 Raw use of parameterized class</p><p>效果如图：</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094552217-118862948.png" alt=""></p><h3 id="设置变量未使用提示" tabindex="-1"><a class="header-anchor" href="#设置变量未使用提示" aria-hidden="true">#</a> 设置变量未使用提示</h3><p>打开如图：</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094610050-1776063553.png" alt=""></p><p>出现如下页面</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094627149-978880464.png" alt=""></p><p>在 Editor —&gt; General —&gt; Errors and Warnings —&gt; 选择 Unused symbol</p><p>**右侧勾选上 Error stripe mark 和 Effects 下面选择 Underwaved波浪线 **</p><p>参考：</p><p>https://blog.csdn.net/Lovincc/article/details/80464782</p><p>https://blog.csdn.net/codejas/article/details/78657560</p><h3 id="变量未使用产生的警告" tabindex="-1"><a class="header-anchor" href="#变量未使用产生的警告" aria-hidden="true">#</a> 变量未使用产生的警告</h3><p>如上设置完成之后，变量未使用的提示应该是这样的：</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094640934-1249300912.png" alt=""></p><p>如图 , list、set、map 都未被使用</p><p><strong>1.为未使用的变量设置SuppressWarning</strong></p><p>在方法前添加</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarning</span><span class="token punctuation">(</span><span class="token string">&quot;unused&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>能够越过变量未使用检查，@SuppressWarning 中的属性我们稍后再讨论。</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094652617-1298721161.png" alt=""></p><p><strong>2.对未使用的方法添加SuppressWarning跳过方法未调用检查</strong></p><p>可以在方法上添加SuppressWarning 跳过对方法未使用的检查</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094714603-2111570837.png" alt=""></p><p><strong>3.为单行泛型添加SuppressWarning 跳过泛型检查</strong></p><p>在单个泛型代码上添加@SuppressWarning(&quot;rawtypes&quot;)可以跳过泛型检查，但是需要注意： 还需要在方法上添加</p><p>@SuppressWarning(&quot;unchecked&quot;)注释</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094734126-899848575.png" alt=""></p><p>如上图所示，可以对单个泛型设置@SuppressWarning 跳过类型检查</p><p><strong>4. 为方法体上添加SuppressWarning 跳过泛型检查</strong></p><p>如果一个方法体上含有多个未被检查的泛型，需要在方法体上添加@SuppressWarning(value={&quot;unchecked&quot;,&quot;rawtypes&quot;}) 跳过泛型检查</p><p>如图所示:</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094750433-1900989670.png" alt=""></p><p>也可以使用 @SuppressWarning(&quot;all&quot;) ，来跳过所有的检查。</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524094801478-1176973868.png" alt=""></p><p><strong>5.@SuppressWarning 中的属性介绍以及属性说明</strong></p><ul><li>all，抑制所有警告</li><li>boxing，抑制与封装/拆装作业相关的警告</li><li>cast，抑制与强制转型作业相关的警告</li><li>dep-ann，抑制与淘汰注释相关的警告</li><li>deprecation，抑制与淘汰的相关警告</li><li>fallthrough，抑制与switch陈述式中遗漏break相关的警告</li><li>finally，抑制与未传回finally区块相关的警告</li><li>hiding，抑制与隐藏变数的区域变数相关的警告</li><li>incomplete-switch，抑制与switch陈述式(enum case)中遗漏项目相关的警告</li><li>javadoc，抑制与javadoc相关的警告</li><li>nls，抑制与非nls字串文字相关的警告</li><li>null，抑制与空值分析相关的警告</li><li>rawtypes，抑制与使用raw类型相关的警告</li><li>resource，抑制与使用Closeable类型的资源相关的警告</li><li>restriction，抑制与使用不建议或禁止参照相关的警告</li><li>serial，抑制与可序列化的类别遗漏serialVersionUID栏位相关的警告</li><li>static-access，抑制与静态存取不正确相关的警告</li><li>static-method，抑制与可能宣告为static的方法相关的警告</li><li>super，抑制与置换方法相关但不含super呼叫的警告</li><li>synthetic-access，抑制与内部类别的存取未最佳化相关的警告</li><li>sync-override，抑制因为置换同步方法而遗漏同步化的警告</li><li>unchecked，抑制与未检查的作业相关的警告</li><li>unqualified-field-access，抑制与栏位存取不合格相关的警告</li><li>unused，抑制与未用的程式码及停用的程式码相关的警告</li></ul><p>文章参考： https://www.ibm.com/support/knowledgecenter/zh-tw/SSQ2R2_9.1.1/org.eclipse.jdt.doc.user/tasks/task-suppress_warnings.htm</p><p><strong>后记: @SuppressWarning 注解的主要作用就是抑制编译时期所产生的警告，从而提高程序的可读性，对于上面 @SuppressWarning 的所有属性，读者不用全部记忆，读两遍加深印象即可。用到的时候从google或者本文章都可查询</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivkbczxoj31l20t8al5.jpg" alt="image-20210716163352584"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivl4khz9j31d60h8mze.jpg" alt="image-20210716163433337"></p>`,56),l=[e];function t(r,o){return a(),n("div",null,l)}const g=s(i,[["render",t],["__file","java-@suppresswarnings.html.vue"]]);export{g as default};
