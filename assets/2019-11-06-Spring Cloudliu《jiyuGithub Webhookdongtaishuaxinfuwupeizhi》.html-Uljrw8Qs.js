const i=JSON.parse('{"key":"v-72388ac4","path":"/CodeGuide/md/spring/spring-cloud/2019-11-06-Spring Cloudliu《jiyuGithub Webhookdongtaishuaxinfuwupeizhi》.html","title":"第6章：基于github webhook动态刷新服务配置","lang":"zh-CN","frontmatter":{"category":"itstack-demo-springcloud","title":"第6章：基于github webhook动态刷新服务配置","tagline":"by 付政委","tag":["spring","itstack-demo-springcloud"],"excerpt":"在实际开发中经常会有一个叫做配置中心的服务，这个服务经过变更参数来动态刷新线上业务数据行为配置。比如；行为开关、活动数据、黑白名单、本地/预发/线上环境切换等等，这些配置信息往往需要在我们不重启系统的时候就可以被更新执行。那么我们一般会使用具备此类属性在分布式系统中适合的组件进行开发配置中心，像是zookeeper、redis发布订阅、或者http定时轮许拉取，他们都可以做成统一配置中心服务。而在Spring Cloud Config 中，默认采用 Git 来存储配置信息，所以使用 Spring Cloud Config 构建的配置服务器，天然就支持对微服务应用配置信息的版本管理，在加上Github的Webhook钩子服务，可以在我们push等行为操作的时候，自动执行我们的http行为，以达到自动刷新配置服务。","lock":"need"},"headers":[{"level":2,"title":"前言介绍","slug":"前言介绍","link":"#前言介绍","children":[]},{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":2,"title":"案例说明","slug":"案例说明","link":"#案例说明","children":[]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[{"level":3,"title":"itstack-demo-springcloud-config-client | 配置获取客户端方，提供自动刷新Http","slug":"itstack-demo-springcloud-config-client-配置获取客户端方-提供自动刷新http","link":"#itstack-demo-springcloud-config-client-配置获取客户端方-提供自动刷新http","children":[]},{"level":3,"title":"itstack-demo-springcloud-config-server | 配置提供服务端方，链接Git配置工程地址","slug":"itstack-demo-springcloud-config-server-配置提供服务端方-链接git配置工程地址","link":"#itstack-demo-springcloud-config-server-配置提供服务端方-链接git配置工程地址","children":[]}]},{"level":2,"title":"测试验证","slug":"测试验证","link":"#测试验证","children":[]},{"level":2,"title":"综上总结","slug":"综上总结","link":"#综上总结","children":[]}],"git":{"createdTime":1704301416000,"updatedTime":1704373598000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":2}]},"filePathRelative":"CodeGuide/md/spring/spring-cloud/2019-11-06-Spring Cloud六《基于Github Webhook动态刷新服务配置》.md"}');export{i as data};
