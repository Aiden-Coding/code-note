import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"第10节-在插件中引入探针-基于字节码插桩获取执行sql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第10节-在插件中引入探针-基于字节码插桩获取执行sql","aria-hidden":"true"},"#"),s(" 第10节：在插件中引入探针，基于字节码插桩获取执行SQL")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/Agy6c1kx9LIhs_4PqJlNNw",target:"_blank",rel:"noopener noreferrer"},v=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>片面了！</code></p><p>一月三舟，托尔斯泰说：“多么伟大的作家，也不过就是在书写自己的片面而已”。何况是我，何况是我们！</p><p>虽然我们不书写文章，但我们写需求、写代码、写注释，当我们遇到了需要被讨论的问题点时，往往变成了争论点。这个好、那个差、你用的都是啥啥啥！</p><p>当你把路走窄了，你所能接受到的新的思路、新的想法、新的视野，以及非常重要的收入，也都会随之减少。只有横向对比、参考借鉴、查漏补缺，才能让你的头脑中会有更多的思路，无论是在写代码上、还是在理财上、还是在生活上。</p><h2 id="二、需求目的" tabindex="-1"><a class="header-anchor" href="#二、需求目的" aria-hidden="true">#</a> 二、需求目的</h2><p>你是否有在使用 IntelliJ IDEA 做开发的过程，需要拿到执行 SQL 语句，复制出来做验证的时候，总是这样的语句：<code>SELECT * FROM USER WHERE id = ? AND name = ?</code> 又需要自己把 <code>? 号</code> 替换成入参值呢？</p><p><em>当然这个需求其实并不大，甚至你还可以使用其他方式解决。那么在本章节会给你提供一个新的思路，可能你几乎是没过的方式进行处理。</em></p><p>那么在这个章节的案例中我们用到基于 IDEA Plugin 开发能力，把字节码插桩探针，基于 Javaagent 的能力，注入到代码中。再通过增强后的字节码，获取到 <code>com.mysql.jdbc.PreparedStatement</code> -&gt; <code>executeInternal</code> 执行时的对象，从而拿到可以直接测试的 SQL 语句。</p><h2 id="三、案例开发" tabindex="-1"><a class="header-anchor" href="#三、案例开发" aria-hidden="true">#</a> 三、案例开发</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>guide<span class="token operator">-</span>idea<span class="token operator">-</span>plugin<span class="token operator">-</span>probe
├── <span class="token punctuation">.</span>gradle
├── probe<span class="token operator">-</span>agent
│   ├── src
│   │   └── main
│   │       └── java
│   │       	└── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>guide<span class="token punctuation">.</span>idea<span class="token punctuation">.</span>plugin
│   │       		├── <span class="token class-name">MonitorMethod</span><span class="token punctuation">.</span>java
│   │       		└── <span class="token class-name">PreAgent</span><span class="token punctuation">.</span>java
│   └── build<span class="token punctuation">.</span>gradle
└── probe<span class="token operator">-</span>plugin
│   └── src
│   │   └── main
│   │       ├── java
│   │       │	└── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>guide<span class="token punctuation">.</span>idea<span class="token punctuation">.</span>plugin
│   │       │		└── utils
│   │       │		│	└── <span class="token class-name">PluginUtil</span><span class="token punctuation">.</span>java
│   │       │		└── <span class="token class-name">PerRun</span><span class="token punctuation">.</span>java
│   │       └── resources
│   │       	└── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span>
│   │        		└── plugin<span class="token punctuation">.</span>xml
│	└── build<span class="token punctuation">.</span>gradle
├── build<span class="token punctuation">.</span>gradle    
└── gradle<span class="token punctuation">.</span>properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源码获取</strong>：#公众号：<code>bugstack虫洞栈</code> 回复：<code>idea</code> 即可下载全部 IDEA 插件开发源码</p><p>在此 IDEA 插件工程中，工程结构分为2块：</p><ul><li>probe-agent：探针模块，用于编译打包提供字节码增强服务，给 probe-plugin 模块使用</li><li>probe-plugin：插件模块，通过 <code>java.programPatcher</code> 加载字节码增强包，获取并打印执行数据库操作的 SQL 语句。</li></ul><h3 id="_2-字节码增强获取-sql" tabindex="-1"><a class="header-anchor" href="#_2-字节码增强获取-sql" aria-hidden="true">#</a> 2. 字节码增强获取 SQL</h3><p>此处的字节码增强方式，采用的 Byte-Buddy 字节码框架，它的使用方式更加简单，在使用的过程中有些像使用 AOP 的拦截方式一样，获取到你需要的信息。</p><p>此外在 gradle 打包构建的时候，需要添加 <code>shadowJar</code> 模块，把 <code>Premain-Class</code> 打包进去。<em>这部分代码中可以查看</em></p><h4 id="_2-1-探针入口" tabindex="-1"><a class="header-anchor" href="#_2-1-探针入口" aria-hidden="true">#</a> 2.1 探针入口</h4><p><strong>cn.bugstack.guide.idea.plugin.PreAgent</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//JVM 首先尝试在代理类上调用以下方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AgentBuilder<span class="token punctuation">.</span>Transformer</span> transformer <span class="token operator">=</span> <span class="token punctuation">(</span>builder<span class="token punctuation">,</span> typeDescription<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> javaModule<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder
                <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string">&quot;executeInternal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 拦截任意方法</span>
                <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">MethodDelegation</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">MonitorMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">AgentBuilder
            <span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">nameStartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.PreparedStatement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">installOn</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 Byte-buddy 配置，拦截匹配的类和方法，因为这个类和方法下，可以获取到完整的执行 SQL 语句。</li></ul><h4 id="_2-2-拦截-sql" tabindex="-1"><a class="header-anchor" href="#_2-2-拦截-sql" aria-hidden="true">#</a> 2.2 拦截 SQL</h4><p><strong>cn.bugstack.guide.idea.plugin.MonitorMethod</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RuntimeType</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@This</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token annotation punctuation">@Origin</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@SuperCall</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">,</span> <span class="token annotation punctuation">@AllArguments</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> originalSql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;originalSql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> replaceSql <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;asSql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据库名称：Mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程ID：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;时间：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原始SQL：\\r\\n&quot;</span> <span class="token operator">+</span> originalSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;替换SQL：\\r\\n&quot;</span> <span class="token operator">+</span> replaceSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拦截方法入参是一种可配置操作，比如 <code>@This Object obj</code> 是为了获取当前类的执行对象，<code>@Origin Method method</code> 是为了获取执行方法。</li><li>在 finally 块中，我们可以通过反射拿到当前类的属性信息，以及反射拿到执行的 SQL，并做打印输出。</li></ul><h4 id="_2-3-编译打包" tabindex="-1"><a class="header-anchor" href="#_2-3-编译打包" aria-hidden="true">#</a> 2.3 编译打包</h4><p>在测试和开发 IDEA Plugin 插件之前，我们需要先进行一个打包操作，这个打包就是把字节码增强的代码打包整一个 Jar 包。在 build.gradle -&gt; shadowJar</p><p><img src="https://bugstack.cn/images/article/assembly/assembly-220117-8-01.png" alt=""></p><ul><li>打包编译后，就可以在 build -&gt; libs 下看到 Jar：<code>probe-agent-1.0-SNAPSHOT-all.jar</code> 这个 Jar 就是用来做字节码增强处理的。</li></ul><h4 id="_2-4-测试验证" tabindex="-1"><a class="header-anchor" href="#_2-4-测试验证" aria-hidden="true">#</a> 2.4 测试验证</h4><p>这里在把写好的字节码增强组件给插件使用之前，可以做一个测试验证，避免每次都需要启动插件才能做测试。</p><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/itstack?characterEncoding=utf-8&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token constant">USER</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM USER WHERE id = ? AND name = ?&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">PreparedStatement</span> statement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        statement<span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;谢飞机&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>VM options：<code>-javaagent:你的路径\\libs\\probe-agent-1.0-SNAPSHOT-all.jar</code></li><li>注意在测试运行的时候，你要给 ApiTest 配置 VM options 才能打印拦截 SQL 信息</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>原始<span class="token constant">SQL</span>：
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token constant">USER</span> <span class="token class-name">WHERE</span> id <span class="token operator">=</span> <span class="token operator">?</span> <span class="token class-name">AND</span> name <span class="token operator">=</span> <span class="token operator">?</span>
替换<span class="token constant">SQL</span>：
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token constant">USER</span> <span class="token class-name">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token class-name">AND</span> name <span class="token operator">=</span> <span class="token char">&#39;谢飞机&#39;</span>
谢飞机 北京<span class="token punctuation">.</span>大兴区<span class="token punctuation">.</span>通明湖公园
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>好啦，这样我们就可以拦截可以复制执行的 SQL 语句了，接下来我们再做下 IDEA Plugin 的处理。</li></ul><h3 id="_3-通过插件开发引入探针-jar" tabindex="-1"><a class="header-anchor" href="#_3-通过插件开发引入探针-jar" aria-hidden="true">#</a> 3. 通过插件开发引入探针 Jar</h3><p>接下来我们要把开发好的字节码增强 Jar 包，复制到 IDEA Plugin 插件开发模块中的 libs(可自己创建) 下，之后在 plugin.xml 配置加载 <code>implementation fileTree(dir: &#39;libs&#39;, includes: [&#39;*jar&#39;])</code> 这样就可以程序中，找到这个 jar 包并配置到程序中。</p><h4 id="_3-1-复制-jar-到-libs-下" tabindex="-1"><a class="header-anchor" href="#_3-1-复制-jar-到-libs-下" aria-hidden="true">#</a> 3.1 复制 jar 到 libs 下</h4><p><img src="https://bugstack.cn/images/article/assembly/assembly-220117-8-02.png" alt=""></p><h4 id="_3-2-build-gradle-配置加载" tabindex="-1"><a class="header-anchor" href="#_3-2-build-gradle-配置加载" aria-hidden="true">#</a> 3.2 build.gradle 配置加载</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>dependencies {
    implementation fileTree(dir: &#39;libs&#39;, includes: [&#39;*jar&#39;])
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <code>implementation fileTree</code> 引入加载文件树的方式，把我们配置好的 Jar 加载到程序运行中。</li></ul><h4 id="_3-3-程序中引入-javaagent" tabindex="-1"><a class="header-anchor" href="#_3-3-程序中引入-javaagent" aria-hidden="true">#</a> 3.3 程序中引入 javaagent</h4><p><strong>cn.bugstack.guide.idea.plugin.PerRun</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerRun</span> <span class="token keyword">extends</span> <span class="token class-name">JavaProgramPatcher</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">patchJavaParameters</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">RunProfile</span> configuration<span class="token punctuation">,</span> <span class="token class-name">JavaParameters</span> javaParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">RunConfiguration</span> runConfiguration <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RunConfiguration</span><span class="token punctuation">)</span> configuration<span class="token punctuation">;</span>
        <span class="token class-name">ParametersList</span> vmParametersList <span class="token operator">=</span> javaParameters<span class="token punctuation">.</span><span class="token function">getVMParametersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vmParametersList<span class="token punctuation">.</span><span class="token function">addParametersString</span><span class="token punctuation">(</span><span class="token string">&quot;-javaagent:&quot;</span> <span class="token operator">+</span> agentCoreJarPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vmParametersList<span class="token punctuation">.</span><span class="token function">addNotEmptyProperty</span><span class="token punctuation">(</span><span class="token string">&quot;guide-idea-plugin-probe.projectId&quot;</span><span class="token punctuation">,</span> runConfiguration<span class="token punctuation">.</span><span class="token function">getProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocationHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过继承 <code>JavaProgramPatcher</code> 类，实现 <code>patchJavaParameters</code> 方法，通过 configuration 属性来配置我们自己需要被加载的 <code>-javaagent</code> 包。</li><li>这样在通过 IDEA 已经安装此插件，运行代码的时候，就会执行到这个拦截和打印 SQL 的功能。</li></ul><h4 id="_3-4-plugin-xml-添加配置" tabindex="-1"><a class="header-anchor" href="#_3-4-plugin-xml-添加配置" aria-hidden="true">#</a> 3.4 plugin.xml 添加配置</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span> <span class="token attr-name">defaultExtensionNs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.intellij<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Add your extensions here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.programPatcher</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.guide.idea.plugin.PerRun<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>之后你还需要把开发好的加载类，配置到 <code>java.programPatcher</code> 这样就可以程序运行的时候，被加载到了。</li></ul><h2 id="四、测试验证" tabindex="-1"><a class="header-anchor" href="#四、测试验证" aria-hidden="true">#</a> 四、测试验证</h2><ul><li>准备好一个有数据库操作的工程，需要的是 JDBC，<em>如果是其他的，你需要自己扩展</em></li><li>启动插件后，打开你的工程，运行单元测试，查看打印区</li></ul><p><strong>启动插件</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-220117-8-03.png" alt=""></p><ul><li>如果你是新下载代码，那么可以在 probe-plugin -&gt; Tasks -&gt; intellij -&gt; runIde 中进行运行启动。</li></ul><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;谢飞机&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;北京.大兴区.亦庄经济开发区&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">55.593</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>test<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>infrastructure<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>UserDao</span><span class="token punctuation">.</span>update<span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">UPDATE</span> user <span class="token class-name">SET</span> name<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">,</span>address<span class="token operator">=</span><span class="token operator">?</span> <span class="token class-name">WHERE</span> id<span class="token operator">=</span><span class="token operator">?</span> 
<span class="token number">22</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">55.625</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>test<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>infrastructure<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>UserDao</span><span class="token punctuation">.</span>update<span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> 谢飞机<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">18</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 北京<span class="token punctuation">.</span>大兴区<span class="token punctuation">.</span>亦庄经济开发区<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>
数据库名称：<span class="token class-name">Mysql</span>
线程<span class="token constant">ID</span>：<span class="token number">1</span>
原始<span class="token constant">SQL</span>：
<span class="token constant">UPDATE</span> user <span class="token class-name">SET</span> name<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">,</span>address<span class="token operator">=</span><span class="token operator">?</span>
        <span class="token class-name">WHERE</span> id<span class="token operator">=</span><span class="token operator">?</span>
替换<span class="token constant">SQL</span>：
<span class="token constant">UPDATE</span> user <span class="token class-name">SET</span> name<span class="token operator">=</span><span class="token char">&#39;谢飞机&#39;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>address<span class="token operator">=</span>&#39;北京<span class="token punctuation">.</span>大兴区<span class="token punctuation">.</span>亦庄经济开发区&#39;
        <span class="token class-name">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过测试结果可以看到，我们可以获取到直接拿去测试验证的 SQL 语句了，就不用在复制带问号的 SQL 还得修改后测试了。</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>首先我们是在本章节初步尝试使用多模块的方式来创建工程，这样的方式可以更加好维护各类一个工程下所需要的代码模块。<em>你也可以尝试使用 gradle 创建多模块工程</em></li><li>对于字节码插桩增强的使用方式，本篇只是一个介绍，这项技术还可以运用到更多的场景，开发出各种提升研发效率的工具。</li><li>了解额外的 Jar 包是怎么加载到工程的，以及如何通过配置的方式让 <code>javaagent</code> 引入自己开发好的探针组件。</li></ul>`,65);function b(g,h){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/Agy6c1kx9LIhs_4PqJlNNw"),t(a)])]),v])}const q=p(i,[["render",b],["__file","2022-01-17-《IntelliJ IDEA chajiankaifa》di8jie：zaichajianzhongyinrutanzhen，jiyuzijiemachazhuanghuoquzhixingSQL.html.vue"]]);export{q as default};
