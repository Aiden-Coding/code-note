import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"方案设计-基于idea插件开发和字节码插桩技术-实现研发交付质量自动分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#方案设计-基于idea插件开发和字节码插桩技术-实现研发交付质量自动分析","aria-hidden":"true"},"#"),s(" 方案设计：基于IDEA插件开发和字节码插桩技术，实现研发交付质量自动分析")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/LHCorPJ6nbzG_4JB8HKKZg",target:"_blank",rel:"noopener noreferrer"},v=p(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>如何保证代码质量？</code></p><p><img src="https://bugstack.cn/assets/images/2020/all-23-1.png" alt=""></p><p>业务提需求，产品定方案，研发做实现，测试验流程。四种角色的相互配合是确保一个需求上线的必备条件。在整个需求的交付质量级别划分中，研发与测试是非常重的一环，如果研发提测的代码质量不高，就会出现不同级别的修BUG、返工甚至重做的风险。</p><p><strong>那么</strong>，怎么来提高代码质量呢？一般我们都会要求研发在开发代码的过程中编写单元测试，验证自己的代码逻辑。如果最终单元测试覆盖度不足，可以由测试拒绝研发提测。</p><p><strong>但是</strong>，整个需求实现的代码是在全部开发完成后提测的，也就是临近上线的最后一环，大家才知道某个研发的某个功能域的实现是否具备提测条件。如果这个时候代码质量不高，那么接下来就是项目风险的时候。<code>压测试时间</code>、<code>调上线时间</code>，总之有病拖着最后成大病了！</p><p><strong>当然</strong>，你可以在项目开发期间定期排查代码，或者在日会进度反馈等等手段。可这样需要耗费大量时间1拖1的开发排查方式很难满足复杂流程的较大型项目开发，而且对于项目风险把控也是不可预估的。</p><p><img src="https://bugstack.cn/assets/images/2020/all-23-2.png" alt=""></p><p><strong>所以</strong>，我们希望采集研发在开发过程中的执行动作，把风险判断提前。实际操作举例就是，<code>当你开发完成一个接口，开始测试运行时</code>，我们的插件就可以采集到这个接口的全部信息，包括：接口名称、入参类型和内容、出参类型和内容、异常信息、调用关系链等。而再把这些信息汇总提交到服务端，生成本次需求代码分支下的全部接口动作，以及各系统间的关系链路，并附带随时生成最新的接口文档和一键测试验证功能。后期测试人员介入时就可以参考研发在编码过程中的全部测试用例，也可以查看整个功能的覆盖程度，此外测试人员测试过程中的数据也会被保留下。现在拥有这些数据信息以后，就可以完整的生成一套研发测试质量交付全览图，让整个工程开发交付质量评估透明化。</p><p>接下来我们就按照以上的描述性内容，实践开发一个案例体会下。<em>走起！</em></p><h2 id="二、技术实现准备" tabindex="-1"><a class="header-anchor" href="#二、技术实现准备" aria-hidden="true">#</a> 二、技术实现准备</h2><ol><li>字节码插桩，因为我们需要采集到接口执行信息，那么就需要使用字节码插桩组件给接口方法增强。这个实现有点类似谷歌的Dapper，大规模分布式架构的非入侵监控。只不过我们需要采集的描述性信息更多。关于字节码插桩，可以了解ASM、Javassist、Byte-Buddy，它们都可以做此项工作。</li><li>IDEA 插件开发，因为我们需要在研发人员开发过程中进行采集，也不破坏研发的操作习惯。那么最好的方式就是嵌入到<code>启动运行</code>中，只要在开发过程中有运行代码的动作，就采集相应的接口信息。</li><li>最后就是数据的传输和处理，传输可以使用MQ或者直接用Netty。而处理数据的过程会相对比较复杂，在这个过程需要分析出有价值的数据，同类的数据，合并一条执行链路的数据，以及生成相关的接口文档和工程服务地图。</li></ol><h2 id="三、对字节码插桩" tabindex="-1"><a class="header-anchor" href="#三、对字节码插桩" aria-hidden="true">#</a> 三、对字节码插桩</h2><p>这里我们使用的字节码插桩组件是 <code>Byte-buddy</code>，它是一个代码生成和操作库，用于在 <code>Java</code> 应用程序运行时创建和修改 <code>Java</code> 类，而无需编译器的帮助。除了 <code>Java</code> 类库附带的代码生成实用程序外，<code>Byte Buddy</code> 还允许创建任意类，并且不限于实现用于创建运行时代理的接口。此外，<code>Byte Buddy</code> 提供了一种方便的 API，可以使用 <code>Java</code> 代理或在构建过程中手动更改类。</p><ul><li>无需理解字节码指令，即可使用简单的 API 就能很容易操作字节码，控制类和方法。</li><li>已支持Java 11，库轻量，仅取决于Java字节代码解析器库ASM的访问者API，它本身不需要任何其他依赖项。</li><li>比起JDK动态代理、cglib、Javassist，Byte Buddy在性能上具有一定的优势。</li></ul><h3 id="_1-方法入口" tabindex="-1"><a class="header-anchor" href="#_1-方法入口" aria-hidden="true">#</a> 1. 方法入口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AgentBuilder<span class="token punctuation">.</span>Transformer</span> transformer <span class="token operator">=</span> <span class="token punctuation">(</span>builder<span class="token punctuation">,</span> typeDescription<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> javaModule<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder
                <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 拦截任意方法</span>
                <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">MethodDelegation</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">MonitorMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">AgentBuilder
            <span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">nameStartsWith</span><span class="token punctuation">(</span>agentArgs<span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">installOn</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你接触过 Javaagent 开发，那么对于 premain 会比较熟悉。如果不清楚你可以把它理解为，它是程序启动的时的方法入口，你可以从这个入口中拦截到你需要的方法，之后对它进行字节码增强。其实也就是动态写代码，在方法中添加你的代码，来收集方法信息。</p><h3 id="_2-采集信息" tabindex="-1"><a class="header-anchor" href="#_2-采集信息" aria-hidden="true">#</a> 2. 采集信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RuntimeType</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Origin</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@SuperCall</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">,</span> <span class="token annotation punctuation">@AllArguments</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> resObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        resObj <span class="token operator">=</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resObj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法名称：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参个数：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参 Idx：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 类型：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 内容：&quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参类型：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参结果：&quot;</span> <span class="token operator">+</span> resObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法耗时：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个就是使用 Byte-Buddy 可以采集的信息，你可以通过注解入参，获取到一个方法的全部信息。方法名称、入参个数、入参类型和内容、出参类型和结果以及还能计算方法执行耗时。</p><h2 id="四、idea-插件开发" tabindex="-1"><a class="header-anchor" href="#四、idea-插件开发" aria-hidden="true">#</a> 四、IDEA 插件开发</h2>`,23),g={href:"https://plugins.jetbrains.com/docs/intellij/gradle-build-system.html?from=jetbrains.org",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>此处演示案例关于插件开发的内容比较简单，主要是继承 <code>com.intellij.execution.impl.DefaultJavaProgramRunner</code>，Override <code>doExecute</code> 方法，添加自己需要的内容即可。</p><p>这部分添加的内容核心就是在程序启动时添加我们的字节码插桩程序，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">RunContentDescriptor</span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">RunProfileState</span> state<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ExecutionEnvironment</span> env<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
    <span class="token class-name">JavaParameters</span> parameters <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JavaCommandLine</span><span class="token punctuation">)</span> state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJavaParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 信息获取</span>
    <span class="token class-name">PsiFile</span> psiFile <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getDataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">LangDataKeys</span><span class="token punctuation">.</span><span class="token constant">PSI_FILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> packageName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PsiJavaFileImpl</span><span class="token punctuation">)</span> psiFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加字节码插装</span>
    <span class="token class-name">ParametersList</span> parametersList <span class="token operator">=</span> parameters<span class="token punctuation">.</span><span class="token function">getVMParametersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    parametersList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;-javaagent:&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ProjectProbe.jar=&quot;</span> <span class="token operator">+</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doExecute</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处最核心的就是 <code>-javaagent</code> 把 <code>ProjectProbe.jar</code> 工程探针程序的Jar包加载进去。其他的就是一些关于 <code>PsiFile</code> API 的使用，感兴趣可以阅读官方文档中的介绍。</p><h2 id="五、效果演示" tabindex="-1"><a class="header-anchor" href="#五、效果演示" aria-hidden="true">#</a> 五、效果演示</h2><p><strong>安装插件</strong></p><p><img src="https://bugstack.cn/assets/images/2020/all-23-3.png" alt=""></p><ul><li>安装插件就和我们正常安装一样，不过目前这个插件在开发阶段，所以需要本地安装。</li></ul><p><strong>运行效果</strong></p><p><img src="https://bugstack.cn/assets/images/2020/all-23-4.png" alt=""></p><ul><li>上图就是运行效果的案例演示，我们把运行时接口的信息完整的输出到控制台。</li><li>在实际使用的过程中，会把这部分信息传回服务端，由服务端分析处理后，展示在页面上。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>基于IDEA插件和字节码插桩技术，能做的功能实现还有很多。本文仅仅是其中一种研发到测试痛点的解决方案，如果感兴趣可以一起深入研究。</li><li>当你看到这样的案例以后，希望能给你的是并不一定所有的技术点都是为了面试造火箭对话的。当你真的把它落地以后，才会懂的自己需要很多知识。</li><li>本文没有太过多的介绍插件开发和字节码技术，如果对字节码编程感兴趣，可以在公众号：<code>bugstack虫洞栈</code>，回复<code>字节码编程</code>。全书11万7千字，20个章节涵盖三个字节码框架(ASM、Javassist、Byte-budy)和JavaAgent使用并附带整套案例源码！</li></ul>`,13);function b(f,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/LHCorPJ6nbzG_4JB8HKKZg"),t(a)])]),v,n("p",null,[s("关于 IDEA 插件开发的知识内容较多，可以从GitHub搜索一些资料和查阅官方文档："),n("a",g,[s("https://plugins.jetbrains.com/docs/intellij/gradle-build-system.html?from=jetbrains.org"),t(a)])]),h])}const j=e(i,[["render",b],["__file","2021-02-04-jiyuIDEAchajiankaifahezijiemachazhuangjishu，shixianyanfajiaofuzhiliangzidongfenxi.html.vue"]]);export{j as default};
