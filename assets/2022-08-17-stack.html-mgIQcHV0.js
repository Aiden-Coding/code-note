import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"数据结构-堆栈-栈-stack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-堆栈-栈-stack","aria-hidden":"true"},"#"),s(" 数据结构：堆栈（栈）Stack")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/gyy8_mwI66FRIGJ9zgrUmA",target:"_blank",rel:"noopener noreferrer"},b=t('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>堆栈的历史</code></p><p>堆栈于 1946 年进入计算机科学文献，当时当时 Alan M. Turing 使用术语“bury”和“unbury”作为调用子程序和从子程序返回的一种方式。1945 年， Konrad Zuse 的 Z4 中已经实现了子程序。</p><p>慕尼黑工业大学的 Klaus Samelson 和 Friedrich L. Bauer 在 1955 年提出了堆栈的想法，并于 1957 年申请了专利。1988 年 3 月，其中在萨梅尔森去世时，鲍尔因发明堆栈原理而获得了 IEEE 计算机先锋奖。Charles Leonard Hamblin 在 1954 年上半年和Wilhelm Kämmerer [ de ] 在 1958 年独立开发了类似的概念。</p><h2 id="二、堆栈数据结构" tabindex="-1"><a class="header-anchor" href="#二、堆栈数据结构" aria-hidden="true">#</a> 二、堆栈数据结构</h2><p>在计算机科学中，堆栈是一种抽象数据类型，用作元素的集合，具有两个主要的操作；</p><ul><li>PUSH：将元素添加到集合</li><li>POP：删除最近添加但尚未删除的元素</li></ul><div align="center"><img src="https://bugstack.cn/images/article/algorithm/algorithms-220817-01.png?raw=true" width="500px"></div><p>堆栈是一种 LIFO（后进先出）的线性的数据结构，或者更抽象说是一种顺序集合，push 和 pop 操作只发生在结构的一端，称为栈顶。这种结构可以很容易地从堆栈顶部取出一个项目，而要到达堆栈更深处的一个项目可能需要先取出多个其他项目。例如；我们经常看到的浏览器访问记录，总是把最近记录展示给你。还包括：一摞书、一叠盘子、一脑瓜子生活琐事。</p>',10),v={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"Java 算法与数据结构",-1),g={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/stack",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="三、实现堆栈结构" tabindex="-1"><a class="header-anchor" href="#三、实现堆栈结构" aria-hidden="true">#</a> 三、实现堆栈结构</h2><p>当你真的有场景需要使用后进先出堆栈时，一定是不能使用 Java 提供的 Stack 的。因为这个工具类是在 JDK 1.0 阶段开发的，实现的特别粗糙，包括像 synchronized 锁也是直接加到方法上。同时 JDK Stack 类的注解也提醒，使用 ArrayDeque 替代；</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/algorithms-220817-02.png?raw=true" width="700px"></div><ul><li>Deque 接口及其实现提供了一组更完整和一致的 LIFO 堆栈操作，应优先使用此类。所以我们本章也是以 ArrayDeque 为原型做代码实现。</li><li>当小傅哥去翻看 ArrayDeque 时，发现这又是 Doug Lea 老爷子的作品，只要有这大神的存在，这份代码一定很多骚操作！</li></ul><h3 id="_1-arraydeque-介绍" tabindex="-1"><a class="header-anchor" href="#_1-arraydeque-介绍" aria-hidden="true">#</a> 1. ArrayDeque 介绍</h3><p>ArrayDeque 是一个基于数组实现的堆栈数据结构，在数据存放时元素通过二进制与运算获取对应的索引存放元素。当数组长度超过初始空间后，进行2的n次幂左移一位扩容，并将数组内容的元素按照分半分别进行迁移。<em>这块逻辑多一些，接下来的内容会以此进行讲解，同时在学习过程中可以在小傅哥提供的源码中完成断点调试，方便快速掌握。</em></p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/algorithms-220817-03.png?raw=true" width="600px"></div><ul><li>堆栈的数据结构是以2的次幂进行初始化，扩容时候为2的倍数。它之所这样是因为保证了在后续计算元素索引位置时，可以进行与运算。也就说 2的n次幂-1 得到的值是一个011111的范围，在与元素索引位置计算时候，找到两个值之间1的位置即可。</li><li>数据的压栈，压栈是一个在数组中倒放的方式，通过与运算得到索引值。当发生空间不足时扩容迁移数据，会有2次操作。一次是空间的前半段复制，另外一次是后半段复制。</li><li>最后在数据弹出时，按照空间的元素数量总数开始，同样通过与运算计算索引值。分为弹出队列中未发生迁移的数据，和已经完全迁移好的数据。<em>凡是迁移的数据，都是保证了一个顺序。</em></li><li>综上你可能还不是很理解这个数据结构的精妙设计和使用，接下来小傅哥再带着你从代码实现的角度来看下。</li></ul><h3 id="_2-添加元素" tabindex="-1"><a class="header-anchor" href="#_2-添加元素" aria-hidden="true">#</a> 2. 添加元素</h3><p><strong>源码详见</strong>：<code>cn.bugstack.algorithms.data.stack.ArrayDeque#push</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    elements<span class="token punctuation">[</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;push.idx head：{}&quot;</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span>
        <span class="token function">doubleCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/algorithms-220817-04.png?raw=true" width="600px"></div><ul><li>push 元素的过程相当于找到初始化数组长度的队尾，另外是扩容后从新的队尾开始依次添加元素。此时不用担心元素的输出，因为输出时是从扩容起始点开始输出元素。</li></ul><h3 id="_3-扩容空间" tabindex="-1"><a class="header-anchor" href="#_3-扩容空间" aria-hidden="true">#</a> 3. 扩容空间</h3><p><strong>源码详见</strong>：<code>cn.bugstack.algorithms.data.stack.ArrayDeque#doubleCapacity</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doubleCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span> head <span class="token operator">==</span> tail<span class="token punctuation">;</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> n <span class="token operator">-</span> p<span class="token punctuation">;</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Sorry, deque too big&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/*
     * src      - 源数组
     * srcPos   – 源数组中的起始位置
     * dest     - 目标数组
     * destPos  – 目标数据中的起始位置
     * length   – 要复制的数组元素的数量
     */</span>
    <span class="token comment">// 第一次拷贝元素：[2、1、4、3] 将数组中的扩容后一半元素拷贝到新数组0开始往后的位置。拷贝4、3</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> p<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第二次拷贝元素：[2、1、4、3] 将数组中的前面一半数量的元素，拷贝到新数组后一半开始的位置往后。拷贝2、1</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    elements <span class="token operator">=</span> a<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    tail <span class="token operator">=</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/algorithms-220817-05.png?raw=true" width="600px"></div><ul><li>空间扩容以2的倍数进行操作，以此保证2的幂等。</li><li>System.arraycopy 是操作数据迁移的本地方法，从源数组的某个指定位置，把元素迁移到新数组的指定位置和指定个数个元素。</li><li>另外是数据迁移，以 [2、1、4、3] 举例； <ul><li>第一次拷贝元素：[2、1、4、3] 将数组中的扩容后一半元素拷贝到新数组0开始往后的位置。拷贝4、3</li><li>第二次拷贝元素：[2、1、4、3] 将数组中的前面一半数量的元素，拷贝到新数组后一半开始的位置往后。拷贝2、1</li></ul></li></ul><h3 id="_4-弹出元素" tabindex="-1"><a class="header-anchor" href="#_4-弹出元素" aria-hidden="true">#</a> 4. 弹出元素</h3><p><strong>源码详见</strong>：<code>cn.bugstack.algorithms.data.stack.ArrayDeque#pop</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">E</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elements<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    elements<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;pop.idx {} = {} &amp; {}&quot;</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/algorithms-220817-06.png?raw=true" width="600px"></div><ul><li>按照索引的计算，以此是弹出索引为：6、7、0、1、2、3、4 对应的元素。head 的值从扩容的长度添加元素后逐步减小，所以当前最开始弹出的元素是6索引对应的值。<em>读者可以尝试在添加一个元素，进行验证</em></li></ul><h2 id="四、堆栈功能测试" tabindex="-1"><a class="header-anchor" href="#四、堆栈功能测试" aria-hidden="true">#</a> 四、堆栈功能测试</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;弹出元素：{}&quot;</span><span class="token punctuation">,</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;弹出元素：{}&quot;</span><span class="token punctuation">,</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;弹出元素：{}&quot;</span><span class="token punctuation">,</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;弹出元素：{}&quot;</span><span class="token punctuation">,</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;弹出元素：{}&quot;</span><span class="token punctuation">,</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;弹出元素：{}&quot;</span><span class="token punctuation">,</span> deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.407</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> push<span class="token punctuation">.</span>idx head：<span class="token number">1</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.412</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> push<span class="token punctuation">.</span>idx head：<span class="token number">0</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.412</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> push<span class="token punctuation">.</span>idx head：<span class="token number">3</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.412</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> push<span class="token punctuation">.</span>idx head：<span class="token number">2</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> push<span class="token punctuation">.</span>idx head：<span class="token number">7</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> push<span class="token punctuation">.</span>idx head：<span class="token number">6</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> push<span class="token punctuation">.</span>idx head：<span class="token number">5</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> pop<span class="token punctuation">.</span>idx <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">110</span> <span class="token operator">&amp;</span> <span class="token number">111</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AlgorithmsTest</span> <span class="token operator">-</span> 弹出元素：<span class="token number">7</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> pop<span class="token punctuation">.</span>idx <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">111</span> <span class="token operator">&amp;</span> <span class="token number">111</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AlgorithmsTest</span> <span class="token operator">-</span> 弹出元素：<span class="token number">6</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> pop<span class="token punctuation">.</span>idx <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">&amp;</span> <span class="token number">111</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AlgorithmsTest</span> <span class="token operator">-</span> 弹出元素：<span class="token number">5</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> pop<span class="token punctuation">.</span>idx <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">111</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AlgorithmsTest</span> <span class="token operator">-</span> 弹出元素：<span class="token number">4</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> pop<span class="token punctuation">.</span>idx <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">&amp;</span> <span class="token number">111</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AlgorithmsTest</span> <span class="token operator">-</span> 弹出元素：<span class="token number">3</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stack<span class="token punctuation">.</span></span>ArrayDeque</span> <span class="token operator">-</span> pop<span class="token punctuation">.</span>idx <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">11</span> <span class="token operator">&amp;</span> <span class="token number">111</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">49.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AlgorithmsTest</span> <span class="token operator">-</span> 弹出元素：<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果中可以看到小傅哥添加的日志，打印出所应的添加元素、弹出元素的过程。读者在学习的过程中也可以添加一些额外的日志信息。</li><li><code>Integer.toBinaryString()</code> 是一个用于打印二进制结果的操作，方便查看二进制的计算。</li></ul><h2 id="五、常见面试问题" tabindex="-1"><a class="header-anchor" href="#五、常见面试问题" aria-hidden="true">#</a> 五、常见面试问题</h2><ul><li>堆栈的使用场景？</li><li>为什么不是用 Stack 类？</li><li>ArrayDeque 是基于什么实现的？</li><li>ArrayDeque 数据结构使用过程叙述。</li><li>ArrayDeque 为什么要初始化2的n次幂个长度？</li></ul><h2 id="六、优秀作业" tabindex="-1"><a class="header-anchor" href="#六、优秀作业" aria-hidden="true">#</a> 六、优秀作业</h2>`,31),f={href:"https://t.zsxq.com/06JeMzrFa",target:"_blank",rel:"noopener noreferrer"};function q(w,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),p(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/gyy8_mwI66FRIGJ9zgrUmA"),p(a)])]),b,n("ul",null,[n("li",null,[s("源码地址："),n("a",v,[s("https://github.com/fuzhengwei/java-algorithms"),p(a)]),s(" - "),h]),n("li",null,[s("本章源码："),n("a",g,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/stack"),p(a)])])]),y,n("ul",null,[n("li",null,[n("a",f,[s("教科书级别栈的数据结构图稿梳理 @Chin"),p(a)])])])])}const A=e(u,[["render",q],["__file","2022-08-17-stack.html.vue"]]);export{A as default};
