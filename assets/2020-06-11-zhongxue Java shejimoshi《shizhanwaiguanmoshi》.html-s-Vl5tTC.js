import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战外观模式「基于springboot开发门面模式中间件-统一控制接口白名单场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战外观模式「基于springboot开发门面模式中间件-统一控制接口白名单场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战外观模式「基于SpringBoot开发门面模式中间件，统一控制接口白名单场景」")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=640500387&bvid=BV1JY4y1H711&cid=572131478&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=e('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>你感受到的容易，一定有人为你承担不容易</code></p><p>这句话更像是描述生活的，许许多多的磕磕绊绊总有人为你提供躲雨的屋檐和避风的港湾。其实编程开发的团队中也一样有人只负责CRUD中的简单调用，去使用团队中高级程序员开发出来的核心服务和接口。这样的编程开发对于初期刚进入程序员行业的小伙伴来说锻炼锻炼还是不错的，但随着开发的日子越来越久一直做这样的事情就很难得到成长，也想努力的去做一些更有难度的承担，以此来增强个人的技术能力。</p><p><code>没有最好的编程语言，语言只是工具</code></p><p>刀枪棍棒、斧钺钩叉、包子油条、盒子麻花，是<strong>语言</strong>。五郎八卦棍、十二路弹腿、洪家铁线拳，是<strong>设计</strong>。记得叶问里有一句台词是：<code>金山找：今天我北方拳术，输给你南方拳术了。叶问：你错了，不是南北拳的问题，是你的问题。</code>所以当你编程开发写的久了，就不会再特别在意用的语言，而是为目标服务，用最好的设计能力也就是编程的智慧做出做最完美的服务。这也就是编程人员的价值所在！</p><p><code>设计与反设计以及过渡设计</code></p><p>设计模式是解决程序中不合理、不易于扩展、不易于维护的问题，也是干掉大部分<code>ifelse</code>的利器，在我们常用的框架中基本都会用到大量的设计模式来构建组件，这样也能方便框架的升级和功能的扩展。但！如果不能合理的设计以及乱用设计模式，会导致整个编程变得更加复杂难维护，也就是我们常说的；<code>反设计</code>、<code>过渡设计</code>。而这部分设计能力也是从实践的项目中获取的经验，不断的改造优化摸索出的最合理的方式，应对当前的服务体量。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("li",null,"SpringBoot 2.1.2.RELEASE",-1),f=n("strong",null,"公众号",-1),_={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"bugstack虫洞栈",-1),q=n("code",null,"源码下载",-1),w=e('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-10-00</td><td>场景模拟工程；模拟一个提供接口服务的SpringBoot工程</td></tr><tr><td>itstack-demo-design-10-01</td><td>使用一坨代码实现业务需求</td></tr><tr><td>itstack-demo-design-10-02</td><td>通过设计模式开发为中间件，包装通用型核心逻辑</td></tr></tbody></table><h2 id="三、外观模式介绍" tabindex="-1"><a class="header-anchor" href="#三、外观模式介绍" aria-hidden="true">#</a> 三、外观模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-10-01.png" alt="外观模式，图片来自 refactoringguru.cn"></p>',3),j={href:"https://refactoringguru.cn/design-patterns/facade",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>外观模式也叫门面模式，主要解决的是降低调用方的使用接口的复杂逻辑组合。这样调用方与实际的接口提供方提供方提供了一个中间层，用于包装逻辑提供API接口。有些时候外观模式也被用在中间件层，对服务中的通用性复杂逻辑进行中间件层包装，让使用方可以只关心业务开发。</p><p><strong>那么这样的模式在我们的所见产品功能中也经常遇到</strong>，就像几年前我们注册一个网站时候往往要添加很多信息，包括；姓名、昵称、手机号、QQ、邮箱、住址、单身等等，但现在注册成为一个网站的用户只需要一步即可，无论是手机号还是微信也都提供了这样的登录服务。而对于服务端应用开发来说以前是提供了一个整套的接口，现在注册的时候并没有这些信息，那么服务端就需要进行接口包装，在前端调用注册的时候服务端获取相应的用户信息(从各个渠道)，如果获取不到会让用户后续进行补全(营销补全信息给奖励)，以此来拉动用户的注册量和活跃度。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-10-02.png" alt="场景模拟；所有服务添加白名单校验"></p><p><strong>在本案例中我们模拟一个将所有服务接口添加白名单的场景</strong></p><p>在项目不断壮大发展的路上，每一次发版上线都需要进行测试，而这部分测试验证一般会进行白名单开量或者切量的方式进行验证。那么如果在每一个接口中都添加这样的逻辑，就会非常麻烦且不易维护。另外这是一类具备通用逻辑的共性需求，非常适合开发成组件，以此来治理服务，让研发人员更多的关心业务功能开发。</p><p>一般情况下对于外观模式的使用通常是用在复杂或多个接口进行包装统一对外提供服务上，此种使用方式也相对简单在我们平常的业务开发中也是最常用的。<em>你可能经常听到把这两个接口包装一下</em>，但在本例子中我们把这种设计思路放到中间件层，让服务变得可以统一控制。</p><h3 id="_1-场景模拟工程" tabindex="-1"><a class="header-anchor" href="#_1-场景模拟工程" aria-hidden="true">#</a> 1. 场景模拟工程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">00</span>
└── src
    ├── main
    │   ├── java
    │   │   └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
    │   │       ├── domain
    │   │       │	└── <span class="token class-name">UserInfo</span><span class="token punctuation">.</span>java
    │   │       ├── web	
    │   │       │	└── <span class="token class-name">HelloWorldController</span><span class="token punctuation">.</span>java
    │   │       └── <span class="token class-name">HelloWorldApplication</span><span class="token punctuation">.</span>java
    │   └── resources	
    │       └── application<span class="token punctuation">.</span>yml	
    └── test
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是一个<code>SpringBoot</code>的<code>HelloWorld</code>工程，在工程中提供了查询用户信息的接口<code>HelloWorldController.queryUserInfo</code>，为后续扩展此接口的白名单过滤做准备。</li></ul><h3 id="_2-场景简述" tabindex="-1"><a class="header-anchor" href="#_2-场景简述" aria-hidden="true">#</a> 2. 场景简述</h3><h4 id="_2-1-定义基础查询接口" tabindex="-1"><a class="header-anchor" href="#_2-1-定义基础查询接口" aria-hidden="true">#</a> 2.1 定义基础查询接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * key：需要从入参取值的属性字段，如果是对象则从对象中取值，如果是单个值则直接使用
     * returnJson：预设拦截时返回值，是返回对象的Json
     *
     * http://localhost:8080/api/queryUserInfo?userId=1001
     * http://localhost:8080/api/queryUserInfo?userId=小团团
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/api/queryUserInfo&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token string">&quot;虫虫:&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;天津市南开区旮旯胡同100号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里提供了一个基本的查询服务，通过入参<code>userId</code>，查询用户信息。后续就需要在这里扩展白名单，只有指定用户才可以查询，其他用户不能查询。</li></ul><h4 id="_2-2-设置application启动类" tabindex="-1"><a class="header-anchor" href="#_2-2-设置application启动类" aria-hidden="true">#</a> 2.2 设置Application启动类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloWorldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里是通用的<code>SpringBoot</code>启动类。需要添加的是一个配置注解<code>@Configuration</code>，为了后续可以读取白名单配置。</li></ul><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p><code>一般对于此种场景最简单的做法就是直接修改代码</code></p><p>累加<code>if</code>块几乎是实现需求最快也是最慢的方式，<strong>快</strong>是修改当前内容很快，<strong>慢</strong>是如果同类的内容几百个也都需要如此修改扩展和维护会越来越慢。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                └── <span class="token class-name">HelloWorldController</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上的实现是模拟一个Api接口类，在里面添加白名单功能，但类似此类的接口会有很多都需要修改，所以这也是不推荐使用此种方式的重要原因。</li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 做白名单拦截</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token string">&quot;1111&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;非白名单可访问用户拦截！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token string">&quot;虫虫:&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;天津市南开区旮旯胡同100号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这里白名单的代码占据了一大块，但它又不是业务中的逻辑，而是因为我们上线过程中需要做的开量前测试验证。</li><li>如果你日常对待此类需求经常是这样开发，那么可以按照此设计模式进行优化你的处理方式，让后续的扩展和摘除更加容易。</li></ul><h2 id="六、外观模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、外观模式重构代码" aria-hidden="true">#</a> 六、外观模式重构代码</h2><p><code>接下来使用外观器模式来进行代码优化，也算是一次很小的重构。</code></p><p>这次重构的核心是使用外观模式也可以说门面模式，结合<code>SpringBoot</code>中的自定义<code>starter</code>中间件开发的方式，统一处理所有需要白名单的地方。</p><p>后续接下来的实现中，会涉及的知识；</p><ol><li>SpringBoot的starter中间件开发方式。</li><li>面向切面编程和自定义注解的使用。</li><li>外部自定义配置信息的透传，SpringBoot与Spring不同，对于此类方式获取白名单配置存在差异。</li></ol><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    ├── main
    │   ├── java
    │   │   └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>door
    │   │       ├── annotation
    │   │       │	└── <span class="token class-name">DoDoor</span><span class="token punctuation">.</span>java	
    │   │       ├── config
    │   │       │	├── <span class="token class-name">StarterAutoConfigure</span><span class="token punctuation">.</span>java
    │   │       │	├── <span class="token class-name">StarterService</span><span class="token punctuation">.</span>java
    │   │       │	└── <span class="token class-name">StarterServiceProperties</span><span class="token punctuation">.</span>java
    │   │       └── <span class="token class-name">DoJoinPoint</span><span class="token punctuation">.</span>java
    │   └── resources	
    │       └── <span class="token constant">META_INF</span>
    │           └── spring<span class="token punctuation">.</span>factories
    └── test
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>门面模式模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-10-03.png" alt="门面模式模型结构"></p><ul><li>以上是外观模式的中间件实现思路，右侧是为了获取配置文件，左侧是对于切面的处理。</li><li>门面模式可以是对接口的包装提供出接口服务，也可以是对逻辑的包装通过自定义注解对接口提供服务能力。</li></ul><h3 id="_2-代码实现-1" tabindex="-1"><a class="header-anchor" href="#_2-代码实现-1" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-配置服务类" tabindex="-1"><a class="header-anchor" href="#_2-1-配置服务类" aria-hidden="true">#</a> 2.1 配置服务类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userStr<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">StarterService</span><span class="token punctuation">(</span><span class="token class-name">String</span> userStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userStr <span class="token operator">=</span> userStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> separatorChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userStr<span class="token punctuation">,</span> separatorChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上类的内容较简单只是为了获取配置信息。</li></ul><h4 id="_2-2-配置类注解定义" tabindex="-1"><a class="header-anchor" href="#_2-2-配置类注解定义" aria-hidden="true">#</a> 2.2 配置类注解定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;itstack.door&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterServiceProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userStr<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> userStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userStr <span class="token operator">=</span> userStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用于定义好后续在 <code>application.yml</code> 中添加 <code>itstack.door</code> 的配置信息。</li></ul><h4 id="_2-3-自定义配置类信息获取" tabindex="-1"><a class="header-anchor" href="#_2-3-自定义配置类信息获取" aria-hidden="true">#</a> 2.3 自定义配置类信息获取</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">StarterService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">StarterServiceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterAutoConfigure</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StarterServiceProperties</span> properties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;itstack.door&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">StarterService</span> <span class="token function">starterService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StarterService</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getUserStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上代码是对配置的获取操作，主要是对注解的定义；<code>@Configuration</code>、<code>@ConditionalOnClass</code>、<code>@EnableConfigurationProperties</code>，这一部分主要是与SpringBoot的结合使用。</li></ul><h4 id="_2-4-切面注解定义" tabindex="-1"><a class="header-anchor" href="#_2-4-切面注解定义" aria-hidden="true">#</a> 2.4 切面注解定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DoDoor</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">returnJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义了外观模式门面注解，后续就是此注解添加到需要扩展白名单的方法上。</li><li>这里提供了两个入参，<strong>key</strong>：获取某个字段例如用户ID、<strong>returnJson</strong>：确定白名单拦截后返回的具体内容。</li></ul><h4 id="_2-5-白名单切面逻辑" tabindex="-1"><a class="header-anchor" href="#_2-5-白名单切面逻辑" aria-hidden="true">#</a> 2.5 白名单切面逻辑</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoJoinPoint</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">DoJoinPoint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StarterService</span> starterService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(org.itstack.demo.design.door.annotation.DoDoor)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;aopPoint()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doRouter</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取内容</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token function">getMethod</span><span class="token punctuation">(</span>jp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DoDoor</span> door <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">DoDoor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取字段值</span>
        <span class="token class-name">String</span> keyValue <span class="token operator">=</span> <span class="token function">getFiledValue</span><span class="token punctuation">(</span>door<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;itstack door handler method：{} value：{}&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> keyValue <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keyValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//配置内容</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> starterService<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//白名单过滤</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> split<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>keyValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//拦截</span>
        <span class="token keyword">return</span> <span class="token function">returnObject</span><span class="token punctuation">(</span>door<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Method</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Signature</span> sig <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MethodSignature</span> methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> sig<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span>jp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodSignature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodSignature<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//返回对象</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">returnObject</span><span class="token punctuation">(</span><span class="token class-name">DoDoor</span> doGate<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> returnJson <span class="token operator">=</span> doGate<span class="token punctuation">.</span><span class="token function">returnJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>returnJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> returnType<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>returnJson<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//获取属性值</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getFiledValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> filed<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> filedValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> filedValue <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filedValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    filedValue <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> filed<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> filedValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里包括的内容较多，核心逻辑主要是；<code>Object doRouter(ProceedingJoinPoint jp)</code>，接下来我们分别介绍。</li></ul><p><strong>@Pointcut(&quot;@annotation(org.itstack.demo.design.door.annotation.DoDoor)&quot;)</strong></p><p>定义切面，这里采用的是注解路径，也就是所有的加入这个注解的方法都会被切面进行管理。</p><p><strong>getFiledValue</strong></p><p>获取指定key也就是获取入参中的某个属性，这里主要是获取用户ID，通过ID进行拦截校验。</p><p><strong>returnObject</strong></p><p>返回拦截后的转换对象，也就是说当非白名单用户访问时则返回一些提示信息。</p><p><strong>doRouter</strong></p><p>切面核心逻辑，这一部分主要是判断当前访问的用户ID是否白名单用户，如果是则放行<code>jp.proceed();</code>，否则返回自定义的拦截提示信息。</p><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><p>这里的测试我们会在工程：<code>itstack-demo-design-10-00</code>中进行操作，通过引入jar包，配置注解的方式进行验证。</p><h4 id="_3-1-引入中间件pom配置" tabindex="-1"><a class="header-anchor" href="#_3-1-引入中间件pom配置" aria-hidden="true">#</a> 3.1 引入中间件POM配置</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打包中间件工程，给外部提供jar包服务</li></ul><h4 id="_3-2-配置application-yml" tabindex="-1"><a class="header-anchor" href="#_3-2-配置application-yml" aria-hidden="true">#</a> 3.2 配置application.yml</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 自定义中间件配置
itstack<span class="token operator">:</span>
  door<span class="token operator">:</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span>
    userStr<span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>aaaa<span class="token punctuation">,</span>ccc #白名单用户<span class="token constant">ID</span>，多个逗号隔开
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里主要是加入了白名单的开关和白名单的用户ID，逗号隔开。</li></ul><h4 id="_3-3-在controller中添加自定义注解" tabindex="-1"><a class="header-anchor" href="#_3-3-在controller中添加自定义注解" aria-hidden="true">#</a> 3.3 在Controller中添加自定义注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * http://localhost:8080/api/queryUserInfo?userId=1001
 * http://localhost:8080/api/queryUserInfo?userId=小团团
 */</span>
<span class="token annotation punctuation">@DoDoor</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> returnJson <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;code\\&quot;:\\&quot;1111\\&quot;,\\&quot;info\\&quot;:\\&quot;非白名单可访问用户拦截！\\&quot;}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/api/queryUserInfo&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token string">&quot;虫虫:&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;天津市南开区旮旯胡同100号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里核心的内容主要是自定义的注解的添加<code>@DoDoor</code>，也就是我们的外观模式中间件化实现。</li><li>key：需要从入参取值的属性字段，如果是对象则从对象中取值，如果是单个值则直接使用。</li><li>returnJson：预设拦截时返回值，是返回对象的Json。</li></ul><h4 id="_3-4-启动springboot" tabindex="-1"><a class="header-anchor" href="#_3-4-启动springboot" aria-hidden="true">#</a> 3.4 启动SpringBoot</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token punctuation">.</span>   ____          _            __ _ _
 <span class="token operator">/</span>\\\\ <span class="token operator">/</span> ___&#39;_ __ _ <span class="token function">_</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span>_ __  __ _ \\ \\ \\ \\
<span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span>\\___ <span class="token operator">|</span> <span class="token char">&#39;_ | &#39;</span>_<span class="token operator">|</span> <span class="token operator">|</span> &#39;_ \\<span class="token operator">/</span> _\` <span class="token operator">|</span> \\ \\ \\ \\
 \\\\<span class="token operator">/</span>  ___<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
  &#39;  <span class="token operator">|</span>____<span class="token operator">|</span> <span class="token punctuation">.</span>__<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_\\__<span class="token punctuation">,</span> <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span>
 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>_<span class="token operator">|=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>___<span class="token operator">/=</span><span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span>
 <span class="token operator">::</span> <span class="token class-name">Spring</span> <span class="token class-name">Boot</span> <span class="token operator">::</span>        <span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token punctuation">)</span>

<span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">55.451</span>  <span class="token constant">WARN</span> <span class="token number">65228</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> ion$<span class="token class-name">DefaultTemplateResolverConfiguration</span> <span class="token operator">:</span> <span class="token class-name">Cannot</span> find template location<span class="token operator">:</span> classpath<span class="token operator">:</span><span class="token operator">/</span>templates<span class="token operator">/</span> <span class="token punctuation">(</span>please add some templates or check your <span class="token class-name">Thymeleaf</span> configuration<span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">55.531</span>  <span class="token constant">INFO</span> <span class="token number">65228</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>w<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span></span>TomcatWebServer</span>  <span class="token operator">:</span> <span class="token class-name">Tomcat</span> started on <span class="token function">port</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">(</span>http<span class="token punctuation">)</span> <span class="token keyword">with</span> <span class="token namespace">context</span> path &#39;&#39;
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">55.533</span>  <span class="token constant">INFO</span> <span class="token number">65228</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span></span>HelloWorldApplication</span>    <span class="token operator">:</span> <span class="token class-name">Started</span> <span class="token class-name">HelloWorldApplication</span> in <span class="token number">1.688</span> seconds <span class="token punctuation">(</span><span class="token constant">JVM</span> running <span class="token keyword">for</span> <span class="token number">2.934</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动正常，SpringBoot已经启动可以对外提供服务。</li></ul><h4 id="_3-5-访问接口接口测试" tabindex="-1"><a class="header-anchor" href="#_3-5-访问接口接口测试" aria-hidden="true">#</a> 3.5 访问接口接口测试</h4><p><strong>白名单用户访问</strong></p>`,76),I={href:"http://localhost:8080/api/queryUserInfo?userId=1001",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token string">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;0000&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;info&quot;</span><span class="token operator">:</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;虫虫:1001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;天津市南开区旮旯胡同100号&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>此时的测试结果正常，可以拿到接口数据。</li></ul><p><strong>非白名单用户访问</strong></p>`,3),C={href:"http://localhost:8080/api/queryUserInfo?userId=%E5%B0%8F%E5%9B%A2%E5%9B%A2",target:"_blank",rel:"noopener noreferrer"},D=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token string">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;1111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;info&quot;</span><span class="token operator">:</span><span class="token string">&quot;非白名单可访问用户拦截！&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;address&quot;</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>这次我们把<code>userId</code>换成<code>小团团</code>，此时返回的信息已经是被拦截的信息。而这个拦截信息正式我们自定义注解中的信息：<code>@DoDoor(key = &quot;userId&quot;, returnJson = &quot;{\\&quot;code\\&quot;:\\&quot;1111\\&quot;,\\&quot;info\\&quot;:\\&quot;非白名单可访问用户拦截！\\&quot;}&quot;)</code></li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>以上我们通过中间件的方式实现外观模式，这样的设计可以很好的增强代码的隔离性，以及复用性，不仅使用上非常灵活也降低了每一个系统都开发这样的服务带来的风险。</li><li>可能目前你看这只是非常简单的白名单控制，是否需要这样的处理。但往往一个小小的开始会影响着后续无限的扩展，实际的业务开发往往也要复杂的很多，不可能如此简单。因而使用设计模式来让代码结构更加干净整洁。</li><li>很多时候不是设计模式没有用，而是自己编程开发经验不足导致即使学了设计模式也很难驾驭。毕竟这些知识都是经过一些实际操作提炼出来的精华，但如果你可以按照本系列文章中的案例方式进行学习实操，还是可以增强这部分设计能力的。</li></ul>`,4);function P(U,A){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),t(a)])]),k,v,m,n("ol",null,[b,g,h,n("li",null,[s("涉及工程三个，可以通过关注"),f,s("："),n("a",_,[y,t(a)]),s("，回复"),q,s("获取(打开获取的链接，找到序号18)")])]),w,n("ul",null,[n("li",null,[s("图片来自："),n("a",j,[s("https://refactoringguru.cn/design-patterns/facade"),t(a)])])]),S,n("p",null,[n("a",I,[s("http://localhost:8080/api/queryUserInfo?userId=1001"),t(a)])]),x,n("p",null,[n("a",C,[s("http://localhost:8080/api/queryUserInfo?userId=小团团"),t(a)])]),D])}const E=p(i,[["render",P],["__file","2020-06-11-zhongxue Java shejimoshi《shizhanwaiguanmoshi》.html.vue"]]);export{E as default};
