const e=JSON.parse('{"key":"v-90e928fa","path":"/CodeGuide/md/bytecode/javassist/2020-04-29-zijiemabiancheng，Javassistpianwu《shiyongBytecodezhilingmashengchenghanyouzidingyizhujiedeleihefangfa》.html","title":"五、使用Bytecode指令码生成含有自定义注解的类和方法","lang":"zh-CN","frontmatter":{"category":"itstack-demo-agent","title":"五、使用Bytecode指令码生成含有自定义注解的类和方法","tagline":"by 付政委","tag":["itstack-demo-bytecode"],"excerpt":"到本章为止已经写了四篇关于字节码编程的内容，涉及了大部分的API方法。整体来说对 Javassist 已经有一个基本的使用认知。那么在 Javassist 中不仅提供了高级 API 用于创建和修改类、方法，还提供了低级 API 控制字节码指令的方式进行操作类、方法。","lock":"need"},"headers":[{"level":2,"title":"一、前言","slug":"一、前言","link":"#一、前言","children":[]},{"level":2,"title":"二、开发环境","slug":"二、开发环境","link":"#二、开发环境","children":[]},{"level":2,"title":"三、案例目标","slug":"三、案例目标","link":"#三、案例目标","children":[]},{"level":2,"title":"四、技术实现","slug":"四、技术实现","link":"#四、技术实现","children":[{"level":3,"title":"1. 读取类自定义注解","slug":"_1-读取类自定义注解","link":"#_1-读取类自定义注解","children":[]},{"level":3,"title":"2. 读取方法的自定义注解","slug":"_2-读取方法的自定义注解","link":"#_2-读取方法的自定义注解","children":[]},{"level":3,"title":"3. 读取方法指令码","slug":"_3-读取方法指令码","link":"#_3-读取方法指令码","children":[]},{"level":3,"title":"4. 通过指令修改方法","slug":"_4-通过指令修改方法","link":"#_4-通过指令修改方法","children":[]},{"level":3,"title":"5. 使用指令码生成方法","slug":"_5-使用指令码生成方法","link":"#_5-使用指令码生成方法","children":[]}]},{"level":2,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"createdTime":1704301416000,"updatedTime":1704373598000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":2}]},"filePathRelative":"CodeGuide/md/bytecode/javassist/2020-04-29-字节码编程，Javassist篇五《使用Bytecode指令码生成含有自定义注解的类和方法》.md"}');export{e as data};
