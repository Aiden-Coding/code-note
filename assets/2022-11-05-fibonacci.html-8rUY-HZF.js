import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《程序员数学-斐波那契》——-为什么不能用斐波那契散列-做数据库路由算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-斐波那契》——-为什么不能用斐波那契散列-做数据库路由算法","aria-hidden":"true"},"#"),s(" 《程序员数学：斐波那契》—— 为什么不能用斐波那契散列，做数据库路由算法？")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("h2",{id:"一、关于斐波那契",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、关于斐波那契","aria-hidden":"true"},"#"),s(" 一、关于斐波那契")],-1),h=n("p",null,[n("code",null,"斐波那契的历史")],-1),g={href:"https://en.wikipedia.org/wiki/Fibonacci_number#History",target:"_blank",rel:"noopener noreferrer"},f=p('<div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-01.png?raw=true" width="550px"></div><p>斐波那契数列可以由递归关系定义</p><p>F0 = 0，F1 = 1，Fn = Fn-1 + Fn-2</p><table><thead><tr><th style="text-align:center;">F0</th><th style="text-align:center;">F1</th><th style="text-align:center;">F2</th><th style="text-align:center;">F3</th><th style="text-align:center;">F4</th><th style="text-align:center;">F5</th><th style="text-align:center;">F6</th><th style="text-align:center;">F7</th><th style="text-align:center;">F8</th><th style="text-align:center;">F9</th><th style="text-align:center;">F10</th><th style="text-align:center;">F11</th><th style="text-align:center;">F12</th><th style="text-align:center;">F13</th><th style="text-align:center;">F14</th><th style="text-align:center;">F15</th><th style="text-align:center;">F16</th><th style="text-align:center;">F17</th><th style="text-align:center;">F18</th><th style="text-align:center;">F19</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">5</td><td style="text-align:center;">8</td><td style="text-align:center;">13</td><td style="text-align:center;">21</td><td style="text-align:center;">34</td><td style="text-align:center;">55</td><td style="text-align:center;">89</td><td style="text-align:center;">144</td><td style="text-align:center;">233</td><td style="text-align:center;">377</td><td style="text-align:center;">610</td><td style="text-align:center;">987</td><td style="text-align:center;">1597</td><td style="text-align:center;">2584</td><td style="text-align:center;">4181</td></tr></tbody></table><ul><li>从 F2 开始任意一位都是前两位之和。</li><li>从 F2 开始任意一位与前一位相比的比值，都无限趋近于 (√<em>5</em> - 1)/2 = 0.618 因此基于黄金分割的计算应用，也被称为斐波那契应用。</li></ul><p>那这个就是斐波那契的基本定义和特性，并且基于这样的特性在计算机科学中，斐波那契常用于；伪随机数生成、AVL二叉树、最大公约数、合并排序算法等。</p><p>而大部分程序员👨🏻‍💻包括小傅哥最开始意识到斐波那契的应用则来自于，Java 源码 ThreadLocal 中 HASH_INCREMENT = <code>0x61c88647</code> 这样一个常量的定义。因为这用作数据散列的特殊值 <code>0x61c88647</code> 就是基于黄金分割点计算得来的，公式：<code> (1L &lt;&lt; 32) - (long) ((1L &lt;&lt; 32) * (Math.sqrt(5) - 1))/2</code> 。</p>',7),w={href:"https://bugstack.cn/md/java/interview/2020-09-23-%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C%20%C2%B7%20%E7%AC%AC12%E7%AF%87%E3%80%8A%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%8CThreadLocal%20%E4%BD%A0%E8%A6%81%E8%BF%99%E4%B9%88%E9%97%AE%EF%BC%8C%E6%88%91%E5%B0%B1%E6%8C%82%E4%BA%86%EF%BC%81%E3%80%8B.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://en.wikipedia.org/wiki/Avalanche_effect",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"严格的雪崩标准（SAC）",-1),x=n("h2",{id:"二、斐波那契计算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、斐波那契计算","aria-hidden":"true"},"#"),s(" 二、斐波那契计算")],-1),I={href:"https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},F=p(`<h3 id="_1-循环计算" tabindex="-1"><a class="header-anchor" href="#_1-循环计算" aria-hidden="true">#</a> 1. 循环计算</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> currentVal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> previousVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> iterationsCounter <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterationsCounter <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentVal <span class="token operator">+=</span> previousVal<span class="token punctuation">;</span>
        previousVal <span class="token operator">=</span> currentVal <span class="token operator">-</span> previousVal<span class="token punctuation">;</span>
        iterationsCounter <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> currentVal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-递归计算" tabindex="-1"><a class="header-anchor" href="#_2-递归计算" aria-hidden="true">#</a> 2. 递归计算</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibonacciRecursion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">fibonacciRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacciRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-比奈公式" tabindex="-1"><a class="header-anchor" href="#_3-比奈公式" aria-hidden="true">#</a> 3. 比奈公式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">fibonacciClosedForm</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> maxPosition <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> position <span class="token operator">&gt;</span> maxPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t handle position smaller than 1 or greater than 75&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">double</span> sqrt <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> phi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> sqrt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>phi<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> sqrt <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-02.png?raw=true" width="550px"></div><ul><li><strong>封闭式表达式</strong>：与由具有常数系数的线性递归定义的每个序列一样，斐波那契数具有封闭形式的表达式。它被称为比奈公式，以法国数学家雅克·菲利普·玛丽·比内命名，尽管亚伯拉罕·德·莫弗和丹尼尔·伯努利已经知道它。</li></ul><h2 id="三、散列函数分类" tabindex="-1"><a class="header-anchor" href="#三、散列函数分类" aria-hidden="true">#</a> 三、散列函数分类</h2><p>散列函数（英语：Hash function）又称散列算法、哈希函数，是一种将任意大小的数据映射到固定大小值的计算方式。散列函数计算结果被称为散列值、散列码，也就是对应的 HashMap 中哈希桶的索引以及数据库中库表的路由信息。</p><p>例如在 Java 中对数据的散列算法：HashMap 用到的是一次扰动函数下的哈希散列、ThreadLocal 用到的斐波那契散列。而通常数据库路由组件用到的是整数模除法散列，这也是实践中最简单和最常用的方法之一。</p>`,11),M={href:"https://en.wikipedia.org/wiki/Hash_function",target:"_blank",rel:"noopener noreferrer"},j=p(`<div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-03.png?raw=true" width="750px"></div><h3 id="_1-除法散列" tabindex="-1"><a class="header-anchor" href="#_1-除法散列" aria-hidden="true">#</a> 1. 除法散列</h3><p>在用来设计散列函数的除法散列法中，通过取 K 除以 M 的余数，将关键字 K 映射到 M 个槽中的某一个位置上，即散列函数为：h(K) = K mod M 表格大小通常是 2 的幂。</p><p>另外除法散列的一个显着缺点是除法在大多数现代架构（包括 x86）上都是微编程的，并且可能比乘法慢 10 倍。</p><h3 id="_2-乘法散列" tabindex="-1"><a class="header-anchor" href="#_2-乘法散列" aria-hidden="true">#</a> 2. 乘法散列</h3><p>乘法散列法整体包含两步：</p><ul><li>用关键字k乘上常数<code>A(0&lt;A&lt;1)</code>，并去除kA的小数部分</li><li>用m乘以这个值，再取结果的底<code>floor</code> 公式： <code>h(K)=Math.floor[m(aK mod 1)]</code></li></ul><p><strong>步骤</strong>：</p><ul><li>假设某计算机的字长为 ww 位，而 kk 正好可容于一个字中<code>(k&lt;2wk&lt;2w)</code></li><li>现在选取范围<code>[0，2w]</code>内的任意数值 ss，k×sk×s 即可用<code>R1·2w+R0R1·2w+R0</code>来表示</li><li>因此<code>(k·A)mod1=k·s/2w(k·A)mod1=k·s/2w</code>就是将<code>k×sk×s</code>整体向右平移 ww 位，此时R0R0即为小数部分</li><li>再乘以 2m2m 相当于左移 mm 位，散列值<code> h(k)h(k)</code> 为 R0R0 的前 m 位。</li></ul><p>乘法散列只需要单个整数乘法和右移，使其成为计算速度最快的哈希函数之一。但乘法散列可能会在变更计算因子后，较高值的输入位不会影响较低值的输出位，问题体现在元素分散不均，不满足严格的雪崩标准。所以通常在会进行异或操作</p><p>乘法散列容易受到导致扩散不良的“常见错误”的影响——较高值的输入位不会影响较低值的输出位。在乘法步骤对此进行校正之前，输入上的变换将保留的最高位的跨度向下移动，并将它们异或或加到键上。所以在输入上的变换将保留的最高位的跨度向下移动，并将它们异或操作或者加到键上。例如 HashMap 的扰动函数。</p><h3 id="_3-斐波那契散列" tabindex="-1"><a class="header-anchor" href="#_3-斐波那契散列" aria-hidden="true">#</a> 3. 斐波那契散列</h3><p>其实斐波那契散列是一种特殊形式的乘法散列，只不过它的乘法因子选择的是一个黄金分割比例值，所以叫做斐波那契散列。</p><p>斐波那契散列的特性在于将“大数映射到小数”的计算结果在表空间上是均匀分布的，且计算满足乘法散列效率高。<strong>那为什么并不能使用它作为数据库路由算法呢？</strong></p><h2 id="四、雪崩标准测试" tabindex="-1"><a class="header-anchor" href="#四、雪崩标准测试" aria-hidden="true">#</a> 四、雪崩标准测试</h2><p>在数据库路由实现方面，通常我们都是使用整数模除法散列求模的方式进行元素的索引计算。那既然乘法散列效率高，斐波那契散列分散均匀，为什么不使用这样的方式处理数据库路由算法呢？</p><p>在检索的资料中并没有一个专门的文章来说明这一事项，这也导致很多在学习过 HashMap、ThreadLocal 源码的研发人员尝试把这两种源码中的乘法散列算法搬到数据库路由算法中使用。在保证每次扩容数据库表都是2的次幂的情况下，并没有出现什么样的问题。那么对于这样情况下，是否隐藏着什么潜在的风险呢？</p><p>那么为了证实斐波那契散列是否可以用在数据库路由散列算法中，我们可以尝试使用 <strong>严格雪崩标准(SAC)</strong> 进行验证测试。</p><p>那么什么是<strong>严格雪崩标准( SAC )</strong> ，在密码学中，雪崩效应是密码算法的理想属性，通常是分组密码和密码散列函数，其中如果输入发生轻微变化（例如，翻转单个位），输出会发生显着变化（例如，50%输出位翻转）</p><p>SAC 建立在完整性和雪崩的概念之上，由 Webster 和 Tavares 于 1985 年引入。SAC 的高阶概括涉及多个输入位。满足最高阶 SAC 的最大非线性函数，也称为“完全非线性”函数。</p><p>简单来说，当我们对数据库从8库32表扩容到16库32表的时候，每一个表中的数据总量都应该以50%的数量进行减少。这样才是合理的。</p><p>好，那么接下来我们就来做下雪崩测试；</p><ol><li>准备10万个单词用作样本数据。</li><li>对比测试除法散列、乘法散列、斐波那契散列。</li><li>基于条件1、2，对数据通过不同的散列算法分两次路由到8库32表和16库32表中，验证每个区间内数据的变化数量，是否在50%左右。</li><li>准备一个 excel 表，来做数据的统计计算。</li></ol><p><strong>测试代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">hashFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> dbCount<span class="token punctuation">,</span> <span class="token keyword">int</span> tbCount<span class="token punctuation">,</span> <span class="token class-name">Long</span> hashIncrementVal<span class="token punctuation">,</span> <span class="token keyword">int</span> hashType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> dbCount <span class="token operator">*</span> tbCount<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;库数：&quot;</span> <span class="token operator">+</span> dbCount <span class="token operator">+</span> <span class="token string">&quot; 表数：&quot;</span> <span class="token operator">+</span> tbCount <span class="token operator">+</span> <span class="token string">&quot; 总值：&quot;</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">&quot; 幂值：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">int</span> <span class="token constant">HASH_INCREMENT</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> hashIncrementVal <span class="token operator">?</span> size <span class="token operator">:</span> hashIncrementVal<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; 黄金分割：&quot;</span> <span class="token operator">+</span> <span class="token constant">HASH_INCREMENT</span> <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token constant">HASH_INCREMENT</span> <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readWordList</span><span class="token punctuation">(</span><span class="token string">&quot;/Users/fuzhengwei/1024/github/java-algorithms/logic/src/main/java/math/fibonacci/103976个英语单词库.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; 单词总数：&quot;</span> <span class="token operator">+</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>hashType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 散列：斐波那契散列  int idx = (size - 1) &amp; (word.hashCode() * HASH_INCREMENT + HASH_INCREMENT);</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                idx <span class="token operator">=</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">HASH_INCREMENT</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 散列：哈希散列 + 扰动函数</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                idx <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 散列：哈希散列</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                idx <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/* ^ (word.hashCode() &gt;&gt;&gt; 16)*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 散列：整数求模</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                idx <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
        <span class="token comment">// 计算路由索引</span>
        <span class="token keyword">int</span> dbIdx <span class="token operator">=</span> idx <span class="token operator">/</span> tbCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tbIdx <span class="token operator">=</span> idx <span class="token operator">-</span> tbCount <span class="token operator">*</span> <span class="token punctuation">(</span>dbIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 保存路由结果</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>dbIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dbCountMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dbIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dbCountMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>tbIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dbCountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tbIdx<span class="token punctuation">,</span> dbCountMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tbIdx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                dbCountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tbIdx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dbCountMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dbCountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tbIdx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dbIdx<span class="token punctuation">,</span> dbCountMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整个方法的目的在于得出不同的哈希算法，对10万个单词散列到指定的分库分表中，所体现的结果。</li></ul><h3 id="_1-斐波那契散列" tabindex="-1"><a class="header-anchor" href="#_1-斐波那契散列" aria-hidden="true">#</a> 1. 斐波那契散列</h3><h4 id="_1-1-最小黄金分割" tabindex="-1"><a class="header-anchor" href="#_1-1-最小黄金分割" aria-hidden="true">#</a> 1.1 最小黄金分割</h4><p>斐波那契散列也是乘法散列的一种体现形式，只不过它选择了一个黄金分割点作为乘积因子。例如 ThreadLocal 中的 <code>0x61c88647</code>。但如果说我们只是按照一个指定范围长度内做黄金分割计算，并拿这个结果当成乘法散列的因子，那么10万单词将不会均匀的散列到8个库，32张表内。如图：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_hashFunction_0_hash_null</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> fibonacci<span class="token punctuation">.</span><span class="token function">hashFunction</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> v <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>库数：<span class="token number">8</span> 表数：<span class="token number">32</span> 总值：<span class="token number">256</span> 幂值：<span class="token number">8.0</span> 黄金分割：<span class="token number">2147483647</span><span class="token operator">/</span><span class="token number">256</span> <span class="token operator">=</span> <span class="token number">8388607.99609375</span> 单词总数：<span class="token number">103976</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-04.png?raw=true" width="950px"></div>`,32),E={href:"https://bugstack.cn/md/algorithm/logic/math/2022-10-30-bits.html",target:"_blank",rel:"noopener noreferrer"},S=p(`<h4 id="_1-2-最大黄金分割" tabindex="-1"><a class="header-anchor" href="#_1-2-最大黄金分割" aria-hidden="true">#</a> 1.2 最大黄金分割</h4><p>基于最小黄金分割的计算，是没法做到均匀散列的。所以你看到的 ThreadLocal 默认就给你一个 <code>0x61c88647</code> 而不是随着扩容长度实时计算的切割值。好那么我们接下来也使用这个值来做计算，看看8库到16库后，数据的雪崩结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_hashFunction_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> fibonacci<span class="token punctuation">.</span><span class="token function">hashFunction</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> v <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分别测试 dbCount = 8、dbCount = 16</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>库数：<span class="token number">8</span> 表数：<span class="token number">32</span> 总值：<span class="token number">512</span> 幂值：<span class="token number">9.0</span> 黄金分割：<span class="token number">2147483647</span><span class="token operator">/</span><span class="token number">512</span> <span class="token operator">=</span> <span class="token number">4194303.998046875</span> 单词总数：<span class="token number">103976</span>

库数：<span class="token number">16</span> 表数：<span class="token number">32</span> 总值：<span class="token number">512</span> 幂值：<span class="token number">9.0</span> 黄金分割：<span class="token number">2147483647</span><span class="token operator">/</span><span class="token number">512</span> <span class="token operator">=</span> <span class="token number">4194303.998046875</span> 单词总数：<span class="token number">103976</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-05.png?raw=true" width="950px"></div><ul><li>从8库扩到16库以后，满足50%数据变化的，只有2库2表和3库20表。其他数据变化都不满足严格的雪崩测试。</li></ul><h4 id="_1-3-任意扩容库表" tabindex="-1"><a class="header-anchor" href="#_1-3-任意扩容库表" aria-hidden="true">#</a> 1.3 任意扩容库表</h4><p>通常情况下做分库分表会考虑到以后的扩容操作，那如果说按照2的次幂扩容第一次是8库32表，之后是16库32表，在之后32库32表。那么这样扩容下去，其实是扛不住的。所以大多数时候希望是从8库扩到9库，而不是一下翻倍。那我们来测试下9库32表，斐波那契散列的分散效果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> fibonacci<span class="token punctuation">.</span><span class="token function">hashFunction</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> v <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>库数：<span class="token number">9</span> 表数：<span class="token number">32</span> 总值：<span class="token number">512</span> 幂值：<span class="token number">9.0</span> 黄金分割：<span class="token number">2147483647</span><span class="token operator">/</span><span class="token number">512</span> <span class="token operator">=</span> <span class="token number">4194303.998046875</span> 单词总数：<span class="token number">103976</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-06.png?raw=true" width="950px"></div><ul><li>因为9库不满足2的次幂，也就没法直接乘法散列。所以相当于斐波那契散列失效了。这如果是线上的生产环境，将发生灾难性的事故。</li></ul><h3 id="_2-整数求模散列" tabindex="-1"><a class="header-anchor" href="#_2-整数求模散列" aria-hidden="true">#</a> 2. 整数求模散列</h3><h4 id="_2-1-基础散列计算" tabindex="-1"><a class="header-anchor" href="#_2-1-基础散列计算" aria-hidden="true">#</a> 2.1 基础散列计算</h4><p>整数求模以数据库表总数为除数，与哈希值的绝对值进行除法散列计算。一般在数据库路由中非常常用。另外如果根据用户ID做散列路由，但由于ID长度波动范围较大，则可以按照指定长度统一切割后使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_hashFunction_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> fibonacci<span class="token punctuation">.</span><span class="token function">hashFunction</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> v <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分别测试 dbCount = 8、dbCount = 16</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>库数：<span class="token number">8</span> 表数：<span class="token number">32</span> 总值：<span class="token number">512</span> 幂值：<span class="token number">9.0</span> 黄金分割：<span class="token number">2147483647</span><span class="token operator">/</span><span class="token number">512</span> <span class="token operator">=</span> <span class="token number">4194303.998046875</span> 单词总数：<span class="token number">103976</span>

库数：<span class="token number">16</span> 表数：<span class="token number">32</span> 总值：<span class="token number">512</span> 幂值：<span class="token number">9.0</span> 黄金分割：<span class="token number">2147483647</span><span class="token operator">/</span><span class="token number">512</span> <span class="token operator">=</span> <span class="token number">4194303.998046875</span> 单词总数：<span class="token number">103976</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-07.png?raw=true" width="950px"></div><ul><li>在使用除法散列方式后，满足50%数据变化的有5个表。看着并不多，但这相当于是斐波那契散列下的3倍。同时其他表数据接近50%的也要大于斐波那契散列。</li></ul><h4 id="_2-2-任意扩容计算" tabindex="-1"><a class="header-anchor" href="#_2-2-任意扩容计算" aria-hidden="true">#</a> 2.2 任意扩容计算</h4><p>接下来我们任意从8库扩容到9库，看看数据的变化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_hashFunction_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> fibonacci<span class="token punctuation">.</span><span class="token function">hashFunction</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> v <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>库数：<span class="token number">9</span> 表数：<span class="token number">32</span> 总值：<span class="token number">512</span> 幂值：<span class="token number">9.0</span> 黄金分割：<span class="token number">2147483647</span><span class="token operator">/</span><span class="token number">512</span> <span class="token operator">=</span> <span class="token number">4194303.998046875</span> 单词总数：<span class="token number">103976</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fibonacci-08.png?raw=true" width="950px"></div><ul><li>103976 / (9 * 32) ≈ 361，那么也就说扩容后的数据，基本在361范围波动，就满足了均匀散列的目的。所以在数据库散列算法中，除法散列是较靠谱且稳定的。</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2><ul><li>散列算法有哪些种？</li><li>HashMap、ThreadLocal、数据库路由都是用了什么散列算法？</li><li>乘法散列为什么要用2的幂值作为每次的扩容条件？</li><li>你有了解过 <code>0x61c88647</code> 是怎么计算的吗？</li><li>斐波那契散列的使用场景是什么？</li></ul><hr>`,30),A={href:"https://en.wikipedia.org/wiki/The_Fibonacci_Association",target:"_blank",rel:"noopener noreferrer"},q={href:"https://en.wikipedia.org/wiki/Hash_function",target:"_blank",rel:"noopener noreferrer"},H={href:"https://en.wikipedia.org/wiki/Fibonacci_number#Mathematics",target:"_blank",rel:"noopener noreferrer"},T={href:"https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8",target:"_blank",rel:"noopener noreferrer"},z={href:"https://en.wikipedia.org/wiki/Avalanche_effect",target:"_blank",rel:"noopener noreferrer"},B={href:"https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://en.wikipedia.org/wiki/Fibonacci_number#Relation_to_the_golden_ratio",target:"_blank",rel:"noopener noreferrer"},L={href:"https://book.huihoo.com/data-structures-and-algorithms-with-object-oriented-design-patterns-in-c++/html/page214.html",target:"_blank",rel:"noopener noreferrer"};function N(V,K){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)]),d,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),v,b,h,n("p",null,[s("斐波那契数列出现在"),n("a",g,[s("印度数学"),t(a)]),s("中，与梵文韵律有关。在梵语诗歌传统中，人们对列举所有持续时间为 2 单位的长 (L) 音节与 1 单位持续时间的短 (S) 音节并列的模式很感兴趣。用给定的总持续时间计算连续 L 和 S 的不同模式会产生斐波那契数：持续时间m单位的模式数量是F(m + 1)。")]),f,n("p",null,[s("那么既然 "),n("a",w,[s("ThreadLocal 是基于斐波那契散列计算的下标索引"),t(a)]),s("，那为啥数据库路由算法不能使用同样的方式计算散列索引呢？因为通过验证可以得知，斐波那契散列并不满足"),n("a",y,[_,t(a)]),s("。接下来小傅哥就带着大家一起来使用数据验证下。")]),x,n("p",null,[s("斐波那契数列可以通过循环、递归以及"),n("a",I,[s("封闭式表达式（比奈公式）"),t(a)]),s(" 的方式进行计算。读者可在单元测试中验证："),n("a",C,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),F,n("p",null,[s("接下来就给大家介绍这几种常用的散列算法，其他更多散列可以参考 "),n("a",M,[s("HashFunction"),t(a)])]),j,n("ul",null,[n("li",null,[s("如果你的斐波那契散列值是根据库表的值进行黄金切割的，那么在最初的库表范围较小的阶段，将有部分区域无法使用。这是因为得到的黄金分割点的二进制值没法覆盖整个区域，也就做不到合适的乘法散列计算。参考："),n("a",E,[s("https://bugstack.cn/md/algorithm/logic/math/2022-10-30-bits.html"),t(a)]),s(" - 《程序员数学：位运算》")])]),S,n("ul",null,[n("li",null,[s("The Fibonacci Association："),n("a",A,[s("https://en.wikipedia.org/wiki/The_Fibonacci_Association"),t(a)])]),n("li",null,[s("哈希函数："),n("a",q,[s("https://en.wikipedia.org/wiki/Hash_function"),t(a)])]),n("li",null,[s("斐波那契数："),n("a",H,[s("https://en.wikipedia.org/wiki/Fibonacci_number#Mathematics"),t(a)])]),n("li",null,[s("散列函数："),n("a",T,[s("https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8"),t(a)])]),n("li",null,[s("雪崩效应："),n("a",z,[s("https://en.wikipedia.org/wiki/Avalanche_effect"),t(a)])]),n("li",null,[s("Fibonacci Hashing: The Optimization that the World Forgot (or: a Better Alternative to Integer Modulo)："),n("a",B,[s("https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/"),t(a)])]),n("li",null,[s("斐波那契数："),n("a",R,[s("https://en.wikipedia.org/wiki/Fibonacci_number#Relation_to_the_golden_ratio"),t(a)])]),n("li",null,[s("C++ 中具有面向对象设计模式的数据结构和算法："),n("a",L,[s("https://book.huihoo.com/data-structures-and-algorithms-with-object-oriented-design-patterns-in-c++/html/page214.html"),t(a)])])])])}const W=e(i,[["render",N],["__file","2022-11-05-fibonacci.html.vue"]]);export{W as default};
