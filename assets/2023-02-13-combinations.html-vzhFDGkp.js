import{_ as p,r as o,o as c,c as e,a as n,b as s,d as t,e as i}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"《程序员数学-组合》-有-无重复",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-组合》-有-无重复","aria-hidden":"true"},"#"),s(" 《程序员数学：组合》- 有/无重复")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},b=i(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>与排列相对应的同类的会有组合数数学知识，就像双色球组合能有多少种，中奖概率是多少。同时对于数字是否可以重复使用，还包括重复组合和不重复组合。</p><p>举例；</p><p><strong>不重复组合</strong>公式：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/combinations-03.png?raw=true" width="150px"></div><p>如彩票号码<code>(2,14,15,27,30,33)</code> ，哪里<code>n</code>是可供选择的东西的数量，我们从中选择<code>r</code>，没有重复，顺序无所谓。常称为“n选r”（如“16选3”）。也称为二项式系数。</p><p><strong>可重复组合</strong>公式：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/combinations-04.png?raw=true" width="150px"></div><p>比如口袋里的硬币<code>(5,5,5,10,10)</code></p><p>或者假设冰淇淋有五种口味 ：<code>banana</code>、<code>chocolate</code>、<code>lemon</code>和。<code>strawberry\`\`vanilla</code></p><p>我们可以吃三勺。会有多少变化？</p><p>让我们用字母来表示口味：<code>{b, c, l, s, v}</code>。示例选择包括：</p><ul><li><code>{c, c, c}</code>（3 勺巧克力）</li><li><code>{b, l, v}</code>（香蕉、柠檬和香草各一粒）</li><li><code>{b, v, v}</code>（一根香蕉，两根香草）</li></ul><p><code>n</code>有多少东西可供选择，我们从中选择<code>r</code>。允许重复，顺序无关紧要。</p><h2 id="二、实现" tabindex="-1"><a class="header-anchor" href="#二、实现" aria-hidden="true">#</a> 二、实现</h2><h3 id="_1-不重复组合" tabindex="-1"><a class="header-anchor" href="#_1-不重复组合" aria-hidden="true">#</a> 1. 不重复组合</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">combineWithRepetitions</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> comboOptions<span class="token punctuation">,</span> <span class="token keyword">int</span> comboLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If the length of the combination is 1 then each element of the original array</span>
    <span class="token comment">// is a combination itself.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comboLength <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> combos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> comboOption <span class="token operator">:</span> comboOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> combo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            combo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>comboOption<span class="token punctuation">)</span><span class="token punctuation">;</span>
            combos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>combo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> combos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Init combinations array.</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> combos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Remember characters one by one and concatenate them to combinations of smaller lengths.</span>
    <span class="token comment">// We don&#39;t extract elements here because the repetitions are allowed.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> optionIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> optionIndex <span class="token operator">&lt;</span> comboOptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> optionIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Generate combinations of smaller size.</span>
        <span class="token class-name">String</span> currentOption <span class="token operator">=</span> comboOptions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>optionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> remainingOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>comboOptions<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>optionIndex<span class="token punctuation">,</span> comboOptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> smallerCombos <span class="token operator">=</span> <span class="token function">combineWithRepetitions</span><span class="token punctuation">(</span>remainingOptions<span class="token punctuation">,</span> comboLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Concatenate currentOption with all combinations of smaller size.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> smallerCombo <span class="token operator">:</span> smallerCombos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> combo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            combo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentOption<span class="token punctuation">)</span><span class="token punctuation">;</span>
            combo<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>smallerCombo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            combos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>combo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> combos<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/combinations-01.jpeg?raw=true" width="450px"></div><p>此代码是一个 Java 函数，它从允许重复的元素列表中生成给定长度的所有可能组合。 该函数有两个输入：</p><ol><li><code>comboOptions</code>：生成组合的元素列表。 2. <code>comboLength</code>：要生成的每个组合的长度。 该函数返回一个字符串列表列表，其中每个内部列表代表一个组合。 该函数的逻辑如下：</li><li>如果<code>comboLength</code>等于 1，则<code>comboOptions</code>列表中的每个元素本身就是一个组合并添加到<code>combos</code>列表中。 2. 如果<code>comboLength</code>大于 1，则该函数使用相同的函数生成更小尺寸的组合。对于列表中的每个元素，该函数通过使用当前选项之后的剩余选项调用自身来<code>comboOptions</code>生成元素组合。<code>comboLength - 1</code> 3. 最后，该函数将当前选项与每个较小的组合连接起来，并将结果添加到<code>combos</code>列表中。</li></ol><h3 id="_2-可重复组合" tabindex="-1"><a class="header-anchor" href="#_2-可重复组合" aria-hidden="true">#</a> 2. 可重复组合</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">combineWithoutRepetitions</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> comboOptions<span class="token punctuation">,</span> <span class="token keyword">int</span> comboLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> combos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comboLength <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> comboOption <span class="token operator">:</span> comboOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> singleOption <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            singleOption<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>comboOption<span class="token punctuation">)</span><span class="token punctuation">;</span>
            combos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>singleOption<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> combos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> comboOptions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> currentOption <span class="token operator">=</span> comboOptions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> smallerOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>comboOptions<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>comboOptions<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> smallerOptions<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> comboOptions<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> smallerCombos <span class="token operator">=</span> <span class="token function">combineWithoutRepetitions</span><span class="token punctuation">(</span>smallerOptions<span class="token punctuation">,</span> comboLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> smallerCombo <span class="token operator">:</span> smallerCombos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newCombo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newCombo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentOption<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newCombo<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>smallerCombo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            combos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newCombo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> combos<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/combinations-02.jpeg?raw=true" width="450px"></div><p>这段代码是一个生成不含重复元素的组合的函数。</p><ol><li>定义一个名为 &quot;combos&quot; 的列表，用于存储生成的组合。</li><li>如果 &quot;comboLength&quot; 等于 1，则对于 &quot;comboOptions&quot; 数组中的每一个元素，将其单独作为一个列表存入 &quot;combos&quot; 列表中。最后返回 &quot;combos&quot; 列表。</li><li>否则，对于 &quot;comboOptions&quot; 数组中的每一个元素，枚举它并作为组合的第一个元素，递归地调用该函数生成长度减 1 的组合。将枚举的元素加入生成的组合中，并将新生成的组合加入 &quot;combos&quot; 列表中。</li><li>最后返回 &quot;combos&quot; 列表。</li></ol><h2 id="三、测试" tabindex="-1"><a class="header-anchor" href="#三、测试" aria-hidden="true">#</a> 三、测试</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_combineWithRepetitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> comboOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboOptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboOptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboOptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token class-name">Combinations</span><span class="token punctuation">.</span><span class="token function">combineWithRepetitions</span><span class="token punctuation">(</span>comboOptions<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_combineWithoutRepetitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> comboOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token class-name">Combinations</span><span class="token punctuation">.</span><span class="token function">combineWithoutRepetitions</span><span class="token punctuation">(</span>comboOptions<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,31),v={href:"https://www.mathsisfun.com/combinatorics/combinations-permutations.html",target:"_blank",rel:"noopener noreferrer"};function g(h,f){const a=o("ExternalLinkIcon");return c(),e("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)]),d,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),b,n("p",null,[n("a",v,[s("https://www.mathsisfun.com/combinatorics/combinations-permutations.html"),t(a)])])])}const y=p(l,[["render",g],["__file","2023-02-13-combinations.html.vue"]]);export{y as default};
