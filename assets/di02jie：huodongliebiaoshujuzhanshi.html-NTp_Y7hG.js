import{_ as o,r as n,o as i,c as r,a as e,b as t,d as l,f as c,e as s}from"./app-3RcBQnkC.js";const d={},h=e("h1",{id:"第02节-活动列表数据展示",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第02节-活动列表数据展示","aria-hidden":"true"},"#"),t(" 第02节：活动列表数据展示")],-1),u=e("br",null,null,-1),_={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},m=s('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、开发日志" tabindex="-1"><a class="header-anchor" href="#一、开发日志" aria-hidden="true">#</a> 一、开发日志</h2><ul><li>ERP 基础工程结构搭建完成以后，接下来我们开始填充一些基本的功能，本章节先提供一个活动列表的查询。因为活动的配置在<code>单库单表</code>中，所以所以直接提供查询服务即可。</li><li>那么在我们的 Lottery 工程中需要添加这样一个提供查询活动部署信息的接口后，就会在接口层、应用层，分别需要添加出新的包分层，否则就会出现vo、req、res混合到一起，不利于维护。<em>这部分看代码的修改会更有感触</em></li><li>其实整个活动的列表查询功能添加并不复杂，对数据库也只是普通的 limit 分页查询，所以我们会额外定义一些 Page 分页的信息，来更加方便的查询这样的数据。<em>这里有一点要注意，我们给运营后台查询的数据通常直接使用 LIMIT x,y就可以，但如果是C端用户展示列表数据，就不能这么使用了，而是使用 &gt; id Limit x</em></li><li>最后在我们开始开发好接口后，把接口通过RPC的方式，让ERP工程进行调用，并做数据的可视化展示。</li></ul><h2 id="二、活动领域-子领域添加查询列表功能" tabindex="-1"><a class="header-anchor" href="#二、活动领域-子领域添加查询列表功能" aria-hidden="true">#</a> 二、活动领域 - 子领域添加查询列表功能</h2><p>提供查询活动列表最近的领域则是活动领域中的<code>活动部署子领域</code>，因为这里提供了活动的配置、修改、状态以及也可以提供活动的列表查询，如下；</p>',5),p=e("ul",null,[e("li",null,"在活动领域层中，添加活动相关的服务更为合适，所以你会看到这样与 MVC 结构的对比中，添加一个新的功能扩展时还是非常容易的。只要你的结构清晰，地基打的好，盖房子就容易。"),e("li",null,"这里有个技术实现的点需要注意，我们给ERP查询的结果中，要包括分页的信息，其实也就是数据和总条数，具体如何分页，每页多少条，交给ERP自己配置和实现。而领域服务只接收请求信息并返回相应的结果数据。")],-1);function f(b,x){const a=n("ExternalLinkIcon");return i(),r("div",null,[h,e("p",null,[t("作者：小傅哥 "),u,t("博客："),e("a",_,[t("https://bugstack.cn"),l(a)])]),m,c(" ![](/images/article/project/lottery/Part-3/2-01.png) "),p])}const k=o(d,[["render",f],["__file","di02jie：huodongliebiaoshujuzhanshi.html.vue"]]);export{k as default};
