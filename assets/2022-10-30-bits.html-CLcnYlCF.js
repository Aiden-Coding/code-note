import{_ as p,r as e,o,c,a as n,b as s,d as t,e as i}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"《程序员数学-位运算》——-如何使用二进制计算乘法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-位运算》——-如何使用二进制计算乘法","aria-hidden":"true"},"#"),s(" 《程序员数学：位运算》—— 如何使用二进制计算乘法？")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},v=i(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>你是什么时候注意到位运算？</code></p><p>从毕业入职公司看大佬的代码出现 <code>2 &lt;&lt; 4</code> 开始？从小白晋升高开读框架的源码看到 <code>MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</code> 开始？还是从什么时候开始？</p><p>其实二进制的位运算一直在我们那身边，从你开始编写 Hello Word 打印输出时就有二进制流的处理，只不过隐藏的很深不好发现。所以在我们开始意识到代码和二进制的关系往往都是来自于看到可以用二进制完成的计算，包括；二进制计算效率高于乘机，也包括二进制可以更好的体现出你要设置值的大小范围。比如你要设定一个指定范围大小的 Int 值 = 1073741824，那么是给这样一个整数值看起来直观，还是二进制 1&lt;&lt; 30 更直观呢？其实他们两个值是相等的。所以这样的情况下也会有二进制运算的体现。</p><p>而小傅哥在学习编程阶段，第一次注意到二进制的运算是关于a、b两个值的互换，如果不引入第三个值就可以完成？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个 ^ 帽子一样的运算符，就把两个数给替换，替换后 a = 3，b = 2 那它是怎么办到的呢？</p><p><strong>^ 异或运算</strong>：两个操作数的同位中，如果值相同（都是 0 或者都是 1）则为 0，不同（一个是 0，一个是 1）则为 1</p><ul><li>以二进制数据为基础进行运算解析 <ul><li>a = 2 二进制数为 0010、b = 3 二进制数为 0011</li><li>a = a ^ b = 0010 ^ 0011 = 0001</li><li>b = a ^ b = 0001 ^ 0011 = 0010 = 2</li><li>a = a ^ b = 0001 ^ 0010 = 0011 = 3</li></ul></li><li>异或运算的基本定理解析 <ul><li>a = a ^ b</li><li>b = a ^ b = a ^ b ^ b = a = 2</li><li>a = a ^ b = a ^ a ^ b = b = 3</li></ul></li></ul><p>而二进制的运算魅力还远不至于此，还可以完成奇偶判断、有效位计算、乘法、加法等。这些内容的学习可以让我们研发人员，积累编程逻辑和拓展思维模式。接下来小傅哥就带着大家学习一下。</p><h2 id="二、位操作介绍" tabindex="-1"><a class="header-anchor" href="#二、位操作介绍" aria-hidden="true">#</a> 二、位操作介绍</h2><p>位操作是程序设计中对位数组或二进制数的一元和二元操作。在许多古老的微处理器上，位运算比加减运算略快，通常位运算比乘除法运算要快很多。在现代架构中，位运算的运算速度通常与加法运算相同（仍然快于乘法运算），但是通常功耗较小，因为资源使用减少。</p><p>四种基本的位运算包括；与&amp;、或|、非~、异或^</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-00.png?raw=true" width="650px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0001</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 0010</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 0100</span>
<span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// 1000</span>
<span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token comment">// 1111</span>

<span class="token comment">// 与运算；0001</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0001</span>
<span class="token comment">// 或运算；0011</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011</span>
<span class="token comment">// 异或运算；0101</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a <span class="token operator">^</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0101</span>
<span class="token comment">// 非运算；...11110111</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token operator">~</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与运算；两个数都转为二进制，然后从高位开始比较，如果两个数都为1则为1，否则为0。</li><li>或运算；两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。</li><li>非运算；如果位为0，结果是1，如果位为1，结果是0。</li><li>异或运算；两个数转为二进制，然后从高位开始比较，如果相同则为0，不相同则为1。</li></ul><h2 id="三、位运算案例" tabindex="-1"><a class="header-anchor" href="#三、位运算案例" aria-hidden="true">#</a> 三、位运算案例</h2><h3 id="_1-获取位值" tabindex="-1"><a class="header-anchor" href="#_1-获取位值" aria-hidden="true">#</a> 1. 获取位值</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-01.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span> bitPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>number <span class="token operator">&gt;&gt;</span> bitPosition<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：获取二进制数字中，指定位置的值。</li><li><strong>逻辑</strong>：该方法将目标值右移到最右边，即位数组的第0个位置上，如；0001 的二进制形式。之后与 1 进行与操作。如果目标位是1，那么结果就是1，反之结果是0；</li></ul><h3 id="_2-设置位值" tabindex="-1"><a class="header-anchor" href="#_2-设置位值" aria-hidden="true">#</a> 2. 设置位值</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-02.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">setBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span> bitPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> number <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：设置二进制数字中，指定位置的值</li><li><strong>逻辑</strong>：1 就像一个子弹，左移指定位数到目标位置，如；0010 的二进制形式。与目标值 number 做或运算(把子弹打进去)，设置结果并返回。</li></ul><h3 id="_3-清空位值" tabindex="-1"><a class="header-anchor" href="#_3-清空位值" aria-hidden="true">#</a> 3. 清空位值</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-03.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">clearBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span> bitPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> number <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：清空二进制数字中，指定位置的值</li><li><strong>逻辑</strong>：类似于<code>设置位值</code>，把1左移指定位数后取反，从 0010 得到 1101 并与目标值 number 做与&amp;运算，清掉目标位的值。</li></ul><h3 id="_4-更新位值" tabindex="-1"><a class="header-anchor" href="#_4-更新位值" aria-hidden="true">#</a> 4. 更新位值</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-04.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span> bitPosition<span class="token punctuation">,</span> <span class="token keyword">int</span> bitValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> clearMask <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>number <span class="token operator">&amp;</span> clearMask<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>bitValue <span class="token operator">&lt;&lt;</span> bitPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：清空二进制数字中，指定位置的值</li><li><strong>逻辑</strong>：结合清空clearBit、设置setBit，两个方法将制定位置替换为设置值。</li></ul><h3 id="_5-偶数判断" tabindex="-1"><a class="header-anchor" href="#_5-偶数判断" aria-hidden="true">#</a> 5. 偶数判断</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-05.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>number <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：检测 number 是否为偶数</li><li><strong>逻辑</strong>：检测二进制的最右侧一位，如果是1，那么一定是奇数。所以可以与1做与&amp;运算的结果和0判断。不等于0是奇数，等于0是偶数。</li></ul><h3 id="_6-正数判断" tabindex="-1"><a class="header-anchor" href="#_6-正数判断" aria-hidden="true">#</a> 6. 正数判断</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-06.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>number <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：判断 number 值是否为正数。</li><li><strong>逻辑</strong>：基于二进制正数最左边的值是0的这个事实，右移31位，和1做与&amp;运算，如果结果等于1为负数，反正为正数。</li></ul><h3 id="_7-左移乘二" tabindex="-1"><a class="header-anchor" href="#_7-左移乘二" aria-hidden="true">#</a> 7. 左移乘二</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-07.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multiplyByTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> number <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：乘以2</li><li><strong>逻辑</strong>：该方法将原始数字向左移动一位。因此所有位都将乘以2，因此数字本身也将乘以2。</li></ul><h3 id="_8-右移除二" tabindex="-1"><a class="header-anchor" href="#_8-右移除二" aria-hidden="true">#</a> 8. 右移除二</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-08.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divideByTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> number <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：除以2</li><li><strong>逻辑</strong>：该方法将原始数字向右移动一位。因此所有位都将除以2，因此数字本身也将除以2,且不会产生余数。</li></ul><h3 id="_9-正负交换" tabindex="-1"><a class="header-anchor" href="#_9-正负交换" aria-hidden="true">#</a> 9. 正负交换</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-09.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">switchSign</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">~</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：正数转负数，负数转正数</li><li><strong>逻辑</strong>：通过二进制取反运算，如 1000 = 8 取反 1.....0111 = -9 + 1 = -8</li></ul><h3 id="_10-乘法运算-有符号" tabindex="-1"><a class="header-anchor" href="#_10-乘法运算-有符号" aria-hidden="true">#</a> 10. 乘法运算(有符号)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-10.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> multiply <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;计算步骤(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;偶数&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;奇数&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)：a(&quot;</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%04d&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) = &quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot; | b(&quot;</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%04d&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) = &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// b 是偶数：2a * (b/2)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            a <span class="token operator">=</span> <span class="token function">multiplyByTwo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            b <span class="token operator">=</span> <span class="token function">divideByTwo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// b 奇数</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// b 正数：2a * (b - 1)/2 + a</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPositive</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                multiply <span class="token operator">+=</span> a<span class="token punctuation">;</span>
                a <span class="token operator">=</span> <span class="token function">multiplyByTwo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
                b <span class="token operator">=</span> <span class="token function">divideByTwo</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// b 负数：2a * (b + 1)/2 - a</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                multiply <span class="token operator">-=</span> a<span class="token punctuation">;</span>
                a <span class="token operator">=</span> <span class="token function">multiplyByTwo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
                b <span class="token operator">=</span> <span class="token function">divideByTwo</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; | multiply(&quot;</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%04d&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) = &quot;</span> <span class="token operator">+</span> multiply<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> multiply<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：计算有符号二进制乘积</li><li><strong>公式</strong>：推到公式与代码向对应 <ul><li>= a * b</li><li>= 2a * (b/2) —— b为偶数</li><li>= 2a * (b - 1)/2 + a —— b 为奇数、正数</li><li>= 2a * (b + 1)/2 - a —— b 为奇数、负数</li></ul></li><li><strong>逻辑</strong>：乘数a不断左移、乘数b不断右移。当b归0时，a左移累计下来的值就是乘积总和。如图</li></ul><h3 id="_11-乘法运算-无符号" tabindex="-1"><a class="header-anchor" href="#_11-乘法运算-无符号" aria-hidden="true">#</a> 11. 乘法运算(无符号)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-11.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multiplyUnsigned</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> multiplier <span class="token operator">=</span> number2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> bitIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>multiplier <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>multiplier <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number1 <span class="token operator">+</span> <span class="token string">&quot; &lt;&lt; &quot;</span> <span class="token operator">+</span> bitIdx <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>number1 <span class="token operator">&lt;&lt;</span> bitIdx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">+=</span> number1 <span class="token operator">&lt;&lt;</span> bitIdx<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bitIdx <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        multiplier <span class="token operator">=</span> multiplier <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>目的</strong>：计算无符号二进制乘积</p></li><li><p><strong>公式</strong>：</p><ul><li><code>13 = 2^3 + 2^2 + 2^0</code></li><li><code>x*13 = x*2^3 + x*2^2 + x*2^0</code></li><li><code>x*13 = x&lt;&lt;3 + x&lt;&lt;2 + x&lt;&lt;0</code></li><li><code>2*13 = 2&lt;&lt;3 + 2&lt;&lt;2 + 2&lt;&lt;0</code></li><li><code> = 16 + 8 + 2</code></li><li><code> = 26</code></li></ul></li><li><p><strong>逻辑</strong>：每个数字都可以表示成一系列2的幂之和。例如 13 的二进制是 1101，最右侧第1位1，是2的0次幂，所以对应2的进制值是左移0位。再比如13的右数第3位是1，对应位置值是4也就是2的2次幂，所以对应2的进制值是左移2位。最终把这些值相加就是乘积值。</p></li></ul><h3 id="_12-一的数量" tabindex="-1"><a class="header-anchor" href="#_12-一的数量" aria-hidden="true">#</a> 12. 一的数量</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-12.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countSetBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> originalNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> setBitsCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> originalNumber<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        setBitsCount <span class="token operator">+=</span> number <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        number <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> setBitsCount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：使用位运算符对一个数字里设置为1的位进行记数</li><li><strong>逻辑</strong>：把数字每次向右移动1位，然后使用&amp;操作符取出最右边一位的值，1则记数加1，0则不计。</li></ul><h3 id="_13-转换计算" tabindex="-1"><a class="header-anchor" href="#_13-转换计算" aria-hidden="true">#</a> 13. 转换计算</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-13.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bitsDiff</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">countSetBits</span><span class="token punctuation">(</span>number1 <span class="token operator">^</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：计算一个数字，转换为另外一个数字，所需要的转换位数。</li><li><strong>逻辑</strong>：当数字进行XOR异或运算时，结果将是不同位数的数量(即异或的结果中所有被设置为1的位的数量)。</li></ul><h3 id="_14-有效位数" tabindex="-1"><a class="header-anchor" href="#_14-有效位数" aria-hidden="true">#</a> 14. 有效位数</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-14.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bitsCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitsCounter<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bitsCounter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bitsCounter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：计算二进制数值的有效位数，例如 14 = 1110 有效位为4位。</li><li><strong>逻辑</strong>：通过1不断地左移加和与 number 做对比，只要比number小就累加1位。</li></ul><h3 id="_15-幂值判断" tabindex="-1"><a class="header-anchor" href="#_15-幂值判断" aria-hidden="true">#</a> 15. 幂值判断</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-15.png?raw=true" width="480px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>number <span class="token operator">&amp;</span> <span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：检查number是否为2的幂值。</li><li><strong>逻辑</strong>：2的幂值形式的数字为2、4、8、16 等，那么可以把一个二进制数进行错位与&amp;运算，如果错位比对都为0，那么就是2的幂数。</li></ul><h3 id="_16-加法运算-ripple-carry-adder" tabindex="-1"><a class="header-anchor" href="#_16-加法运算-ripple-carry-adder" aria-hidden="true">#</a> 16. 加法运算(Ripple-carry adder)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/bits-16.png?raw=true" width="650px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fullAdder</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算每次的进位值，1 + 1 = 0010 进位为1。是一种&amp;运算。</span>
    <span class="token keyword">int</span> carryOut <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;| aBit | bBit | carryIn | aiPlusBi | bitSum | carryOut | result |&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> aBit <span class="token operator">=</span> <span class="token function">getBit</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> bBit <span class="token operator">=</span> <span class="token function">getBit</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> carryIn <span class="token operator">=</span> carryOut<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;|   &quot;</span> <span class="token operator">+</span> aBit <span class="token operator">+</span> <span class="token string">&quot;  |  &quot;</span> <span class="token operator">+</span> bBit <span class="token operator">+</span> <span class="token string">&quot;   |       &quot;</span> <span class="token operator">+</span> carryIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 加和 - 两个值；如果相同则为0，不相同则为1</span>
        <span class="token keyword">int</span> aiPlusBi <span class="token operator">=</span> aBit <span class="token operator">^</span> bBit<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; |        &quot;</span> <span class="token operator">+</span> aiPlusBi<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 加和 - 进位；</span>
        <span class="token keyword">int</span> bitSum <span class="token operator">=</span> aiPlusBi <span class="token operator">^</span> carryIn<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; |      &quot;</span> <span class="token operator">+</span> bitSum<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 进位；同位置 ai &amp; bi = 1 | 与进位 aiPlusBi &amp; carryIn = 1</span>
        carryOut <span class="token operator">=</span> <span class="token punctuation">(</span>aBit <span class="token operator">&amp;</span> bBit<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>aiPlusBi <span class="token operator">&amp;</span> carryIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; |  &quot;</span> <span class="token operator">+</span> carryOut <span class="token operator">+</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>carryOut<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)   &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 累加；把当前位置计算的值，左移n位</span>
        result <span class="token operator">=</span> result <span class="token operator">|</span> <span class="token punctuation">(</span>bitSum <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; | &quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%04d&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：计算有符号二进制加法</li><li><strong>逻辑</strong>：二进制的累加可以对照下计算10进制累加时一样，对应2个数字相加，当有进位的时候记录进位。 <ul><li>首先二进制的加和计算，1+1 = 10、1+0=01、0+1=01、0+0=00，那么正好对应上 ^ 非运算，相同则为0，不相同则为1，因为即使两个1相加，当前位的值也是0。</li><li>之后是进位相加，两数想加后，还可能有进位上来的数值与两数进行相加。</li><li>结果相加完成后，计算进位，并保留进位用于下次计算。进位的计算为；ai &amp; bi = 1 | 与进位 aiPlusBi &amp; carryIn = 1，无论是两数相加，还是两数的和 aiPlusBi 与进位相加，只要与运算是1，那么就要保留进位。</li><li>最后是累加结果，把对应位置的结果计算，按照当前计算到到二进制的位数左移到目标为止，累加到 result，最后就是结果值。</li></ul></li></ul><h2 id="四、常见面试题" tabindex="-1"><a class="header-anchor" href="#四、常见面试题" aria-hidden="true">#</a> 四、常见面试题</h2><ul><li>&amp; 和 ~ 是什么运算？</li><li>两数交换不引入第三个变量如何处理？</li><li>二进制中1个个数怎么计算？</li><li>实现一个两数加和？</li><li>实现一个无符号两数成绩？</li></ul>`,84);function b(g,h){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)]),d,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),v])}const w=p(l,[["render",b],["__file","2022-10-30-bits.html.vue"]]);export{w as default};
