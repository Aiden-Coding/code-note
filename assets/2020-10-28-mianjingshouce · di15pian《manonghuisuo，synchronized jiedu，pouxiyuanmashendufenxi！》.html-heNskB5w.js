import{_ as t,r as o,o as c,c as l,a as n,b as s,d as p,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"面经手册-·-第15篇《码农会锁-synchronized-解毒-剖析源码深度分析-》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第15篇《码农会锁-synchronized-解毒-剖析源码深度分析-》","aria-hidden":"true"},"#"),s(" 面经手册 · 第15篇《码农会锁，synchronized 解毒，剖析源码深度分析！》")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=e(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>感觉什么都不会，从哪开始呀！</code></p><p>这是最近我总能被问到的问题，也确实是。一个初入编程职场的新人，或是一个想重新努力学习的老司机，这也不会，那也不会，总会犯愁从哪开始。</p><p>讲道理，毕竟 Java 涉及的知识太多了，要学应该是学会学习的能力，而不是去背题、背答案，拾人牙慧是不会有太多收益的。</p><p>学习的过程要找对方法，遇到问题时最好能自己想想，你有哪些方式学会这些知识。是不感觉即使让你去百度搜，你都不知道应该拿哪个关键字搜！只能拿着问题直接找人问，这样缺少思考，缺少大脑撞南墙的过程，其实最后也很难学会。</p><p>所以，你要学会的是自我学习的能力，之后是从哪开始都可以，重要的是开始和坚持！</p><h2 id="二、面试题" tabindex="-1"><a class="header-anchor" href="#二、面试题" aria-hidden="true">#</a> 二、面试题</h2><p><code>谢飞机，小记</code>，周末逛完奥特莱斯，回来就跑面试官家去了！</p><p><strong>谢飞机</strong>：duang、duang、duang，我来了！</p><p><strong>面试官</strong>：来的还挺准时，洗洗手吃饭吧！</p><p><strong>谢飞机</strong>：嘿嘿...</p><p><strong>面试官</strong>：你看我这块鱼豆腐，像不像 synchronized 锁！</p><p><strong>谢飞机</strong>：啊！？</p><p><strong>面试官</strong>：飞机，正好问你。synchronized、volatile，有什么区别呀？</p><p><strong>谢飞机</strong>：嗯，volatile 保证可见性，synchronized 保证原子性！</p><p><strong>面试官</strong>：那不用 volatile，只用 synchronized 修饰方式，能保证可见性吗？</p><p><strong>谢飞机</strong>：这...，我没验证过！</p><p><strong>面试官</strong>：吃吧，吃吧！一会给你个 synchronized 学习大纲，照着整理知识点！</p><h2 id="三、synchronized-解毒" tabindex="-1"><a class="header-anchor" href="#三、synchronized-解毒" aria-hidden="true">#</a> 三、synchronized 解毒</h2><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-00.png" alt="图 15-0 面试官给谢飞机的，synchronized 学习大纲"></p><h3 id="_1-对象结构" tabindex="-1"><a class="header-anchor" href="#_1-对象结构" aria-hidden="true">#</a> 1. 对象结构</h3><h4 id="_1-1-对象结构介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-对象结构介绍" aria-hidden="true">#</a> 1.1 对象结构介绍</h4><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-01.png" alt="图 15-1 64位JVM对象结构描述"></p><p><strong>HotSpot虚拟机</strong> markOop.cpp 中的 C++ 代码注释片段，描述了 64bits 下 mark-word 的存储状态，也就是图 15-1 的结构示意。</p><p>这部分的源码注释如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">64</span> bits<span class="token operator">:</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
unused<span class="token operator">:</span><span class="token number">25</span> hash<span class="token operator">:</span><span class="token number">31</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">|</span> unused<span class="token operator">:</span><span class="token number">1</span>   age<span class="token operator">:</span><span class="token number">4</span>    biased_lock<span class="token operator">:</span><span class="token number">1</span> lock<span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">(</span>normal object<span class="token punctuation">)</span>
<span class="token class-name">JavaThread</span><span class="token operator">*</span><span class="token operator">:</span><span class="token number">54</span> epoch<span class="token operator">:</span><span class="token number">2</span> unused<span class="token operator">:</span><span class="token number">1</span>   age<span class="token operator">:</span><span class="token number">4</span>    biased_lock<span class="token operator">:</span><span class="token number">1</span> lock<span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">(</span>biased object<span class="token punctuation">)</span>
<span class="token class-name">PromotedObject</span><span class="token operator">*</span><span class="token operator">:</span><span class="token number">61</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token operator">|</span> promo_bits<span class="token operator">:</span><span class="token number">3</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token constant">CMS</span> promoted object<span class="token punctuation">)</span>
size<span class="token operator">:</span><span class="token number">64</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token constant">CMS</span> free block<span class="token punctuation">)</span>

unused<span class="token operator">:</span><span class="token number">25</span> hash<span class="token operator">:</span><span class="token number">31</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">|</span> cms_free<span class="token operator">:</span><span class="token number">1</span> age<span class="token operator">:</span><span class="token number">4</span>    biased_lock<span class="token operator">:</span><span class="token number">1</span> lock<span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token class-name">COOPs</span> <span class="token operator">&amp;&amp;</span> normal object<span class="token punctuation">)</span>
<span class="token class-name">JavaThread</span><span class="token operator">*</span><span class="token operator">:</span><span class="token number">54</span> epoch<span class="token operator">:</span><span class="token number">2</span> cms_free<span class="token operator">:</span><span class="token number">1</span> age<span class="token operator">:</span><span class="token number">4</span>    biased_lock<span class="token operator">:</span><span class="token number">1</span> lock<span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token class-name">COOPs</span> <span class="token operator">&amp;&amp;</span> biased object<span class="token punctuation">)</span>
narrowOop<span class="token operator">:</span><span class="token number">32</span> unused<span class="token operator">:</span><span class="token number">24</span> cms_free<span class="token operator">:</span><span class="token number">1</span> unused<span class="token operator">:</span><span class="token number">4</span> promo_bits<span class="token operator">:</span><span class="token number">3</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">COOPs</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">CMS</span> promoted object<span class="token punctuation">)</span>
unused<span class="token operator">:</span><span class="token number">21</span> size<span class="token operator">:</span><span class="token number">35</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">|</span> cms_free<span class="token operator">:</span><span class="token number">1</span> unused<span class="token operator">:</span><span class="token number">7</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">COOPs</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">CMS</span> free block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),m=n("em",null,"源码地址",-1),v={href:"http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/oops/markOop.hpp",target:"_blank",rel:"noopener noreferrer"},b=e(`<p><strong>HotSpot虚拟机中</strong>，对象在内存中存储的布局可以分为三块区域：<code>对象头（Header）</code>、<code>实例数据（Instance Data）</code>和<code>对齐填充（Padding）</code>。</p><ul><li>mark-word：对象标记字段占8个字节，用于存储一些列的标记位，比如：哈希值、轻量级锁的标记位，偏向锁标记位、分代年龄等。</li><li>Klass Pointer：Class对象的类型指针，Jdk1.8默认开启指针压缩后为4字节，关闭指针压缩（<code>-XX:-UseCompressedOops</code>）后，长度为8字节。其指向的位置是对象对应的Class对象（其对应的元数据对象）的内存地址。</li><li>对象实际数据：包括对象的所有成员变量，大小由各个成员变量决定，比如：byte占1个字节8比特位、int占4个字节32比特位。</li><li>对齐：最后这段空间补全并非必须，仅仅为了起到占位符的作用。由于HotSpot虚拟机的内存管理系统要求对象起始地址必须是8字节的整数倍，所以对象头正好是8字节的倍数。因此当对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</li></ul><p><strong>另外</strong>，在mark-word锁类型标记中，无锁，偏向锁，轻量锁，重量锁，以及GC标记，5种类中没法用2比特标记（2比特最终有4种组合<code>00</code>、<code>01</code>、<code>10</code>、<code>11</code>），所以无锁、偏向锁，前又占了一位偏向锁标记。最终：001为无锁、101为偏向锁。</p><h4 id="_1-2-验证对象结构" tabindex="-1"><a class="header-anchor" href="#_1-2-验证对象结构" aria-hidden="true">#</a> 1.2 验证对象结构</h4><p>为了可以更加直观的看到对象结构，我们可以借助 <code>openjdk</code> 提供的 <code>jol-core</code> 进行打印分析。</p><p><strong>引入POM</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jol<span class="token operator">/</span>jol<span class="token operator">-</span>cli <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jol<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jol<span class="token operator">-</span>cli<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">0.14</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">&quot; 十六进制哈希：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-1-指针压缩开启-默认" tabindex="-1"><a class="header-anchor" href="#_1-2-1-指针压缩开启-默认" aria-hidden="true">#</a> 1.2.1 指针压缩开启(默认)</h5><p><strong>运行结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">Running</span> <span class="token number">64</span><span class="token operator">-</span>bit <span class="token class-name">HotSpot</span> <span class="token constant">VM</span><span class="token punctuation">.</span>
# <span class="token class-name">Using</span> compressed oop <span class="token keyword">with</span> <span class="token number">3</span><span class="token operator">-</span>bit shift<span class="token punctuation">.</span>
# <span class="token class-name">Using</span> compressed klass <span class="token keyword">with</span> <span class="token number">3</span><span class="token operator">-</span>bit shift<span class="token punctuation">.</span>
# <span class="token class-name">Objects</span> are <span class="token number">8</span> bytes aligned<span class="token punctuation">.</span>
# <span class="token class-name">Field</span> sizes by type<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">[</span>bytes<span class="token punctuation">]</span>
# <span class="token class-name">Array</span> element sizes<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">[</span>bytes<span class="token punctuation">]</span>

<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> object internals<span class="token operator">:</span>
 <span class="token constant">OFFSET</span>  <span class="token constant">SIZE</span>   <span class="token constant">TYPE</span> <span class="token constant">DESCRIPTION</span>                               <span class="token constant">VALUE</span>
      <span class="token number">0</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000001</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token number">4</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token number">8</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           e5 <span class="token number">01</span> <span class="token number">00</span> f8 <span class="token punctuation">(</span><span class="token number">11100101</span> <span class="token number">00000001</span> <span class="token number">00000000</span> <span class="token number">11111000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">134217243</span><span class="token punctuation">)</span>
     <span class="token number">12</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>loss due <span class="token keyword">to</span> <span class="token namespace">the</span> next object alignment<span class="token punctuation">)</span>
<span class="token class-name">Instance</span> size<span class="token operator">:</span> <span class="token number">16</span> bytes
<span class="token class-name">Space</span> losses<span class="token operator">:</span> <span class="token number">0</span> bytes internal <span class="token operator">+</span> <span class="token number">4</span> bytes external <span class="token operator">=</span> <span class="token number">4</span> bytes total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-02.png" alt="图 15-2 指针压缩开启，对象头布局"></p><ul><li>Object对象，总共占16字节</li><li>对象头占 12 个字节，其中：mark-down 占 8 字节、Klass Point 占 4 字节</li><li>最后 4 字节，用于数据填充找齐</li></ul><h5 id="_1-2-2-指针压缩关闭" tabindex="-1"><a class="header-anchor" href="#_1-2-2-指针压缩关闭" aria-hidden="true">#</a> 1.2.2 指针压缩关闭</h5><p>在 <code>Run--&gt;Edit Configurations-&gt;VM Options</code> 配置参数 <code>-XX:-UseCompressedOops</code> 关闭指针压缩。</p><p><strong>运行结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> object internals<span class="token operator">:</span>
 <span class="token constant">OFFSET</span>  <span class="token constant">SIZE</span>   <span class="token constant">TYPE</span> <span class="token constant">DESCRIPTION</span>                               <span class="token constant">VALUE</span>
      <span class="token number">0</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">01</span> <span class="token number">12</span> <span class="token number">0</span>c <span class="token number">53</span> <span class="token punctuation">(</span><span class="token number">00000001</span> <span class="token number">00010010</span> <span class="token number">00001100</span> <span class="token number">01010011</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1393299969</span><span class="token punctuation">)</span>
      <span class="token number">4</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">02</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000010</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token number">8</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">00</span> <span class="token number">1</span>c b9 <span class="token number">1</span>b <span class="token punctuation">(</span><span class="token number">00000000</span> <span class="token number">00011100</span> <span class="token number">10111001</span> <span class="token number">00011011</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">465116160</span><span class="token punctuation">)</span>
     <span class="token number">12</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token class-name">Instance</span> size<span class="token operator">:</span> <span class="token number">16</span> bytes
<span class="token class-name">Space</span> losses<span class="token operator">:</span> <span class="token number">0</span> bytes internal <span class="token operator">+</span> <span class="token number">0</span> bytes external <span class="token operator">=</span> <span class="token number">0</span> bytes total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-03.png" alt="图 15-3 指针压缩关闭，对象头布局"></p><ul><li>关闭指针压缩后，mark-word 还是占 8 字节不变。</li><li>重点在类型指针 Klass Point 的变化，由原来的 4 字节，现在扩增到 8 字节。</li></ul><h5 id="_1-2-3-对象头哈希值存储验证" tabindex="-1"><a class="header-anchor" href="#_1-2-3-对象头哈希值存储验证" aria-hidden="true">#</a> 1.2.3 对象头哈希值存储验证</h5><p>接下来，我们调整下测试代码，看下哈希值在对象头中具体是怎么存放的。</p><p><strong>测试代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">&quot; 十六进制哈希：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>改动不多，只是把哈希值和对象打印出来，方便我们验证对象头关于哈希值的存放结果。</li></ul><p><strong>运行结果</strong></p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-04.png" alt="图 15-3 对象头哈希值存放"></p><ul><li>如图 15-3，对象的哈希值是16进制的，<code>0x2530c12</code></li><li>在对象头哈希值存放的结果上看，也有对应的数值。只不过这个结果是倒过来的。</li></ul><p>关于这个倒过来的问题是因为，大小端存储导致；</p><ul><li>Big-Endian：高位字节存放于内存的低地址端，低位字节存放于内存的高地址端</li><li>Little-Endian：低位字节存放于内存的低地址端，高位字节存放于内存的高地址端</li></ul><p><strong>mark-down结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-05.png" alt="图 15-5 无锁状态，64位虚拟机mark-down结构"></p><p>如图 15-5 最右侧的 3 Bit（1 Bit标识偏向锁，2 Bit描述锁的类型）是跟锁类型和GC标记相关的，而 synchronized 的锁优化升级膨胀就是修改的这三位上的标识，来区分不同的锁类型。从而采取不同的策略来提升性能。</p><h4 id="_1-3-monitor-对象" tabindex="-1"><a class="header-anchor" href="#_1-3-monitor-对象" aria-hidden="true">#</a> 1.3 Monitor 对象</h4><p>在HotSpot虚拟机中，monitor是由C++中ObjectMonitor实现。</p><p>synchronized 的运行机制，就是当 JVM 监测到对象在不同的竞争状况时，会自动切换到适合的锁实现，这种切换就是锁的升级、降级。</p><p>那么三种不同的 Monitor 实现，也就是常说的三种不同的锁：偏斜锁（Biased Locking）、轻量级锁和重量级锁。当一个 Monitor 被某个线程持有后，它便处于锁定状态。</p><p><strong>Monitor 主要数据结构如下</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// initialize the monitor, exception the semaphore, all other fields</span>
<span class="token comment">// are simple integers or pointers</span>
<span class="token class-name">ObjectMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _header       <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    _count        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// 记录个数</span>
    _waiters      <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    _recursions   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// 线程重入次数</span>
    _object       <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 存储 Monitor 对象</span>
    _owner        <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 持有当前线程的 owner</span>
    _WaitSet      <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 处于wait状态的线程，会被加入到 _WaitSet</span>
    _WaitSetLock  <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    _Responsible  <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
    _succ         <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
    _cxq          <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>   <span class="token comment">// 单向列表</span>
    <span class="token class-name">FreeNext</span>      <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
    _EntryList    <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>   <span class="token comment">// 处于等待锁block状态的线程，会被加入到该列表</span>
    _SpinFreq     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    _SpinClock    <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token class-name">OwnerIsThread</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    _previous_owner_tid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),h=n("em",null,"源码地址",-1),g={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/objectMonitor.hpp",target:"_blank",rel:"noopener noreferrer"},y=e(`<ul><li>ObjectMonitor，有两个队列：<code>_WaitSet</code>、<code> _EntryList</code>，用来保存 ObjectWaiter 对象列表。</li><li>_owner，获取 Monitor 对象的线程进入 _owner 区时， _count + 1。如果线程调用了 wait() 方法，此时会释放 Monitor 对象， _owner 恢复为空， _count - 1。同时该等待线程进入 _WaitSet 中，等待被唤醒。</li></ul><p><strong>锁🔒执行效果如下</strong>：</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-06.png" alt="图 15-06，锁🔒执行效果"></p><p>如图 15-06，每个 Java 对象头中都包括 Monitor 对象(存储的指针的指向)，synchronized 也就是通过这一种方式获取锁，也就解释了为什么 synchronized() 括号里放任何对象都能获得锁🔒！</p><h3 id="_2-synchronized-特性" tabindex="-1"><a class="header-anchor" href="#_2-synchronized-特性" aria-hidden="true">#</a> 2. synchronized 特性</h3><h4 id="_2-1-原子性" tabindex="-1"><a class="header-anchor" href="#_2-1-原子性" aria-hidden="true">#</a> 2.1 原子性</h4><p><strong>原子性</strong>是指一个操作是不可中断的，要么全部执行成功要么全部执行失败。</p><p><strong>案例代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i1 <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 等10个线程运行完毕</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    counter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码开启了 10 个线程来累加 counter，按照预期结果应该是 100000。但实际运行会发现，counter 值每次运行都小于 10000，这是因为 volatile 并不能保证原子性，所以最后的结果不会是10000。</p><p>修改方法 add()，添加 synchronized：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">AtomicityTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这回测试结果就是：100000 了！</p><p>因为 synchronized 可以保证统一时间只有一个线程能拿到锁，进入到代码块执行。</p><p><strong>反编译查看指令码</strong></p><p><code>javap -v -p AtomicityTest</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span>
         <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">12</span>                 <span class="token comment">// class org/itstack/interview/AtomicityTest</span>
         <span class="token number">2</span><span class="token operator">:</span> dup
         <span class="token number">3</span><span class="token operator">:</span> astore_0
         <span class="token number">4</span><span class="token operator">:</span> monitorenter
         <span class="token number">5</span><span class="token operator">:</span> getstatic     #<span class="token number">10</span>                 <span class="token comment">// Field counter:I</span>
         <span class="token number">8</span><span class="token operator">:</span> iconst_1
         <span class="token number">9</span><span class="token operator">:</span> iadd
        <span class="token number">10</span><span class="token operator">:</span> putstatic     #<span class="token number">10</span>                 <span class="token comment">// Field counter:I</span>
        <span class="token number">13</span><span class="token operator">:</span> aload_0
        <span class="token number">14</span><span class="token operator">:</span> monitorexit
        <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">23</span>
        <span class="token number">18</span><span class="token operator">:</span> astore_1
        <span class="token number">19</span><span class="token operator">:</span> aload_0
        <span class="token number">20</span><span class="token operator">:</span> monitorexit
        <span class="token number">21</span><span class="token operator">:</span> aload_1
        <span class="token number">22</span><span class="token operator">:</span> athrow
        <span class="token number">23</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">Exception</span> table<span class="token operator">:</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>同步方法</strong></p><p><code>ACC_SYNCHRONIZED</code> 这是一个同步标识，对应的16进制值是 0x0020</p><p>这10个线程进入这个方法时，都会判断是否有此标识，然后开始竞争 Monitor 对象。</p><p><strong>同步代码</strong></p><ul><li><code>monitorenter</code>，在判断拥有同步标识 <code>ACC_SYNCHRONIZED</code> 抢先进入此方法的线程会优先拥有 Monitor 的 owner ，此时计数器 +1。</li><li><code>monitorexit</code>，当执行完退出后，计数器 -1，归 0 后被其他进入的线程获得。</li></ul><h4 id="_2-2-可见性" tabindex="-1"><a class="header-anchor" href="#_2-2-可见性" aria-hidden="true">#</a> 2.2 可见性</h4><p>在上一章节 volatile 篇中，我们知道它保证变量对所有线程的可见性。最终的效果就是在添加 volatile 的属性变量时，线程A修改值后，线程B使用此变量可以做出相应的反应，比如 <code>while(!变量)</code> 退出。</p><p>那么，<code>synchronized</code> 具备可见性吗，我们做给例子。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> sign <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> <span class="token class-name">Thread01</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sign<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> <span class="token class-name">Thread02</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        sign <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;vt.sign = true  while (!sign)&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread01</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread02</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是两个线程操作一个变量的例子，因为线程间对变量 <code>sign</code> 的不可见性，线程 Thread01 中的 while (!sign) 会一直执行，不会随着线程 Thread02 修改 sign = true 而退出循环。</p><p><strong>现在</strong>我们给方法 add 添加 <code>synchronized</code> 关键字修饰，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加后运行结果</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">33.849</span> <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span></span>VisibilityTest</span> <span class="token operator">-</span> vt<span class="token punctuation">.</span>sign <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sign<span class="token punctuation">)</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到当线程 Thread02 改变变量 sign = true 后，线程 Thread01 立即退出了循环。</p><p><em>注意：不要在方法中添加 System.out.println() ，因为这个方法中含有 synchronized 会影响测试结果！</em></p><p><strong>那么为什么添加 synchronized 也能保证变量的可见性呢？</strong></p><p>因为：</p><ol><li>线程解锁前，必须把共享变量的最新值刷新到主内存中。</li><li>线程加锁前，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值。</li><li>volatile 的可见性都是通过内存屏障（Memnory Barrier）来实现的。</li><li>synchronized 靠操作系统内核互斥锁实现，相当于 JMM 中的 lock、unlock。退出代码块时刷新变量到主内存。</li></ol><h4 id="_2-3-有序性" tabindex="-1"><a class="header-anchor" href="#_2-3-有序性" aria-hidden="true">#</a> 2.3 有序性</h4><p><code>as-if-serial</code>，保证不管编译器和处理器为了性能优化会如何进行指令重排序，都需要保证单线程下的运行结果的正确性。也就是常说的：<strong>如果在本线程内观察，所有的操作都是有序的；如果在一个线程观察另一个线程，所有的操作都是无序的。</strong></p><p>这里有一段双重检验锁（Double-checked Locking）的经典案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么</strong>，synchronized 也有可见性的特点，还需要 volatile 关键字？</p><p>因为，synchronized 的有序性，不是 volatile 的防止指令重排序。</p><p>那如果不加 volatile 关键字可能导致的结果，就是第一个线程在初始化初始化对象，设置 instance 指向内存地址时。第二个线程进入时，有指令重排。在判断 if (instance == null) 时就会有出错的可能，因为这会可能 instance 可能还没有初始化成功。</p><h4 id="_2-4-可重入性" tabindex="-1"><a class="header-anchor" href="#_2-4-可重入性" aria-hidden="true">#</a> 2.4 可重入性</h4><p>synchronized 是可重入锁，也就是说，允许一个线程二次请求自己持有对象锁的临界资源，这种情况称为可重入锁🔒。</p><p>那么我们就写一个例子，来证明这样的情况。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentryTest</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReentryTest</span> reentry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        reentry<span class="token punctuation">.</span><span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子类方法：ReentryTest.doA() ThreadId：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子类方法：ReentryTest.doB() ThreadId：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;父类方法：A.doA() ThreadId：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>子类方法：<span class="token class-name">ReentryTest</span><span class="token punctuation">.</span><span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">ThreadId</span>：<span class="token number">1</span>
父类方法：<span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">ThreadId</span>：<span class="token number">1</span>
子类方法：<span class="token class-name">ReentryTest</span><span class="token punctuation">.</span><span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">ThreadId</span>：<span class="token number">1</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段单例代码是递归调用含有 synchronized 锁的方法，从运行正常的测试结果看，并没有发生死锁。所有可以证明 synchronized 是可重入锁。</p><p>synchronized锁对象的时候有个计数器，他会记录下线程获取锁的次数，在执行完对应的代码块之后，计数器就会-1，直到计数器清零，就释放锁了。</p><p><strong>之所以</strong>，是可以重入。是因为 synchronized 锁对象有个计数器，会随着线程获取锁后 +1 计数，当线程执行完毕后 -1，直到清零释放锁。</p><h3 id="_3-锁升级过程" tabindex="-1"><a class="header-anchor" href="#_3-锁升级过程" aria-hidden="true">#</a> 3. 锁升级过程</h3><p>关于 synchronized 锁🔒升级有一张非常完整的图，可以参考：</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-15-07.png" alt="图 15-7 synchronized 锁升级过程"></p><p>synchronized 锁有四种交替升级的状态：无锁、偏向锁、轻量级锁和重量级，这几个状态随着竞争情况逐渐升级。</p><h4 id="_3-1-偏向锁" tabindex="-1"><a class="header-anchor" href="#_3-1-偏向锁" aria-hidden="true">#</a> 3.1 偏向锁</h4>`,57),_={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/synchronizer.cpp",target:"_blank",rel:"noopener noreferrer"},w=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// NOTE: must use heavy weight monitor to handle jni monitor exit</span>
<span class="token keyword">void</span> <span class="token class-name">ObjectSynchronizer</span><span class="token operator">::</span><span class="token function">jni_exit</span><span class="token punctuation">(</span>oop obj<span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token operator">*</span> <span class="token constant">THREAD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">TEVENT</span> <span class="token punctuation">(</span>jni_exit<span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">UseBiasedLocking</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Handle</span> <span class="token function">h_obj</span><span class="token punctuation">(</span><span class="token constant">THREAD</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BiasedLocking</span><span class="token operator">::</span><span class="token function">revoke_and_rebias</span><span class="token punctuation">(</span>h_obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token constant">THREAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj <span class="token operator">=</span> <span class="token function">h_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token operator">-&gt;</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">has_bias_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;biases should be revoked by now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">ObjectMonitor</span><span class="token operator">*</span> monitor <span class="token operator">=</span> <span class="token class-name">ObjectSynchronizer</span><span class="token operator">::</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token constant">THREAD</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// If this thread has locked the object, exit the monitor.  Note:  can&#39;t use</span>
  <span class="token comment">// monitor-&gt;check(CHECK); must exit even if an exception is pending.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>monitor<span class="token operator">-&gt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token constant">THREAD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     monitor<span class="token operator">-&gt;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token constant">THREAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UseBiasedLocking 是一个偏向锁检查，1.6之后是默认开启的，1.5中是关闭的，需要手动开启参数是 <code>XX:-UseBiasedLocking=false</code></li></ul><p>偏斜锁会延缓 JIT 预热进程，所以很多性能测试中会显式地关闭偏斜锁，偏斜锁并不适合所有应用场景，撤销操作（revoke）是比较重的行为，只有当存在较多不会真正竞争的 synchronized 块儿时，才能体现出明显改善。</p><h4 id="_3-2-轻量级锁" tabindex="-1"><a class="header-anchor" href="#_3-2-轻量级锁" aria-hidden="true">#</a> 3.2 轻量级锁</h4><p>当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），JVM虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。</p><h4 id="_3-3-自旋锁" tabindex="-1"><a class="header-anchor" href="#_3-3-自旋锁" aria-hidden="true">#</a> 3.3 自旋锁</h4><p>自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。</p><p>自旋锁的默认大小是10次，可以调整：<code>-XX：PreBlockSpin</code></p><p>如果自旋n次失败了，就会升级为重量级的锁。<code>重量级的锁，在 1.3 Monitor 对象中已经介绍。</code></p><h4 id="_3-4-锁会降级吗" tabindex="-1"><a class="header-anchor" href="#_3-4-锁会降级吗" aria-hidden="true">#</a> 3.4 锁会降级吗？</h4><p>之前一直了解到 Java 不会进行锁降级，但最近整理了大量的资料发现锁降级确实是会发生。</p><p><strong>When safepoints are used?</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Below</span> are few reasons <span class="token keyword">for</span> <span class="token class-name">HotSpot</span> <span class="token constant">JVM</span> <span class="token keyword">to</span> <span class="token namespace">initiate</span> a safepoint<span class="token operator">:</span>
<span class="token class-name">Garbage</span> collection pauses
<span class="token class-name">Code</span> deoptimization
<span class="token class-name">Flushing</span> code cache
<span class="token class-name">Class</span> redefinition <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> hot swap or instrumentation<span class="token punctuation">)</span>
<span class="token class-name">Biased</span> lock revocation
<span class="token class-name">Various</span> debug operation <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> deadlock check or stacktrace dump<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),f=n("code",null,"Biased lock revocation",-1),j={href:"http://blog.ragozin.info/2012/10/safepoints-in-hotspot-jvm.html",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"四、总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、总结","aria-hidden":"true"},"#"),s(" 四、总结")],-1),T=n("code",null,"synchronized",-1),z={href:"https://github.com/JetBrains/jdk8u_hotspot",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,"关于锁的细节挖掘除了本文提到的还有很多知识点可以继续学习，可以结合 ifeve、并发编程、深入理解JVM虚拟机，等系列知识整理。",-1),C=n("li",null,"学习过程中结合C++源代码中关于锁的实现，更容易理解可能原本晦涩难懂的概念。在结合实际的案例验证，会容易接受这部分知识。",-1),I=n("li",null,"好了，这篇就写到这里了，如果有观点和文章不准确的表达欢迎留言，互相学习，互相扫盲，互相进步。",-1),O=n("h2",{id:"五、傅诗一手",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、傅诗一手","aria-hidden":"true"},"#"),s(" 五、傅诗一手")],-1),M=n("ul",null,[n("li",null,"会所🏢，里的码农会锁。"),n("li",null,"拥挤🤼‍♂️，就需加价升级。"),n("li",null,"项目🤯，按摩对象头皮。"),n("li",null,"效果🤨，可见原子有序。")],-1);function L(E,A){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),p(a)])]),d,n("p",null,[m,s("："),n("a",v,[s("jdk8/hotspot/file/vm/oops/markOop.hpp"),p(a)])]),b,n("p",null,[h,s("："),n("a",g,[s("jdk8/hotspot/file/vm/runtime/objectMonitor.hpp"),p(a)])]),y,n("p",null,[s("synchronizer源码："),n("a",_,[s("/src/share/vm/runtime/synchronizer.cpp"),p(a)])]),w,n("p",null,[f,s("，当 JVM 进入安全点 "),n("a",j,[s("SafePoint"),p(a)]),s("的时候，会检查是否有闲置的 Monitor，然后试图进行降级。")]),x,n("ul",null,[n("li",null,[s("本章关于 "),T,s(" 锁涉及到了较多的C++源码分析学习，源码地址："),n("a",z,[s("https://github.com/JetBrains/jdk8u_hotspot"),p(a)])]),S,C,I]),O,M])}const N=t(i,[["render",L],["__file","2020-10-28-mianjingshouce · di15pian《manonghuisuo，synchronized jiedu，pouxiyuanmashendufenxi！》.html.vue"]]);export{N as default};
