import{_ as n,o as s,c as a,e as t}from"./app-3RcBQnkC.js";const e={},p=t(`<h1 id="_4-3-调试" tabindex="-1"><a class="header-anchor" href="#_4-3-调试" aria-hidden="true">#</a> 4.3 调试</h1><p>以 <code>javac -g</code> 编译的类中包含了其源文件的名字、源代码行编号与字节代码指令之间的映射、源代码中局部变量名与字节代码中局部变量槽之间的映射。当这一可选信息可用时， 会在调试器中和异常栈轨迹中使用它们。</p><h2 id="_4-3-1-结构" tabindex="-1"><a class="header-anchor" href="#_4-3-1-结构" aria-hidden="true">#</a> 4.3.1 结构</h2><p>一个类的源文件名存储在一个专门的类文件结构部分中（见图 2.1）。</p><p>源代码行编号与字节代码指令之间的映射存储为一个由（line number, label）对组成的列表中，放在方法的已编译代码部分中。例如，如果 l1、l2 和 l3 是按此顺序出现的三个标记，则下面各对：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> l1<span class="token punctuation">)</span>
<span class="token punctuation">(</span>n2<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>
<span class="token punctuation">(</span>n3<span class="token punctuation">,</span> l3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意味着 l1 和 l2 之间的指令来自行 n1，l2 和 l3 之间的指令来自 n2，l3 之后的指令来自行 n3。注意，一个给定行号可以出现在几个对中。这是因为，对于出现在一个源代码行中的表达式，其在字节代码中的相应指令可能不是连续的。例如，for (init; cond; incr) statement;通常是按以下顺序编译的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>init statement incr cond
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>源代码中局部变量名与字节代码中局部变量槽之间的映射，以(name, type descriptor, type signature, start, end, index)等多元组列表的形式存储在该方法的已编译代码节中。这样一个多元组的含义是：在两个标记 start 和 end 之间，槽 index 中的局部变量对应于源代码中的局部变量，其名字和类型由多元组的前三个元素组出。注意，编译器可以使用相同的局部变量槽来存储具有不同作用范围的不同源局部变量。反之，同一个源代码局部变量可能被编译为一个具有非连续作用范围的局部变量槽。例如，有可能存在一种类似如下的情景：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>l1<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//  这里的槽 1 包含局部变量i</span>
l2<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//  这里的槽 1 包含局部变量j</span>
l3<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//  这里的槽 1 再次包含局部变量i</span>
end<span class="token operator">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的多元组为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;j&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l2<span class="token punctuation">,</span> l3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l3<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-2-接口和组件" tabindex="-1"><a class="header-anchor" href="#_4-3-2-接口和组件" aria-hidden="true">#</a> 4.3.2 接口和组件</h2><p>调试信息用 ClassVisitor 和 MethodVisitor 类的三个方法访问：</p><ul><li>源文件名用 ClassVisitor 类的 visitSource 方法访问；</li><li>源代码行号与字节代码指令之间的映射用 MethodVisitor 类的 visitLineNumber 方法访问，每次访问一对；</li><li>源代码中局部变量名与字节代码中局部变量槽之间的映射用 MethodVisitor 类的 visitLocalVariable 方法访问，每次访问一个多元组。</li></ul><p>visitLineNumber 方法必须在已经访问了作为参数传送的标记之后进行调用。在实践中， 就是在访问这一标记后立即调用它，从而可以非常容易地知道一个方法访问器中当前指令的源代码行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> currentLine<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyAdapter</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitLineNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token class-name">Label</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mv<span class="token punctuation">.</span><span class="token function">visitLineNumber</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentLine <span class="token operator">=</span> line<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，visitLocalVariable 方法方法必须在已经访问了作为参数传送的标记之后调用。下面给出一些方法调用示例，它们对应于上一节给出的名称值对和多元组：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">visitLineNumber</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">visitLineNumber</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">visitLineNumber</span><span class="token punctuation">(</span>n3<span class="token punctuation">,</span> l3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">visitLocalVariable</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">visitLocalVariable</span><span class="token punctuation">(</span><span class="token string">&quot;j&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l2<span class="token punctuation">,</span> l3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">visitLocalVariable</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l3<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>忽略调试信息</li></ol><p>为了访问行号和局部变量名，ClassReader 类可能需要引入“人为”Label 对象，也就是说，跳转指令并不需要它们，它们只是为了表示调试信息。这可能会在诸如 3.2.5 节介绍的情景中导致错误判断，在该情景中，指令序列中部的一个 Label 被认为是一个跳转目标，因此禁止这一序列被删除。</p><p>为避免这种误判，可以在 ClassReader.accept 方法中使用 SKIP_DEBUG 选项。有了这一选项，类读取器不会访问调试信息，不会为它创建人为标记。当然，调试信息会从类中删除， 因此，只有在不会为应用程序造成问题时才能使用这一选项。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>注意：<span class="token class-name">ClassReader</span> 类提供了其他一些选项，比如：<span class="token constant">SKIP_CODE</span>，用于跳过对已编译代码的访问（如果只需要类的结构，那这个选项是很有用的）；<span class="token constant">SKIP_FRAMES</span>，用于跳过栈映射帧；<span class="token constant">EXPAND_FRAMES</span>，用于解压缩这些帧。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-3-3-工具" tabindex="-1"><a class="header-anchor" href="#_4-3-3-工具" aria-hidden="true">#</a> 4.3.3 工具</h2><p>和泛型与注释的情景一样，可以使用 <strong>TraceClassVisitor</strong>、<strong>CheckClassAdapter</strong> 和 <strong>ASMifier</strong> 类来了解如何使用调试信息。</p>`,25),i=[p];function o(c,l){return s(),a("div",null,i)}const d=n(e,[["render",o],["__file","4.3diaoshi.html.vue"]]);export{d as default};
