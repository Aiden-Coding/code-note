import{_ as e,r as p,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"野路子搞算法-·-让算法可视化《leetcode03-无重复字符的最长子串》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#野路子搞算法-·-让算法可视化《leetcode03-无重复字符的最长子串》","aria-hidden":"true"},"#"),s(" 野路子搞算法 · 让算法可视化《leetcode03.无重复字符的最长子串》")],-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),d=n("br",null,null,-1),v=n("h2",{id:"一、前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言","aria-hidden":"true"},"#"),s(" 一、前言")],-1),b=n("p",null,[s("在刷了第一道 "),n("code",null,"leetcode"),s(" 的题以后我一直在思考，怎么才能让小白更清楚的了解到整个算法运行的过程。如果只是单纯的一点点看代码，从中摸清楚整个流程确实还是有一些难度。虽然就一道题来说，代码块并不会很大，但仅凭借变量之间的交换以及断点调试输出结果，还是很难在我们的大脑中形成一个完整的执行流程。")],-1),m={href:"https://github.com/algorithm-visualizer",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"MarkKoz",-1),g={href:"https://github.com/algorithm-visualizer",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"好！那么我就按照自己的需求，将代码部署到本地以及创建了一套符合自己需求可以将各种算法题进行可视化展示。这套功能包括三部分，如下(可以下载后运行)；",-1),f=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"序号"),n("th",{style:{"text-align":"left"}},"名称"),n("th",{style:{"text-align":"left"}},"功能"),n("th",{style:{"text-align":"center"}},"操作")])],-1),y=n("td",{style:{"text-align":"left"}},"1",-1),_=n("td",{style:{"text-align":"left"}},"algorithm-visualizer",-1),w=n("td",{style:{"text-align":"left"}},"可视化算法代码平台，目前支持的算法包括回溯法、加密算法、动态规划、图搜索、贪婪算法、搜索算法、排序算法等。",-1),q={style:{"text-align":"center"}},I={href:"https://github.com/niubility-algorithm",target:"_blank",rel:"noopener noreferrer"},z=n("td",{style:{"text-align":"left"}},"2",-1),S=n("td",{style:{"text-align":"left"}},"server",-1),j=n("td",{style:{"text-align":"left"}},[s("算法可视化服务器，用于编译算法代码提供服务接口。这个编译过程会从 "),n("code",null,"github"),s(" 上下载算法代码，并编译到本地。")],-1),O={style:{"text-align":"center"}},A={href:"https://github.com/niubility-algorithm",target:"_blank",rel:"noopener noreferrer"},M=n("td",{style:{"text-align":"left"}},"3",-1),L=n("td",{style:{"text-align":"left"}},"algorithms",-1),C=n("td",{style:{"text-align":"left"}},[s("算法代码块，这里面默认包括了大量的可执行展示的算法。同时在我们刷 "),n("code",null,"leetcode"),s(" 后也是将代码编写为可视化的方式，提交到这里。")],-1),N={style:{"text-align":"center"}},V={href:"https://github.com/niubility-algorithm",target:"_blank",rel:"noopener noreferrer"},B=l(`<p><strong>效果展示：</strong></p><p><img src="https://bugstack.cn/assets/images/2020/niubility-algorithm-0003-01.png" alt=""></p><ul><li>最左侧是代码区域，也就是我们提交到 <code>algorithms</code> 中的算法代码。<em>不支持中文以及特殊符号</em></li><li>中间是展示运行过程区域，这部分主要来自于在算法代码中添加的展示化代码块，例如：<code>array1DTracer.select(beginIdx, i - 1);</code></li><li>最右侧是代码区域，这里的代码可以修改后构建并运行，但不会保存。同时在运行的时候可以调整运行速度 <code>Speed</code>，极大的方便了我们观察算法的执行过程</li><li>上图的展示内容其实就是我们在 <code>leetcode</code> 中做的第一题《两数之和》其中的一中使用自己定义的 <code>bit</code> 结构数组的方式求解的演示</li></ul><p>那么！接下来我们开始刷 <code>leetcode</code> 中第三题《无重复字符的最长子串》，并最终动态展示给大家这段算法的执行效果。如果你想在本地运行，可以关注公众号：<code>bugstack虫洞栈</code></p><h2 id="二、题目-《无重复字符的最长子串》" tabindex="-1"><a class="header-anchor" href="#二、题目-《无重复字符的最长子串》" aria-hidden="true">#</a> 二、题目：《无重复字符的最长子串》</h2><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入<span class="token operator">:</span> <span class="token string">&quot;abcabcbb&quot;</span>
输出<span class="token operator">:</span> <span class="token number">3</span> 
解释<span class="token operator">:</span> 因为无重复字符的最长子串是 <span class="token string">&quot;abc&quot;</span>，所以其长度为 <span class="token number">3</span>。                   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入<span class="token operator">:</span> <span class="token string">&quot;bbbbb&quot;</span>
输出<span class="token operator">:</span> <span class="token number">1</span>
解释<span class="token operator">:</span> 因为无重复字符的最长子串是 <span class="token string">&quot;b&quot;</span>，所以其长度为 <span class="token number">1</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入<span class="token operator">:</span> <span class="token string">&quot;pwwkew&quot;</span>
输出<span class="token operator">:</span> <span class="token number">3</span>
解释<span class="token operator">:</span> 因为无重复字符的最长子串是 <span class="token string">&quot;wke&quot;</span>，所以其长度为 <span class="token number">3</span>。
     请注意，你的答案必须是 子串 的长度，<span class="token string">&quot;pwke&quot;</span> 是一个子序列，不是子串。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>java</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、思路和实现" tabindex="-1"><a class="header-anchor" href="#三、思路和实现" aria-hidden="true">#</a> 三、思路和实现</h2><p>从题目和示例上可以分析到这个题主要是从字符串中顺序寻找出一串内部不重复又是整个字符串中最长的那个字串。为了寻找到这样的子串可能首先想到的是循环出所有子串的集合，之后选取最长的。当把整个思路在整理几遍和简化后，那么是不就可以理解为，这是两个值指针在字符串中往前跑，当结尾指针碰到的元素与开始指针指向的元素一致，则将开始指针向前进一位，之后继续执行直到结束算出最长子串。整个思路可以用下图展示；</p><p><img src="https://bugstack.cn/assets/images/2020/niubility-algorithm-0003-02.png" alt=""></p><ul><li>从上图的算法可以看到，只要先跑的那个指针也就是子串结尾的指针，碰到了开始指针中间，一样的元素，就将指针位置指向相同元素的下一位。<strong>切记不是指针 +1</strong></li><li>为了实现这样的功能，我们就需要存储两个指针，同时需要有方法判断元素所处的位置。那么有如下几个方法； <ul><li>使用 <code>indexOf</code>，整个方法可以判断元素位置，同时可以指定从某个位置开始判断后面的元素是否存在相同元素。</li><li>使用 <code>toCharArray()</code>，转换为数组，并将元素按照按照编码位置存放到新建的数组中，用于判断元素是否出现过。</li><li>使用 <code>bit</code>，建立一个数组结构，通过与运算获取元素位置，并存放。方便快速查找。</li></ul></li><li>另外在比对是否撞上相同元素的时候，可以输出当前开始指针与结束指针中间的长度，并与之前的记录的值比对，如果超过则更新，直到最后输出。</li></ul><h3 id="_1-实现方式-indexof" tabindex="-1"><a class="header-anchor" href="#_1-实现方式-indexof" aria-hidden="true">#</a> 1. 实现方式，indexOf</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring_1</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> s <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  

    <span class="token keyword">int</span> beginIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> endIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        endIdx <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> existIdx <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> beginIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>existIdx <span class="token operator">&lt;</span> endIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beginIdx <span class="token operator">=</span> existIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> eval <span class="token operator">=</span> endIdx <span class="token operator">-</span> beginIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxSize <span class="token operator">&lt;</span> eval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxSize <span class="token operator">=</span> eval<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不满足条件的字符串直接按照规则返回。</li><li>每次循环计算是否碰撞到相同的元素，并处理开始指针的位置。</li><li>最后输出最长子串的长度。</li></ul><h3 id="_2-实现方式-tochararry" tabindex="-1"><a class="header-anchor" href="#_2-实现方式-tochararry" aria-hidden="true">#</a> 2. 实现方式，toCharArry</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring_2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> s <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    

    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    exist<span class="token punctuation">[</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     

    <span class="token keyword">int</span> beginIdx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> endIdx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> maxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        endIdx <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exist<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> beginIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">-</span> beginIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beginIdx <span class="token operator">=</span> exist<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        exist<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    maxSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>array<span class="token punctuation">[</span>endIdx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> beginIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> maxSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同样不满足的字符串直接返回。</li><li>字符串转换为数组，同时定义一个新的数组用于存放地址。<code>int[] exist = new int[127]</code>，元素作为地址，位置作为值。</li><li>只有在碰撞时候才计算两个指针间的长度，其他时间不计算。</li><li>最后输出最长子串的长度。</li></ul><h3 id="_3-实现方式-bit结构" tabindex="-1"><a class="header-anchor" href="#_3-实现方式-bit结构" aria-hidden="true">#</a> 3. 实现方式，bit结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring_3</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> s <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    

    <span class="token keyword">int</span> volume <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> bitMode <span class="token operator">=</span> volume <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>volume<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> beginIdx <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> bitMode<span class="token punctuation">,</span> endIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    t<span class="token punctuation">[</span>beginIdx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        endIdx <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> bitMode<span class="token punctuation">;</span>
        <span class="token keyword">int</span> val <span class="token operator">=</span> t<span class="token punctuation">[</span>endIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">&gt;=</span> t<span class="token punctuation">[</span>beginIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beginIdx <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span> bitMode<span class="token punctuation">;</span>
            t<span class="token punctuation">[</span>beginIdx<span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        t<span class="token punctuation">[</span>endIdx<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> t<span class="token punctuation">[</span>endIdx<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">[</span>beginIdx<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxSize <span class="token operator">=</span> v<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果你把上面的代码看明白了，那么这块的逻辑变化只是在于将元素通过<code>与</code>运算存放到bit结构中，这和我们在计算《两数之和》的算法方式一样。</li></ul><h2 id="四、算法可视化运行" tabindex="-1"><a class="header-anchor" href="#四、算法可视化运行" aria-hidden="true">#</a> 四、算法可视化运行</h2><p><img src="https://bugstack.cn/assets/images/2020/niubility-algorithm-0003-03.gif" alt=""></p><ul><li>通过可视化运行可以很方便的看到算法的执行过程，这要比我们只是用脑子一遍遍过程流程清晰的多。尤其是对新人来说，简直太方便了。</li><li>这个可视化运行的工具，可以自己下载安装，他是nodejs的环境。如果在使用过程中遇到什么问题，可以关注公众号(bugstack虫洞栈)内联系我。</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2>`,31),E=n("li",null,"想做好算法目前看到最主要的是捋清楚它的执行思路，之后选择不同的数据结构进行填充数据。最后按照这个流程一点点调试算法，以满足所有情况。",-1),J=n("li",null,"在可视化工具的辅助下，可以更加轻松的看到算法内部的执行过程。并且将算法转换为可视化，也不是很复杂，只要按照标准编写即可。",-1),T={href:"https://github.com/niubility-algorithm",target:"_blank",rel:"noopener noreferrer"};function D(G,K){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("小傅哥 & "),n("a",r,[s("https://bugstack.cn"),t(a)]),s(),k,s("沉淀、分享、成长，专注于原创专题案例，以最易学习编程的方式分享知识，让自己和他人都能有所收获。目前已完成的专题有；Netty4.x实战专题案例、用Java实现JVM、基于JavaAgent的全链路监控、手写RPC框架、架构设计专题案例、源码分析、算法学习等。"),d,s("你用剑🗡、我用刀🔪，好的代码都很烧，望你不吝出招！")])]),v,b,n("p",null,[s("为此，最近经过不断的搜索在 Github 中找到了 "),n("a",m,[h,t(a)]),s(" 大神的算法可视化工程："),n("a",g,[s("algorithm-visualizer"),t(a)]),s(" 。这是 nodejs 代码，在按照文档说明安装以及写测试用例验证后，确实可以满足目前的可视化需求。")]),x,n("table",null,[f,n("tbody",null,[n("tr",null,[y,_,w,n("td",q,[n("a",I,[s("下载"),t(a)])])]),n("tr",null,[z,S,j,n("td",O,[n("a",A,[s("下载"),t(a)])])]),n("tr",null,[M,L,C,n("td",N,[n("a",V,[s("下载"),t(a)])])])])]),B,n("ul",null,[E,J,n("li",null,[s("如果你也是一个爱做算法题的小白或者大牛，也欢迎你加入我们的算法可视化中，让我们一起开始算法之旅："),n("a",T,[s("https://github.com/niubility-algorithm"),t(a)])])])])}const R=e(i,[["render",D],["__file","2020-03-18-wuzhongfuzifudezuichangzichuan.html.vue"]]);export{R as default};
