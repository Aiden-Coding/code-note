import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战桥接模式「多支付渠道-微信、支付宝-与多支付模式-刷脸、指纹-场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战桥接模式「多支付渠道-微信、支付宝-与多支付模式-刷脸、指纹-场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战桥接模式「多支付渠道(微信、支付宝)与多支付模式(刷脸、指纹)场景」")],-1),k=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=725294804&bvid=BV16S4y1m7iH&cid=566843172&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>为什么你的代码那么多ifelse</code></p><p>同类的业务、同样的功能，怎么就你能写出来那么多<code>ifelse</code>。很多时候一些刚刚从校园进入企业的萌新，或者一部分从小公司跳槽到大企业的程序员，初次承接业务需求的时候，往往编码还不成熟，经常一杆到底的写需求。初次实现确实很快，但是后期维护和扩展就十分痛苦。因为一段代码的可读性阅读他后期的维护成本也就越高。</p><p><code>设计模式是可以帮助你改善代码</code></p><p>很多时候你写出来的<code>ifelse</code>都是没有考虑使用设计模式优化，就像；同类服务的不同接口适配包装、同类物料不同组合的建造、多种奖品组合的营销工厂等等。它们都可以让你代码中原本使用<code>if</code>判断的地方，变成一组组类和面向对象的实现过程。</p><p><code>怎么把设计模式和实际开发结合起来</code></p><p>多从实际场景思考，只找到代码优化的最佳点，不要可以想着设计模式的使用。就像你最开始看设计模式适合，因为没有真实的场景模拟案例，都是一些画圆形、方形，对新人或者理解能力还不到的伙伴来说很不友好。所以即使学了半天 ，但实际使用还是摸不着头脑。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),y=n("strong",null,"公众号",-1),h={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"bugstack虫洞栈",-1),w=n("code",null,"源码下载",-1),I=t('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-7-01</td><td>使用一坨代码实现业务需求</td></tr><tr><td>itstack-demo-design-7-02</td><td>通过设计模式优化改造代码，产生对比性从而学习</td></tr></tbody></table><h2 id="三、桥接模式介绍" tabindex="-1"><a class="header-anchor" href="#三、桥接模式介绍" aria-hidden="true">#</a> 三、桥接模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-7-01.png" alt="桥接模式，图片来自 refactoringguru.cn"></p>',3),_={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>桥接模式的主要作用就是通过将抽象部分与实现部分分离，把多种可匹配的使用进行组合。说白了核心实现也就是在A类中含有B类接口，通过构造函数传递B类的实现，这个B类就是设计的<code>桥</code>。</p><p><strong>那么这样的桥接模式，在我们平常的开发中有哪些场景</strong></p><p>JDBC多种驱动程序的实现、同品牌类型的台式机和笔记本平板、业务实现中的多类接口同组过滤服务等。这些场景都比较适合使用桥接模式进行实现，因为在一些组合中如果每一个类都实现不同的服务可能会出现笛卡尔积，而使用桥接模式就可以非常简单。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-7-02.png" alt="场景模拟；多种支付和模式"></p><p>随着市场的竞争在支付服务行业出现了微信和支付宝还包括一些其他支付服务，但是对于商家来说并不希望改变用户习惯。就像如果我的地摊只能使用微信或者只能使用支付宝付款，那么就会让我顾客伤心，鸡蛋灌饼也卖不动了。</p><p>在这个时候就出现了第三方平台，把市面上综合占据市场90%以上的支付服务都集中到自己平台中，再把这样的平台提供给店铺、超市、地摊使用，同时支持人脸、扫描、密码多种方式。</p><p>我们这个案例就模拟一个这样的第三方平台来承接各个支付能力，同时使用自家的人脸让用户支付起来更加容易。那么这里就出现了<strong>多支付</strong>与<strong>多模式</strong>的融合使用，如果给每一个支付都实现一次不同的模式，即使是继承类也需要开发好多。而且随着后面接入了更多的支付服务或者支付方式，就会呈爆炸似的扩展。</p><p>所以你现在可以思考一下这样的场景该如何实现？</p><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p><code>产品经理说老板要的需求，要尽快上，kpi你看着弄！</code></p><p>既然你逼我那就别怪我无情，还没有我一个类写不完的需求！反正写完就完事了，拿完绩效也要走了天天逼着写需求，代码越来越乱心疼后面的兄弟3秒。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                └── <span class="token class-name">PayController</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只有一个类里面都是<code>ifelse</code>，这个类实现了支付和模式的全部功能。</li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">PayController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doPay</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> tradeId<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span> channelType<span class="token punctuation">,</span> <span class="token keyword">int</span> modeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 微信支付</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> channelType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟微信渠道支付划账开始。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> modeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;密码支付，风控校验环境安全&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> modeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;人脸支付，风控校验脸部识别&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> modeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;指纹支付，风控校验指纹信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 支付宝支付</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> channelType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟支付宝渠道支付划账开始。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> modeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;密码支付，风控校验环境安全&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> modeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;人脸支付，风控校验脸部识别&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> modeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;指纹支付，风控校验指纹信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面的类提供了一个支付服务功能，通过提供的必要字段；<code>用户ID</code>、<code>交易ID</code>、<code>金额</code>、<code>渠道</code>、<code>模式</code>，来控制支付方式。</li><li>以上的<code>ifelse</code>应该是最差的一种写法，即使写<code>ifelse</code>也是可以优化的方式去写的。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PayController</span> pay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n模拟测试场景；微信支付、人脸方式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pay<span class="token punctuation">.</span><span class="token function">doPay</span><span class="token punctuation">(</span><span class="token string">&quot;weixin_1092033111&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;100000109893&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n模拟测试场景；支付宝支付、指纹方式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pay<span class="token punctuation">.</span><span class="token function">doPay</span><span class="token punctuation">(</span><span class="token string">&quot;jlu19dlxo111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;100000109894&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上分别测试了两种不同的支付类型和支付模式；微信人脸支付、支付宝指纹支付</li></ul><h4 id="_3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>模拟测试场景；微信支付、人脸方式。
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.152</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟微信渠道支付划账开始。uId：weixin_1092033111 tradeId：<span class="token number">100000109893</span> amount：<span class="token number">100</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.155</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>mode<span class="token punctuation">.</span></span>PayCypher</span> <span class="token operator">-</span> 人脸支付，风控校验脸部识别
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.155</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟微信渠道支付风控校验。uId：weixin_1092033111 tradeId：<span class="token number">100000109893</span> security：<span class="token boolean">true</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.155</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟微信渠道支付划账成功。uId：weixin_1092033111 tradeId：<span class="token number">100000109893</span> amount：<span class="token number">100</span>

模拟测试场景；支付宝支付、指纹方式。
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.156</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟支付宝渠道支付划账开始。uId：jlu19dlxo111 tradeId：<span class="token number">100000109894</span> amount：<span class="token number">100</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.156</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>mode<span class="token punctuation">.</span></span>PayCypher</span> <span class="token operator">-</span> 指纹支付，风控校验指纹信息
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.156</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟支付宝渠道支付风控校验。uId：jlu19dlxo111 tradeId：<span class="token number">100000109894</span> security：<span class="token boolean">true</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">59.156</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟支付宝渠道支付划账成功。uId：jlu19dlxo111 tradeId：<span class="token number">100000109894</span> amount：<span class="token number">100</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果看已经满足了我们的不同支付类型和支付模式的组合，但是这样的代码在后面的维护以及扩展都会变得非常复杂。</li></ul><h2 id="六、桥接模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、桥接模式重构代码" aria-hidden="true">#</a> 六、桥接模式重构代码</h2><p><code>接下来使用桥接模式来进行代码优化，也算是一次很小的重构。</code></p><p>从上面的<code>ifelse</code>方式实现来看，这是两种不同类型的相互组合。那么就可以把<em>支付方式</em>和<em>支付模式</em>进行分离通过<strong>抽象类依赖实现类</strong>的方式进行桥接，通过这样的拆分后支付与模式其实是可以单独使用的，当需要组合时候只需要把模式传递给支付即可。</p><p>桥接模式的关键是选择的桥接点拆分，是否可以找到这样类似的相互组合，如果没有就不必要非得使用桥接模式。</p><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    ├── main
    │   └── java
    │       └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay
    │           ├── channel
    │           │   ├── <span class="token class-name">Pay</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">WxPay</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">ZfbPay</span><span class="token punctuation">.</span>java
    │           └── mode
    │               ├── <span class="token class-name">IPayMode</span><span class="token punctuation">.</span>java
    │               ├── <span class="token class-name">PayCypher</span><span class="token punctuation">.</span>java
    │               ├── <span class="token class-name">PayFaceMode</span><span class="token punctuation">.</span>java
    │               └── <span class="token class-name">PayFingerprintMode</span><span class="token punctuation">.</span>java
    └── test
         └── java
             └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test
                 └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>桥接模式模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-7-03.png" alt="桥接模式模型结构"></p><ul><li>左侧<code>Pay</code>是一个抽象类，往下是它的两个支付类型实现；微信支付、支付宝支付。</li><li>右侧<code>IPayMode</code>是一个接口，往下是它的两个支付模型；刷脸支付、指纹支付。</li><li>那么，<code>支付类型</code> × <code>支付模型</code> = 就可以得到相应的组合。</li><li><strong>注意</strong>，每种支付方式的不同，刷脸和指纹校验逻辑也有差异，可以使用适配器模式进行处理，这里不是本文重点不做介绍，可以看适配器模式章节。</li></ul><h3 id="_2-代码实现-1" tabindex="-1"><a class="header-anchor" href="#_2-代码实现-1" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-支付类型桥接抽象类" tabindex="-1"><a class="header-anchor" href="#_2-1-支付类型桥接抽象类" aria-hidden="true">#</a> 2.1 支付类型桥接抽象类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pay</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Pay</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">IPayMode</span> payMode<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Pay</span><span class="token punctuation">(</span><span class="token class-name">IPayMode</span> payMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>payMode <span class="token operator">=</span> payMode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> tradeId<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这个类中定义了支付方式的需要实现的划账接口：<code>transfer</code>，以及桥接接口；<code>IPayMode</code>，并在构造函数中用户方自行选择支付方式。</li><li>如果没有接触过此类实现，可以重点关注 <code>IPayMode payMode</code>，这部分是桥接的核心。</li></ul><h4 id="_2-2-两个支付类型的实现" tabindex="-1"><a class="header-anchor" href="#_2-2-两个支付类型的实现" aria-hidden="true">#</a> 2.2 两个支付类型的实现</h4><p><strong>微信支付</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPay</span> <span class="token keyword">extends</span> <span class="token class-name">Pay</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">WxPay</span><span class="token punctuation">(</span><span class="token class-name">IPayMode</span> payMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>payMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> tradeId<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟微信渠道支付划账开始。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> security <span class="token operator">=</span> payMode<span class="token punctuation">.</span><span class="token function">security</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟微信渠道支付风控校验。uId：{} tradeId：{} security：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> security<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>security<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟微信渠道支付划账拦截。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;0001&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟微信渠道支付划账成功。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;0000&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>支付宝支付</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZfbPay</span> <span class="token keyword">extends</span> <span class="token class-name">Pay</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">ZfbPay</span><span class="token punctuation">(</span><span class="token class-name">IPayMode</span> payMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>payMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> tradeId<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟支付宝渠道支付划账开始。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> security <span class="token operator">=</span> payMode<span class="token punctuation">.</span><span class="token function">security</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟支付宝渠道支付风控校验。uId：{} tradeId：{} security：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> security<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>security<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟支付宝渠道支付划账拦截。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;0001&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟支付宝渠道支付划账成功。uId：{} tradeId：{} amount：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> tradeId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;0000&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里分别模拟了调用第三方的两个支付渠道；微信、支付宝，当然作为支付综合平台可能不只是接了这两个渠道，还会有其很跟多渠道。</li><li>另外可以看到在支付的时候分别都调用了风控的接口进行验证，也就是不同模式的支付(<code>刷脸</code>、<code>指纹</code>)，都需要过指定的风控，才能保证支付安全。</li></ul><h4 id="_2-3-定义支付模式接口" tabindex="-1"><a class="header-anchor" href="#_2-3-定义支付模式接口" aria-hidden="true">#</a> 2.3 定义支付模式接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPayMode</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">security</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>任何一个支付模式；刷脸、指纹、密码，都会过不同程度的安全风控，这里定义一个安全校验接口。</li></ul><h4 id="_2-4-三种支付模式风控-刷脸、指纹、密码" tabindex="-1"><a class="header-anchor" href="#_2-4-三种支付模式风控-刷脸、指纹、密码" aria-hidden="true">#</a> 2.4 三种支付模式风控(刷脸、指纹、密码)</h4><p><strong>刷脸</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayFaceMode</span> <span class="token keyword">implements</span> <span class="token class-name">IPayMode</span><span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">PayCypher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">security</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;人脸支付，风控校验脸部识别&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>指纹</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayFingerprintMode</span> <span class="token keyword">implements</span> <span class="token class-name">IPayMode</span><span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">PayCypher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">security</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;指纹支付，风控校验指纹信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>密码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayCypher</span> <span class="token keyword">implements</span> <span class="token class-name">IPayMode</span><span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">PayCypher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">security</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;密码支付，风控校验环境安全&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这里实现了三种支付模式(刷脸、指纹、密码)的风控校验，在用户选择不同支付类型的时候，则会进行相应的风控拦截以此保障支付安全。</li></ul><h3 id="_3-测试验证-1" tabindex="-1"><a class="header-anchor" href="#_3-测试验证-1" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类-1" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类-1" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n模拟测试场景；微信支付、人脸方式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Pay</span> wxPay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxPay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayFaceMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wxPay<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">&quot;weixin_1092033111&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;100000109893&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n模拟测试场景；支付宝支付、指纹方式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Pay</span> zfbPay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZfbPay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayFingerprintMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zfbPay<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">&quot;jlu19dlxo111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;100000109894&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与上面的ifelse实现方式相比，这里的调用方式变得整洁、干净、易使用；<code>new WxPay(new PayFaceMode())</code>、<code>new ZfbPay(new PayFingerprintMode())</code></li><li>外部的使用接口的用户不需要关心具体的实现，只按需选择使用即可。</li><li>目前以上优化主要针对桥接模式的使用进行重构<code>if</code>逻辑部分，关于调用部分可以使用<code>抽象工厂</code>或<code>策略模式</code>配合map结构，将服务配置化。因为这里主要展示<code>桥接模式</code>，所以就不在额外多加代码，避免喧宾夺主。</li></ul><h4 id="_3-2-测试结果-1" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果-1" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>模拟测试场景；微信支付、人脸方式。
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.911</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟微信渠道支付划账开始。uId：weixin_1092033111 tradeId：<span class="token number">100000109893</span> amount：<span class="token number">100</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.914</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>mode<span class="token punctuation">.</span></span>PayCypher</span> <span class="token operator">-</span> 人脸支付，风控校验脸部识别
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.914</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟微信渠道支付风控校验。uId：weixin_1092033111 tradeId：<span class="token number">100000109893</span> security：<span class="token boolean">true</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.915</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟微信渠道支付划账成功。uId：weixin_1092033111 tradeId：<span class="token number">100000109893</span> amount：<span class="token number">100</span>

模拟测试场景；支付宝支付、指纹方式。
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.915</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟支付宝渠道支付划账开始。uId：jlu19dlxo111 tradeId：<span class="token number">100000109894</span> amount：<span class="token number">100</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.915</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>mode<span class="token punctuation">.</span></span>PayCypher</span> <span class="token operator">-</span> 指纹支付，风控校验指纹信息
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.915</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟支付宝渠道支付风控校验。uId：jlu19dlxo111 tradeId：<span class="token number">100000109894</span> security：<span class="token boolean">true</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">40.915</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>Pay</span> <span class="token operator">-</span> 模拟支付宝渠道支付划账成功。uId：jlu19dlxo111 tradeId：<span class="token number">100000109894</span> amount：<span class="token number">100</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果看内容是一样的，但是整体的实现方式有了很大的变化。<strong>所以有时候不能只看结果，也要看看过程</strong></li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>通过模拟微信与支付宝两个支付渠道在不同的支付模式下，<code>刷脸</code>、<code>指纹</code>、<code>密码</code>，的组合从而体现了桥接模式的在这类场景中的合理运用。简化了代码的开发，给后续的需求迭代增加了很好的扩展性。</li><li>从桥接模式的实现形式来看满足了单一职责和开闭原则，让每一部分内容都很清晰易于维护和拓展，但如果我们是实现的高内聚的代码，那么就会很复杂。所以在选择重构代码的时候，需要考虑好整体的设计，否则选不到合理的设计模式，将会让代码变得难以开发。</li><li>任何一种设计模式的选择和使用都应该遵顼符合场景为主，不要刻意使用。而且统一场景因为业务的复杂从而可能需要使用到多种设计模式的组合，才能将代码设计的更加合理。但这种经验需要从实际的项目中学习经验，并提不断的运用。</li></ul>`,64);function P(x,j){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",d,[s("https://bugstack.cn"),p(a)])]),r,m,v,n("ol",null,[b,g,n("li",null,[s("涉及工程三个，可以通过关注"),y,s("："),n("a",h,[f,p(a)]),s("，回复"),w,s("获取(打开获取的链接，找到序号18)")])]),I,n("ul",null,[n("li",null,[s("图片来自："),n("a",_,[s("https://refactoringguru.cn/design-patterns/bridge"),p(a)])])]),q])}const F=e(i,[["render",P],["__file","2020-06-04-zhongxue Java shejimoshi《shizhanqiaojiemoshi》.html.vue"]]);export{F as default};
