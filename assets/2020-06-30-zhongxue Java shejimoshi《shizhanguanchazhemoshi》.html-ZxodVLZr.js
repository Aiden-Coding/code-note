import{_ as p,r as c,o,c as l,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战观察者模式「模拟类似小客车指标摇号过程-监听消息通知用户中签场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战观察者模式「模拟类似小客车指标摇号过程-监听消息通知用户中签场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战观察者模式「模拟类似小客车指标摇号过程，监听消息通知用户中签场景」")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=596495360&bvid=BV13B4y1y7HB&cid=716068865&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>知道的越多不知道的就越多</code></p><p>编程开发这条路上的知识是无穷无尽的，就像以前你敢说精通Java，到后来学到越来越多只想写了解Java，过了几年现在可能想说懂一点点Java。当视野和格局的扩大，会让我们越来越发现原来的看法是多么浅显，这就像站在地球看地球和站在宇宙看地球一样。但正因为胸怀和眼界的提升让我们有了更多的认识，也逐渐学会了更多的技能。虽然不知道的越来越多，但也因此给自己填充了更多的技术栈，让自己越来越强大。</p><p><code>拒绝学习的惰性很可怕</code></p><p>现在与以前不一样，资料多、途径广，在这中间夹杂的广告也非常多。这就让很多初学者很难找到自己要的知识，最后看到有人推荐相关学习资料立刻屏蔽、删除，但同时技术优秀的资料也不能让需要的人看见了。久而久之把更多的时间精力都放在游戏、娱乐、影音上，适当的放松是可以的，但往往沉迷以后就很难出来，因此需要做好一些可以让自己成长的计划，稍有克制。</p><p><code>平衡好软件设计和实现成本的度°</code></p><p>有时候一个软件的架构设计需要符合当前条件下的各项因素，往往不能因为心中想当然的有某个蓝图，就去开始执行。也许虽然你的设计是非常优秀的，但是放在当前环境下很难满足业务的时间要求，当一个业务的基本诉求不能满足后，就很难拉动市场。没有产品的DAU支撑，最后整个研发的项目也会因此停滞。但研发又不能一团乱麻的写代码，因此需要找好一个适合的度，比如可以搭建良好的地基，实现上可扩展。但在具体的功能上可以先简化实现，随着活下来了再继续完善迭代。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("strong",null,"公众号",-1),y={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"bugstack虫洞栈",-1),f=n("code",null,"源码下载",-1),_=t('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-18-00</td><td>场景模拟工程；模拟一个小客车摇号接口</td></tr><tr><td>itstack-demo-design-18-01</td><td>使用一坨代码实现业务需求</td></tr><tr><td>itstack-demo-design-18-02</td><td>通过设计模式优化改造代码，产生对比性从而学习</td></tr></tbody></table><h2 id="三、观察者模式介绍" tabindex="-1"><a class="header-anchor" href="#三、观察者模式介绍" aria-hidden="true">#</a> 三、观察者模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-18-01.png" alt="观察者模式，图片来自 refactoringguru.cn"></p>',3),L={href:"https://refactoringguru.cn/design-patterns/observer",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>简单来讲观察者🕵模式，就是当一个行为发生时传递信息给另外一个用户接收做出相应的处理，两者之间没有直接的耦合关联。例如；狙击手、李云龙。</p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-18-02.png" alt="李云龙给你竖大拇指"></p><p>除了生活中的场景外，在我们编程开发中也会常用到一些观察者的模式或者组件，例如我们经常使用的MQ服务，虽然MQ服务是有一个通知中心并不是每一个类服务进行通知，但整体上也可以算作是观察者模式的思路设计。再比如可能有做过的一些类似事件监听总线，让主线服务与其他辅线业务服务分离，为了使系统降低耦合和增强扩展性，也会使用观察者模式进行处理。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-18-03.png" alt="场景模拟；小客车指标摇号通知场景"></p><p><strong>在本案例中我们模拟每次小客车指标摇号事件通知场景(真实的不会由官网给你发消息)</strong></p><p>可能大部分人看到这个案例一定会想到自己每次摇号都不中的场景，收到一个遗憾的短信通知。当然目前的摇号系统并不会给你发短信，而是由百度或者一些其他插件发的短信。那么假如这个类似的摇号功能如果由你来开发，并且需要对外部的用户做一些事件通知以及需要在主流程外再添加一些额外的辅助流程时该如何处理呢？</p><p>基本很多人对于这样的通知事件类的实现往往比较粗犷，直接在类里面就添加了。1是考虑🤔这可能不会怎么扩展，2是压根就没考虑😄过。但如果你有仔细思考过你的核心类功能会发现，这里面有一些核心主链路，还有一部分是辅助功能。比如完成了某个行为后需要触发MQ给外部，以及做一些消息PUSH给用户等，这些都不算做是核心流程链路，是可以通过事件通知的方式进行处理。</p><p>那么接下来我们就使用这样的设计模式来优化重构此场景下的代码。</p><h3 id="_1-场景模拟工程" tabindex="-1"><a class="header-anchor" href="#_1-场景模拟工程" aria-hidden="true">#</a> 1. 场景模拟工程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">18</span><span class="token operator">-</span><span class="token number">00</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                └── <span class="token class-name">MinibusTargetService</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里提供的是一个模拟小客车摇号的服务接口。</li></ul><h3 id="_2-场景简述" tabindex="-1"><a class="header-anchor" href="#_2-场景简述" aria-hidden="true">#</a> 2. 场景简述</h3><h4 id="_2-1-摇号服务接口" tabindex="-1"><a class="header-anchor" href="#_2-1-摇号服务接口" aria-hidden="true">#</a> 2.1 摇号服务接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinibusTargetService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 模拟摇号，但不是摇号算法
     *
     * <span class="token keyword">@param</span> <span class="token parameter">uId</span> 用户编号
     * <span class="token keyword">@return</span> 结果
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">lottery</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>uId<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;恭喜你，编码&quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;在本次摇号中签&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;很遗憾，编码&quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;在本次摇号未中签或摇号资格已过期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>非常简单的一个模拟摇号接口，与真实公平的摇号是有差别的。</li></ul><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p><code>这里我们先使用最粗暴的方式来实现功能</code></p><p>按照需求需要在原有的摇号接口中添加MQ消息发送以及短消息通知功能，如果是最直接的方式那么可以直接在方法中补充功能即可。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">18</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── <span class="token class-name">LotteryResult</span><span class="token punctuation">.</span>java
                ├── <span class="token class-name">LotteryService</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">LotteryServiceImpl</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这段代码接口中包括了三部分内容；返回对象(<code>LotteryResult</code>)、定义接口(<code>LotteryService</code>)、具体实现(<code>LotteryServiceImpl</code>)。</li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LotteryServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LotteryService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LotteryServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">MinibusTargetService</span> minibusTargetService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinibusTargetService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LotteryResult</span> <span class="token function">doDraw</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 摇号</span>
        <span class="token class-name">String</span> lottery <span class="token operator">=</span> minibusTargetService<span class="token punctuation">.</span><span class="token function">lottery</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发短信</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;给用户 {} 发送短信通知(短信)：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> lottery<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发MQ消息</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;记录用户 {} 摇号结果(MQ)：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> lottery<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 结果</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LotteryResult</span><span class="token punctuation">(</span>uId<span class="token punctuation">,</span> lottery<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从以上的方法实现中可以看到，整体过程包括三部分；摇号、发短信、发MQ消息，而这部分都是顺序调用的。</li><li>除了<code>摇号</code>接口调用外，后面的两部分都是非核心主链路功能，而且会随着后续的业务需求发展而不断的调整和扩充，在这样的开发方式下就非常不利于维护。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LotteryService</span> lotteryService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LotteryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LotteryResult</span> result <span class="token operator">=</span> lotteryService<span class="token punctuation">.</span><span class="token function">doDraw</span><span class="token punctuation">(</span><span class="token string">&quot;2765789109876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试过程中提供对摇号服务接口的调用。</li></ul><h4 id="_3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">24.520</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span></span>LotteryServiceImpl</span> <span class="token operator">-</span> 给用户 <span class="token number">2765789109876</span> 发送短信通知<span class="token punctuation">(</span>短信<span class="token punctuation">)</span>：很遗憾，编码<span class="token number">2765789109876</span>在本次摇号未中签或摇号资格已过期
<span class="token number">22</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">24.523</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span></span>LotteryServiceImpl</span> <span class="token operator">-</span> 记录用户 <span class="token number">2765789109876</span> 摇号结果<span class="token punctuation">(</span><span class="token constant">MQ</span><span class="token punctuation">)</span>：很遗憾，编码<span class="token number">2765789109876</span>在本次摇号未中签或摇号资格已过期
<span class="token number">22</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">24.606</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;dateTime&quot;</span><span class="token operator">:</span><span class="token number">1598764144524</span><span class="token punctuation">,</span><span class="token string">&quot;msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;很遗憾，编码2765789109876在本次摇号未中签或摇号资格已过期&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;uId&quot;</span><span class="token operator">:</span><span class="token string">&quot;2765789109876&quot;</span><span class="token punctuation">}</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果上是符合预期的，也是平常开发代码的方式，还是非常简单的。</li></ul><h2 id="六、观察者模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、观察者模式重构代码" aria-hidden="true">#</a> 六、观察者模式重构代码</h2><p><code>接下来使用观察者模式来进行代码优化，也算是一次很小的重构。</code></p><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">18</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── event
                │    ├── listener
                │    │    ├── <span class="token class-name">EventListener</span><span class="token punctuation">.</span>java
                │    │    ├── <span class="token class-name">MessageEventListener</span><span class="token punctuation">.</span>java
                │    │    └── <span class="token class-name">MQEventListener</span><span class="token punctuation">.</span>java
                │    └── <span class="token class-name">EventManager</span><span class="token punctuation">.</span>java
                ├── <span class="token class-name">LotteryResult</span><span class="token punctuation">.</span>java
                ├── <span class="token class-name">LotteryService</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">LotteryServiceImpl</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>观察者模式模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-18-04.png" alt="观察者模式模型结构"></p><ul><li>从上图可以分为三大块看；<code>事件监听</code>、<code>事件处理</code>、<code>具体的业务流程</code>，另外在业务流程中 <code>LotteryService</code> 定义的是抽象类，因为这样可以通过抽象类将事件功能屏蔽，外部业务流程开发者不需要知道具体的通知操作。</li><li>右下角圆圈图表示的是核心流程与非核心流程的结构，一般在开发中会把主线流程开发完成后，再使用通知的方式处理辅助流程。他们可以是异步的，在MQ以及定时任务的处理下，保证最终一致性。</li></ul><h3 id="_2-代码实现-1" tabindex="-1"><a class="header-anchor" href="#_2-代码实现-1" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-事件监听接口定义" tabindex="-1"><a class="header-anchor" href="#_2-1-事件监听接口定义" aria-hidden="true">#</a> 2.1 事件监听接口定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token class-name">LotteryResult</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接口中定义了基本的事件类，这里如果方法的入参信息类型是变化的可以使用泛型<code>&lt;T&gt;</code></li></ul><h4 id="_2-2-两个监听事件的实现" tabindex="-1"><a class="header-anchor" href="#_2-2-两个监听事件的实现" aria-hidden="true">#</a> 2.2 两个监听事件的实现</h4><p><strong>短消息事件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MessageEventListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token class-name">LotteryResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;给用户 {} 发送短信通知(短信)：{}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MQ发送事件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MQEventListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token class-name">LotteryResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;记录用户 {} 摇号结果(MQ)：{}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上是两个事件的具体实现，相对来说都比较简单。如果是实际的业务开发那么会需要调用外部接口以及控制异常的处理。</li><li>同时我们上面提到事件接口添加泛型，如果有需要那么在事件的实现中就可以按照不同的类型进行包装事件内容。</li></ul><h4 id="_2-3-事件处理类" tabindex="-1"><a class="header-anchor" href="#_2-3-事件处理类" aria-hidden="true">#</a> 2.3 事件处理类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventManager</span> <span class="token punctuation">{</span>

    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">EventType</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">EventListener</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">EventManager</span><span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> operations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventType</span><span class="token punctuation">&gt;</span></span> operation <span class="token operator">:</span> operations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>operation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EventType</span> <span class="token punctuation">{</span>
        <span class="token constant">MQ</span><span class="token punctuation">,</span> <span class="token class-name">Message</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 订阅
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> 事件类型
     * <span class="token keyword">@param</span> <span class="token parameter">listener</span>  监听
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventType</span><span class="token punctuation">&gt;</span></span> eventType<span class="token punctuation">,</span> <span class="token class-name">EventListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListener</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 取消订阅
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> 事件类型
     * <span class="token keyword">@param</span> <span class="token parameter">listener</span>  监听
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventType</span><span class="token punctuation">&gt;</span></span> eventType<span class="token punctuation">,</span> <span class="token class-name">EventListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListener</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 通知
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> 事件类型
     * <span class="token keyword">@param</span> <span class="token parameter">result</span>    结果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventType</span><span class="token punctuation">&gt;</span></span> eventType<span class="token punctuation">,</span> <span class="token class-name">LotteryResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListener</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EventListener</span> listener <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            listener<span class="token punctuation">.</span><span class="token function">doEvent</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整个处理的实现上提供了三个主要方法；订阅(<code>subscribe</code>)、取消订阅(<code>unsubscribe</code>)、通知(<code>notify</code>)。这三个方法分别用于对监听时间的添加和使用。</li><li>另外因为事件有不同的类型，这里使用了枚举的方式进行处理，也方便让外部在规定下使用事件，而不至于乱传信息(<code>EventType.MQ</code>、<code>EventType.Message</code>)。</li></ul><h4 id="_2-4-业务抽象类接口" tabindex="-1"><a class="header-anchor" href="#_2-4-业务抽象类接口" aria-hidden="true">#</a> 2.4 业务抽象类接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LotteryService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">EventManager</span> eventManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LotteryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        eventManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventManager</span><span class="token punctuation">(</span><span class="token class-name">EventManager<span class="token punctuation">.</span>EventType</span><span class="token punctuation">.</span><span class="token constant">MQ</span><span class="token punctuation">,</span> <span class="token class-name">EventManager<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>Message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventManager<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">EventManager<span class="token punctuation">.</span>EventType</span><span class="token punctuation">.</span><span class="token constant">MQ</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MQEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventManager<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">EventManager<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>Message</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LotteryResult</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LotteryResult</span> lotteryResult <span class="token operator">=</span> <span class="token function">doDraw</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 需要什么通知就给调用什么方法</span>
        eventManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">EventManager<span class="token punctuation">.</span>EventType</span><span class="token punctuation">.</span><span class="token constant">MQ</span><span class="token punctuation">,</span> lotteryResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">EventManager<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>Message</span><span class="token punctuation">,</span> lotteryResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> lotteryResult<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">LotteryResult</span> <span class="token function">doDraw</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这种使用抽象类的方式定义实现方法，可以在方法中扩展需要的额外调用。并提供抽象类<code>abstract LotteryResult doDraw(String uId)</code>，让类的继承者实现。</li><li>同时方法的定义使用的是<code>protected</code>，也就是保证将来外部的调用方不会调用到此方法，只有调用到<code>draw(String uId)</code>，才能让我们完成事件通知。</li><li>此种方式的实现就是在抽象类中写好一个基本的方法，在方法中完成新增逻辑的同时，再增加抽象类的使用。而这个抽象类的定义会有继承者实现。</li><li>另外在构造函数中提供了对事件的定义；<code>eventManager.subscribe(EventManager.EventType.MQ, new MQEventListener())</code>。</li><li>在使用的时候也是使用枚举的方式进行通知使用，传了什么类型<code>EventManager.EventType.MQ</code>，就会执行什么事件通知，按需添加。</li></ul><h4 id="_2-5-业务接口实现类" tabindex="-1"><a class="header-anchor" href="#_2-5-业务接口实现类" aria-hidden="true">#</a> 2.5 业务接口实现类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LotteryServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">LotteryService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MinibusTargetService</span> minibusTargetService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinibusTargetService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">LotteryResult</span> <span class="token function">doDraw</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 摇号</span>
        <span class="token class-name">String</span> lottery <span class="token operator">=</span> minibusTargetService<span class="token punctuation">.</span><span class="token function">lottery</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 结果</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LotteryResult</span><span class="token punctuation">(</span>uId<span class="token punctuation">,</span> lottery<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>现在再看业务流程的实现中可以看到已经非常简单了，没有额外的辅助流程，只有核心流程的处理。</li></ul><h3 id="_3-测试验证-1" tabindex="-1"><a class="header-anchor" href="#_3-测试验证-1" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类-1" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类-1" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LotteryService</span> lotteryService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LotteryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LotteryResult</span> result <span class="token operator">=</span> lotteryService<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token string">&quot;2765789109876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从调用上来看几乎没有区别，但是这样的实现方式就可以非常方便的维护代码以及扩展新的需求。</li></ul><h4 id="_3-2-测试结果-1" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果-1" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">07.597</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>d<span class="token punctuation">.</span>d<span class="token punctuation">.</span>e<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span>MQEventListener</span> <span class="token operator">-</span> 记录用户 <span class="token number">2765789109876</span> 摇号结果<span class="token punctuation">(</span><span class="token constant">MQ</span><span class="token punctuation">)</span>：很遗憾，编码<span class="token number">2765789109876</span>在本次摇号未中签或摇号资格已过期
<span class="token number">23</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">07.600</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>d<span class="token punctuation">.</span>d<span class="token punctuation">.</span>e<span class="token punctuation">.</span>l<span class="token punctuation">.</span></span>MessageEventListener</span> <span class="token operator">-</span> 给用户 <span class="token number">2765789109876</span> 发送短信通知<span class="token punctuation">(</span>短信<span class="token punctuation">)</span>：很遗憾，编码<span class="token number">2765789109876</span>在本次摇号未中签或摇号资格已过期
<span class="token number">23</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">07.698</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;dateTime&quot;</span><span class="token operator">:</span><span class="token number">1599737367591</span><span class="token punctuation">,</span><span class="token string">&quot;msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;很遗憾，编码2765789109876在本次摇号未中签或摇号资格已过期&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;uId&quot;</span><span class="token operator">:</span><span class="token string">&quot;2765789109876&quot;</span><span class="token punctuation">}</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果上看满足😌我们的预期，虽然结果是一样的，但只有我们知道了设计模式的魅力所在。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>从我们最基本的过程式开发以及后来使用观察者模式面向对象开发，可以看到设计模式改造后，拆分出了核心流程与辅助流程的代码。一般代码中的核心流程不会经常变化。但辅助流程会随着业务的各种变化而变化，包括；<code>营销</code>、<code>裂变</code>、<code>促活</code>等等，因此使用设计模式架设代码就显得非常有必要。</li><li>此种设计模式从结构上是满足开闭原则的，当你需要新增其他的监听事件或者修改监听逻辑，是不需要改动事件处理类的。但是可能你不能控制调用顺序以及需要做一些事件结果的返回继续操作，所以使用的过程时需要考虑场景的合理性。</li><li>任何一种设计模式有时候都不是单独使用的，需要结合其他模式共同建设。另外设计模式的使用是为了让代码更加易于扩展和维护，不能因为添加设计模式而把结构处理更加复杂以及难以维护。这样的合理使用的经验需要大量的实际操作练习而来。</li></ul>`,67);function E(j,x){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)])]),k,v,m,n("ol",null,[b,g,n("li",null,[s("涉及工程三个，可以通过关注"),h,s("："),n("a",y,[w,e(a)]),s("，回复"),f,s("获取(打开获取的链接，找到序号18)")])]),_,n("ul",null,[n("li",null,[s("图片来自："),n("a",L,[s("https://refactoringguru.cn/design-patterns/observer"),e(a)])])]),M])}const q=p(i,[["render",E],["__file","2020-06-30-zhongxue Java shejimoshi《shizhanguanchazhemoshi》.html.vue"]]);export{q as default};
