import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"sharding-jdbc-使用教程和模型结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sharding-jdbc-使用教程和模型结构","aria-hidden":"true"},"#"),s(" sharding-jdbc 使用教程和模型结构")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("p",null,"本文的宗旨在于通过简单干净实践的方式教会读者，快速 Easy 的使用上 sharding-jdbc 这个笨重的大家伙！",-1),v={href:"https://shardingsphere.apache.org/index_zh.html",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"本文涉及的工程：",-1),h={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-shardingjdbc",target:"_blank",rel:"noopener noreferrer"},g={href:"https://shardingsphere.apache.org/index_zh.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<h2 id="一、路由本质" tabindex="-1"><a class="header-anchor" href="#一、路由本质" aria-hidden="true">#</a> 一、路由本质</h2><p>分库分表的本质是数据的散列，分摊数据库资源压力。如把原本在一台机器上的数据库存放1000万数据，分摊到n台机上，拆分这1000万的数据和后续的增量。让每个数据库资源来分摊原本需要一台数据库所提供的服务。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-shardingjdbc-01.png?raw=true" width="600px"></div><ul><li>当使用分库分表以后，并确定如使用<code>用户ID</code>作为路由分片键。那么所做的CRUD操作，都是需要使用到这个用户ID，并根据ID做路由库表计算。</li><li>在大厂中，开发项目。并不会说目前这个业务需求规模不大，就不使用分库分表，而是分库分表都是非常成熟的方案，并不会因为使用了就降低很大的开发效率。所以基本就是默认就使用了。</li><li>那么使用了分库分表，就会很占用资源吗。也不会，因为刚开始业务体量不大的时候，都是虚拟机交叉使用，你的1台物理机虚出来10个虚拟机，大家交叉使用主备。这样你只是使用了分库分表，但库表的实际资源没占用那么多。</li></ul><h2 id="二、使用案例" tabindex="-1"><a class="header-anchor" href="#二、使用案例" aria-hidden="true">#</a> 二、使用案例</h2><ul><li>jdk 1.8 +</li><li>ShardingSphere 5.3+</li></ul><div class="language-pom line-numbers-mode" data-ext="pom"><pre class="language-pom"><code>&lt;!-- https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc-core --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;
    &lt;artifactId&gt;shardingsphere-jdbc-core&lt;/artifactId&gt;
    &lt;version&gt;5.4.1&lt;/version&gt;
&lt;/dependency&gt;
 &lt;!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.yaml&lt;/groupId&gt;
    &lt;artifactId&gt;snakeyaml&lt;/artifactId&gt;
    &lt;version&gt;1.33&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因为需要解析 yaml 但默认的 SpringBoot 提供版本不支持 shardingsphere-jdbc-core 使用。</li></ul><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-shardingjdbc-02.png?raw=true" width="850px"></div><ul><li>工程中，提供了 docker 配置数据库环境操作，并提供了对应的建表测试语句。如果你本机已经安装了数据库，那么只做库表语句导入以及 yml 配置数据库连接信息就可以。</li><li>sharding-jdbc-dev.yaml 配置了详细的分库分表路由信息，在 algorithms 下配置的是库表的路由算法。这里的算法要根据实际自己使用中库表数量来设置&amp;设计，避免发生较大的数据偏移。</li><li>配置完 sharding-jdbc-dev.yaml 需要在 application-dev.yml 中配置上 sharding-jdbc-dev.yaml 路径，这样才能正确加载。</li><li>如果你还需要定义出自己特定的路由算法，它还支持自己写个实现类的方式处理。</li></ul><h3 id="_2-算法配置" tabindex="-1"><a class="header-anchor" href="#_2-算法配置" aria-hidden="true">#</a> 2. 算法配置</h3><p><strong>sharding/sharding-jdbc-dev.yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># https://shardingsphere.apache.org/index_zh.html</span>
<span class="token key atrule">mode</span><span class="token punctuation">:</span>
  <span class="token comment"># 运行模式类型。可选配置：内存模式 Memory、单机模式 Standalone、集群模式 Cluster - 目前为单机模式</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> Standalone

<span class="token key atrule">dataSources</span><span class="token punctuation">:</span>
  <span class="token key atrule">ds_0</span><span class="token punctuation">:</span>
    <span class="token key atrule">dataSourceClassName</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource
    <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">jdbcUrl</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>13306/xfg_dev_tech_db_00<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=UTC&amp;useSSL=true</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">15</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">5</span>

  <span class="token key atrule">ds_1</span><span class="token punctuation">:</span>
    <span class="token key atrule">dataSourceClassName</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource
    <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">jdbcUrl</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>13306/xfg_dev_tech_db_01<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=UTC&amp;useSSL=true</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">15</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">5</span>

<span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token tag">!SHARDING</span>
    <span class="token comment"># 库的路由</span>
    <span class="token key atrule">defaultDatabaseStrategy</span><span class="token punctuation">:</span>
      <span class="token key atrule">standard</span><span class="token punctuation">:</span>
        <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id
        <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> database_inline
    <span class="token comment"># 表的路由</span>
    <span class="token key atrule">tables</span><span class="token punctuation">:</span>
      <span class="token key atrule">user_order</span><span class="token punctuation">:</span>
        <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.user_order_$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>0..3<span class="token punctuation">}</span>
        <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
          <span class="token key atrule">standard</span><span class="token punctuation">:</span>
            <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id
            <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> user_order_inline
    <span class="token comment"># 路由算法</span>
    <span class="token key atrule">shardingAlgorithms</span><span class="token punctuation">:</span>
      <span class="token comment"># 库-路由算法 2是两个库，库的数量。库的数量用哈希模2来计算。</span>
      <span class="token key atrule">database_inline</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> INLINE
        <span class="token key atrule">props</span><span class="token punctuation">:</span>
          <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>Math.abs(user_id.hashCode()) % 2<span class="token punctuation">}</span>

      <span class="token comment"># 表-路由算法 4是一个库里，表的数量。4 - 1 为了获得 011 这样的二进制值。不推荐 user_order_$-&gt;{Math.abs(user_id.hashCode()) % 2} 作为表的路由</span>
      <span class="token key atrule">user_order_inline</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> INLINE
        <span class="token key atrule">props</span><span class="token punctuation">:</span>
          <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> user_order_$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>(user_id.hashCode() ^ (user_id.hashCode()) <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> 16) &amp; (4 <span class="token punctuation">-</span> 1)<span class="token punctuation">}</span>

<span class="token key atrule">props</span><span class="token punctuation">:</span>
  <span class="token comment"># 是否在日志中打印 SQL。</span>
  <span class="token comment"># 打印 SQL 可以帮助开发者快速定位系统问题。日志内容包含：逻辑 SQL，真实 SQL 和 SQL 解析结果。</span>
  <span class="token comment"># 如果开启配置，日志将使用 Topic ShardingSphere-SQL，日志级别是 INFO。 false</span>
  <span class="token key atrule">sql-show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># 是否在日志中打印简单风格的 SQL。false</span>
  <span class="token key atrule">sql-simple</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># 用于设置任务处理线程池的大小。每个 ShardingSphereDataSource 使用一个独立的线程池，同一个 JVM 的不同数据源不共享线程池。</span>
  <span class="token key atrule">executor-size</span><span class="token punctuation">:</span> <span class="token number">20</span>
  <span class="token comment"># 查询请求在每个数据库实例中所能使用的最大连接数。1</span>
  <span class="token key atrule">max-connections-size-per-query</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token comment"># 在程序启动和更新时，是否检查分片元数据的结构一致性。</span>
  <span class="token key atrule">check-table-metadata-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># 在程序启动和更新时，是否检查重复表。false</span>
  <span class="token key atrule">check-duplicate-table-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>mode：运行模式，默认就单机模式。</li><li>dataSources：数据库连接信息。</li><li>rules：路由算法。defaultDatabaseStrategy 库的路由、tables 表的路由。之后在 shardingAlgorithms 中配置具体的路由算法。这里的名称都是关联的，不要配置错。</li><li>props：一些属性信息，包括是否打印日志等。</li></ul><h3 id="_3-配置引入" tabindex="-1"><a class="header-anchor" href="#_3-配置引入" aria-hidden="true">#</a> 3. 配置引入</h3><p><strong>application-dev.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.apache.shardingsphere.driver.ShardingSphereDriver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>shardingsphere<span class="token punctuation">:</span>classpath<span class="token punctuation">:</span>sharding/sharding<span class="token punctuation">-</span>jdbc<span class="token punctuation">-</span>dev.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>和之前的一些 sharding 版本不同，这里是需要使用具体的 ShardingSphereDriver 和 url 地址，才能加载上我们配置的路由信息。</li></ul><h2 id="三、测试验证" tabindex="-1"><a class="header-anchor" href="#三、测试验证" aria-hidden="true">#</a> 三、测试验证</h2><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-shardingjdbc-03.png?raw=true" width="850px"></div>`,21),_=n("li",null,"基于工程中 docs/dev-ops/mysql/sql 创建库表。已经提供了库名、表和测试数据。",-1),f={href:"https://apps.apple.com/us/app/sequel-ace/id1518036000?ls=1",target:"_blank",rel:"noopener noreferrer"},S=e(`<h3 id="_1-写入数据" tabindex="-1"><a class="header-anchor" href="#_1-写入数据" aria-hidden="true">#</a> 1. 写入数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserOrderPO</span> userOrderPO <span class="token operator">=</span> <span class="token class-name">UserOrderPO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token string">&quot;xfg_&quot;</span> <span class="token operator">+</span> <span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomAlphabetic</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">userMobile</span><span class="token punctuation">(</span><span class="token string">&quot;+86 13521408***&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sku</span><span class="token punctuation">(</span><span class="token string">&quot;13811216&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">skuName</span><span class="token punctuation">(</span><span class="token string">&quot;《手写MyBatis：渐进式源码实践》&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orderId</span><span class="token punctuation">(</span><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomNumeric</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">quantity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">unitPrice</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">discountAmount</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">tax</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">totalAmount</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orderDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orderStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">isDelete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ipv4</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ipv6</span><span class="token punctuation">(</span><span class="token string">&quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">extData</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;device\\&quot;: {\\&quot;machine\\&quot;: \\&quot;IPhone 14 Pro\\&quot;, \\&quot;location\\&quot;: \\&quot;shanghai\\&quot;}}&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userOrderDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userOrderPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试数据写入，你可以写入1000条数据，观察散列效果。并可以在这个过程中，调试修改 sharding-jdbc-dev.yaml 文件对库表路由的计算方式。</li></ul><h3 id="_2-查询数据" tabindex="-1"><a class="header-anchor" href="#_2-查询数据" aria-hidden="true">#</a> 2. 查询数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_selectByUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserOrderPO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userOrderDao<span class="token punctuation">.</span><span class="token function">selectByUserId</span><span class="token punctuation">(</span><span class="token string">&quot;xfg_PrmgwQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询的用户ID是已经写入到数据库表里的数据，查询的时候会根据用户ID继续路由计算。</li></ul><h3 id="_3-散列算法" tabindex="-1"><a class="header-anchor" href="#_3-散列算法" aria-hidden="true">#</a> 3. 散列算法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_idx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> user_id <span class="token operator">=</span> <span class="token string">&quot;xfg_&quot;</span> <span class="token operator">+</span> <span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomAlphabetic</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果 {}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),q=n("li",null,"你可以尝试验证和编写新的散列算法，最终目的都是让数据尽可能散列到库表。",-1),x={href:"https://bugstack.cn/md/algorithm/logic/math/2022-11-05-fibonacci.html",target:"_blank",rel:"noopener noreferrer"};function j(D,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),t(a)])]),k,m,n("p",null,[s("之所以说笨重，是因为 "),n("a",v,[s("Apache ShardingSphere"),t(a)]),s(" 不只是简单意义上的路由组件，而是一款分布式 SQL 事务和查询引擎，可通过数据分片、弹性伸缩、加密等能力对任意数据库进行增强。同时它又在迭代过程中，衍生出了很多的版本，以及对应了不同的使用方式。并在 ShardingSphere 5.3 以后又做了不小的架构调整。所以很多伙伴在使用的时候，经常是找了一上午的资料，到下午下班还没对接上。")]),b,n("ul",null,[n("li",null,[s("xfg-dev-tech-shardingjdbc："),n("a",h,[s("https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-shardingjdbc"),t(a)])]),n("li",null,[s("官网："),n("a",g,[s("https://shardingsphere.apache.org/index_zh.html"),t(a)])])]),y,n("ul",null,[_,n("li",null,[s("无论你使用哪种方式，都可以安装MySql 并使用可视化工具链接。这里小傅哥用的是 "),n("a",f,[s("Sequel Ace"),t(a)])])]),S,n("ul",null,[q,n("li",null,[s("此外，关于算法的好坏，可以基于"),n("a",x,[s("雪崩测试"),t(a)]),s("计算")])])])}const N=p(i,[["render",j],["__file","sharding-jdbc.html.vue"]]);export{N as default};
