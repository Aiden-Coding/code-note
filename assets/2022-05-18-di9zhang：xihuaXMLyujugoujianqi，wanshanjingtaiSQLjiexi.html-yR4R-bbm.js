import{_ as t,r as p,o as c,c as o,a as n,b as s,d as e,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《mybatis-手撸专栏》第9章-细化xml语句构建器-完善静态sql解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《mybatis-手撸专栏》第9章-细化xml语句构建器-完善静态sql解析","aria-hidden":"true"},"#"),s(" 《Mybatis 手撸专栏》第9章：细化XML语句构建器，完善静态SQL解析")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/I88gvB0NqCRoIQgUJx8EMg",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=599429245&bvid=BV1qB4y167AY&cid=803322797&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),g=l(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>你只是在解释过程，而他是在阐述高度！</code></p><p>如果不是长时间的沉淀、积累和储备，我一定也没有办法用更多的维度和更多的视角来对一个问题进行多方面阐述。就像你我；越过峭壁山川，才知枕席还师的通达平坦。领略过雷声千嶂落，雨色万峰来，才闻到八表流云澄夜色，九霄华月动春城的宁静。</p><p>所以引申到编程开发，往简单了说就是写写代码，改改bug。但如果就局限在只是写写代码，其实很难领略到那些众多设计思想和复杂问题中，庖丁解牛般的酣畅淋漓。而这些酣畅的体验，都需要你对技术的拓展学习和深度探索，从众多的优秀源码框架中吸收经验。反复揣摩、反复尝试，终有那么一个时间点，你会有种悟了的感觉。而这些一个个感觉的积累，就能帮助你以后在面试、述职、答辩、分享、汇报等场景中，说出更有深度的技术思想和类比设计对照，站在更高的角度俯视业务场景的走向和给出长远的架构方案。</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>实现到本章节前，关于 Mybatis ORM 框架的大部分核心结构已经逐步体现出来了，包括；解析、绑定、映射、事务、执行、数据源等。但随着更多功能的逐步完善，我们需要对模块内的实现进行细化处理，而不单单只是完成功能逻辑。这就有点像把 CRUD 使用设计原则进行拆分解耦，满足代码的易维护和可扩展性。而这里我们首先着手要处理的就是关于 XML 解析的问题，把之前粗糙的实现进行细化，满足我们对解析时一些参数的整合和处理。</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220519-01.png" alt="图 9-1 ORM框架XML解析映射关系"></p><ul><li>这一部分的解析，就是在我们本章节之前的 XMLConfigBuilder#mapperElement 方法中的操作。看上去虽然能实现功能，但总会让人感觉它不够规整。就像我们平常开发的 CRUD 罗列到一块的逻辑一样，什么流程都能处理，但什么流程都会越来越混乱。</li><li>就像我们在 ORM 框架 DefaultSqlSession 中调用具体执行数据库操作的方法，需要进行 PreparedStatementHandler#parameterize 参数时，其实并没有准确的定位到参数的类型，jdbcType和javaType的转换关系，所以后续的属性填充就会显得比较混乱且不易于扩展。<em>当然，如果你硬写也是写的出来的，不过这种就不是一个好的设计！</em></li><li>所以接下来小傅哥会带着读者，把这部分解析的处理，使用设计原则将流程和职责进行解耦，并结合我们的当前诉求，优先处理静态 SQL 内容。待框架结构逐步完善，再进行一些动态SQL和更多参数类型的处理，满足读者以后在阅读 Mybatis 源码，以及需要开发自己的 X-ORM 框架的时候，有一些经验积累。</li></ul><h2 id="三、设计" tabindex="-1"><a class="header-anchor" href="#三、设计" aria-hidden="true">#</a> 三、设计</h2><p>参照设计原则，对于 XML 信息的读取，各个功能模块的流程上应该符合单一职责，而每一个具体的实现又得具备迪米特法则，这样实现出来的功能才能具有良好的扩展性。<em>通常这类代码也会看着很干净</em> 那么基于这样的诉求，我们则需要给解析过程中，所属解析的不同内容，按照各自的职责类进行拆解和串联调用。整体设计如图 9-2</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220519-02.png" alt="图 9-2 XML 配置构建器解析过程"></p><ul><li>与之前的解析代码相对照，不在是把所有的解析都在一个循环中处理，而是在整个解析过程中，引入 XMLMapperBuilder、XMLStatementBuilder 分别处理<code>映射构建器</code>和<code>语句构建器</code>，按照不同的职责分别进行解析。</li><li>与此同时也在语句构建器中，引入脚本语言驱动器，默认实现的是 XML语言驱动器 XMLLanguageDriver，这个类来具体操作静态和动态 SQL 语句节点的解析。<em>这部分的解析处理实现方式很多，即使自己使用正则或者 String 截取也是可以的。所以为了保持与 Mybatis 的统一，我们直接参照源码 Ognl 的方式进行处理。对应的类是 DynamicContext</em></li><li>这里所有的解析铺垫，通过解耦的方式实现，都是为了后续在 executor 执行器中，更加方便的处理 setParameters 参数的设置。<em>后面参数的设置，也会涉及到前面我们实现的元对象反射工具类的使用。</em></li></ul><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mybatis<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">08</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis
    │           ├── binding
    │           ├── builder
    │           │   ├── xml
    │           │   │   ├── <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BaseBuilder</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ParameterExpression</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlSourceBuilder</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">StaticSqlSource</span><span class="token punctuation">.</span>java
    │           ├── datasource
    │           ├── executor
    │           │   ├── resultset
    │           │   │   ├── <span class="token class-name">DefaultResultSetHandler</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">ResultSetHandler</span><span class="token punctuation">.</span>java
    │           │   ├── statement
    │           │   │   ├── <span class="token class-name">BaseStatementHandler</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">PreparedStatementHandler</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">SimpleStatementHandler</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">StatementHandler</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BaseExecutor</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Executor</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">SimpleExecutor</span><span class="token punctuation">.</span>java
    │           ├── io
    │           ├── mapping
    │           │   ├── <span class="token class-name">BoundSql</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Environment</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MappedStatement</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ParameterMapping</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">SqlSource</span><span class="token punctuation">.</span>java
    │           ├── parsing
    │           │   ├── <span class="token class-name">GenericTokenParser</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">TokenHandler</span><span class="token punctuation">.</span>java
    │           ├── reflection
    │           ├── scripting
    │           │   ├── defaults
    │           │   │   ├── <span class="token class-name">DefaultParameterHandler</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">RawSqlSource</span><span class="token punctuation">.</span>java
    │           │   ├── xmltags
    │           │   │   ├── <span class="token class-name">DynamicContext</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">MixedSqlNode</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">SqlNode</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">StaticTextSqlNode</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">XMLLanguageDriver</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">XMLScriptBuilder</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">LanguageDriver</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">LanguageDriverRegistry</span><span class="token punctuation">.</span>java
    │           ├── session
    │           │   ├── defaults
    │           │   │   ├── <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Configuration</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlSession</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">TransactionIsolationLevel</span><span class="token punctuation">.</span>java
    │           ├── transaction
    │           └── type
    │               ├── <span class="token class-name">JdbcType</span><span class="token punctuation">.</span>java
    │               ├── <span class="token class-name">TypeAliasRegistry</span><span class="token punctuation">.</span>java
    │               ├── <span class="token class-name">TypeHandler</span><span class="token punctuation">.</span>java
    │               └── <span class="token class-name">TypeHandlerRegistry</span><span class="token punctuation">.</span>java
    └── test
        ├── java
        │   └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dao
        │       ├── dao
        │       │   └── <span class="token class-name">IUserDao</span><span class="token punctuation">.</span>java
        │       ├── po
        │       │   └── <span class="token class-name">User</span><span class="token punctuation">.</span>java
        │       └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
        └── resources
            ├── mapper
            │   └──<span class="token class-name">User_Mapper</span><span class="token punctuation">.</span>xml
            └── mybatis<span class="token operator">-</span>config<span class="token operator">-</span>datasource<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：手写Mybatis，获取完整源码</code></p><p>XML 语句解析构建器，核心逻辑类关系，如图 9-3 所示</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220519-03.png" alt="图 9-3 XML 语句解析构建器，核心逻辑类关系"></p><ul><li>解耦原 XMLConfigBuilder 中对 XML 的解析，扩展映射构建器、语句构建器，处理 SQL 的提取和参数的包装，整个核心流图以 XMLConfigBuilder#mapperElement 为入口进行串联调用。</li><li>在 XMLStatementBuilder#parseStatementNode 方法中解析 <code>&lt;select id=&quot;queryUserInfoById&quot; parameterType=&quot;java.lang.Long&quot; resultType=&quot;cn.bugstack.mybatis.test.po.User&quot;&gt;...&lt;/select&gt;</code> 配置语句，提取参数类型、结果类型，而这里的语句处理流程稍微较长，因为需要用到脚本语言驱动器，进行解析处理，创建出 SqlSource 语句信息。<em>SqlSource 包含了 BoundSql，同时这里扩展了 ParameterMapping 作为参数包装传递类，而不是仅仅作为 Map 结构包装。因为通过这样的方式，可以封装解析后的 javaType/jdbcType 信息</em></li></ul><h3 id="_2-解耦映射解析" tabindex="-1"><a class="header-anchor" href="#_2-解耦映射解析" aria-hidden="true">#</a> 2. 解耦映射解析</h3><p>提供单独的 XML 映射构建器 XMLMapperBuilder 类，把关于 Mapper 内的 SQL 进行解析处理。提供了这个类以后，就可以把这个类的操作放到 XML 配置构建器，XMLConfigBuilder#mapperElement 中进行使用了。具体我们看下如下代码。</p><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.builder.xml.XMLMapperBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLMapperBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 解析
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前资源没有加载过再加载，防止重复加载</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">configurationElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 标记一下，已经加载过了</span>
            configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 绑定映射器到namespace</span>
            configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>currentNamespace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 配置mapper元素</span>
    <span class="token comment">// &lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt;</span>
    <span class="token comment">//   &lt;select id=&quot;selectBlog&quot; parameterType=&quot;int&quot; resultType=&quot;Blog&quot;&gt;</span>
    <span class="token comment">//    select * from Blog where id = #{id}</span>
    <span class="token comment">//   &lt;/select&gt;</span>
    <span class="token comment">// &lt;/mapper&gt;</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configurationElement</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.配置namespace</span>
        currentNamespace <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;namespace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNamespace<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Mapper&#39;s namespace cannot be empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2.配置select|insert|update|delete</span>
        <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 配置select|insert|update|delete</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">XMLStatementBuilder</span> statementParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> element<span class="token punctuation">,</span> currentNamespace<span class="token punctuation">)</span><span class="token punctuation">;</span>
            statementParser<span class="token punctuation">.</span><span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 XMLMapperBuilder#parse 的解析中，主要体现在资源解析判断、Mapper解析和绑定映射器到；</p><ul><li>configuration.isResourceLoaded 资源判断避免重复解析，做了个记录。</li><li>configuration.addMapper 绑定映射器主要是把 namespace <code>cn.bugstack.mybatis.test.dao.IUserDao</code> 绑定到 Mapper 上。也就是注册到映射器注册机里。</li><li>configurationElement 方法调用的 buildStatementFromContext，重在处理 XML 语句构建器，下文中单独讲解。</li></ul><p><strong>配置构建器，调用映射构建器，源码详见</strong>：<code>cn.bugstack.mybatis.builder.xml.XMLMapperBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLConfigBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>

    <span class="token comment">/*
     * &lt;mappers&gt;
     *	 &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;
     *	 &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;
     *	 &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;
     * &lt;/mappers&gt;
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mapperElement</span><span class="token punctuation">(</span><span class="token class-name">Element</span> mappers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> mapperList <span class="token operator">=</span> mappers<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">&quot;mapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> e <span class="token operator">:</span> mapperList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> resource <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;resource&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 在for循环里每个mapper都重新new一个XMLMapperBuilder，来解析</span>
            <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 XMLConfigBuilder#mapperElement 中，把原来流程化的处理进行解耦，调用 XMLMapperBuilder#parse 方法进行解析处理。</li></ul><h3 id="_3-语句构建器" tabindex="-1"><a class="header-anchor" href="#_3-语句构建器" aria-hidden="true">#</a> 3. 语句构建器</h3><p>XMLStatementBuilder 语句构建器主要解析 XML 中 <code>select|insert|update|delete</code> 中的语句，当前我们先以 select 解析为案例，后续再扩展其他的解析流程。</p><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.builder.xml.XMLStatementBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLStatementBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>

    <span class="token comment">//解析语句(select|insert|update|delete)</span>
    <span class="token comment">//&lt;select</span>
    <span class="token comment">//  id=&quot;selectPerson&quot;</span>
    <span class="token comment">//  parameterType=&quot;int&quot;</span>
    <span class="token comment">//  parameterMap=&quot;deprecated&quot;</span>
    <span class="token comment">//  resultType=&quot;hashmap&quot;</span>
    <span class="token comment">//  resultMap=&quot;personResultMap&quot;</span>
    <span class="token comment">//  flushCache=&quot;false&quot;</span>
    <span class="token comment">//  useCache=&quot;true&quot;</span>
    <span class="token comment">//  timeout=&quot;10000&quot;</span>
    <span class="token comment">//  fetchSize=&quot;256&quot;</span>
    <span class="token comment">//  statementType=&quot;PREPARED&quot;</span>
    <span class="token comment">//  resultSetType=&quot;FORWARD_ONLY&quot;&gt;</span>
    <span class="token comment">//  SELECT * FROM PERSON WHERE ID = #{id}</span>
    <span class="token comment">//&lt;/select&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> id <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 参数类型</span>
        <span class="token class-name">String</span> parameterType <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;parameterType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterTypeClass <span class="token operator">=</span> <span class="token function">resolveAlias</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 结果类型</span>
        <span class="token class-name">String</span> resultType <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;resultType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultTypeClass <span class="token operator">=</span> <span class="token function">resolveAlias</span><span class="token punctuation">(</span>resultType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取命令类型(select|insert|update|delete)</span>
        <span class="token class-name">String</span> nodeName <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SqlCommandType</span> sqlCommandType <span class="token operator">=</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取默认语言驱动器</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> langClass <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getLanguageRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultDriverClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LanguageDriver</span> langDriver <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getLanguageRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDriver</span><span class="token punctuation">(</span>langClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> langDriver<span class="token punctuation">.</span><span class="token function">createSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> element<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedStatement<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> currentNamespace <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> sqlCommandType<span class="token punctuation">,</span> sqlSource<span class="token punctuation">,</span> resultTypeClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加解析 SQL</span>
        configuration<span class="token punctuation">.</span><span class="token function">addMappedStatement</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整个这部分内容的解析，就是从 XMLConfigBuilder 拆解出来关于 Mapper 语句解析的部分，通过这样这样的解耦设计，会让整个流程更加清晰。</li><li>XMLStatementBuilder#parseStatementNode 方法是解析 SQL 语句节点的过程，包括了语句的ID、参数类型、结果类型、命令(<code>select|insert|update|delete</code>)，以及使用语言驱动器处理和封装SQL信息，当解析完成后写入到 Configuration 配置文件中的 <code>Map&lt;String, MappedStatement&gt;</code> 映射语句存放中。</li></ul><h3 id="_4-脚本语言驱动" tabindex="-1"><a class="header-anchor" href="#_4-脚本语言驱动" aria-hidden="true">#</a> 4. 脚本语言驱动</h3><p>在 XMLStatementBuilder#parseStatementNode 语句构建器的解析中，可以看到这么一块，获取默认语言驱动器并解析SQL的操作。其实这部分就是 XML 脚步语言驱动器所实现的功能，在 XMLScriptBuilder 中处理静态SQL和动态SQL，不过目前我们只是实现了其中的一部分，待后续这部分框架都完善后在进行扩展，避免一次引入过多的代码。</p><h4 id="_4-1-定义接口" tabindex="-1"><a class="header-anchor" href="#_4-1-定义接口" aria-hidden="true">#</a> 4.1 定义接口</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.scripting.LanguageDriver</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LanguageDriver</span> <span class="token punctuation">{</span>

    <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Element</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义脚本语言驱动接口，提供创建 SQL 信息的方法，入参包括了配置、元素、参数。其实它的实现类一共有3个；<code>XMLLanguageDriver</code>、<code>RawLanguageDriver</code>、<code>VelocityLanguageDriver</code>，这里我们只是实现了默认的第一个即可。</li></ul><h4 id="_4-2-xml语言驱动器实现" tabindex="-1"><a class="header-anchor" href="#_4-2-xml语言驱动器实现" aria-hidden="true">#</a> 4.2 XML语言驱动器实现</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.scripting.xmltags.XMLLanguageDriver</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLLanguageDriver</span> <span class="token keyword">implements</span> <span class="token class-name">LanguageDriver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Element</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">XMLScriptBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLScriptBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> script<span class="token punctuation">,</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">parseScriptNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于 XML 语言驱动器的实现比较简单，只是封装了对 XMLScriptBuilder 的调用处理。</li></ul><h4 id="_4-3-xml脚本构建器解析" tabindex="-1"><a class="header-anchor" href="#_4-3-xml脚本构建器解析" aria-hidden="true">#</a> 4.3 XML脚本构建器解析</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.scripting.xmltags.XMLScriptBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLScriptBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">parseScriptNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MixedSqlNode</span> rootSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MixedSqlNode</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RawSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> rootSqlNode<span class="token punctuation">,</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// element.getText 拿到 SQL</span>
        <span class="token class-name">String</span> data <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticTextSqlNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> contents<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>XMLScriptBuilder#parseScriptNode 解析SQL节点的处理其实没有太多复杂的内容，主要是对 RawSqlSource 的包装处理。<em>其他小细节可以阅读源码进行学习</em></li></ul><h4 id="_4-4-sql源码构建器" tabindex="-1"><a class="header-anchor" href="#_4-4-sql源码构建器" aria-hidden="true">#</a> 4.4 SQL源码构建器</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.builder.SqlSourceBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSourceBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> parameterProperties <span class="token operator">=</span> <span class="token string">&quot;javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SqlSourceBuilder</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> originalSql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> additionalParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ParameterMappingTokenHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterMappingTokenHandler</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> additionalParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GenericTokenParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericTokenParser</span><span class="token punctuation">(</span><span class="token string">&quot;#{&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>originalSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回静态 SQL</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ParameterMappingTokenHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">TokenHandler</span> <span class="token punctuation">{</span>
       
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parameterMappings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">buildParameterMapping</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 构建参数映射</span>
        <span class="token keyword">private</span> <span class="token class-name">ParameterMapping</span> <span class="token function">buildParameterMapping</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 先解析参数映射,就是转化成一个 HashMap | #{favouriteSection,jdbcType=VARCHAR}</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> propertiesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> property <span class="token operator">=</span> propertiesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;property&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> propertyType <span class="token operator">=</span> parameterType<span class="token punctuation">;</span>
            <span class="token class-name">ParameterMapping<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterMapping<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> property<span class="token punctuation">,</span> propertyType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于以上文中提到的，关于 BoundSql.parameterMappings 的参数就是来自于 ParameterMappingTokenHandler#buildParameterMapping 方法进行构建处理的。</li><li>具体的 javaType、jdbcType 会体现到 ParameterExpression 参数表达式中完成解析操作。<em>这个解析过程直接是 Mybatis 自己的源码，整个过程功能较单一，直接对照学习即可</em></li></ul><h3 id="_5-defaultsqlsession-调用调整" tabindex="-1"><a class="header-anchor" href="#_5-defaultsqlsession-调用调整" aria-hidden="true">#</a> 5. DefaultSqlSession 调用调整</h3><p>因为以上整个设计和实现，调整了解析过程，以及细化了 SQL 的创建。那么在 MappedStatement 映射语句中，则使用 SqlSource 替换了 BoundSql，所以在 DefaultSqlSession 中也会有相应的调整。</p><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.session.defaults.DefaultSqlSession</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSession</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSession</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT_HANDLER</span><span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getSqlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里的使用调整也不大，主要体现在获取SQL的操作；<code>ms.getSqlSource().getBoundSql(parameter)</code> 这样获取后，后面的流程就没有多少变化了。<em>在我们整个解析框架逐步完善后，就会开始对各个字段的属性信息添加进行设置操作。</em></li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><h4 id="_1-1-创建库表" tabindex="-1"><a class="header-anchor" href="#_1-1-创建库表" aria-hidden="true">#</a> 1.1 创建库表</h4><p>创建一个数据库名称为 mybatis 并在库中创建表 user 以及添加测试数据，如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span>
    <span class="token keyword">USER</span>
    <span class="token punctuation">(</span>
        id <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;自增ID&#39;</span><span class="token punctuation">,</span>
        userId <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户ID&#39;</span><span class="token punctuation">,</span>
        userHead <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户头像&#39;</span><span class="token punctuation">,</span>
        createTime <span class="token keyword">TIMESTAMP</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
        updateTime <span class="token keyword">TIMESTAMP</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
        userName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
    
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> userHead<span class="token punctuation">,</span> createTime<span class="token punctuation">,</span> updateTime<span class="token punctuation">,</span> userName<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1_04&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-04-13 00:00:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-04-13 00:00:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小傅哥&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-配置数据源" tabindex="-1"><a class="header-anchor" href="#_1-2-配置数据源" aria-hidden="true">#</a> 1.2 配置数据源</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <code>mybatis-config-datasource.xml</code> 配置数据源信息，包括：driver、url、username、password</li><li>在这里 dataSource 可以按需配置成 DRUID、UNPOOLED 和 POOLED 进行测试验证。</li></ul><h4 id="_1-3-配置mapper" tabindex="-1"><a class="header-anchor" href="#_1-3-配置mapper" aria-hidden="true">#</a> 1.3 配置Mapper</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryUserInfoById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Long<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.mybatis.test.po.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    SELECT id, userId, userName, userHead
    FROM user
    where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分暂时不需要调整，目前还只是一个入参的类型的参数，后续我们全部完善这部分内容以后，则再提供更多的其他参数进行验证。</li></ul><h3 id="_2-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-单元测试" aria-hidden="true">#</a> 2. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_SqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 从SqlSessionFactory中获取SqlSession</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config-datasource.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token comment">// 2. 获取映射器对象</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 3. 测试验证</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfoById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里的测试不需要调整，因为我们本章节的开发内容，主要以解耦 XML 的解析，只要能保持和之前章节一样，正常输出结果就可以。</li></ul><p><strong>测试结果</strong></p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220519-04.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">07</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">15.049</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">1138410383.</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">15.192</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token class-name">Disconnected</span> from the target <span class="token constant">VM</span><span class="token punctuation">,</span> address<span class="token operator">:</span> &#39;<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">54797</span>&#39;<span class="token punctuation">,</span> transport<span class="token operator">:</span> <span class="token char">&#39;socket&#39;</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果和调试的截图可以看到，我们的 XML 解析处理拆解后，已经可以顺利的支撑我们的使用。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>本章节我们就像是去把原本 CRUD 的代码，通过设计原则进行拆分和解耦，运用不用的类来承担不同的职责，完整整个功能的实现。这包括；映射构建器、语句构建器、源码构建器的综合使用，以及对应的引用；脚本语言驱动和脚本构建器解析，处理我们的 XML 中的 SQL 语句。</li><li>通过这样的重构代码，也能让我们对平常的业务开发中的大片面向过程的流程代码有所感悟，当你可以细分拆解职责功能到不同的类中去以后，你的代码会更加的清晰并易于维护。</li><li>后续我们将继续按照现在的扩展结构底座，完成其他模块的功能逻辑开发，因为了这些基础内容的建造，再继续补充功能也会更加容易。<em>当然这些代码还是需要你熟悉以后才能驾驭，在学习的过程中可以尝试断点调试，看看每一个步骤都在完成哪些工作。</em></li></ul><h2 id="七、优秀作业" tabindex="-1"><a class="header-anchor" href="#七、优秀作业" aria-hidden="true">#</a> 七、优秀作业</h2>`,77),y={href:"https://t.zsxq.com/06ZFQF2zb",target:"_blank",rel:"noopener noreferrer"},q={href:"https://t.zsxq.com/09BrVRsSa",target:"_blank",rel:"noopener noreferrer"},S={href:"https://t.zsxq.com/09ldlXf8A",target:"_blank",rel:"noopener noreferrer"};function h(f,M){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/I88gvB0NqCRoIQgUJx8EMg"),e(a)])]),v,b,g,n("ul",null,[n("li",null,[n("a",y,[s("引入映射构建器XMLMapperBuilder和语句映射器XMLStatementBuilder细化XML语句构建器。@杨杨得亿🙉"),e(a)])]),n("li",null,[n("a",q,[s("细化XML语句构建器，完善静态SQL解析 @liuc"),e(a)])]),n("li",null,[n("a",S,[s("核心类UML类图梳理 @小理想"),e(a)])])])])}const L=t(i,[["render",h],["__file","2022-05-18-di9zhang：xihuaXMLyujugoujianqi，wanshanjingtaiSQLjiexi.html.vue"]]);export{L as default};
