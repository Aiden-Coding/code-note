import{_ as t,r as p,o,c,a as s,b as n,d as l,e as a}from"./app-3RcBQnkC.js";const i={},u=a('<h1 id="exception-和-error" tabindex="-1"><a class="header-anchor" href="#exception-和-error" aria-hidden="true">#</a> Exception 和 Error</h1><ul><li><a href="#exception-%E5%92%8C-error">Exception 和 Error</a><ul><li><a href="#%E8%AE%A4%E8%AF%86-exception">认识 Exception</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-throwable">什么是 Throwable</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84-exception">常见的 Exception</a></li><li><a href="#%E4%B8%8E-exception-%E6%9C%89%E5%85%B3%E7%9A%84-java-%E5%85%B3%E9%94%AE%E5%AD%97">与 Exception 有关的 Java 关键字</a><ul><li><a href="#throws-%E5%92%8C-throw">throws 和 throw</a></li><li><a href="#try-finally-catch">try 、finally 、catch</a></li><li><a href="#jdk17-%E4%BD%BF%E7%94%A8-trywithresources-%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90">JDK1.7 使用 try...with...resources 优雅关闭资源</a></li></ul></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E5%8E%9F%E5%88%99">异常处理的原则</a></li></ul></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-error">什么是 Error</a></li><li><a href="#%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98">一道经典的面试题</a></li></ul></li></ul><p>在 Java 中的基本理念是 <code>结构不佳的代码不能运行</code>，发现错误的理想时期是在编译期间，因为你不用运行程序，只是凭借着对 Java 基本理念的理解就能发现问题。但是编译期并不能找出所有的问题，有一些 NullPointerException 和 ClassNotFoundException 在编译期找不到，这些异常是 RuntimeException 运行时异常，这些异常往往在运行时才能被发现。</p><p>我们写 Java 程序经常会出现两种问题，一种是 java.lang.Exception ，一种是 java.lang.Error，都用来表示出现了异常情况，下面就针对这两种概念进行理解。</p><h2 id="认识-exception" tabindex="-1"><a class="header-anchor" href="#认识-exception" aria-hidden="true">#</a> 认识 Exception</h2><p><code>Exception</code> 位于 <code>java.lang</code> 包下，它是一种顶级接口，继承于 <code>Throwable</code> 类，Exception 类及其子类都是 Throwable 的组成条件，是程序出现的合理情况。</p><p>在认识 Exception 之前，有必要先了解一下什么是 <code>Throwable</code>。</p><h3 id="什么是-throwable" tabindex="-1"><a class="header-anchor" href="#什么是-throwable" aria-hidden="true">#</a> 什么是 Throwable</h3><p>Throwable 类是 Java 语言中所有<code>错误(errors)</code>和<code>异常(exceptions)</code>的父类。只有继承于 Throwable 的类或者其子类才能够被抛出，还有一种方式是带有 Java 中的 <code>@throw</code> 注解的类也可以抛出。</p>',9),r={href:"https://docs.oracle.com/javase/specs/jls/se9/html/jls-11.html#jls-11.1.1",target:"_blank",rel:"noopener noreferrer"},d=a(`<blockquote><p>The <em>unchecked exception classes</em> are the run-time exception classes and the error classes.</p></blockquote><blockquote><p>The <em>checked exception classes</em> are all exception classes other than the unchecked exception classes. That is, the checked exception classes are <code>Throwable</code> and all its subclasses other than <code>RuntimeException</code> and its subclasses and <code>Error</code>and its subclasses.</p></blockquote><p>也就是说，除了 <code>RuntimeException</code> 和其子类，以及<code>error</code>和其子类，其它的所有异常都是 <code>checkedException</code>。</p><p>那么，按照这种逻辑关系，我们可以对 Throwable 及其子类进行归类分析</p><p><img src="http://www.cxuan.vip/image-20230204094933462.png" alt=""></p><p>可以看到，Throwable 位于异常和错误的最顶层，我们查看 Throwable 类中发现它的方法和属性有很多，我们只讨论其中几个比较常用的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 返回抛出异常的详细信息</span>
<span class="token keyword">public</span> string <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> string <span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回异常发生时的简要描述</span>
<span class="token keyword">public</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；
  
<span class="token comment">// 打印异常信息到标准输出流上</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">PrintWriter</span> s<span class="token punctuation">)</span>

<span class="token comment">// 记录栈帧的的当前状态</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Throwable</span> <span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，因为 Throwable 的父类也是 <code>Object</code>，所以常用的方法还有继承其父类的<code>getClass()</code> 和 <code>getName()</code> 方法。</p><h3 id="常见的-exception" tabindex="-1"><a class="header-anchor" href="#常见的-exception" aria-hidden="true">#</a> 常见的 Exception</h3><p>下面我们回到 Exception 的探讨上来，现在你知道了 Exception 的父类是 Throwable，并且 Exception 有两种异常，一种是 <code>RuntimeException</code> ；一种是 <code>CheckedException</code>，这两种异常都应该去<code>捕获</code>。</p><p>下面列出了一些 Java 中常见的异常及其分类，这块面试官也可能让你举出几个常见的异常情况并将其分类</p><p>RuntimeException</p><p><img src="http://www.cxuan.vip/image-20230204095144470.png" alt=""></p><p>UncheckedException</p><p><img src="http://www.cxuan.vip/image-20230204095156789.png" alt=""></p><h3 id="与-exception-有关的-java-关键字" tabindex="-1"><a class="header-anchor" href="#与-exception-有关的-java-关键字" aria-hidden="true">#</a> 与 Exception 有关的 Java 关键字</h3><p>那么 Java 中是如何处理这些异常的呢？在 Java 中有这几个关键字 <strong>throws、throw、try、finally、catch</strong> 下面我们分别来探讨一下</p><h4 id="throws-和-throw" tabindex="-1"><a class="header-anchor" href="#throws-和-throw" aria-hidden="true">#</a> throws 和 throw</h4><p>在 Java 中，异常也就是一个对象，它能够被程序员自定义抛出或者应用程序抛出，必须借助于 <code>throws</code> 和 <code>throw</code> 语句来定义抛出异常。</p><p>throws 和 throw 通常是成对出现的，例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cacheException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>

  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>throw 语句用在方法体内，表示抛出异常，由方法体内的语句处理。 throws 语句用在方法声明后面，表示再抛出异常，由该方法的调用者来处理。</p><p>throws 主要是声明这个方法会抛出这种类型的异常，使它的调用者知道要捕获这个异常。 throw 是具体向外抛异常的动作，所以它是抛出一个异常实例。</p><h4 id="try-、finally-、catch" tabindex="-1"><a class="header-anchor" href="#try-、finally-、catch" aria-hidden="true">#</a> try 、finally 、catch</h4><p>这三个关键字主要有下面几种组合方式 <strong>try...catch 、try...finally、try...catch...finally</strong>。</p><p>try...catch 表示对某一段代码可能抛出异常进行的捕获，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cacheException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try...finally 表示对一段代码不管执行情况如何，都会走 finally 中的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cacheException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;enter: i=&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;execute: i=&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;leave: i=&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try...catch...finally 也是一样的，表示对异常捕获后，再走 finally 中的代码逻辑。</p><h4 id="jdk1-7-使用-try-with-resources-优雅关闭资源" tabindex="-1"><a class="header-anchor" href="#jdk1-7-使用-try-with-resources-优雅关闭资源" aria-hidden="true">#</a> JDK1.7 使用 try...with...resources 优雅关闭资源</h4><p>Java 类库中有许多资源需要通过 close 方法进行关闭。比如 InputStream、OutputStream，数据库连接对象 Connection，MyBatis 中的 SqlSession 会话等。作为开发人员经常会忽略掉资源的关闭方法，导致内存泄漏。</p><p>根据经验，<code>try-finally</code>语句是确保资源会被关闭的最佳方法，就算异常或者返回也一样。try-catch-finally 一般是这样来用的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">firstLineOfFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样看起来代码还是比较整洁，但是当我们添加第二个需要关闭的资源的时候，就像下面这样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>

    <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> n<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
      os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样感觉这个方法已经变得臃肿起来了。</p><p>而且这种写法也存在诸多问题，即使 try - finally 能够正确关闭资源，但是它不能阻止异常的抛出，因为 try 和 finally 块中都可能有异常的发生。</p><p>比如说你正在读取的时候硬盘损坏，这个时候你就无法读取文件和关闭资源了，此时会抛出两个异常。但是在这种情况下，第二个异常会抹掉第一个异常。在异常堆栈中也无法找到第一个异常的记录，怎么办，难道像这样来捕捉异常么？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tryThrowException</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

  <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s = &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
      br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法，虽然能解决异常抛出的问题，但是各种 try-cath-finally 的嵌套会让代码变得非常臃肿。</p><p>Java7 中引入了<code>try-with-resources</code> 语句时，所有这些问题都能得到解决。要使用 try-with-resources 语句，首先要实现 <code>AutoCloseable</code> 接口，此接口包含了单个返回的 close 方法。Java 类库与三方类库中的许多类和接口，现在都实现或者扩展了 AutoCloseable 接口。如果编写了一个类，它代表的是必须关闭的资源，那么这个类应该实现 AutoCloseable 接口。</p><p>java 引入了 try-with-resources 声明，将 try-catch-finally 简化为 try-catch，这其实是一种<code>语法糖</code>，在编译时会进行转化为 try-catch-finally 语句。</p><p>下面是使用 try-with-resources 的第一个范例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 使用try-with-resources 改写示例一
     * <span class="token keyword">@param</span> <span class="token parameter">path</span>
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
     */</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">firstLineOfFileAutoClose</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

  <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 try-with-resources 改写程序的第二个示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyAutoClose</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>

  <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 try-with-resources 不仅使代码变得通俗易懂，也更容易诊断。以<code>firstLineOfFileAutoClose</code>方法为例，如果调用 <code>readLine() </code>和 <code>close()</code> 方法都抛出异常，后一个异常就会被禁止，以保留第一个异常。</p><h3 id="异常处理的原则" tabindex="-1"><a class="header-anchor" href="#异常处理的原则" aria-hidden="true">#</a> 异常处理的原则</h3><p>我们在日常处理异常的代码中，应该遵循三个原则</p><ul><li>不要捕获类似 <code>Exception</code> 之类的异常，而应该捕获类似特定的异常，比如 <code>InterruptedException</code>，方便排查问题，而且也能够让其他人接手你的代码时，会减少骂你的次数。</li><li>不要生吞异常。这是􏲾异常处理中要特别注重􏱸的事情，因为很可能会􏱓􏱠非常难以􏰰􏰱正常􏳶􏲾结束情况。如果我们不把􏲾异常抛􏲏出来，或者也没有输􏳹出到 􏰩􏱥􏰛Logger􏰜 日志中，程序可能会在后面以不可控的方式结束。</li><li>不要在函数式编程中使用 <code>checkedException</code>。</li></ul><h2 id="什么是-error" tabindex="-1"><a class="header-anchor" href="#什么是-error" aria-hidden="true">#</a> 什么是 Error</h2><p>Error 是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。这些错误是不可检查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况，比如 <code>OutOfMemoryError</code> 和 <code>StackOverflowError</code>异常的出现会有几种情况，这里需要先介绍一下 Java 内存模型 JDK1.7。</p><p><img src="http://www.cxuan.vip/image-20230204094950841.png" alt=""></p><p>其中包括两部分，<strong>由所有线程共享的数据区和线程隔离的数据区</strong>组成，在上面的 Java 内存模型中，<strong>只有程序计数器</strong>是不会发生 <code>OutOfMemoryError</code> 情况的区域，程序计数器控制着计算机指令的分支、循环、跳转、异常处理和线程恢复，并且程序计数器是每个线程私有的。</p><blockquote><p>什么是线程私有：表示的就是各条线程之间互不影响，独立存储的内存区域。</p></blockquote><p>如果应用程序执行的是 Java 方法，那么这个计数器记录的就是<code>虚拟机字节码</code>指令的地址；如果正在执行的是 <code>Native</code> 方法，这个计数器值则为<code>空(Undefined)</code>。</p><p>除了程序计数器外，其他区域：<code>方法区(Method Area)</code>、<code>虚拟机栈(VM Stack)</code>、<code>本地方法栈(Native Method Stack)</code> 和 <code>堆(Heap)</code> 都是可能发生 OutOfMemoryError 的区域。</p><ul><li><p>虚拟机栈：如果线程请求的栈深度大于虚拟机栈所允许的深度，将会出现 <code>StackOverflowError</code> 异常；如果虚拟机动态扩展无法申请到足够的内存，将出现 <code>OutOfMemoryError</code>。</p></li><li><p>本地方法栈和虚拟机栈一样</p></li><li><p>堆：Java 堆可以处于物理上不连续，逻辑上连续，就像我们的磁盘空间一样，如果堆中没有内存完成实例分配，并且堆无法扩展时，将会抛出 OutOfMemoryError。</p></li><li><p>方法区：方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</p></li></ul><h2 id="一道经典的面试题" tabindex="-1"><a class="header-anchor" href="#一道经典的面试题" aria-hidden="true">#</a> 一道经典的面试题</h2><p>一道非常经典的面试题，<strong>NoClassDefFoundError 和 ClassNotFoundException 有什么区别</strong>？</p><p>在类的加载过程中， JVM 或者 ClassLoader 无法找到对应的类时，都可能会引起这两种异常/错误，由于不同的 ClassLoader 会从不同的地方加载类，有时是错误的 CLASSPATH 类路径导致的这类错误，有时是某个库的 jar 包缺失引发这类错误。NoClassDefFoundError 表示这个类在编译时期存在，但是在运行时却找不到此类，有时静态初始化块也会导致 NoClassDefFoundError 错误。</p><blockquote><p>ClassLoader 是类路径装载器，在Java 中，类路径装载器一共有三种两类</p><p>一种是虚拟机自带的 ClassLoader，分为三种</p><ul><li><code>启动类加载器(Bootstrap)</code> ，负责加载 $JAVAHOME/jre/lib/rt.jar</li><li><code>扩展类加载器(Extension)</code>，负责加载 $JAVAHOME/jre/lib/ext/*.jar</li><li><code>应用程序类加载器(AppClassLoader)</code>，加载当前应用的 classpath 的所有类</li></ul><p>第二种是用户自定义类加载器</p><ul><li>Java.lang.ClassLoader 的子类，用户可以定制类的加载方式。</li></ul></blockquote><p><img src="http://www.cxuan.vip/image-20230204095000552.png" alt=""></p><p>另一方面，ClassNotFoundException 与编译时期无关，当你尝试在运行时使用反射加载类时，ClassNotFoundException 就会出现。</p><p>简而言之，ClassNotFoundException 和 NoClassDefFoundError 都是由 CLASSPATH 中缺少类引起的，通常是由于缺少 JAR 文件而引起的，但是如果 JVM 认为应用运行时找不到相应的引用，就会抛出 NoClassDefFoundError 错误；当你在代码中显示的加载类比如 <code>Class.forName()</code> 调用时却没有找到相应的类，就会抛出 <code>java.lang.ClassNotFoundException</code>。</p><ul><li>NoClassDefFoundError 是 JVM 引起的错误，是 unchecked，未经检查的。因此不会使用 try-catch 或者 finally 语句块；另外，ClassNotFoundException 是受检异常，因此需要 try-catch 语句块或者 try-finally 语句块包围，否则会导致编译错误。</li><li>调用 <strong>Class.forName()、ClassLoader.findClass() 和 ClassLoader.loadClass()</strong> 等方法时可能会引起 <code>java.lang.ClassNotFoundException</code>，如图所示</li></ul><p><img src="http://www.cxuan.vip/image-20230204095010539.png" alt=""></p><ul><li>NoClassDefFoundError 是链接错误，发生在链接阶段，当解析引用找不到对应的类，就会触发；而 ClassNotFoundException 是发生在运行时的异常。</li></ul><p>如果你在阅读文章的过程中发现错误和问题，请及时与我联系！</p><p>如果文章对你有帮助，希望小伙伴们三连走起！</p>`,71);function k(v,m){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("在"),s("a",r,[n("Java规范"),l(e)]),n("中，对非受查异常和受查异常的定义是这样的：")]),d])}const b=t(i,[["render",k],["__file","java-exceptionanderror.html.vue"]]);export{b as default};
