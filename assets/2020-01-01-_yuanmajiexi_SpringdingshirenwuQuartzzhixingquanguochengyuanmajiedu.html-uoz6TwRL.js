import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"源码分析-spring定时任务quartz执行全过程源码解读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源码分析-spring定时任务quartz执行全过程源码解读","aria-hidden":"true"},"#"),s(" 源码分析 | Spring定时任务Quartz执行全过程源码解读")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言介绍" tabindex="-1"><a class="header-anchor" href="#一、前言介绍" aria-hidden="true">#</a> 一、前言介绍</h2><p>在日常开发中经常会用到定时任务，用来；库表扫描发送MQ、T+n账单结算、缓存数据更新、秒杀活动状态变更，等等。因为有了Spring的Schedule极大的方便了我们对这类场景的使用。那么，除了应用你还了解它多少呢；</p><ol><li>默认初始化多少个任务线程</li><li>JobStore有几种实现，你平时用的都是哪个</li><li>一个定时任务的执行流程简述下</li></ol><p>蒙圈了吧，是不感觉平时只是使用了，根本没关注过这些。有种冲动赶紧搜索答案吧！但只是知道答案是没有多少意义的，扛不住问不说，也不了解原理。所以，如果你想真的提升自己技能，还是要从根本搞定。</p><h2 id="二、案例工程" tabindex="-1"><a class="header-anchor" href="#二、案例工程" aria-hidden="true">#</a> 二、案例工程</h2><p>为了更好的做源码分析，我们将平时用的定时任务服务单独抽离出来。工程下载，关注公众号：bugstack虫洞栈，回复：源码分析</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>code<span class="token operator">-</span>schedule
└── src
    ├── main
    │   ├── java
    │   │   └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo
    │   │       ├── <span class="token class-name">DemoTask</span><span class="token punctuation">.</span>java
    │   │       └── <span class="token class-name">JobImpl</span><span class="token punctuation">.</span>java   
    │   └── resources	
    │       ├── props	
    │       │   └── config<span class="token punctuation">.</span>properties
    │       ├── spring
    │       │   └── spring<span class="token operator">-</span>config<span class="token operator">-</span>schedule<span class="token operator">-</span>task<span class="token punctuation">.</span>xml
    │       ├── logback<span class="token punctuation">.</span>xml
    │       └── spring<span class="token operator">-</span>config<span class="token punctuation">.</span>xml
    └── test
         └── java
             └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                 ├── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
                 ├── <span class="token class-name">MyQuartz</span><span class="token punctuation">.</span>java				
                 └── <span class="token class-name">MyTask</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、环境配置" tabindex="-1"><a class="header-anchor" href="#三、环境配置" aria-hidden="true">#</a> 三、环境配置</h2><ol><li>JDK 1.8</li><li>IDEA 2019.3.1</li><li>Spring 4.3.24.RELEASE</li><li>quartz 2.3.2 ｛不同版本略有代码差异｝</li></ol><h2 id="四、源码分析" tabindex="-1"><a class="header-anchor" href="#四、源码分析" aria-hidden="true">#</a> 四、源码分析</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.quartz-scheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖于Spring版本升级quartz选择2.3.2，同时如果你如本文案例中所示使用xml配置任务。那么会有如下更改；</p><blockquote><p>Spring 3.x/org.springframework.scheduling.quart.CronTriggerBean</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;taskTrigger&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot;</span><span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;jobDetail&quot;</span> ref<span class="token operator">=</span><span class="token string">&quot;taskHandler&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;cronExpression&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;0/5 * * * * ?&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Spring 4.x/org.springframework.scheduling.quartz.CronTriggerFactoryBean</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;taskTrigger&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;</span><span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;jobDetail&quot;</span> ref<span class="token operator">=</span><span class="token string">&quot;taskHandler&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;cronExpression&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;0/5 * * * * ?&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在正式分析前，可以看下quartz的默认配置，很多初始化动作都要从这里取得参数，同样你可以配置自己的配置文件。例如，当你的任务很多时，默认初始化的10个线程组不满足你的业务需求，就可以按需调整。</p><blockquote><p>quart.properties</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">Default</span> <span class="token class-name">Properties</span> file <span class="token keyword">for</span> use by <span class="token class-name">StdSchedulerFactory</span>
# <span class="token keyword">to</span> <span class="token namespace">create</span> a <span class="token class-name">Quartz</span> <span class="token class-name">Scheduler</span> <span class="token class-name">Instance</span><span class="token punctuation">,</span> <span class="token keyword">if</span> a different
# properties file is not explicitly specified<span class="token punctuation">.</span>
#

org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>instanceName<span class="token operator">:</span> <span class="token class-name">DefaultQuartzScheduler</span>
org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>export<span class="token operator">:</span> <span class="token boolean">false</span>
org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>proxy<span class="token operator">:</span> <span class="token boolean">false</span>
org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>wrapJobExecutionInUserTransaction<span class="token operator">:</span> <span class="token boolean">false</span>

org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>threadPool<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span></span>SimpleThreadPool</span>
org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>threadPool<span class="token punctuation">.</span>threadCount<span class="token operator">:</span> <span class="token number">10</span>
org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>threadPool<span class="token punctuation">.</span>threadPriority<span class="token operator">:</span> <span class="token number">5</span>
org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>threadPool<span class="token punctuation">.</span>threadsInheritContextClassLoaderOfInitializingThread<span class="token operator">:</span> <span class="token boolean">true</span>

org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span>misfireThreshold<span class="token operator">:</span> <span class="token number">60000</span>

org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span></span>RAMJobStore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-从一个简单案例开始" tabindex="-1"><a class="header-anchor" href="#_1-从一个简单案例开始" aria-hidden="true">#</a> 1. 从一个简单案例开始</h3><p>平时我们使用Schedule基本都是注解或者xml配置文件，但是为了可以更简单的分析代码，我们从一个简单的Demo入手，放到main函数中。</p><blockquote><p>DemoTask.java &amp; 定义一个等待被执行的任务</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTask</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">DemoTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;定时处理用户信息任务：0/5 * * * * ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>MyTask.java &amp; 测试类，将配置在xml中的代码抽离出来</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">DemoTask</span> demoTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义了；执行的内容</span>
        <span class="token class-name">MethodInvokingJobDetailFactoryBean</span> methodInvokingJobDetailFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodInvokingJobDetailFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setTargetObject</span><span class="token punctuation">(</span>demoTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setTargetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;execute&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setConcurrent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;demoTask&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义了；执行的计划</span>
        <span class="token class-name">CronTriggerFactoryBean</span> cronTriggerFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTriggerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">setJobDetail</span><span class="token punctuation">(</span>methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">setCronExpression</span><span class="token punctuation">(</span><span class="token string">&quot;0/5 * * * * ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;demoTask&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 实现了；执行的功能</span>
        <span class="token class-name">SchedulerFactoryBean</span> schedulerFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setTriggers</span><span class="token punctuation">(</span>cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 暂停住</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果一切顺利，那么会有如下结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.369</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>StdSchedulerFactory</span><span class="token punctuation">[</span><span class="token number">1220</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Using</span> <span class="token keyword">default</span> implementation <span class="token keyword">for</span> <span class="token class-name">ThreadExecutor</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.421</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>SchedulerSignalerImpl</span><span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Initialized</span> <span class="token class-name">Scheduler</span> <span class="token class-name">Signaller</span> of type<span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>SchedulerSignalerImpl</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.422</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span><span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Quartz</span> <span class="token class-name">Scheduler</span> v<span class="token punctuation">.</span><span class="token number">2.3</span><span class="token number">.2</span> created<span class="token punctuation">.</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.423</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span></span>RAMJobStore</span><span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">RAMJobStore</span> initialized<span class="token punctuation">.</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.424</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span><span class="token punctuation">[</span><span class="token number">294</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> meta<span class="token operator">-</span>data<span class="token operator">:</span> <span class="token class-name">Quartz</span> <span class="token class-name">Scheduler</span> <span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token number">3.2</span><span class="token punctuation">)</span> &#39;<span class="token class-name">QuartzScheduler</span>&#39; <span class="token keyword">with</span> <span class="token namespace">instanceId</span> &#39;<span class="token constant">NON_CLUSTERED</span>&#39;
  <span class="token class-name">Scheduler</span> <span class="token keyword">class</span><span class="token operator">:</span> &#39;<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span>&#39; <span class="token operator">-</span> running locally<span class="token punctuation">.</span>
  <span class="token constant">NOT</span> <span class="token class-name">STARTED<span class="token punctuation">.</span>
  Currently</span> in standby <span class="token class-name"><span class="token namespace">mode<span class="token punctuation">.</span></span>
  Number</span> of jobs executed<span class="token operator">:</span> <span class="token number">0</span>
  <span class="token class-name">Using</span> thread pool &#39;<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span></span>SimpleThreadPool</span>&#39; <span class="token operator">-</span> <span class="token keyword">with</span> <span class="token number">10</span> <span class="token class-name"><span class="token namespace">threads<span class="token punctuation">.</span></span>
  Using</span> job<span class="token operator">-</span>store &#39;<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span></span>RAMJobStore</span>&#39; <span class="token operator">-</span> which does not support persistence<span class="token punctuation">.</span> and is not clustered<span class="token punctuation">.</span>

<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.424</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>StdSchedulerFactory</span><span class="token punctuation">[</span><span class="token number">1374</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Quartz</span> scheduler &#39;<span class="token class-name">QuartzScheduler</span>&#39; initialized from an externally provided properties instance<span class="token punctuation">.</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.424</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>StdSchedulerFactory</span><span class="token punctuation">[</span><span class="token number">1378</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Quartz</span> scheduler version<span class="token operator">:</span> <span class="token number">2.3</span><span class="token number">.2</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.426</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span><span class="token punctuation">[</span><span class="token number">2293</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">JobFactory</span> set <span class="token keyword">to</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span>AdaptableJobFactory</span><span class="token annotation punctuation">@3e9b1010</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16.651</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span><span class="token punctuation">[</span><span class="token number">547</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> <span class="token class-name">QuartzScheduler_</span>$_NON_CLUSTERED started<span class="token punctuation">.</span>
一月 <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">2020</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">16</span> 上午 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span>SchedulerFactoryBean</span> startScheduler
信息<span class="token operator">:</span> <span class="token class-name">Starting</span> <span class="token class-name">Quartz</span> <span class="token class-name">Scheduler</span> now
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">20.321</span> <span class="token punctuation">[</span><span class="token class-name">QuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>DemoTask</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> 定时处理用户信息任务：<span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">25.001</span> <span class="token punctuation">[</span><span class="token class-name">QuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>DemoTask</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> 定时处理用户信息任务：<span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">30.000</span> <span class="token punctuation">[</span><span class="token class-name">QuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>DemoTask</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> 定时处理用户信息任务：<span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">35.001</span> <span class="token punctuation">[</span><span class="token class-name">QuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>DemoTask</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> 定时处理用户信息任务：<span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">40.000</span> <span class="token punctuation">[</span><span class="token class-name">QuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>DemoTask</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> 定时处理用户信息任务：<span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-定义执行内容-methodinvokingjobdetailfactorybean" tabindex="-1"><a class="header-anchor" href="#_2-定义执行内容-methodinvokingjobdetailfactorybean" aria-hidden="true">#</a> 2. 定义执行内容(MethodInvokingJobDetailFactoryBean)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义了；执行的内容</span>
<span class="token class-name">MethodInvokingJobDetailFactoryBean</span> methodInvokingJobDetailFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodInvokingJobDetailFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setTargetObject</span><span class="token punctuation">(</span>demoTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setTargetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;execute&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setConcurrent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;demoTask&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这块内容主要将我们的任务体(即待执行任务DemoTask)交给MethodInvokingJobDetailFactoryBean管理，首先设置必要信息；</p><ul><li>targetObject：目标对象bean，也就是demoTask</li><li>targetMethod：目标方法name，也就是execute</li><li>concurrent：是否并行执行，非并行执行任务，如果上一个任务没有执行完，下一刻不会执行</li><li>name：xml配置非必传，源码中可以获取beanName</li></ul><p>最后我们通过手动调用 afterPropertiesSet() 来模拟初始化。如果我们的类是交给 Spring 管理的，那么在实现了 InitializingBean 接口的类，在类配置信息加载后会自动执行 afterPropertiesSet() 。一般实现了 InitializingBean 接口的类，同时也会去实现 <code>FactoryBean&lt;T&gt;</code> 接口，因为这个接口实现后就可以通过 T getObject() 获取自己自定义初始化的类。这也常常用在一些框架开发中。</p><blockquote><p>MethodInvokingJobDetailFactoryBean.afterPropertiesSet()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>
	<span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Use specific name if given, else fall back to bean name.</span>
	<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Consider the concurrent flag to choose between stateful and stateless job.</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> jobClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>concurrent <span class="token operator">?</span> <span class="token class-name">MethodInvokingJob</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> <span class="token class-name">StatefulMethodInvokingJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Build JobDetail instance.</span>
	<span class="token class-name">JobDetailImpl</span> jdi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobDetailImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	jdi<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	jdi<span class="token punctuation">.</span><span class="token function">setGroup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
	jdi<span class="token punctuation">.</span><span class="token function">setJobClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> jobClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
	jdi<span class="token punctuation">.</span><span class="token function">setDurability</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	jdi<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;methodInvoker&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>jobDetail <span class="token operator">=</span> jdi<span class="token punctuation">;</span>
	
	<span class="token function">postProcessJobDetail</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>源码168行：</strong> 根据是否并行执行选择任务类，这两个类都是MethodInvokingJobDetailFactoryBean的内部类，非并行执行的StatefulMethodInvokingJob只是继承MethodInvokingJob添加了标记注解。</p></li><li><p><strong>源码171行：</strong> 创建JobDetailImpl，添加任务明细信息，注意这类的jdi.setJobClass((Class) jobClass)实际就是MethodInvokingJob。MethodInvokingJob也是我们最终要反射调用执行的内容。</p></li><li><p><strong>源码177行：</strong> 初始化任务后赋值给this.jobDetail = jdi，也就是最终的类对象</p><blockquote><p>MethodInvokingJobDetailFactoryBean.getObject()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">JobDetail</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobDetail<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>源码：220行：</strong> 获取对象时返回 this.jobDetail，这也就解释了为什么 MethodInvokingJobDetailFactoryBean 初始化后直接赋值给了一个 JobDetail ；</p><p><img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-demo-code-schedule-01.png" alt="微信公众号：bugstack虫洞栈 &amp; Schedule.xml"></p></li></ul><h3 id="_3-定义执行计划-crontriggerfactorybeann" tabindex="-1"><a class="header-anchor" href="#_3-定义执行计划-crontriggerfactorybeann" aria-hidden="true">#</a> 3. 定义执行计划(CronTriggerFactoryBeann)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义了；执行的计划</span>
<span class="token class-name">CronTriggerFactoryBean</span> cronTriggerFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTriggerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">setJobDetail</span><span class="token punctuation">(</span>methodInvokingJobDetailFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">setCronExpression</span><span class="token punctuation">(</span><span class="token string">&quot;0/5 * * * * ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;demoTask&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一块主要定义任务的执行计划，并将任务执行内容交给 CronTriggerFactoryBean 管理，同时设置必要信息；</p><ul><li>jobDetail：设置任务体，xml 中可以直接将对象赋值，硬编码中设置执行的 JobDetail 对象信息。也就是我们上面设置的 JobDetailImpl ，通过 getObject() 获取出来。</li><li>cronExpression：计划表达式；秒、分、时、日、月、周、年</li></ul><blockquote><p>CronTriggerFactoryBean.afterPropertiesSet()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    
	<span class="token comment">// ... 校验属性信息</span>
	
	<span class="token class-name">CronTriggerImpl</span> cti <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTriggerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setGroup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobDetail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cti<span class="token punctuation">.</span><span class="token function">setJobKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobDetail<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cti<span class="token punctuation">.</span><span class="token function">setJobDataMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobDataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setCronExpression</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setTimeZone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeZone<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setCalendarName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>calendarName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setMisfireInstruction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>misfireInstruction<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cti<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>cronTrigger <span class="token operator">=</span> cti<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>源码237行：</strong> 创建触发器 CronTriggerImpl 并设置相关属性信息</p></li><li><p><strong>源码245行：</strong> 生成执行计划类 cti.setCronExpression(this.cronExpression);</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCronExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
	<span class="token class-name">TimeZone</span> origTz <span class="token operator">=</span> <span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>cronEx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronExpression</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>cronEx<span class="token punctuation">.</span><span class="token function">setTimeZone</span><span class="token punctuation">(</span>origTz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>CronExpression.java &amp; 解析Cron表达式</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">buildExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> expression<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
	expressionParsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		
		<span class="token comment">// ... 初始化 TreeSet xxx = new TreeSet&lt;Integer&gt;();</span>
		
		<span class="token keyword">int</span> exprOn <span class="token operator">=</span> <span class="token constant">SECOND</span><span class="token punctuation">;</span>
		<span class="token class-name">StringTokenizer</span> exprsTok <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> <span class="token string">&quot; \\t&quot;</span><span class="token punctuation">,</span>
				<span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				
		<span class="token keyword">while</span> <span class="token punctuation">(</span>exprsTok<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> exprOn <span class="token operator">&lt;=</span> <span class="token constant">YEAR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">String</span> expr <span class="token operator">=</span> exprsTok<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token comment">// ... 校验DAY_OF_MONTH和DAY_OF_WEEK字段的特殊字符</span>
			
			<span class="token class-name">StringTokenizer</span> vTok <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>vTok<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">String</span> v <span class="token operator">=</span> vTok<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token function">storeExpressionVals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> exprOn<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			exprOn<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		<span class="token comment">// ... 校验DAY_OF_MONTH和DAY_OF_WEEK字段的特殊字符</span>
		
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> pe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> pe<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ParseException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal cron expression format (&quot;</span>
				<span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Cron表达式有7个字段，CronExpression 把7个字段解析为7个 TreeSet 对象。</li><li>填充TreeSet对象值的时候，表达式都会转换为起始值、结束值和增量的计算模式，然后计算出匹配的值放进TreeSet对象</li></ul></li></ul><blockquote><p>CronTriggerFactoryBean.getObject()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">CronTrigger</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cronTrigger<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>源码257行：</strong> 获取对象时返回 this.cronTrigger ，也就是 CronTriggerImpl 对象</li></ul><h3 id="_4-调度执行计划-schedulerfactorybean" tabindex="-1"><a class="header-anchor" href="#_4-调度执行计划-schedulerfactorybean" aria-hidden="true">#</a> 4. 调度执行计划(SchedulerFactoryBean)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 调度了；执行的计划(scheduler)</span>
<span class="token class-name">SchedulerFactoryBean</span> schedulerFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setTriggers</span><span class="token punctuation">(</span>cronTriggerFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一部分如名字一样调度工厂，相当于一个指挥官，可以从全局做调度，比如监听哪些trigger已经ready、分配线程等等，同样也需要设置必要的属性信息；</p><ul><li>triggers：按需可以设置多个触发器，本文设置了一个 cronTriggerFactoryBean.getObject() 也就是 CronTriggerImpl 对象</li><li>autoStartup：默认是否自动启动任务，默认值为true</li></ul><p>这个过程较长包括：调度工厂、线程池、注册任务等等，整体核心加载流程如下；</p><p><img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-demo-code-schedule-02.png" alt="微信公众号：bugstack虫洞栈 &amp; 调度工程初始化流程"></p><ul><li>整个加载过程较长，抽取部分核心代码块进行分析，其中包括的类； <ul><li>StdScheduler</li><li>StdSchedulerFactory</li><li>SimpleThreadPool</li><li>QuartzScheduler</li><li>QuartzSchedulerThread</li><li>RAMJobStore</li><li>CronTriggerImpl</li><li>CronExpression</li></ul></li></ul><blockquote><p>SchedulerFactoryBean.afterPropertiesSet()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nonTransactionalDataSource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nonTransactionalDataSource<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Initialize the Scheduler instance...</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>scheduler <span class="token operator">=</span> <span class="token function">prepareScheduler</span><span class="token punctuation">(</span><span class="token function">prepareSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">registerJobsAndTriggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Scheduler shutdown exception after registration failure&quot;</span><span class="token punctuation">,</span> ex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>源码474行：</strong> 为调度器做准备工作 prepareScheduler(prepareSchedulerFactory()) ，依次执行如下；</p><ol><li>SchedulerFactoryBean.prepareScheduler(SchedulerFactory schedulerFactory)</li><li>SchedulerFactoryBean.createScheduler(schedulerFactory, this.schedulerName);</li><li>SchedulerFactoryBean.createScheduler(SchedulerFactory schedulerFactory, String schedulerName)</li><li>Scheduler newScheduler = schedulerFactory.getScheduler();</li><li>StdSchedulerFactory.getScheduler();</li><li>sched = instantiate(); <strong>包括一系列核心操作；</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span>）初始化<span class="token function">threadPool</span><span class="token punctuation">(</span>线程池<span class="token punctuation">)</span>：开发者可以通过org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>threadPool<span class="token punctuation">.</span><span class="token keyword">class</span>配置指定使用哪个线程池类，比如<span class="token class-name">SimpleThreadPool</span>。
<span class="token number">2</span>）初始化<span class="token function">jobStore</span><span class="token punctuation">(</span>任务存储方式<span class="token punctuation">)</span>：开发者可以通过org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span>配置指定使用哪个任务存储类，比如<span class="token class-name">RAMJobStore</span>。
<span class="token number">3</span>）初始化<span class="token function">dataSource</span><span class="token punctuation">(</span>数据源<span class="token punctuation">)</span>：开发者可以通过org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>dataSource配置指定数据源详情，比如哪个数据库、账号、密码等。
<span class="token number">4</span>）初始化其他配置：包括<span class="token class-name">SchedulerPlugins</span>、<span class="token class-name">JobListeners</span>、<span class="token class-name">TriggerListeners</span>等；
<span class="token number">5</span>）初始化<span class="token function">threadExecutor</span><span class="token punctuation">(</span>线程执行器<span class="token punctuation">)</span>：默认为<span class="token class-name">DefaultThreadExecutor</span>；
<span class="token number">6</span>）创建工作线程：根据配置创建<span class="token class-name">N</span>个工作thread，执行<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>启动thread，并将<span class="token class-name">N</span>个thread顺序add进threadPool实例的空闲线程列表availWorkers中；
<span class="token number">7</span>）创建调度器线程：创建<span class="token class-name">QuartzSchedulerThread</span>实例，并通过threadExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>实例<span class="token punctuation">)</span>启动调度器线程；
<span class="token number">8</span>）创建调度器：创建<span class="token class-name">StdScheduler</span>实例，将上面所有配置和引用组合进实例中，并将实例存入调度器池中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>源码477行：</strong> 调用父类 SchedulerAccessor.registerJobsAndTriggers() 注册任务和触发器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>triggers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">addTriggerToScheduler</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>SchedulerAccessor.addTriggerToScheduler() &amp; SchedulerAccessor 是SchedulerFactoryBean的父类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addTriggerToScheduler</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">{</span>
	<span class="token keyword">boolean</span> triggerExists <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span>trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>triggerExists <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>overwriteExistingJobs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Check if the Trigger is aware of an associated JobDetail.</span>
	<span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JobDetail</span><span class="token punctuation">)</span> trigger<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;jobDetail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>triggerExists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>jobDetail <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobDetails<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">addJobToScheduler</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>jobDetails<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rescheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ObjectAlreadyExistsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpectedly encountered existing trigger on rescheduling, assumably due to &quot;</span> <span class="token operator">+</span>
						<span class="token string">&quot;cluster race condition: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; - can safely be ignored&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>jobDetail <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobDetails<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
					<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>overwriteExistingJobs <span class="token operator">||</span> <span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>jobDetails<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ObjectAlreadyExistsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpectedly encountered existing trigger on job scheduling, assumably due to &quot;</span> <span class="token operator">+</span>
						<span class="token string">&quot;cluster race condition: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; - can safely be ignored&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>overwriteExistingJobs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rescheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>源码299行：</strong> addJobToScheduler(jobDetail) 一直会调用到 RAMJobStore 进行存放任务信息到 <code>HashMap&lt;JobKey, JobWrapper&gt;(100)</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">storeJob</span><span class="token punctuation">(</span><span class="token class-name">JobDetail</span> newJob<span class="token punctuation">,</span>
    <span class="token keyword">boolean</span> replaceExisting<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ObjectAlreadyExistsException</span> <span class="token punctuation">{</span>
	<span class="token class-name">JobWrapper</span> jw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobWrapper</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JobDetail</span><span class="token punctuation">)</span>newJob<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">boolean</span> repl <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>jobsByKey<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>jw<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>replaceExisting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ObjectAlreadyExistsException</span><span class="token punctuation">(</span>newJob<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			repl <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// get job group</span>
			<span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JobKey</span><span class="token punctuation">,</span> <span class="token class-name">JobWrapper</span><span class="token punctuation">&gt;</span></span> grpMap <span class="token operator">=</span> jobsByGroup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>newJob<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>grpMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				grpMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JobKey</span><span class="token punctuation">,</span> <span class="token class-name">JobWrapper</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				jobsByGroup<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>newJob<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grpMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// add to jobs by group</span>
			grpMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>newJob<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jw<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// add to jobs by FQN map</span>
			jobsByKey<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jw<span class="token punctuation">.</span>key<span class="token punctuation">,</span> jw<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// update job detail</span>
			<span class="token class-name">JobWrapper</span> orig <span class="token operator">=</span> jobsByKey<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>jw<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
			orig<span class="token punctuation">.</span>jobDetail <span class="token operator">=</span> jw<span class="token punctuation">.</span>jobDetail<span class="token punctuation">;</span> <span class="token comment">// already cloned</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>初始化线程组；</p><ul><li>prepareScheduler</li><li>createScheduler</li><li>schedulerFactory</li><li>StdSchedulerFactory.getScheduler()</li><li>getScheduler()-&gt;instantiate()</li><li><strong>源码1323行：</strong> tp.initialize();</li></ul><blockquote><p>SimpleThreadPool.initialize() &amp; 这里的count是默认配置中的数量，可以更改</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// create the worker threads and start them</span>
 <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WorkerThread</span><span class="token punctuation">&gt;</span></span> workerThreads <span class="token operator">=</span> <span class="token function">createWorkerThreads</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">while</span><span class="token punctuation">(</span>workerThreads<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	 <span class="token class-name">WorkerThread</span> wt <span class="token operator">=</span> workerThreads<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 wt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 availWorkers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wt<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-启动定时任务" tabindex="-1"><a class="header-anchor" href="#_5-启动定时任务" aria-hidden="true">#</a> 5. 启动定时任务</h3><p>案例中使用硬编码方式调用 schedulerFactoryBean.start() 启动线程服务。线程的协作通过Object sigLock来实现，关于sigLock.wait()方法都在QuartzSchedulerThread的run方法里面，所以sigLock唤醒的是只有线程QuartzSchedulerThread。核心流程如下；</p><p><img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-demo-code-schedule-03.png" alt="微信公众号：bugstack虫洞栈 &amp; 调度启动流程"></p><p>这个启动过程中，核心的代码类，如下；</p><ul><li>StdScheduler</li><li>QuartzScheduler</li><li>QuartzSchedulerThread</li><li>ThreadPool</li><li>RAMJobStore</li><li>CronTriggerImpl</li><li>JobRunShellFactory</li></ul><blockquote><p>QuartzScheduler.start() &amp; 启动</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>shuttingDown<span class="token operator">||</span> closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;The Scheduler cannot be restarted after shutdown() has been called.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">// QTZ-212 : calling new schedulerStarting() method on the listeners</span>
    <span class="token comment">// right after entering start()</span>
    <span class="token function">notifySchedulerListenersStarting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
	<span class="token keyword">if</span> <span class="token punctuation">(</span>initialStart <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        initialStart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
        <span class="token function">startPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        resources<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedulerResumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">// 唤醒线程</span>
	schedThread<span class="token punctuation">.</span><span class="token function">togglePause</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>
            <span class="token string">&quot;Scheduler &quot;</span> <span class="token operator">+</span> resources<span class="token punctuation">.</span><span class="token function">getUniqueIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; started.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">notifySchedulerListenersStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>QuartzSchedulerThread.run() &amp; 执行过程</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> acquiresFailed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 只有调用了halt()方法，才会退出这个死循环</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>halted<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
			
			<span class="token comment">// 一、如果是暂停状态，则循环超时等待1000毫秒</span>

            <span class="token comment">// wait a bit, if reading from job store is consistently failing (e.g. DB is down or restarting)..</span>
           
		    <span class="token comment">// 阻塞直到有空闲的线程可用并返回可用的数量</span>
            <span class="token keyword">int</span> availThreadCount <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blockForAvailableThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>availThreadCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OperableTrigger</span><span class="token punctuation">&gt;</span></span> triggers<span class="token punctuation">;</span>
                <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">clearSignaledSchedulingChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
				<span class="token keyword">try</span> <span class="token punctuation">{</span>
					<span class="token comment">// 二、获取acquire状态的Trigger列表，也就是即将执行的任务</span>
                    triggers <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquireNextTriggers</span><span class="token punctuation">(</span>
                            now <span class="token operator">+</span> idleWaitTime<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>availThreadCount<span class="token punctuation">,</span> qsRsrcs<span class="token punctuation">.</span>getMaxBat
                    acquiresFailed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;batch acquisition of &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>triggers <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> triggers
                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//...}</span>
				
                <span class="token keyword">if</span> <span class="token punctuation">(</span>triggers <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>triggers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    
					<span class="token comment">// 三：获取List第一个Trigger的下次触发时刻</span>
					<span class="token keyword">long</span> triggerTime <span class="token operator">=</span> triggers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNextFireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    
					<span class="token comment">// 四：获取任务触发集合</span>
					<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TriggerFiredResult</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggersFired</span><span class="token punctuation">(</span>triggers<span class="token punctuation">)</span><span class="token punctuation">;</span>
					
					<span class="token comment">// 五：设置Triggers为&#39;executing&#39;状态</span>
					qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">releaseAcquiredTrigger</span><span class="token punctuation">(</span>triggers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    
					<span class="token comment">// 六：创建JobRunShell</span>
					qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobRunShellFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createJobRunShell</span><span class="token punctuation">(</span>bndle<span class="token punctuation">)</span><span class="token punctuation">;</span>
					
					<span class="token comment">// 七：执行Job</span>
					qsRsrcs<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">runInThread</span><span class="token punctuation">(</span>shell<span class="token punctuation">)</span>
					
                    <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// while (!halted)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// if(availThreadCount &gt; 0)</span>
                <span class="token comment">// should never happen, if threadPool.blockForAvailableThreads() follows con</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// while (!halted)</span>
            <span class="token punctuation">}</span>
			
            
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> re<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Runtime error occurred in main trigger firing loop.&quot;</span><span class="token punctuation">,</span> re<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    qs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    qsRsrcs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>源码391行：</strong> 创建JobRunShell，JobRunShell实例在initialize()方法就会把包含业务逻辑类的JobDetailImpl设置为它的成员属性，为后面执行业务逻辑代码做准备。执行业务逻辑代码在runInThread(shell)方法里面。</p><blockquote><p>QuartzSchedulerThread.run() &amp; 部分代码</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JobRunShell</span> shell <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
	shell <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobRunShellFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createJobRunShell</span><span class="token punctuation">(</span>bndle<span class="token punctuation">)</span><span class="token punctuation">;</span>
	shell<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggeredJobComplete</span><span class="token punctuation">(</span>triggers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> bndle<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CompletedExecutionInstruction</span><span class="token punctuation">.</span><span class="token constant">SET_ALL_JOB_TRIGGERS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>源码398行：</strong> qsRsrcs.getThreadPool().runInThread(shell)</p><blockquote><p>SimpleThreadPool.runInThread</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 保存所有WorkerThread的集合</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WorkerThread</span><span class="token punctuation">&gt;</span></span> workers<span class="token punctuation">;</span>
<span class="token comment">// 空闲的WorkerThread集合</span>
<span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WorkerThread</span><span class="token punctuation">&gt;</span></span> availWorkers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WorkerThread</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 任务的WorkerThread集合</span>
<span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WorkerThread</span><span class="token punctuation">&gt;</span></span> busyWorkers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WorkerThread</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 维护workers、availWorkers和busyWorkers三个列表数据
 * 有任务需要一个线程出来执行：availWorkers.removeFirst();busyWorkers.add()
 * 然后调用WorkThread.run(runnable)方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">runInThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>runnable <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>nextRunnableLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>

		handoffPending <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

		<span class="token comment">// Wait until a worker thread is available</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>availWorkers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isShutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				nextRunnableLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isShutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">WorkerThread</span> wt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorkerThread</span><span class="token punctuation">)</span>availWorkers<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			busyWorkers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wt<span class="token punctuation">)</span><span class="token punctuation">;</span>
			wt<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// If the thread pool is going down, execute the Runnable</span>
			<span class="token comment">// within a new additional worker thread (no thread from the pool).</span>
			
			<span class="token class-name">WorkerThread</span> wt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> threadGroup<span class="token punctuation">,</span>
					<span class="token string">&quot;WorkerThread-LastJob&quot;</span><span class="token punctuation">,</span> prio<span class="token punctuation">,</span> <span class="token function">isMakeThreadsDaemons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
			busyWorkers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wt<span class="token punctuation">)</span><span class="token punctuation">;</span>
			workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wt<span class="token punctuation">)</span><span class="token punctuation">;</span>
			wt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		nextRunnableLock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		handoffPending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>源码428行：</strong> WorkerThread ，是一个内部类，主要是赋值并唤醒lock对象的等待线程队列</p><blockquote><p>WorkerThread.run(Runnable newRunnable)</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> newRunnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>runnable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Already running a Runnable!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		runnable <span class="token operator">=</span> newRunnable<span class="token punctuation">;</span>
		lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>源码561行：</strong> WorkerThread 的run方法，方法执行lock.notifyAll()后，对应的WorkerThread就会来到run()方法。到这！接近曙光了！终于来到了执行业务的execute()方法的倒数第二步，runnable对象是一个JobRunShell对象，下面在看JobRunShell.run()方法。</p><blockquote><p>WorkerThread.run()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">boolean</span> ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	
	<span class="token keyword">while</span> <span class="token punctuation">(</span>run<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">while</span> <span class="token punctuation">(</span>runnable <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> run<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>runnable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
					<span class="token comment">// 启动真正执行的内容，runnable就是JobRunShell</span>
					runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//...}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//if (log.isDebugEnabled())</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;WorkerThread is shut down.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ignore to help with a tomcat glitch</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>JobRunShell.run() &amp; 从上面WorkerThread.run()，调用到这里执行</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    qs<span class="token punctuation">.</span><span class="token function">addInternalSchedulerListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">OperableTrigger</span> trigger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OperableTrigger</span><span class="token punctuation">)</span> jec<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> jec<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>

            <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> endTime <span class="token operator">=</span> startTime<span class="token punctuation">;</span>

            <span class="token comment">// execute the job</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Calling execute on job &quot;</span> <span class="token operator">+</span> jobDetail<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
				<span class="token comment">// 执行业务代码，也就是我们的task</span>
				job<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>jec<span class="token punctuation">)</span><span class="token punctuation">;</span>
                
				endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JobExecutionException</span> jee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jobExEx <span class="token operator">=</span> jee<span class="token punctuation">;</span>
                <span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Job &quot;</span> <span class="token operator">+</span> jobDetail<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                        <span class="token string">&quot; threw a JobExecutionException: &quot;</span><span class="token punctuation">,</span> jobExEx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Job &quot;</span> <span class="token operator">+</span> jobDetail<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                        <span class="token string">&quot; threw an unhandled Exception: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SchedulerException</span> se <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;Job threw an unhandled exception.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                qs<span class="token punctuation">.</span><span class="token function">notifySchedulerListenersError</span><span class="token punctuation">(</span><span class="token string">&quot;Job (&quot;</span>
                        <span class="token operator">+</span> jec<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token operator">+</span> <span class="token string">&quot; threw an exception.&quot;</span><span class="token punctuation">,</span> se<span class="token punctuation">)</span><span class="token punctuation">;</span>
                jobExEx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobExecutionException</span><span class="token punctuation">(</span>se<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            jec<span class="token punctuation">.</span><span class="token function">setJobRunTime</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 其他代码</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        qs<span class="token punctuation">.</span><span class="token function">removeInternalSchedulerListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>QuartzJobBean.execte() &amp; 继续往下走</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token class-name">BeanWrapper</span> bw <span class="token operator">=</span> <span class="token class-name">PropertyAccessorFactory</span><span class="token punctuation">.</span><span class="token function">forBeanPropertyAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">MutablePropertyValues</span> pvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pvs<span class="token punctuation">.</span><span class="token function">addPropertyValues</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pvs<span class="token punctuation">.</span><span class="token function">addPropertyValues</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMergedJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		bw<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JobExecutionException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">executeInternal</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>MethodInvokingJobDetailFactoryBean-&gt;MethodInvokingJob.executeInternal(JobExecutionContext context)</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token comment">// 反射执行业务代码</span>
		context<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methodInvoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">JobExecutionException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// -&gt; JobExecutionException, to be logged at info level by Quartz</span>
			<span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">JobExecutionException</span><span class="token punctuation">)</span> ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// -&gt; &quot;unhandled exception&quot;, to be logged at error level by Quartz</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JobMethodInvocationFailedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methodInvoker<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// -&gt; &quot;unhandled exception&quot;, to be logged at error level by Quartz</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JobMethodInvocationFailedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methodInvoker<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、综上总结" tabindex="-1"><a class="header-anchor" href="#五、综上总结" aria-hidden="true">#</a> 五、综上总结</h2>`,76),v=n("li",null,"quartz，即石英的意思，隐喻如石英钟般对时间的准确把握。",-1),m=n("li",null,"源码分析是一个很快乐的过程，这个快乐是分析完才能获得的快乐。纵横交互的背后是面向对象的高度解耦，对线程精彩的使用，将任务执行做成计划单，简直是一个超级棒的作品。",-1),b=n("li",null,"对于quartz.properties，简单场景下，开发者不用自定义配置，使用quartz默认配置即可，但在要求较高的使用场景中还是要自定义配置，比如通过org.quartz.threadPool.threadCount设置足够的线程数可提高多job场景下的运行性能。",-1),g=n("li",null,"quartz 对任务处理高度解耦，job与trigger解藕，将任务本身和任务执行策略解藕，这样可以方便实现N个任务和M个执行策略自由组合。",-1),h=n("li",null,"scheduler单独分离出来，相当于一个指挥官，可以从全局做调度，比如监听哪些trigger已经ready、分配线程等等。",-1),y={href:"http://www.quartz-scheduler.org",target:"_blank",rel:"noopener noreferrer"},w={href:"http://www.quartz-scheduler.org/documentation/quartz-2.1.x/configuration/",target:"_blank",rel:"noopener noreferrer"};function f(x,S){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,n("ul",null,[v,m,b,g,h,n("li",null,[s("外部链接： "),n("ul",null,[n("li",null,[n("a",y,[s("http://www.quartz-scheduler.org"),t(a)])]),n("li",null,[n("a",w,[s("quartz-2.1.x/configuration"),t(a)])])])])])])}const T=p(i,[["render",f],["__file","2020-01-01-_yuanmajiexi_SpringdingshirenwuQuartzzhixingquanguochengyuanmajiedu.html.vue"]]);export{T as default};
