import{_ as t,r as o,o as c,c as l,a as n,b as s,d as e,e as p}from"./app-3RcBQnkC.js";const r={},u=n("h1",{id:"面经手册-·-第27篇《jvm-判断对象已死-实践验证gc回收》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第27篇《jvm-判断对象已死-实践验证gc回收》","aria-hidden":"true"},"#"),s(" 面经手册 · 第27篇《JVM 判断对象已死，实践验证GC回收》")],-1),i=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},m=p(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>提升自身价值有多重要？</code></p><p>经过了风风雨雨，看过了男男女女。时间经过的岁月就没有永恒不变的！</p><p>在这趟车上有人下、有人上，外在别人给你点评的标签、留下的烙印，都只是这趟车上的故事。只有个人成长了、积累了、沉淀了，才有机会当自己的司机。</p><p>可能某个年龄段的你还看不懂，但如果某天你不那么忙了，要思考思考自己的路、自己的脚步。看看这些是不是你想要的，如果都是你想要的，为什么你看起来不开心？</p><p>好！加油，走向你想成为的自己！</p><h2 id="二、面试题" tabindex="-1"><a class="header-anchor" href="#二、面试题" aria-hidden="true">#</a> 二、面试题</h2><p><code>谢飞机，小记！</code>，中午吃饱了开始发呆，怎么就学不来这些知识呢，它也不进脑子！</p><p><strong>谢飞机</strong>：喂，面试官大哥，我想问个问题。</p><p><strong>面试官</strong>：什么？</p><p><strong>谢飞机</strong>：就是这知识它不进脑子呀！</p><p><strong>面试官</strong>：这....</p><p><strong>谢飞机</strong>：就是看了忘，忘了看的！</p><p><strong>面试官</strong>：是不是没有实践？只是看了就觉得会了，收藏了就表示懂了？哪哪都不深入！？</p><p><strong>谢飞机</strong>：好像是！那有什么办法？</p><p><strong>面试官</strong>：也没有太好的办法，学习本身就是一件枯燥的事情。减少碎片化的时间浪费，多用在系统化的学习上会更好一些。哪怕你写写博客记录下，验证下也是好的。</p><h2 id="三、先动手验证垃圾回收" tabindex="-1"><a class="header-anchor" href="#三、先动手验证垃圾回收" aria-hidden="true">#</a> 三、先动手验证垃圾回收</h2><p><code>说是垃圾回收，我不引用了它就回收了？什么时候回收的？咋回收的？</code></p><p>没有看到实际的例子，往往就很难让理科生接受这类知识。我自己也一样，最好是让我看得见。代码是对数学逻辑的具体实现，没有实现过程只看答案是没有意义的。</p><p><strong>测试代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 这个成员属性的唯一意义就是占点内存， 以便能在GC日志中看清楚是否有回收过
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReferenceCountingGC</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReferenceCountingGC</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>
        objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>
        objA <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        objB <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 假设在这行发生GC， objA和objB是否能被回收？</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>例子来自于《深入理解Java虚拟机》中引用计数算法章节。</em></p><p>例子要说明的结果是，相互引用下却已经置为null的两个对象，是否会被GC回收。如果只是按照引用计数器算法来看，那么这两个对象的计数标识不会为0，也就不能被回收。但到底有没有被回收呢？</p><p>这里我们先采用 jvm 工具指令，jstat来监控。因为监控的过程需要我手敲代码，比较耗时，所以我们在调用testGC()前，睡眠会 <code>Thread.sleep(55000);</code>。启动代码后执行如下指令。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">E</span><span class="token operator">:</span>\\itstack\\git\\github<span class="token punctuation">.</span>com\\interview<span class="token operator">&gt;</span>jps <span class="token operator">-</span>l
<span class="token number">10656</span>
<span class="token number">88464</span>
<span class="token number">38372</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span></span>ReferenceCountingGC</span>
<span class="token number">26552</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>jps<span class="token punctuation">.</span></span>Jps</span>
<span class="token number">110056</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>jps<span class="token punctuation">.</span>cmdline<span class="token punctuation">.</span></span>Launcher</span>

<span class="token class-name">E</span><span class="token operator">:</span>\\itstack\\git\\github<span class="token punctuation">.</span>com\\interview<span class="token operator">&gt;</span>jstat <span class="token operator">-</span>gc <span class="token number">38372</span> <span class="token number">2000</span>
 <span class="token constant">S0C</span>    <span class="token constant">S1C</span>    <span class="token constant">S0U</span>    <span class="token constant">S1U</span>      <span class="token constant">EC</span>       <span class="token constant">EU</span>        <span class="token constant">OC</span>         <span class="token constant">OU</span>       <span class="token constant">MC</span>     <span class="token constant">MU</span>    <span class="token constant">CCSC</span>   <span class="token constant">CCSU</span>   <span class="token constant">YGC</span>     <span class="token constant">YGCT</span>    <span class="token constant">FGC</span>    <span class="token constant">FGCT</span>     <span class="token constant">GCT</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">6561.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">770.9</span>  <span class="token number">384.0</span>   <span class="token number">75.9</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>    <span class="token number">0.000</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">6561.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">770.9</span>  <span class="token number">384.0</span>   <span class="token number">75.9</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>    <span class="token number">0.000</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">6561.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">770.9</span>  <span class="token number">384.0</span>   <span class="token number">75.9</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>    <span class="token number">0.000</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">6561.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">770.9</span>  <span class="token number">384.0</span>   <span class="token number">75.9</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>    <span class="token number">0.000</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">6561.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">770.9</span>  <span class="token number">384.0</span>   <span class="token number">75.9</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>    <span class="token number">0.000</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">6561.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">770.9</span>  <span class="token number">384.0</span>   <span class="token number">75.9</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>    <span class="token number">0.000</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">6561.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">770.9</span>  <span class="token number">384.0</span>   <span class="token number">75.9</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>    <span class="token number">0.000</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>   <span class="token number">1288.0</span> <span class="token number">65536.0</span>    <span class="token number">0.0</span>     <span class="token number">175104.0</span>     <span class="token number">8.0</span>     <span class="token number">4864.0</span> <span class="token number">3982.6</span> <span class="token number">512.0</span>  <span class="token number">440.5</span>       <span class="token number">1</span>    <span class="token number">0.003</span>   <span class="token number">1</span>      <span class="token number">0.000</span>    <span class="token number">0.003</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">437.3</span>    <span class="token number">175104.0</span>    <span class="token number">1125.5</span>   <span class="token number">4864.0</span> <span class="token number">3982.6</span> <span class="token number">512.0</span>  <span class="token number">440.5</span>       <span class="token number">1</span>    <span class="token number">0.003</span>   <span class="token number">1</span>      <span class="token number">0.012</span>    <span class="token number">0.015</span>
<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">437.3</span>    <span class="token number">175104.0</span>    <span class="token number">1125.5</span>   <span class="token number">4864.0</span> <span class="token number">3982.6</span> <span class="token number">512.0</span>  <span class="token number">440.5</span>       <span class="token number">1</span>    <span class="token number">0.003</span>   <span class="token number">1</span>      <span class="token number">0.012</span>    <span class="token number">0.015</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>S0C、S1C，第一个和第二个幸存区大小</li><li>S0U、S1U，第一个和第二个幸存区使用大小</li><li>EC、EU，伊甸园的大小和使用</li><li>OC、OU，老年代的大小和使用</li><li>MC、MU，方法区的大小和使用</li><li>CCSC、CCSU，压缩类空间大小和使用</li><li>YGC、YGCT，年轻代垃圾回收次数和耗时</li><li>FGC、FGCT，老年代垃圾回收次数和耗时</li><li>GCT，垃圾回收总耗时</li></ul><p><strong>注意</strong>：观察后面三行，<code>S1U = 1288.0</code>、<code>GCT = 0.003</code>，说明已经在执行垃圾回收。</p><p>接下来，我们再换种方式测试。在启动的程序中，加入GC打印参数，观察GC变化结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCDetails</span>  打印每次gc的回收情况 程序运行结束后打印堆空间内存信息<span class="token punctuation">(</span>包含内存溢出的情况<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintHeapAtGC</span>  打印每次gc前后的内存情况
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCTimeStamps</span> 打印每次gc的间隔的时间戳 full gc为每次对新生代老年代以及整个空间做统一的回收 系统中应该尽量避免
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">TraceClassLoading</span>  打印类加载情况
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintClassHistogram</span> 打印每个类的实例的内存占用情况
<span class="token operator">-</span><span class="token class-name">Xloggc</span><span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>xiaofuge<span class="token operator">/</span><span class="token class-name">Desktop</span><span class="token operator">/</span>logs<span class="token operator">/</span>log<span class="token punctuation">.</span>log  配合上面的使用将上面的日志打印到指定文件
<span class="token operator">-</span><span class="token constant">XX</span>：<span class="token class-name">HeapDumpOnOutOfMemoryError</span> 发生内存溢出将堆信息转存起来 以便分析
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这回就可以把睡眠去掉了，并添加参数 <code>-XX:+PrintGCDetails</code>，如下：</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-27-0.png" alt=""></p><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">9346</span>K<span class="token operator">-&gt;</span><span class="token function">936K</span><span class="token punctuation">(</span><span class="token number">76288</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">9346</span>K<span class="token operator">-&gt;</span><span class="token function">944K</span><span class="token punctuation">(</span><span class="token number">251392</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0008518</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">936</span>K<span class="token operator">-&gt;</span><span class="token function">0K</span><span class="token punctuation">(</span><span class="token number">76288</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">ParOldGen</span><span class="token operator">:</span> <span class="token number">8</span>K<span class="token operator">-&gt;</span><span class="token function">764K</span><span class="token punctuation">(</span><span class="token number">175104</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">944</span>K<span class="token operator">-&gt;</span><span class="token function">764K</span><span class="token punctuation">(</span><span class="token number">251392</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Metaspace</span><span class="token operator">:</span> <span class="token number">3405</span>K<span class="token operator">-&gt;</span><span class="token function">3405K</span><span class="token punctuation">(</span><span class="token number">1056768</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.0040034</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.08</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> 
<span class="token class-name">Heap</span>
 <span class="token class-name">PSYoungGen</span>      total <span class="token number">76288</span>K<span class="token punctuation">,</span> used <span class="token number">1966</span>K <span class="token punctuation">[</span><span class="token number">0x000000076b500000</span><span class="token punctuation">,</span> <span class="token number">0x0000000770a00000</span><span class="token punctuation">,</span> <span class="token number">0x00000007c0000000</span><span class="token punctuation">)</span>
  eden space <span class="token number">65536</span>K<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x000000076b500000</span><span class="token punctuation">,</span><span class="token number">0x000000076b6eb9e0</span><span class="token punctuation">,</span><span class="token number">0x000000076f500000</span><span class="token punctuation">)</span>
  from space <span class="token number">10752</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x000000076f500000</span><span class="token punctuation">,</span><span class="token number">0x000000076f500000</span><span class="token punctuation">,</span><span class="token number">0x000000076ff80000</span><span class="token punctuation">)</span>
  <span class="token keyword">to</span>   <span class="token namespace">space</span> <span class="token number">10752</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x000000076ff80000</span><span class="token punctuation">,</span><span class="token number">0x000000076ff80000</span><span class="token punctuation">,</span><span class="token number">0x0000000770a00000</span><span class="token punctuation">)</span>
 <span class="token class-name">ParOldGen</span>       total <span class="token number">175104</span>K<span class="token punctuation">,</span> used <span class="token number">764</span>K <span class="token punctuation">[</span><span class="token number">0x00000006c1e00000</span><span class="token punctuation">,</span> <span class="token number">0x00000006cc900000</span><span class="token punctuation">,</span> <span class="token number">0x000000076b500000</span><span class="token punctuation">)</span>
  object space <span class="token number">175104</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000006c1e00000</span><span class="token punctuation">,</span><span class="token number">0x00000006c1ebf100</span><span class="token punctuation">,</span><span class="token number">0x00000006cc900000</span><span class="token punctuation">)</span>
 <span class="token class-name">Metaspace</span>       used <span class="token number">3449</span>K<span class="token punctuation">,</span> capacity <span class="token number">4496</span>K<span class="token punctuation">,</span> committed <span class="token number">4864</span>K<span class="token punctuation">,</span> reserved <span class="token number">1056768</span>K
  <span class="token keyword">class</span> space    used <span class="token number">376</span>K<span class="token punctuation">,</span> capacity <span class="token number">388</span>K<span class="token punctuation">,</span> committed <span class="token number">512</span>K<span class="token punctuation">,</span> reserved <span class="token number">1048576</span>K
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从运行结果可以看出内存回收日志，Full GC 进行了回收。</li><li>也可以看出JVM并不是依赖引用计数器的方式，判断对象是否存活。<em>否则他们就不会被回收啦</em></li></ul><p><strong>有了这个例子，我们再接着看看JVM垃圾回收的知识框架！</strong></p><h2 id="四、jvm-垃圾回收知识框架" tabindex="-1"><a class="header-anchor" href="#四、jvm-垃圾回收知识框架" aria-hidden="true">#</a> 四、JVM 垃圾回收知识框架</h2><p>垃圾收集（Garbage Collection，简称GC），最早于1960年诞生于麻省理工学院的Lisp是第一门开始使用内存动态分配和垃圾收集技术的语言。</p><p>垃圾收集器主要做的三件事：<code>哪些内存需要回收</code>、<code>什么时候回收</code>、怎么回收。</p><p>而从垃圾收集器的诞生到现在有半个世纪的发展，现在的内存动态分配和内存回收技术已经非常成熟，一切看起来都进入了“自动化”。但在某些时候还是需要我们去监测在高并发的场景下，是否有内存溢出、泄漏、GC时间过程等问题。所以在了解和知晓垃圾收集的相关知识对于高级程序员的成长就非常重要。</p><p>垃圾收集器的核心知识项主要包括：判断对象是否存活、垃圾收集算法、各类垃圾收集器以及垃圾回收过程。如下图；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-27-1.png" alt="图 27-1 垃圾收集器知识框架"></p>`,42),b={href:"https://github.com/fuzhengwei/interview/tree/master/docs",target:"_blank",rel:"noopener noreferrer"},d=p('<h3 id="_1-判断对象已死" tabindex="-1"><a class="header-anchor" href="#_1-判断对象已死" aria-hidden="true">#</a> 1. 判断对象已死</h3><h4 id="_1-1-引用计数器" tabindex="-1"><a class="header-anchor" href="#_1-1-引用计数器" aria-hidden="true">#</a> 1.1 引用计数器</h4><ol><li>为每一个对象添加一个引用计数器，统计指向该对象的引用次数。</li><li>当一个对象有相应的引用更新操作时，则对目标对象的引用计数器进行增减。</li><li>一旦当某个对象的引用计数器为0时，则表示此对象已经死亡，可以被垃圾回收。</li></ol><p>从实现来看，引用计数器法（Reference Counting）虽然占用了一些额外的内存空间来进行计数，但是它的实现方案简单，判断效率高，是一个不错的算法。</p><p>也有一些比较出名的引用案例，比如：微软COM（Component Object Model） 技术、使用ActionScript 3的FlashPlayer、 Python语言等。</p><p><strong>但是</strong>，在主流的Java虚拟机中并没有选用引用技术算法来管理内存，主要是因为这个简单的计数方式在处理一些相互依赖、循环引用等就会非常复杂。<em>可能会存在不再使用但又不能回收的内存，造成内存泄漏</em></p><h4 id="_1-2-可达性分析法" tabindex="-1"><a class="header-anchor" href="#_1-2-可达性分析法" aria-hidden="true">#</a> 1.2 可达性分析法</h4><p>Java、C#等主流语言的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。</p><p>它的算法思路是通过定义一系列称为 GC Roots 根对象作为起始节点集，从这些节点出发，穷举该集合引用到的全部对象填充到该集合中（live set）。<em>这个过程教过标记，只标记那些存活的对象</em> 好，那么现在未被标记的对象就是可以被回收的对象了。</p><p>GC Roots 包括；</p><ol><li>全局性引用，对方法区的静态对象、常量对象的引用</li><li>执行上下文，对 Java方法栈帧中的局部对象引用、对 JNI handles 对象引用</li><li>已启动且未停止的 Java 线程</li></ol><p><strong>两大问题</strong></p><ol><li>误报：已死亡对象被标记为存活，垃圾收集不到。多占用一会内存，影响较小。</li><li>漏报：引用的对象（正在使用的）没有被标记为存活，被垃圾回收了。那么直接导致的就是JVM奔溃。（STW可以确保可达性分析法的准确性，避免漏报）</li></ol><h3 id="_2-垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_2-垃圾回收算法" aria-hidden="true">#</a> 2. 垃圾回收算法</h3><h4 id="_2-1-标记-清除算法-mark-sweep" tabindex="-1"><a class="header-anchor" href="#_2-1-标记-清除算法-mark-sweep" aria-hidden="true">#</a> 2.1 标记-清除算法(mark-sweep)</h4><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-27-2.png" alt="标记-清除算法(mark-sweep)"></p><ul><li>标记无引用的死亡对象所占据的空闲内存，并记录到空闲列表中（free list）。</li><li>当需要创建新对象时，内存管理模块会从 free list 中寻找空闲内存，分配给新建的对象。</li><li>这种清理方式其实非常简单高效，但是也有一个问题内存碎片化太严重了。</li><li><strong>Java 虚拟机的堆中对象</strong>，必须是连续分布的，所以极端的情况下可能即使总剩余内存充足，但寻找连续内存分配效率低，或者严重到无法分配内存。<em>重启汤姆猫！</em></li><li>在CMS中有此类算法的使用，GC暂停时间短，但存在算法缺陷。</li></ul><h4 id="_2-2-标记-复制算法-mark-copy" tabindex="-1"><a class="header-anchor" href="#_2-2-标记-复制算法-mark-copy" aria-hidden="true">#</a> 2.2 标记-复制算法(mark-copy)</h4><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-27-3.png" alt="标记-复制算法(mark-copy)"></p><ul><li>从图上看这回做完垃圾清理后连续的内存空间就大了。</li><li>这种方式是把内存区域分成两份，分别用两个指针 from 和 to 维护，并且只使用 from 指针指向的内存区域分配内存。</li><li>当发生垃圾回收时，则把存活对象复制到 to 指针指向的内存区域，并交换 from 与 to 指针。</li><li>它的好处很明显，就是解决内存碎片化问题。但也带来了其他问题，堆空间浪费了一半。</li></ul><h4 id="_2-3-标记-压缩算法-mark-compact" tabindex="-1"><a class="header-anchor" href="#_2-3-标记-压缩算法-mark-compact" aria-hidden="true">#</a> 2.3 标记-压缩算法(mark-compact)</h4><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-27-4.png" alt="标记-压缩算法(mark-compact)"></p><ul><li>1974年，Edward Lueders 提出了标记-压缩算法，标记的过程和标记清除算法一样，但在后续对象清理步骤中，先把存活对象都向内存空间一端移动，然后在清理掉其他内存空间。</li><li>这种算法能够解决内存碎片化问题，但压缩算法的性能开销也不小。</li></ul><h3 id="_3-垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_3-垃圾回收器" aria-hidden="true">#</a> 3. 垃圾回收器</h3><h4 id="_3-1-新生代" tabindex="-1"><a class="header-anchor" href="#_3-1-新生代" aria-hidden="true">#</a> 3.1 新生代</h4><ol><li>Serial <ol><li>算法：标记-复制算法</li><li>说明：简单高效的单核机器，Client模式下默认新生代收集器；</li></ol></li><li>Parallel ParNew <ol><li>算法： 标记-复制算法</li><li>说明：GC线程并行版本，在单CPU场景效果不突出。常用于Client模式下的JVM</li></ol></li><li>Parallel Scavenge <ol><li>算法：标记-复制算法</li><li>说明：目标在于达到可控吞吐量（吞吐量=用户代码运行时间/(用户代码运行时间+垃圾回收时间)）；</li></ol></li></ol><h4 id="_3-2-老年代" tabindex="-1"><a class="header-anchor" href="#_3-2-老年代" aria-hidden="true">#</a> 3.2 老年代</h4><ol><li>Serial Old <ol><li>算法：标记-压缩算法</li><li>说明：性能一般，单线程版本。1.5之前与Parallel Scavenge配合使用；作为CMS的后备预案。</li></ol></li><li>Parallel Old <ol><li>算法：标记-压缩算法</li><li>说明：GC多线程并行，为了替代Serial Old与Parallel Scavenge配合使用。</li></ol></li><li>CMS <ol><li>算法：标记-清除算法</li><li>说明：对CPU资源敏感、停顿时间长。标记-清除算法，会产生内存碎片，可以通过参数开启碎片的合并整理。<em>基本已被G1取代</em></li></ol></li></ol><h4 id="_3-3-g1" tabindex="-1"><a class="header-anchor" href="#_3-3-g1" aria-hidden="true">#</a> 3.3 G1</h4><ol><li>算法：标记-压缩算法</li><li>说明：适用于多核大内存机器、GC多线程并行执行，低停顿、高回收效率。</li></ol><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>JVM 的关于自动内存管理的知识众多，包括本文还没提到的 HotSpot 实现算法细节的相关知识，包括：安全节点、安全区域、卡表、写屏障等。每一项内容都值得深入学习。</li><li>如果不仅仅是为了面试背题，最好的方式是实践验证学习。否则这类知识就像3分以下的过电影一样，很难记住它的内容。</li><li>整个的内容也是小傅哥学习整理的一个过程，后续还会不断的继续深挖和分享。感兴趣的小伙伴可以一起讨论学习。</li></ul>',32);function v(h,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),i,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)])]),m,n("p",null,[n("em",null,[s("原图下载链接："),n("a",b,[s("https://github.com/fuzhengwei/interview/tree/master/docs"),e(a)])])]),d])}const f=t(r,[["render",v],["__file","2021-01-20-mianjingshouce · di27pian《JVM panduanduixiangyisi，shijianyanzhengGChuishou》.html.vue"]]);export{f as default};
