import{_ as e,r as t,o as p,c as o,a as n,b as s,d as c,e as i}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"面经手册-·-第28篇《你说-怎么把bean塞到spring容器-》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第28篇《你说-怎么把bean塞到spring容器-》","aria-hidden":"true"},"#"),s(" 面经手册 · 第28篇《你说，怎么把Bean塞到Spring容器？》")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=i(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>小傅哥，你是怎么学习的？</code></p><p>有很多初学编程或者码了几年CRUD砖的小伙伴问我，该怎么学编程？感觉什么都不会怎么办？感觉目前的公司没有核心业务学到不东西呀！</p><p>其实我可能和很大一部分的粉丝读者都有类似的经历，在传统类似外包的行业待过、从C#语言两年开发再面Java岗、新到互联网职场感觉太多不会的技术栈等等。</p><p>但可能最让我在学习编程上受益的就是不断的折腾这些技术：</p><ol><li><strong>关于外包</strong>：在外包2年时还是C#开发，时而搞搞中继器、IO板卡、PLC。但我仍旧喜欢大学时期学的Java语言，那么每天5:30下班回家后，就不断的用Java语言把公司接触到的C#工程做翻新。差不多1年的时间，把几乎我接触到的项目翻新了个遍，就是那个时候知道的Java还能做串口通信，还是蛮有意思的。</li><li><strong>关于场景</strong>：其实很多程序员在一个相对较小的公司时，学习的最大瓶颈是眼界问题，不知道有什么技术、不知道有什么场景，更不知道自己不会啥。其实很多时候这都跟<code>懒</code>有关系，公司是没有这样的场景，但是你可以看博客、看论坛、看视频，加各类技术群。如果遇到哪些发广告的就退了，哪些好的留下，认识一些人脉，相知一些基友，这在个过程总能有所收获，你会随着时间的推移嗅到各类技术栈、项目、经验、心得、面试等等，当你武装好了自己，再出去面试也就没那么难了。</li><li><strong>关于开始</strong>：时间少、要学的多，感觉自己就是一把<code>小铁锹</code>，要去挖苏伊士运河，不知道能从哪开始。这个时候建议不要盲目的收藏几个T的资料和视频，先打开xmind，选个好看的主题，开始梳理自己的技术栈，看看自己会什么不会什么，在从这些不会的内容里选出你最想学的，把要学的内容在梳理出相应的资料库。好，那么这个时候你就可以开始了，记住开始是从一点点深入的，不要总想着一口吃个胖子。</li></ol><p><code>方向对了，快是最大的障碍！</code>，很多时候只要你能平心静气日积月累的学习，其实就没有什么不能克服的问题。编程里又有什么非常难的东西吗，大部分知识都是不知道就不会而已，知道了就很简单。</p><h2 id="二、面试题" tabindex="-1"><a class="header-anchor" href="#二、面试题" aria-hidden="true">#</a> 二、面试题</h2><p><code>谢飞机，小记！</code>，简历上我都写精通了，要个20K没问题，等着吧！</p><p><strong>面试官</strong>：谢飞机，技术不错呀，都是精通，哦，有一个vb了解，没事我们不用vb</p><p><strong>谢飞机</strong>：还行，我学的多，你问吧。</p><p><strong>面试官</strong>：嗯，自信了不少。那我们聊聊 Spring，你这个也写的精通。</p><p><strong>谢飞机</strong>：来吧！</p><p><strong>面试官</strong>：你说，怎么把Bean塞到Spring容器？能说说它的过程吗，你有过相关技术的使用吗，应用了什么场景？</p><p><strong>谢飞机</strong>：嗯！？嗯，，好像，没用过。我都是精通使用API，@Resource</p><p><strong>面试官</strong>：哦，@Resource，注解是Spring哪个模块提供的？</p><p><strong>谢飞机</strong>：我，，，再见！ヾ(￣▽￣)</p><h2 id="三、代理bean注册到spring容器" tabindex="-1"><a class="header-anchor" href="#三、代理bean注册到spring容器" aria-hidden="true">#</a> 三、代理Bean注册到Spring容器</h2><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-28-2-1.png" alt="Bean注册"></p><ul><li>关于Bean注册的技术场景，在我们日常用到的技术框架中，MyBatis 是最为常见的。通过在使用 MyBatis 时都只是定义一个接口不需要写实现类，但是这个接口却可以和配置的 SQL 语句关联，执行相应的数据库操作时可以返回对应的结果。那么这个接口与数据库的操作就用到的 Bean 的代理和注册。</li><li>我们都知道类的调用是不能直接调用没有实现的接口的，所以需要通过代理的方式给接口生成对应的实现类。接下来再通过把代理类放到 Spring 的 FactoryBean 的实现中，最后再把这个 FactoryBean 实现类注册到 Spring 容器。那么现在你的代理类就已经被注册到 Spring 容器了，接下来就可以通过注解的方式注入到属性中。</li></ul><p>按照这个实现方式，我们来操作一下，看看一个 Bean 的注册过程在代码中是如何实现的。</p><h3 id="_1-定义接口" tabindex="-1"><a class="header-anchor" href="#_1-定义接口" aria-hidden="true">#</a> 1. 定义接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>先定义一个类似 DAO 的接口，基本这样的接口在使用 MyBatis 时还是非常常见的。后面我们会对这个接口做代理和注册。</li></ul><h3 id="_2-类代理实现" tabindex="-1"><a class="header-anchor" href="#_2-类代理实现" aria-hidden="true">#</a> 2. 类代理实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    

<span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;你被代理了 &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> classes<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Java 本身的代理方式使用起来还是比较简单的，用法也很固定。</li><li>InvocationHandler 是个接口类，它对应的实现内容就是代理对象的具体实现。</li><li>最后就是把代理交给 Proxy 创建代理对象，<code>Proxy.newProxyInstance</code>。</li></ul><h3 id="_3-实现bean工厂" tabindex="-1"><a class="header-anchor" href="#_3-实现bean工厂" aria-hidden="true">#</a> 3. 实现Bean工厂</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;你被代理了 &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> classes<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>FactoryBean 在 spring 起到着二当家的地位，它将近有70多个小弟(实现它的接口定义)，那么它有三个方法； <ul><li>T getObject() throws Exception; 返回bean实例对象</li><li>Class&lt;?&gt; getObjectType(); 返回实例类类型</li><li>boolean isSingleton(); 判断是否单例，单例会放到Spring容器中单实例缓存池中</li></ul></li><li>在这里我们把上面使用Java代理的对象放到了 getObject() 方法中，那么现在再从 Spring 中获取到的对象，就是我们的代理对象了。</li></ul><h3 id="_4-bean-注册" tabindex="-1"><a class="header-anchor" href="#_4-bean-注册" aria-hidden="true">#</a> 4. Bean 注册</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

        <span class="token class-name">GenericBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token class-name">ProxyBeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> <span class="token string">&quot;userDao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Spring 的 Bean 管理中，所有的 Bean 最终都会被注册到类 DefaultListableBeanFactory 中，以上这部分代码主要的内容包括：</p><ul><li>实现 BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry方法，获取 Bean 注册对象。</li><li>定义 Bean，GenericBeanDefinition，这里主要设置了我们的代理类工厂。</li><li>创建 Bean 定义处理类，BeanDefinitionHolder，这里需要的主要参数；定义 Bean 和名称 <code>setBeanClass(ProxyBeanFactory.class)</code>。</li><li>最后将我们自己的bean注册到spring容器中去，registry.registerBeanDefinition()</li></ul><h2 id="四、测试验证" tabindex="-1"><a class="header-anchor" href="#四、测试验证" aria-hidden="true">#</a> 四、测试验证</h2><p>在上面我们已经把自定义代理的 Bean 注册到了 Spring 容器中，接下来我们来测试下这个代理的 Bean 被如何调用。</p><h3 id="_1-定义-spring-config-xml" tabindex="-1"><a class="header-anchor" href="#_1-定义-spring-config-xml" aria-hidden="true">#</a> 1. 定义 spring-config.xml</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;userDao&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.itstack.interview.bean.RegisterBeanFactory&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>这里我们把 RegisterBeanFactory 配置到 spring 的 xml 配置中，便于启动时加载。</li></ul><h3 id="_2-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-单元测试" aria-hidden="true">#</a> 2. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_IUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">14.759</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>PropertySourcesPropertyResolver</span> <span class="token operator">-</span> <span class="token class-name">Could</span> not find key &#39;spring<span class="token punctuation">.</span>liveBeansView<span class="token punctuation">.</span>mbeanDomain&#39; in any property source
<span class="token number">22</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">14.760</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">.</span>s<span class="token punctuation">.</span></span>DefaultListableBeanFactory</span> <span class="token operator">-</span> <span class="token class-name">Returning</span> cached instance of singleton bean &#39;userDao&#39;
<span class="token number">22</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">14.796</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：你被代理了 queryUserInfo

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果可以看到，我们已经可以通过注入到Spring的代理Bean对象，实现我们的预期结果。</li><li>其实这个过程也是很多框架中用到的方式，尤其是在一些中间件开发，类似的 ORM 框架都需要使用到。</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>本章节的内容相对来说非常并不复杂，只不过这一块的代码是我们从源码的学习中提取出来的最核心流程，因为在大部分框架中也基本都是这样的进行处理的。如果这样的地方不了解，那么很难读懂诸如此类的框架源码，也很难理解它是怎么调用的。</li><li>在本文中主要涉及到的技术点包括；代理、对象、注册，以及相应的使用。尤其是 Bean 的定义 <code>BeanDefinitionHolder</code> 和 Bean 的注册 <code>BeanDefinitionReaderUtils.registerBeanDefinition</code>。</li><li>如果你还能把此类技术联想的更多，可以尝试把代理的对象替换成数据库的查询对象，也就是对 JDBC 的操作，当你完成以后也就实现了一个简单的 ORM 框架。其实很多技术实现都是由小做大，但最开始的那部分是整个代码实现的核心。</li></ul>`,47);function v(m,g){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),c(a)])]),k])}const h=e(l,[["render",v],["__file","2021-03-30-mianjingshouce · di28pian《nishuo，zenmebaBeansaidaoSpringrongqi》.html.vue"]]);export{h as default};
