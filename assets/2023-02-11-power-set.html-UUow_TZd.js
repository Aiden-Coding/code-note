import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《程序员数学-幂集》-该集合的所有子集",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-幂集》-该集合的所有子集","aria-hidden":"true"},"#"),s(" 《程序员数学：幂集》- 该集合的所有子集")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},v=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>在数学中，集合 S 的幂集（或幂集）是S的所有子集的集合，包括空集和S本身。在公理化集合论中（例如，在ZFC公理中发展起来的），任何集合的幂集的存在性都由幂集公理假设。S 的幂集被不同地表示为P ( S ) , 𝒫( S ) , P ( S ) , 或2^S。使用符号2^S表示从 S 到给定的两个元素集合（例如，{0, 1}）的所有函数的集合，因为S的幂集可以等同于、等价于该集合或与该集合双射从S到给定的两个元素集的所有函数。</p><h2 id="二、幂集实例" tabindex="-1"><a class="header-anchor" href="#二、幂集实例" aria-hidden="true">#</a> 二、幂集实例</h2><p>假如一个集合的幂集<code>S</code>是 的所有子集的集合<code>S</code>，包括空集和<code>S</code>它本身。集合的幂集<code>S</code>表示为<code>P(S)</code>。</p><p>例如对于<code>{x, y, z}</code>，子集是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  {}, // (also denoted empty set ∅ or the null set)
  {x},
  {y},
  {z},
  {x, y},
  {x, z},
  {y, z},
  {x, y, z}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是我们如何说明<code>{x, y, z}</code>关于包含排序的集合的幂集的元素：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/power-set-01.png?raw=true" width="450px"></div><p><strong>子集数</strong></p><p>如果<code>S</code>是一个有元素的有限集<code>|S| = n</code>，那么 的子集数<code>S</code>是<code>|P(S)| = 2^n</code>。这个事实，也就是符号 的动机<code>2^S</code>，可以简单地证明如下：</p><p>首先，以<code>S</code>任何方式对元素进行排序。我们以where<code>S</code>的格式编写 的任何子集，可以取or的值。如果，则第 - 个元素在子集中；否则，第- 个元素不在子集中。显然，可以通过这种方式构建的不同子集的数量为。<code>{γ1, γ2, ..., γn}\`\`γi , 1 ≤ i ≤ n\`\`0\`\`1\`\`γi = 1\`\`i\`\`S\`\`i\`\`2^n\`\`γi ∈ {0, 1}</code></p><h2 id="三、密集实现" tabindex="-1"><a class="header-anchor" href="#三、密集实现" aria-hidden="true">#</a> 三、密集实现</h2><h3 id="_1-方案1" tabindex="-1"><a class="header-anchor" href="#_1-方案1" aria-hidden="true">#</a> 1. 方案1</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">btPowerSet</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originalSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">btPowerSetRecursive</span><span class="token punctuation">(</span>originalSet<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">btPowerSetRecursive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originalSet<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allSubsets<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> currentSubSet<span class="token punctuation">,</span> <span class="token keyword">int</span> startAt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> position <span class="token operator">=</span> startAt<span class="token punctuation">;</span> position <span class="token operator">&lt;</span> originalSet<span class="token punctuation">.</span>length<span class="token punctuation">;</span> position<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentSubSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originalSet<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        allSubsets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>currentSubSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btPowerSetRecursive</span><span class="token punctuation">(</span>originalSet<span class="token punctuation">,</span> allSubsets<span class="token punctuation">,</span> currentSubSet<span class="token punctuation">,</span> position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentSubSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>currentSubSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> allSubsets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码是使用递归的方法求一个数组的所有子集（即幂集）。</p><ul><li>originalSet是要求幂集的数组</li><li>allSubsets是存储所有子集的结果集合</li><li>currentSubSet是正在生成的当前子集</li><li>startAt是从originalSet的哪个位置开始生成子集 它通过递归不断地在当前子集上添加元素，最终生成所有子集，并将其存储在allSubsets中。</li></ul><h3 id="_2-方案2" tabindex="-1"><a class="header-anchor" href="#_2-方案2" aria-hidden="true">#</a> 2. 方案2</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">caPowerSet</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originalSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> originalSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> existingSetsNum <span class="token operator">=</span> sets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> setIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> setIdx <span class="token operator">&lt;</span> existingSetsNum<span class="token punctuation">;</span> setIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>sets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>setIdx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这段代码是一个用递归算法实现的求集合的幂集的Java函数。它将一个给定的整数数组作为输入，并返回所有子集的列表。</li><li>该函数以一个空的列表开始，每次遍历输入数组的元素并将该元素添加到现有的所有子集中，最终返回所有子集的列表。</li></ul><h3 id="_3-方案3" tabindex="-1"><a class="header-anchor" href="#_3-方案3" aria-hidden="true">#</a> 3. 方案3</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">bwPowerSet</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originalSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> subSets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> numberOfCombinations <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> originalSet<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> combinationIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> combinationIndex <span class="token operator">&lt;</span> numberOfCombinations<span class="token punctuation">;</span> combinationIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> setElementIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> setElementIndex <span class="token operator">&lt;</span> originalSet<span class="token punctuation">.</span>length<span class="token punctuation">;</span> setElementIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>combinationIndex <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> setElementIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                subSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originalSet<span class="token punctuation">[</span>setElementIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        subSets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> subSets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码是使用位运算求一个数组的所有子集（即幂集）。originalSet是要求幂集的数组它通过位运算不断地将组合索引和元素索引进行比较，最终生成所有子集，并将其存储在subSets中。</p><hr>`,24),b={href:"https://en.wikipedia.org/wiki/Power_set",target:"_blank",rel:"noopener noreferrer"};function g(h,S){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)]),d,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),v,n("ul",null,[n("li",null,[n("a",b,[s("Power_set"),t(a)])])])])}const y=p(i,[["render",g],["__file","2023-02-11-power-set.html.vue"]]);export{y as default};
