import{_ as e,r as p,o as c,c as o,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"第-16-章-战无不胜-给代理对象的属性设置值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第-16-章-战无不胜-给代理对象的属性设置值","aria-hidden":"true"},"#"),s(" 第 16 章：战无不胜，给代理对象的属性设置值")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v={href:"https://articles.zsxq.com/id_w629m13v0hni.html",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("h2",{id:"零、优秀作业",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#零、优秀作业","aria-hidden":"true"},"#"),s(" 零、优秀作业")],-1),g={href:"https://t.zsxq.com/06v7aIQRV",target:"_blank",rel:"noopener noreferrer"},h={href:"https://t.zsxq.com/06niaEAYz",target:"_blank",rel:"noopener noreferrer"},f={href:"https://t.zsxq.com/084lgJpDk",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/08X7yWOw4",target:"_blank",rel:"noopener noreferrer"},w={href:"https://t.zsxq.com/0a8bAchto",target:"_blank",rel:"noopener noreferrer"},j=l(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>怎么了，运行的好好的放在别人电脑上就出错？</code></p><p>是不是有时候你觉得提交的代码，功能完善、逻辑正确、格式漂亮，但不管是小哥哥还是小姐姐，只要测试人员一上手，就会发现 <strong>这有Bug、那有Bug、你回去改改别耽误我时间！</strong> 这是为什么呢?</p><p>因为测试人员的输入的数据可不是你已经跑了几十遍能通过运行的简单数据，他们的数据更偏向于用户真实使用时候的输入效果。就像我们在使用 Spring 的时候，谁规定用户一定会使用普通的类对象呢，只要是 Java 的 JDK 中能提供的<code>骚操作</code>就都有可能在 Spring 框架下使用，比如：MyBatis 用了代理类、RPC 链接了注册中心、分库分表切换了数据源，那这些就都需要 Spring 来支持。而如果你在开发的过程中没有考虑到这些，可能也就忽略了此类功能的实现，<strong>这好了</strong>，测试那上手肯定就出 Bug 了！</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>其实本章节要解决的问题就是关于如何给代理对象中的属性填充相应的值，因为在之前把<code>AOP动态代理，融入到Bean的生命周期</code>时，创建代理对象是在整个创建 Bean 对象之前，也就是说这个代理对象的创建并不是在 Bean 生命周期中。</p><p>所以本章节中我们要把代理对象的创建融入到 Bean 的生命周期中，也就是需要把创建代理对象的逻辑迁移到 Bean 对象执行初始化方法之后，在执行代理对象的创建。</p><h2 id="三、方案" tabindex="-1"><a class="header-anchor" href="#三、方案" aria-hidden="true">#</a> 三、方案</h2><p>按照创建代理对象的操作 <code>DefaultAdvisorAutoProxyCreator</code> 实现的 <code>InstantiationAwareBeanPostProcessor</code> 接口，那么原本在 Before 中的操作，则需要放到 After 中处理。整体设计如下：</p><p><img src="https://bugstack.cn/assets/images/spring/spring-16-01.png" alt=""></p><ul><li>在创建 Bean 对象 <code>createBean</code> 的生命周期中，有一个阶段是在 Bean 对象属性填充完成以后，执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理，例如：感知 Aware 对象、处理 init-method 方法等。那么在这个阶段的 <code>BeanPostProcessor After</code> 就可以用于创建代理对象操作。</li><li>在 DefaultAdvisorAutoProxyCreator 用于创建代理对象的操作中，需要把创建操作从 postProcessBeforeInstantiation 方法中迁移到 postProcessAfterInitialization，这样才能满足 Bean 属性填充后的创建操作。</li></ul><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>small<span class="token operator">-</span>spring<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">15</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework
    │           ├── aop
    │           │   ├── aspectj
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   ├── framework 
    │           │   │   ├── adapter
    │           │   │   │   └── <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">.</span>java
    │           │   │   ├── autoproxy
    │           │   │   │   └── <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Cglib2AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">AdvisedSupport</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Advisor</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ClassFilter</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodMatcher</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Pointcut</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">TargetSource</span><span class="token punctuation">.</span>java
    │           ├── beans
    │           │   ├── factory  
    │           │   │   ├── annotation
    │           │   │   │   ├── <span class="token class-name">Autowired</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">Qualifier</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">Value</span><span class="token punctuation">.</span>java
    │           │   │   ├── config
    │           │   │   │   ├── <span class="token class-name">AutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanReference</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   ├── support
    │           │   │   │   ├── <span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">FactoryBeanRegistrySupport</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">.</span>java  
    │           │   │   ├── support
    │           │   │   │   └── <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Aware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanNameAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">DisposableBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">FactoryBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">HierarchicalBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">InitializingBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">PropertyPlaceholderConfigurer</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeansException</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PropertyValue</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">PropertyValues</span><span class="token punctuation">.</span>java 
    │           ├── context
    │           │   ├── annotation
    │           │   │   ├── <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ClassPathScanningCandidateComponentProvider</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">Scope</span><span class="token punctuation">.</span>java 
    │           │   ├── event
    │           │   │   ├── <span class="token class-name">AbstractApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextClosedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   ├── support
    │           │   │   ├── <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractRefreshableApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEvent</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span>java 
    │           │   └── <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span>java
    │           ├── core<span class="token punctuation">.</span>io
    │           │   ├── <span class="token class-name">ClassPathResource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">FileSystemResource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">Resource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">UrlResource</span><span class="token punctuation">.</span>java
    │           ├── stereotype
    │           │   └── <span class="token class-name">Component</span><span class="token punctuation">.</span>java
    │           └── utils
    │               ├── <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span>java
    │               └── <span class="token class-name">StringValueResolver</span><span class="token punctuation">.</span>java
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test
                ├── bean
                │   ├── <span class="token class-name">IUserService</span><span class="token punctuation">.</span>java
                │   └── <span class="token class-name">UserService</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：Spring 专栏，获取完整源码</code></p><p>在Bean的生命周期中创建代理对象的类关系，如图 16-2</p><p><img src="https://bugstack.cn/assets/images/spring/spring-16-02.png" alt="图 16-2"></p><ul><li>虽然本章节要完成的是关于代理对象中属性的填充问题，但实际解决的思路是处理在 Bean 的生命周期中合适的位置（<code>初始化 initializeBean</code>）中处理代理类的创建。</li><li>所以以上的改动并不会涉及太多内容，主要包括：DefaultAdvisorAutoProxyCreator 类创建代理对象的操作放置在 postProcessAfterInitialization 方法中以及对应在 AbstractAutowireCapableBeanFactory 完成初始化方法的调用操作。</li><li>另外还有一点要注意，就是目前我们在 Spring 框架中，AbstractAutowireCapableBeanFactory 类里使用的是 CglibSubclassingInstantiationStrategy 创建对象，所以有需要判断对象获取接口的方法中，也都需要判断是否为 CGlib创建，否则是不能正确获取到接口的。如：<code>ClassUtils.isCglibProxyClass(clazz) ? clazz.getSuperclass() : clazz;</code></li></ul><h3 id="_2-判断cglib对象" tabindex="-1"><a class="header-anchor" href="#_2-判断cglib对象" aria-hidden="true">#</a> 2. 判断CGlib对象</h3><p><strong>cn.bugstack.springframework.aop.TargetSource</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetSource</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Return the type of targets returned by this <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TargetSource</span></span><span class="token punctuation">}</span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Can return <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>, although certain usages of a
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">TargetSource</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> might just work with a predetermined
     * target class.
     *
     * <span class="token keyword">@return</span> the type of targets returned by this <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TargetSource</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        clazz <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isCglibProxyClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token operator">?</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> clazz<span class="token punctuation">;</span>
        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 TargetSource#getTargetClass 是用于获取 target 对象的接口信息的，那么这个 target 可能是 <code>JDK代理</code> 创建也可能是 <code>CGlib创建</code>，为了保证都能正确的获取到结果，这里需要增加判读 <code>ClassUtils.isCglibProxyClass(clazz)</code></li></ul><h3 id="_3-迁移创建aop代理方法" tabindex="-1"><a class="header-anchor" href="#_3-迁移创建aop代理方法" aria-hidden="true">#</a> 3. 迁移创建AOP代理方法</h3><p><strong>cn.bugstack.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdvisorAutoProxyCreator</span> <span class="token keyword">implements</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bean<span class="token punctuation">;</span>

        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">&gt;</span></span> advisors <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AspectJExpressionPointcutAdvisor</span> advisor <span class="token operator">:</span> advisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ClassFilter</span> classFilter <span class="token operator">=</span> advisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 过滤匹配类</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>classFilter<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

            <span class="token class-name">AdvisedSupport</span> advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span>targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">.</span><span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodMatcher</span><span class="token punctuation">(</span>advisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 返回代理对象</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于 DefaultAdvisorAutoProxyCreator 类的操作主要就是把创建 AOP 代理的操作从 postProcessBeforeInstantiation 移动到 postProcessAfterInitialization 中去。</li><li>通过设置一些 AOP 的必备参数后，返回代理对象 <code>new ProxyFactory(advisedSupport).getProxy()</code> 这个代理对象中就包括间接调用了 TargetSource 中对 getTargetClass() 的获取。</li></ul><h3 id="_4-在bean的生命周期中初始化执行" tabindex="-1"><a class="header-anchor" href="#_4-在bean的生命周期中初始化执行" aria-hidden="true">#</a> 4. 在Bean的生命周期中初始化执行</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAutowireCapableBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AutowireCapableBeanFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">InstantiationStrategy</span> instantiationStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>

            <span class="token comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span>
            bean <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">&quot;Instantiation of bean failed&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// ...</span>

        wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> existingBean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> existingBean<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> processor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> current <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            result <span class="token operator">=</span> current<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 AbstractAutowireCapableBeanFactory#createBean 方法中，其实关注点就在于 initializeBean -&gt; applyBeanPostProcessorsAfterInitialization 这一块逻辑的调用，最终完成 AOP 代理对象的创建操作。</li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><p><strong>UserService 添加属性字段</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;小傅哥，100001，深圳，&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>token 是在 UserService 中新增的属性信息，用于测试代理对象的属性填充操作。</li></ul><h3 id="_2-属性配置文件" tabindex="-1"><a class="header-anchor" href="#_2-属性配置文件" aria-hidden="true">#</a> 2. 属性配置文件</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
	         http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.test.bean.UserService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>token<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>RejDlI78hu223Opo983Ds<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.test.bean.UserServiceBeforeAdvice<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>methodInterceptor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>advice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeAdvice<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pointcutAdvisor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>expression<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>advice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>methodInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与我们对 AOP 的测试来说，唯一新增加的就是 property 的配置：<code>&lt;property name=&quot;token&quot; value=&quot;RejDlI78hu223Opo983Ds&quot;/&gt;</code></li></ul><h3 id="_3-单元测试" tabindex="-1"><a class="header-anchor" href="#_3-单元测试" aria-hidden="true">#</a> 3. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_autoProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserService</span> userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/assets/images/spring/spring-16-03.png" alt=""></p><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>拦截方法：queryUserInfo
测试结果：小傅哥，<span class="token number">100001</span>，深圳，<span class="token class-name">RejDlI78hu223Opo983Ds</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果可以看到，通过对 Bean 生命周期的调整，在创建 AOP 代理对象就可以把代理对象的属性信息填充进去了。</li><li>另外这里还有一块是关于在 TargetSource#getTargetClass 中关于是否为 CGlib 的方法判断，只有这样操作才可以获取到争取的类信息。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>本章节的核心知识内容主要是完善了 Bean 的生命周期，在创建类的操作中完成代理对象的创建，通过这样的方式就可以让代理对象中的属性也可以随着创建过程被填充进去。</li><li>除了核心功能的实现外也要关注到对象的初始化操作是 CglibSubclassingInstantiationStrategy、SimpleInstantiationStrategy，这两种方式中的 CGlib 创建对象，会影响到很多地方用于接口获取的操作，因为 CGlib 创建对象走的是 ASM 字节码生成的操作，所以和普通的 JDK 代理生成对象是不一样，需要注意。</li><li>程序的Bug往往是对需求的使用场景理解不足，功能的完善是对一个细化场景的程序精雕，开发程序的过程远远不只是写代码那么回事，更重要的是思考<code>这是什么场景</code>、<code>遇到了哪些问题</code>、<code>要怎么解决</code>、<code>可以学到什么</code>中不断的锤炼自己的程序逻辑。</li></ul>`,46);function A(x,B){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)]),d,s("星球："),n("a",v,[s("https://articles.zsxq.com/id_w629m13v0hni.html"),t(a)])]),m,b,n("ul",null,[n("li",null,[n("a",g,[s("调整 AOP 代理对象生成的时机 实现其属性注入 @Rechie"),t(a)])]),n("li",null,[n("a",h,[s("解决代理对象的属性注入，把代理对象加入生命周期 @Chin"),t(a)])]),n("li",null,[n("a",f,[s("给代理对象的属性设置值 @liuc"),t(a)])]),n("li",null,[n("a",y,[s("MyBatis 就是主要使用代理类，因此 Spring 就需要支持代理类的初始化。@水中捞月"),t(a)])]),n("li",null,[n("a",w,[s("调整AOP代理对象的结构，使之可以被注入属性 @在九月"),t(a)])])]),j])}const q=e(i,[["render",A],["__file","2021-08-05-di16zhang：zhanwubusheng，geidailiduixiangdeshuxingshezhizhi.html.vue"]]);export{q as default};
