import{_ as a,o as n,c as s,e}from"./app-3RcBQnkC.js";const i={},p=e(`<h1 id="深入理解-java-变量" tabindex="-1"><a class="header-anchor" href="#深入理解-java-变量" aria-hidden="true">#</a> 深入理解 Java 变量</h1><ul><li><a href="#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-java-%E5%8F%98%E9%87%8F">深入理解 Java 变量</a><ul><li><a href="#%E5%8F%98%E9%87%8F%E6%B1%87%E6%80%BB">变量汇总</a><ul><li><a href="#%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">实例变量</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">如何识别实例变量</a></li><li><a href="#%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E7%9A%84%E7%89%B9%E7%82%B9">实例变量的特点</a></li></ul></li><li><a href="#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">全局变量</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F">静态变量</a><ul><li><a href="#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E7%89%B9%E7%82%B9">静态变量的特点</a></li></ul></li><li><a href="#%E7%B1%BB%E5%8F%98%E9%87%8F">类变量</a></li><li><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">局部变量</a></li><li><a href="#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F">成员变量</a></li><li><a href="#%E5%B8%B8%E9%87%8F">常量</a></li></ul></li><li><a href="#%E9%AA%8C%E8%AF%81%E8%BF%87%E7%A8%8B">验证过程</a></li><li><a href="#bilibili">bilibili</a></li></ul></li></ul><p>网上罗列了很多关于变量的理解，良莠不齐，不知道哪些是对的，哪些是错的，所以笔者就这些博客和自己的理解写出这篇文章，如果有不对的地方，希望读者能够指正，感谢。</p><p>变量是我们经常用到的一种，我在刚学 Java 的时候，也经常被各种变量的概念折磨，当时并没有细抠，但是我在写一篇类似的文章中，想把变量作为一种小标题来简述一下，但是发现，变量这个概念还是比较繁琐的，本篇文章就来深入认识一下 Java 中这些变量的概念</p><h2 id="变量汇总" tabindex="-1"><a class="header-anchor" href="#变量汇总" aria-hidden="true">#</a> 变量汇总</h2><p>所以，到底有哪些变量的概念呢？距今为止，目前已知的变量主要有</p><ul><li>实例变量</li><li>全局变量</li><li>静态变量</li><li>类变量</li><li>局部变量</li><li>成员变量</li><li>常量</li></ul><p>下面我们就采用各个击破的方式来认识每个概念</p><h3 id="实例变量" tabindex="-1"><a class="header-anchor" href="#实例变量" aria-hidden="true">#</a> 实例变量</h3><p>实例变量又被称为<code>Instance variables</code>。不使用 <code>static</code> 关键字定义，并且在任何方法、构造方法、块之外的变量都是<code>实例变量</code>。实例变量都是基于特定实例的，实例变量不会在实例之间共享，也就是说，每一个对象的实例都有自己的一个实例变量。下面是实例变量的一个例子</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Fruits</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">public</span> <span class="token class-name">String</span> fruitName<span class="token punctuation">;</span> <span class="token comment">// 具有公共访问权限的 fruitName;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> fruitNum<span class="token punctuation">;</span>		 <span class="token comment">// 具有私有访问权限的 fruitNum;</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用下面这种方式进行实例变量的调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fruits</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> fruitName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fruitNum<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Fruits</span> fruits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fruits<span class="token punctuation">.</span>fruitName <span class="token operator">=</span> <span class="token string">&quot;strawberry&quot;</span><span class="token punctuation">;</span>
        fruits<span class="token punctuation">.</span>fruitNum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何识别实例变量" tabindex="-1"><a class="header-anchor" href="#如何识别实例变量" aria-hidden="true">#</a> 如何识别实例变量</h4><p>那么我如何知道一个变量它是实例变量呢？下面是一些关于实例变量的定义规则</p><ul><li>实例变量可以使用四种访问修饰符进行修饰：<strong>public、protected、default、private</strong></li><li>实例变量可以使用 <code>transient、final</code> 关键字进行修饰</li><li>实例变量不可以使用 <code>abstract、synchronized、strictfp、native、static</code>关键字进行修饰</li></ul><p>实例变量带有默认值，也就是说，实例变量不用初始化就能使用。下面是常用实例变量的初始值</p><p><img src="http://www.cxuan.vip/image-20230203221726151.png" alt=""></p><h4 id="实例变量的特点" tabindex="-1"><a class="header-anchor" href="#实例变量的特点" aria-hidden="true">#</a> 实例变量的特点</h4><p>上面我们了解了实例变量的基本特征和如何区分实例变量，下面我们来讲一下实例变量的特点。</p><ul><li><p>实例变量的只能在类中声明，但是在方法、构造函数或任何块之外。</p></li><li><p>当在为堆中对象分配空间时，将为每个实例变量分配一块区域。</p></li><li><p>实例变量只能通过创建对象来使用，当使用 <code>new</code> 关键字进行创建对象时，实例变量同时也被创建，当垃圾回收器回收对象时，实例变量也会被销毁。</p></li><li><p>实例变量可以使用访问<code>修饰符</code>来修饰</p></li><li><p>实例变量不用强制初始化，它有自己的默认值。</p></li><li><p>每个对象都有自己的一个实例变量的副本，因此在一个对象中修改变量不会对其他对象中的实例变量造成影响</p></li><li><p>实例变量只能通过创建对象引用来使用。</p></li></ul><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h3><p>全局变量又被称为<code>Global variables</code>。如果你有其他语言的编程经验，比如 C、C++ 的话，你会接触到全局变量这个概念，你可以使用下面代码来创建全局变量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>

	<span class="token comment">// 全局变量</span>
	<span class="token keyword">int</span> A<span class="token punctuation">;</span>
	<span class="token keyword">int</span> B<span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> A <span class="token operator">+</span> B<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在 Java 中，<strong>是不存在全局变量的</strong>。因为 Java 是一门面向对象的编程语言，所有的内容都是属于类的一部分。Java 这么做的原因是为了防止数据和类成员被其他程序的其他部分有意或者无意的修改。所以在 Java 中，使用 <code>静态变量</code> 来起到全局访问的目的。</p><h3 id="静态变量" tabindex="-1"><a class="header-anchor" href="#静态变量" aria-hidden="true">#</a> 静态变量</h3><p>静态变量又被称为<code>Static variables</code>。静态变量的定义比较简单，静态变量是属于该<code>类</code>的变量，它是由 <code>static</code> 关键字来修饰的。static 修饰的变量属于静态变量，它只能定义在类的内部、方法的外部。</p><h4 id="静态变量的特点" tabindex="-1"><a class="header-anchor" href="#静态变量的特点" aria-hidden="true">#</a> 静态变量的特点</h4><ul><li>静态变量只能使用 static 关键字进行修饰，它不能在方法中进行声明，不论是静态方法还是非静态方法。</li></ul><p><img src="http://www.cxuan.vip/image-20230203221739006.png" alt=""></p><ul><li>静态变量会在程序运行前进行初始化，并且只初始化一次。<strong>静态变量会有一个初始化顺序，我们后面说</strong>。</li><li>静态变量的所有实例共享同一个副本。也就是说，静态变量只有一个，它不会随着对象实例的创建而进行副本拷贝</li><li>静态变量可以通过<code>类名.变量名</code> 进行访问，并且不需要创建任何对象就能访问。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fruits</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> fruitName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fruitNum<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> fruitType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Fruits</span><span class="token punctuation">.</span>fruitType <span class="token operator">=</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 类名.变量名</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruitType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以在<code>非静态方法</code> 中使用静态变量</li></ul><h3 id="类变量" tabindex="-1"><a class="header-anchor" href="#类变量" aria-hidden="true">#</a> 类变量</h3><p>类变量又被称为 <code>Class variables</code>在 Java 中，类变量就是静态变量，它们都用 <code>static</code> 关键字进行修饰，所以，如果你再听到说静态变量的时候，它也就是类变量。</p><h3 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h3><p>还有一种说法，说 Java 中只有类变量、实例变量和局部变量。这么分也没有问题，可能有人会问到，你把成员变量和常量放在哪了？别着急我们后面会说</p><p>先来说一下什么是<code>局部变量</code></p><p>局部变量又称为 <code>Local variables</code>。它指的是在方法中、构造器中或者块代码中定义的变量。局部变量的生命周期随方法、构造器、代码块的执行完毕而销毁。</p><p>不管上面的一些变量概念如何变换、局部变量都<strong>站如松，坐如钟，行如风，卧如弓</strong>，从容应对各种不同文章的比较。真是一个省事的变量。</p><img src="http://www.cxuan.vip/image-20230203221751569.png" style="zoom:50%;"><p>那么这么好的东西我们可要仔细研究一下其特点是啥</p><ul><li>根据定义可知，局部变量定义在方法、构造器或者代码块中；</li><li>然后局部变量的生命周期随方法、构造器、代码块的执行完毕而销毁；</li><li>局部变量不能使用访问修饰符，例如如下代码</li></ul><p><img src="http://www.cxuan.vip/image-20230203221804721.png" alt=""></p><ul><li><p>局部变量仅在方法的声明、构造函数或者块内可见，局部变量只能在调用这些方法、构造函数或者块的内部使用</p></li><li><p>局部变量没有默认值，所以局部变量应该在第一次使用或者声明的时候就应该初始化完成</p></li></ul><p><img src="http://www.cxuan.vip/image-20230203221817843.png" alt=""></p><h3 id="成员变量" tabindex="-1"><a class="header-anchor" href="#成员变量" aria-hidden="true">#</a> 成员变量</h3><p>什么？成员变量在 Java 中就是实例变量？这个结论对吗？</p><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h3><p><img src="http://www.cxuan.vip/image-20230203222055606.png" alt=""></p><h2 id="验证过程" tabindex="-1"><a class="header-anchor" href="#验证过程" aria-hidden="true">#</a> 验证过程</h2><p>为了验证这个结论，我们求助于了 <code>stackoverflow</code> 网站</p><p><img src="http://www.cxuan.vip/image-20230203221841339.png" alt=""></p><p>我们搜索 <strong>java member variable and instance variable</strong> 就帮我们定为到了这个标题</p><p>大致意思是：什么是成员变量？成员变量和实例变量是否相同呢？我们下面有个回答</p><p><img src="http://www.cxuan.vip/image-20230203221849479.png" alt=""></p><p>第一句就给出，<strong>实例变量和类变量都称为成员变量</strong>，然后给出了 JDK 官网手册对变量的定义。意思是在 Java 中，只有三中类型的变量</p><ul><li>定义在类中的成员变量 --- 被称为属性</li><li>定义在方法（包含构造方法）或者块代码中的变量 --- 被称为局部变量</li><li>定义在方法定义中的变量 --- 被称为参数</li></ul><p>嗯。。。或许还不是很好解决我们的问题，我带着问题再次求助 JDK 官网手册，又看到了关于 <code>Variables</code> 的定义</p><p><img src="http://www.cxuan.vip/image-20230203221859082.png" alt=""></p><p>意思是在 Java 中，只有下面几种类型的变量（别扯别的了，莫非你比官网还靠谱？）</p><ul><li><code>实例变量(非静态属性)</code> ：大致意思就是说</li></ul><p><img src="http://www.cxuan.vip/image-20230203221907891.png" alt=""></p><p>非静态属性也就被称为<code>实例变量</code>，因为它们的值是相对于每个实例来说的。换句话说，对于每个对象来讲，实例变量的值都是唯一的；</p><ul><li><p><code>类变量(静态属性)</code>：类变量就是使用 static 修饰符声明的字段，这就会告诉编译器：无论该类被实例化了多少次，该变量只存在一个副本。另外，可以添加关键字 final 来表示<code>常量</code>。</p></li><li><p><code>局部变量</code>：没有特殊的关键字将制定的变量声明为局部变量、确定其声明的完全取决于声明变量的位置。</p></li><li><p><code>参数</code>：想一下我们平常用到最多的方法是什么方法？当然是 <code>main</code> 方法啊，main 方法是怎么定义的？</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中的 args 是不是就是 String 的数组的变量，我们也称其为<code>参数</code>，所以参数也没有关键字进行声明，标识其为参数也只是取决于其声明位置。</p><h2 id="bilibili" tabindex="-1"><a class="header-anchor" href="#bilibili" aria-hidden="true">#</a> bilibili</h2><p>所以</p><p><img src="http://www.cxuan.vip/image-20230203221923113.png" alt=""></p><p>我写了一篇文章为了给你讲清楚，现在你应该知道 Java 中到底有哪些变量了吧。</p><p>如果你用 static 来定义变量，只能是类变量、或者说静态变量、而且其定义位置只能在类中，方法或代码块外，变量的副本只有一个。</p><p>如果你不用 static 来声明变量，那么就会有三种变量的叫法</p><ul><li>定义在构造方法、代码块、方法<code>外</code>的变量被称为实例变量，实例变量的副本数量和实例的数量一样。</li><li>定义在方法、构造方法、代码块<code>内</code>的变量被称为局部变量；</li><li>定义在方法参数<code>中</code>的变量被称为参数。</li></ul><p>也就是下面代码所描述的这样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariablesInJava</span> <span class="token punctuation">{</span>

	<span class="token keyword">int</span> instanceVariable<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span>

	<span class="token keyword">static</span> <span class="token class-name">String</span> staticVariable<span class="token punctuation">;</span> <span class="token comment">// 类变量</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
		<span class="token class-name">String</span> localVariable <span class="token operator">=</span> <span class="token string">&quot;localVariable&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//参数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在阅读文章的过程中发现错误和问题，请及时与我联系！</p><p>如果文章对你有帮助，希望小伙伴们三连走起！</p>`,78),t=[p];function l(c,o){return n(),s("div",null,t)}const u=a(i,[["render",l],["__file","java-varaibles.html.vue"]]);export{u as default};
