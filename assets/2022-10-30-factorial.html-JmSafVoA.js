import{_ as t,r as o,o as c,c as p,a as n,b as a,d as e,e as l}from"./app-3RcBQnkC.js";const i={},r=n("h1",{id:"《程序员数学-阶乘》——-阶乘的用途是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-阶乘》——-阶乘的用途是什么","aria-hidden":"true"},"#"),a(" 《程序员数学：阶乘》—— 阶乘的用途是什么？")],-1),u=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),h={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},v=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>阶乘的历史</code></p><p>早在12世纪，印度学者就已有使用阶乘的概念来计算排列数的纪录。1677年时，法比安·斯特德曼使用Change ringing来解释阶乘的概念。在描述递归方法之后，斯特德将阶乘描述为：“现在这些方法的本质是这样的：一个数字的变化数包含了所有比他小的数字（包括本身）的所有变化数……因为一个数字的完全变化数是将较小数字的变化数视为一个整体，并透过将所有数字的完整变化联合起来。”</p><h2 id="二、定义" tabindex="-1"><a class="header-anchor" href="#二、定义" aria-hidden="true">#</a> 二、定义</h2><p>阶乘可通过连续乘积来定义：<code>n!=1·2·3···(n-2)·(n-1)·n</code></p><p>用连乘积符号可表示为：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/factorial-01.png?raw=true" width="150px"></div><p>从上述公式中，可以推导出递推关系：n!=n·(n-1)!</p><p>但递归定义须给出base case，因此需要定义零的阶乘。 除此之外，递推关系在阶乘函数中各个值皆成立，例如：</p><ul><li>5!=5·4!</li><li>6!=6·5!</li><li>50!=50·49!</li></ul><h2 id="三、实现" tabindex="-1"><a class="header-anchor" href="#三、实现" aria-hidden="true">#</a> 三、实现</h2><p><strong>递归实现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factorial</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> number <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>就是一个简单的递归调用，实现起来还是蛮简单的。</li></ul><h2 id="四、测试" tabindex="-1"><a class="header-anchor" href="#四、测试" aria-hidden="true">#</a> 四、测试</h2><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Factorial</span> factorial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factorial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> result <span class="token operator">=</span> factorial<span class="token punctuation">.</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/factorial-02.png?raw=true" width="350px"></div><ul><li>计算5的阶乘，测试结果120</li></ul>`,20);function m(b,g){const s=o("ExternalLinkIcon");return c(),p("div",null,[r,n("p",null,[a("作者：小傅哥 "),u,a("博客："),n("a",d,[a("https://bugstack.cn"),e(s)]),k,a("源码："),n("a",h,[a("https://github.com/fuzhengwei/java-algorithms"),e(s)])]),v])}const _=t(i,[["render",m],["__file","2022-10-30-factorial.html.vue"]]);export{_ as default};
