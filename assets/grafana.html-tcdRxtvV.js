import{_ as p,r as o,o as c,c as i,a as n,b as a,d as e,e as t}from"./app-3RcBQnkC.js";const l={},r=n("h1",{id:"prometheus-grafana-监控-验证-hystrix-超时熔断",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prometheus-grafana-监控-验证-hystrix-超时熔断","aria-hidden":"true"},"#"),a(" Prometheus + Grafana 监控，验证 Hystrix 超时熔断")],-1),u={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),k=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=919588155&bvid=BV1iu4y1G7VQ&cid=1361583047&p=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=n("p",null,"本文的宗旨在于通过简单干净实践的方式教会读者，使用 Prometheus + Grafana 部署监控，同时结合监控了解到为什么需要使用 Hystrix 对接口进行超时熔断处理。",-1),v=n("p",null,"很多伙伴在面试的时候，都可能会被问到；你的应用接口响应时间多少，Tomcat 配置了多少连接数，如果接口超时了怎么办，会不会把服务拖垮。那会不会呢，其实会的，对于一些接口不稳定容易超时但又不熔断的接口，在用户大量请求的情况下，是很容易把Tomcat连接数打满，直至拖垮整个服务，让服务的任何接口都没有响应。所以本节小傅哥会带着大家，来模拟这样的场景，让大家学习下。",-1),h=n("p",null,"本文涉及的工程：",-1),b={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-grafana",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"测试工程、监控Docker安装脚本、Grafana监控面板配置JSON",-1),f=t(`<h2 id="一、你是怎么挂的" tabindex="-1"><a class="header-anchor" href="#一、你是怎么挂的" aria-hidden="true">#</a> 一、你是怎么挂的？</h2><p>Tomcat 可分配的连接数就像厕所的坑位，一堆用户来上大号。本来4个坑位也够用了，因为用户来了也可以快速释放请求，不会长时间占用。但突然有这么一天，用户都拉肚子，一个进去就1个小时候，其余人都排队。最后给压垮了！</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-01.png?raw=true" width="550px"></div><p>那是不是，增加了连接数(WC 更多的坑位就好了呢)，其实也好不哪去，你总不能给所有的用户都建一个坑位，而且坑位越多，距离也越长了，这就会涉及到线程的切换，也是不小的资源消耗。</p><p>所以，为了保护我方Tomcat(WC 坑位)，则需要快速熔断，而不是让它一直占用着链接不释放。</p><h2 id="二、工程环境配置" tabindex="-1"><a class="header-anchor" href="#二、工程环境配置" aria-hidden="true">#</a> 二、工程环境配置</h2><p>这里小傅哥做一个 SpringBoot 工程测试案例，并配合添加 Hystrix 熔断组件，以及使用 Grafana 监控来观察简单压测时连接数的消耗和接口性能的反馈。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-02.png?raw=true" width="450px"></div><ul><li>环境；jdk 1.8、Maven 3.6.x、Docker 环境</li><li>代码；在 xfg-dev-tech-grafana 测试工程中提供了测试代码和环境安装</li></ul><h3 id="_1-配置修改" tabindex="-1"><a class="header-anchor" href="#_1-配置修改" aria-hidden="true">#</a> 1. 配置修改</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-07.png?raw=true" width="650px"></div><ul><li>首先，你需要打开 prometheus.yml 修改监控采集应用的IP地址。这个配置还可以监控例如 MySQL 和其他应用。</li></ul><h3 id="_2-安装监控" tabindex="-1"><a class="header-anchor" href="#_2-安装监控" aria-hidden="true">#</a> 2. 安装监控</h3><p>文件：<code>docker-compose.yml</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>version<span class="token operator">:</span> <span class="token char">&#39;3&#39;</span>
# 执行脚本；docker<span class="token operator">-</span>compose <span class="token operator">-</span>f docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yml up <span class="token operator">-</span>d
# 拷贝配置；docker container cp grafana<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>grafana<span class="token operator">/</span> <span class="token punctuation">.</span>/docs<span class="token operator">/</span>dev<span class="token operator">-</span>ops<span class="token operator">/</span>
services<span class="token operator">:</span>
  # 数据采集
  prometheus<span class="token operator">:</span>
    image<span class="token operator">:</span> bitnami<span class="token operator">/</span>prometheus<span class="token operator">:</span><span class="token number">2.47</span><span class="token number">.2</span>
    container_name<span class="token operator">:</span> prometheus
    restart<span class="token operator">:</span> always
    ports<span class="token operator">:</span>
      <span class="token operator">-</span> <span class="token number">9090</span><span class="token operator">:</span><span class="token number">9090</span>
    volumes<span class="token operator">:</span>
      <span class="token operator">-</span> <span class="token punctuation">.</span>/etc<span class="token operator">/</span>prometheus<span class="token operator">/</span>prometheus<span class="token punctuation">.</span>yml<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>prometheus<span class="token operator">/</span>prometheus<span class="token punctuation">.</span>yml
  # 监控界面
  grafana<span class="token operator">:</span>
    image<span class="token operator">:</span> grafana<span class="token operator">/</span>grafana<span class="token operator">:</span><span class="token number">10.2</span><span class="token number">.0</span>
    container_name<span class="token operator">:</span> grafana
    restart<span class="token operator">:</span> always
    ports<span class="token operator">:</span>
      <span class="token operator">-</span> <span class="token number">4000</span><span class="token operator">:</span><span class="token number">4000</span>
    depends_on<span class="token operator">:</span>
      <span class="token operator">-</span> prometheus
    volumes<span class="token operator">:</span>
      <span class="token operator">-</span> <span class="token punctuation">.</span>/etc<span class="token operator">/</span>grafana<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>grafana
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-03.png?raw=true" width="950px"></div><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-04.png?raw=true" width="950px"></div><ul><li>这是 docker compose 执行脚本，如果你本地已经安装了 Docker 可以直接执行 安装即可。</li><li>注意；如果你是生产使用，则需要修改 <code>etc/grafana/grafana.ini</code> 中 datasources 为 mysql 这样在后面迁移的时候也会非常容易。</li></ul><h3 id="_3-监控配置" tabindex="-1"><a class="header-anchor" href="#_3-监控配置" aria-hidden="true">#</a> 3. 监控配置</h3>`,19),y={href:"http://127.0.0.1:4000",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"admin/admin",-1),x={href:"http://127.0.0.1:4000/dashboards",target:"_blank",rel:"noopener noreferrer"},w=t(`<div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-05.png?raw=true" width="950px"></div><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-06.png?raw=true" width="950px"></div><ul><li>打开导入面板后，把案例工程中的 JSON 复制到导入面板的 JSON 里，点击 Load 这样就配置进去了。</li><li>不过这会你还看不见数据，因为工程还没有启动，没有往里写入数据。</li></ul><h2 id="三、测试应用说明" tabindex="-1"><a class="header-anchor" href="#三、测试应用说明" aria-hidden="true">#</a> 三、测试应用说明</h2><h3 id="_1-熔断配置" tabindex="-1"><a class="header-anchor" href="#_1-熔断配置" aria-hidden="true">#</a> 1. 熔断配置</h3><div class="language-pom line-numbers-mode" data-ext="pom"><pre class="language-pom"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.netflix.hystrix&lt;/groupId&gt;
    &lt;artifactId&gt;hystrix-javanica&lt;/artifactId&gt;
    &lt;version&gt;1.5.18&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个熔断的组件，不需要引入 SpringCloud 一堆的东西，使用起来更加容易。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">HystrixCommandAspect</span> <span class="token function">hystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引入 POM 后，添加 HystrixConfig 熔断配置。</li></ul><h3 id="_2-接口配置" tabindex="-1"><a class="header-anchor" href="#_2-接口配置" aria-hidden="true">#</a> 2. 接口配置</h3><p>这里小傅哥提供了2个接口，一个普通的查询数据接口，一个是 OpenAi 中服务的给前端异步响应结果的接口。尤其是 OpenAi 异步接口，我们在实际使用的时候，也总会有超时熔断，所以这里给大家添加上。</p><h4 id="_2-1-普通接口" tabindex="-1"><a class="header-anchor" href="#_2-1-普通接口" aria-hidden="true">#</a> 2.1 普通接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * curl http://localhost:8091/api/hystrix/query_order_info
 */</span>
<span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;50&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;queryOrderInfo_error&quot;</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;query_order_info&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryOrderInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;您的订单信息查询完毕&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">queryOrderInfo_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Fallback Hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试过程中，超时熔断时间，可以设置的较大一些，也可以先不添加超时熔断的注解。</li></ul><h4 id="_2-2-异步接口" tabindex="-1"><a class="header-anchor" href="#_2-2-异步接口" aria-hidden="true">#</a> 2.2 异步接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * curl http://localhost:8091/api/hystrix/stream
 */</span>
<span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;150&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;stream_error&quot;</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/stream&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseBodyEmitter</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/event-stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;no-cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResponseBodyEmitter</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseBodyEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    emitter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;异步响应&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                emitter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;hi xfg-dev-tech-grafana\\r\\n&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        emitter<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> emitter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">ResponseBodyEmitter</span> <span class="token function">stream_error</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/event-stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;no-cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResponseBodyEmitter</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseBodyEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    emitter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    emitter<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> emitter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>另外一个是一步响应接口，如果响应时间较长，则进入超时熔断方法中。</li></ul><h2 id="四、服务压测验证" tabindex="-1"><a class="header-anchor" href="#四、服务压测验证" aria-hidden="true">#</a> 四、服务压测验证</h2><h3 id="_1-配置信息" tabindex="-1"><a class="header-anchor" href="#_1-配置信息" aria-hidden="true">#</a> 1. 配置信息</h3><p><strong>application.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8091</span>
  <span class="token comment"># 1核2G内存，可默认配置 200；4核8G内存【accept-count=1000、max-threads=800、max-connections=10000】，线程数经验值800。线程池过大，cpu调度会消耗大量时间</span>
  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>
    <span class="token key atrule">mbeanregistry</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 最大连接数  </span>
    <span class="token key atrule">threads</span><span class="token punctuation">:</span>
      <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">20</span>         <span class="token comment"># 设定处理客户请求的线程的最大数目，决定了服务器可以同时响应客户请求的数,默认200</span>
      <span class="token key atrule">min-spare</span><span class="token punctuation">:</span> <span class="token number">10</span>   <span class="token comment"># 初始化线程数,最小空闲线程数,默认是10</span>
    <span class="token key atrule">accept-count</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token comment"># 等待队列长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们在 YML 文件中指定了 tomcat 的连接数配置为 20 个，处理线程最多也是20个。</li><li>同时还添加了监控空你暴露为true，这样 Grafana 才能监控到。</li></ul><h3 id="_2-压测工具" tabindex="-1"><a class="header-anchor" href="#_2-压测工具" aria-hidden="true">#</a> 2. 压测工具</h3>`,23),q={href:"https://bugstack.cn/md/road-map/jmeter.html",target:"_blank",rel:"noopener noreferrer"},C=t('<p>不过这里为了让大家更加简单的压测下，小傅哥使用了 ApiPost 工具自带的压测，这样不需要自己再安装其他工具就可以简单压测下了。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-08.png?raw=true" width="750px"></div><ul><li>你只要把2个接口配置到 ApiPost 就可以用一键压测工具进行压测。</li></ul><h3 id="_3-压测观察" tabindex="-1"><a class="header-anchor" href="#_3-压测观察" aria-hidden="true">#</a> 3. 压测观察</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-grafana-09.png?raw=true" width="850px"></div><ul><li>这里小傅哥压测了下接口 <code>http://localhost:8091/api/hystrix/stream</code> 接口。因为这个接口设置了超时，可以看见，快速的就把连接数给占满了。</li><li>所以如果你的应用配置的 Tomcat 连接数不合理，之后接口又容易超时，超时后又没有熔断，那么很容易就会把你的服务拖垮。很多新人在做一些对外的应用时，如果没有注意到这些，那么也是很容易宕机的。</li></ul>',6);function E(H,j){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[a("作者：小傅哥 博客："),n("a",u,[a("https://bugstack.cn"),e(s)])]),d,k,m,v,h,n("ul",null,[n("li",null,[a("xfg-dev-tech-grafana："),n("a",b,[a("https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-grafana"),e(s)]),a(" - "),g])]),f,n("ul",null,[n("li",null,[n("p",null,[a("安装完监控环境以后，可以先打开 Grafana 地址："),n("a",y,[a("http://127.0.0.1:4000"),e(s)]),a(" - "),_])]),n("li",null,[n("p",null,[a("地址："),n("a",x,[a("http://127.0.0.1:4000/dashboards"),e(s)]),a(" - 打开仪表盘，导入监控面板配置。")])])]),w,n("p",null,[a("压测工具有很多，包括；"),n("a",q,[a("JMeter、ApacheBench、Siege"),e(s)]),a(" 小傅哥已经在前面写过文章，也可以去参考使用。")]),C])}const B=p(l,[["render",E],["__file","grafana.html.vue"]]);export{B as default};
