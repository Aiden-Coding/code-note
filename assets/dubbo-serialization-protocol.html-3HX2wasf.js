import{_ as e,o as i,c as o,e as a}from"./app-3RcBQnkC.js";const s="/code-note/assets/serialize-deserialize-Evh0jxJN.png",t="/code-note/assets/dubbo-keep-connection-ln81mHeq.png",l="/code-note/assets/dubbo-not-keep-connection-4shg3PLG.png",d={},r=a('<h1 id="dubbo-支持哪些通信协议-支持哪些序列化协议-说一下-hessian-的数据结构-pb-知道吗-为什么-pb-的效率是最高的" tabindex="-1"><a class="header-anchor" href="#dubbo-支持哪些通信协议-支持哪些序列化协议-说一下-hessian-的数据结构-pb-知道吗-为什么-pb-的效率是最高的" aria-hidden="true">#</a> dubbo 支持哪些通信协议？支持哪些序列化协议？说一下 Hessian 的数据结构？PB 知道吗？为什么 PB 的效率是最高的？</h1><h2 id="面试官心理分析" tabindex="-1"><a class="header-anchor" href="#面试官心理分析" aria-hidden="true">#</a> 面试官心理分析</h2><p>上一个问题，说说 dubbo 的基本工作原理，那是你必须知道的，至少要知道 dubbo 分成哪些层，然后平时怎么发起 rpc 请求的，注册、发现、调用，这些是基本的。</p><p>接着就可以针对底层进行深入的问问了，比如第一步就可以先问问序列化协议这块，就是平时 RPC 的时候怎么走的？</p><h2 id="面试题剖析" tabindex="-1"><a class="header-anchor" href="#面试题剖析" aria-hidden="true">#</a> 面试题剖析</h2><p><strong>序列化</strong>，就是把数据结构或者是一些对象，转换为二进制串的过程，而<strong>反序列化</strong>是将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程。</p><p><img src="'+s+'" alt="serialize-deserialize"></p><h3 id="dubbo-支持不同的通信协议" tabindex="-1"><a class="header-anchor" href="#dubbo-支持不同的通信协议" aria-hidden="true">#</a> dubbo 支持不同的通信协议</h3><ul><li>dubbo 协议 <code>dubbo://</code></li></ul><p><strong>默认</strong>就是走 dubbo 协议，单一长连接，进行的是 NIO 异步通信，基于 hessian 作为序列化协议。使用的场景是：传输数据量小（每次请求在 100kb 以内），但是并发量很高，以及服务消费者机器数远大于服务提供者机器数的情况。</p><p>为了要支持高并发场景，一般是服务提供者就几台机器，但是服务消费者有上百台，可能每天调用量达到上亿次！此时用长连接是最合适的，就是跟每个服务消费者维持一个长连接就可以，可能总共就 100 个连接。然后后面直接基于长连接 NIO 异步通信，可以支撑高并发请求。</p><p>长连接，通俗点说，就是建立连接过后可以持续发送请求，无须再建立连接。</p><p><img src="'+t+'" alt="dubbo-keep-connection"></p><p>而短连接，每次要发送请求之前，需要先重新建立一次连接。</p><p><img src="'+l+'" alt="dubbo-not-keep-connection"></p><ul><li>rmi 协议 <code>rmi://</code></li></ul><p>RMI 协议采用 JDK 标准的 java.rmi.* 实现，采用阻塞式短连接和 JDK 标准序列化方式。多个短连接，适合消费者和提供者数量差不多的情况，适用于文件的传输，一般较少用。</p><ul><li>hessian 协议 <code>hessian://</code></li></ul><p>Hessian 1 协议用于集成 Hessian 的服务，Hessian 底层采用 Http 通讯，采用 Servlet 暴露服务，Dubbo 缺省内嵌 Jetty 作为服务器实现。走 hessian 序列化协议，多个短连接，适用于提供者数量比消费者数量还多的情况，适用于文件的传输，一般较少用。</p><ul><li>http 协议 <code>http://</code></li></ul><p>基于 HTTP 表单的远程调用协议，采用 Spring 的 HttpInvoker 实现。走表单序列化。</p><ul><li>thrift 协议 <code>thrift://</code></li></ul><p>当前 dubbo 支持的 thrift 协议是对 thrift 原生协议的扩展，在原生协议的基础上添加了一些额外的头信息，比如 service name，magic number 等。</p><ul><li>webservice <code>webservice://</code></li></ul><p>基于 WebService 的远程调用协议，基于 Apache CXF 的 frontend-simple 和 transports-http 实现。走 SOAP 文本序列化。</p><ul><li>memcached 协议 <code>memcached://</code></li></ul><p>基于 memcached 实现的 RPC 协议。</p><ul><li>redis 协议 <code>redis://</code></li></ul><p>基于 Redis 实现的 RPC 协议。</p><ul><li>rest 协议 <code>rest://</code></li></ul><p>基于标准的 Java REST API——JAX-RS 2.0（Java API for RESTful Web Services 的简写）实现的 REST 调用支持。</p><ul><li>gPRC 协议 <code>grpc://</code></li></ul><p>Dubbo 自 2.7.5 版本开始支持 gRPC 协议，对于计划使用 HTTP/2 通信，或者想利用 gRPC 带来的 Stream、反压、Reactive 编程等能力的开发者来说， 都可以考虑启用 gRPC 协议。</p><h3 id="dubbo-支持的序列化协议" tabindex="-1"><a class="header-anchor" href="#dubbo-支持的序列化协议" aria-hidden="true">#</a> dubbo 支持的序列化协议</h3><p>dubbo 支持 hession、Java 二进制序列化、json、SOAP 文本序列化多种序列化协议。但是 hessian 是其默认的序列化协议。</p><h3 id="说一下-hessian-的数据结构" tabindex="-1"><a class="header-anchor" href="#说一下-hessian-的数据结构" aria-hidden="true">#</a> 说一下 Hessian 的数据结构</h3><p>Hessian 的对象序列化机制有 8 种原始类型：</p><ul><li>原始二进制数据</li><li>boolean</li><li>64-bit date（64 位毫秒值的日期）</li><li>64-bit double</li><li>32-bit int</li><li>64-bit long</li><li>null</li><li>UTF-8 编码的 string</li></ul><p>另外还包括 3 种递归类型：</p><ul><li>list for lists and arrays</li><li>map for maps and dictionaries</li><li>object for objects</li></ul><p>还有一种特殊的类型：</p><ul><li>ref：用来表示对共享对象的引用。</li></ul><h3 id="为什么-pb-的效率是最高的" tabindex="-1"><a class="header-anchor" href="#为什么-pb-的效率是最高的" aria-hidden="true">#</a> 为什么 PB 的效率是最高的？</h3><p>其实 PB 之所以性能如此好，主要得益于两个：<strong>第一</strong>，它使用 proto 编译器，自动进行序列化和反序列化，速度非常快，应该比 <code>XML</code> 和 <code>JSON</code> 快上了 <code>20~100</code> 倍；<strong>第二</strong>，它的数据压缩效果好，就是说它序列化后的数据量体积小。因为体积小，传输起来带宽和速度上会有优化。</p>',44),n=[r];function c(p,b){return i(),o("div",null,n)}const u=e(d,[["render",c],["__file","dubbo-serialization-protocol.html.vue"]]);export{u as default};
