import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战装饰器模式「sso单点登录功能扩展-增加拦截用户访问方法范围场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战装饰器模式「sso单点登录功能扩展-增加拦截用户访问方法范围场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战装饰器模式「SSO单点登录功能扩展，增加拦截用户访问方法范围场景」")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=768112771&bvid=BV1er4y1n7CS&cid=571566190&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>对于代码你有编程感觉吗</code></p><p>很多人写代码往往是没有编程感觉的，也就是除了可以把功能按照固定的流程编写出流水式的代码外，很难去思考整套功能服务的扩展性和可维护性。尤其是在一些较大型的功能搭建上，比较缺失一些驾驭能力，从而导致最终的代码相对来说不能做到尽善尽美。</p><p><code>江洋大盗与江洋大偷</code></p><p>两个本想描述一样的意思的词，只因一字只差就让人觉得一个是好牛，一个好搞笑。往往我们去开发编程写代码时也经常将一些不恰当的用法用于业务需求实现中，但却不能意识到。一方面是由于编码不多缺少较大型项目的实践，另一方面是不思进取的总在以完成需求为目标缺少精益求精的工匠精神。</p><p><code>书从来不是看的而是用的</code></p><p>在这个学习资料几乎爆炸的时代，甚至你可以轻易就获取几个T的视频，小手轻轻一点就收藏一堆文章，但却很少去看。学习的过程从不只是简单的看一遍就可以，对于一些实操性的技术书籍，如果真的希望学习到知识，那么一定是把这本书用起来而绝对不是看起来。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),h=n("li",null,"JDK 1.8",-1),b=n("li",null,"Idea + Maven",-1),g=n("strong",null,"公众号",-1),f={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"bugstack虫洞栈",-1),_=n("code",null,"源码下载",-1),w=t('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-9-00</td><td>场景模拟工程；模拟单点登录类</td></tr><tr><td>itstack-demo-design-9-01</td><td>使用一坨代码实现业务需求</td></tr><tr><td>itstack-demo-design-9-02</td><td>通过设计模式优化改造代码，产生对比性从而学习</td></tr></tbody></table><h2 id="三、装饰器模式介绍" tabindex="-1"><a class="header-anchor" href="#三、装饰器模式介绍" aria-hidden="true">#</a> 三、装饰器模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-9-01.png" alt="装饰器模式，图片来自 refactoringguru.cn"></p>',3),y={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>初看上图感觉装饰器模式有点像俄罗斯套娃、某众汽车🚕，而装饰器的核心就是再不改原有类的基础上给类新增功能。<strong>不改变原有类</strong>，可能有的小伙伴会想到继承、AOP切面，当然这些方式都可以实现，但是使用装饰器模式会是另外一种思路更为灵活，可以避免继承导致的子类过多，也可以避免AOP带来的复杂性。</p><p><strong>你熟悉的场景很多用到装饰器模式</strong></p><p><code>new BufferedReader(new FileReader(&quot;&quot;));</code>，这段代码你是否熟悉，相信学习java开发到字节流、字符流、文件流的内容时都见到了这样的代码，一层嵌套一层，一层嵌套一层，字节流转字符流等等，而这样方式的使用就是装饰器模式的一种体现。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-9-02.png" alt="场景模拟；单点登录功能扩展"></p><p><strong>在本案例中我们模拟一个单点登录功能扩充的场景</strong></p><p>一般在业务开发的初期，往往内部的ERP使用只需要判断账户验证即可，验证通过后即可访问ERP的所有资源。但随着业务的不断发展，团队里开始出现专门的运营人员、营销人员、数据人员，每个人员对于ERP的使用需求不同，有些需要创建活动，有些只是查看数据。同时为了保证数据的安全性，不会让每个用户都有最高的权限。</p><p>那么以往使用的<code>SSO</code>是一个组件化通用的服务，不能在里面添加需要的用户访问验证功能。这个时候我们就可以使用装饰器模式，扩充原有的单点登录服务。但同时也保证原有功能不受破坏，可以继续使用。</p><h3 id="_1-场景模拟工程" tabindex="-1"><a class="header-anchor" href="#_1-场景模拟工程" aria-hidden="true">#</a> 1. 场景模拟工程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">00</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">SsoInterceptor</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里模拟的是spring中的类：<code>HandlerInterceptor</code>，实现接口功能<code>SsoInterceptor</code>模拟的单点登录拦截服务。</li><li>为了避免引入太多spring的内容影响对设计模式的阅读，这里使用了同名的类和方法，尽可能减少外部的依赖。</li></ul><h3 id="_2-场景简述" tabindex="-1"><a class="header-anchor" href="#_2-场景简述" aria-hidden="true">#</a> 2. 场景简述</h3><h4 id="_2-1-模拟spring的handlerinterceptor" tabindex="-1"><a class="header-anchor" href="#_2-1-模拟spring的handlerinterceptor" aria-hidden="true">#</a> 2.1 模拟Spring的HandlerInterceptor</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实际的单点登录开发会基于；<code>org.springframework.web.servlet.HandlerInterceptor</code> 实现。</li></ul><h4 id="_2-2-模拟单点登录功能" tabindex="-1"><a class="header-anchor" href="#_2-2-模拟单点登录功能" aria-hidden="true">#</a> 2.2 模拟单点登录功能</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SsoInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模拟获取cookie</span>
        <span class="token class-name">String</span> ticket <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟校验</span>
        <span class="token keyword">return</span> ticket<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里的模拟实现非常简单只是截取字符串，实际使用需要从<code>HttpServletRequest request</code>对象中获取<code>cookie</code>信息，解析<code>ticket</code>值做校验。</li><li>在返回的里面也非常简单，只要获取到了<code>success</code>就认为是允许登录。</li></ul><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p><code>此场景大多数实现的方式都会采用继承类</code></p><p>继承类的实现方式也是一个比较通用的方式，通过继承后重写方法，并发将自己的逻辑覆盖进去。如果是一些简单的场景且不需要不断维护和扩展的，此类实现并不会有什么，也不会导致子类过多。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                └── <span class="token class-name">LoginSsoDecorator</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上工程结构非常简单，只是通过 <code>LoginSsoDecorator</code> 继承 <code>SsoInterceptor</code>，重写方法功能。</li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginSsoDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">SsoInterceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> authMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        authMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;huahua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;doudou&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模拟获取cookie</span>
        <span class="token class-name">String</span> ticket <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟校验</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> ticket<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> userId <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> authMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 模拟方法校验</span>
        <span class="token keyword">return</span> <span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上这部分通过继承重写方法，将个人可访问哪些方法的功能添加到方法中。</li><li>以上看着代码还算比较清晰，但如果是比较复杂的业务流程代码，就会很混乱。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_LoginSsoDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LoginSsoDecorator</span> ssoDecorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginSsoDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> request <span class="token operator">=</span> <span class="token string">&quot;1successhuahua&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> success <span class="token operator">=</span> ssoDecorator<span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&quot;ewcdqwt40liuiu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;登录校验：&quot;</span> <span class="token operator">+</span> request <span class="token operator">+</span> <span class="token punctuation">(</span>success <span class="token operator">?</span> <span class="token string">&quot; 放行&quot;</span> <span class="token operator">:</span> <span class="token string">&quot; 拦截&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里模拟的相当于登录过程中的校验操作，判断用户是否可登录以及是否可访问方法。</li></ul><h4 id="_3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>登录校验：<span class="token number">1</span>successhuahua 拦截

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果来看满足我们的预期，已经做了拦截。如果你在学习的过程中，可以尝试模拟单点登录并继承扩展功能。</li></ul><h2 id="六、装饰器模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、装饰器模式重构代码" aria-hidden="true">#</a> 六、装饰器模式重构代码</h2><p><code>接下来使用装饰器模式来进行代码优化，也算是一次很小的重构。</code></p><p>装饰器主要解决的是直接继承下因功能的不断横向扩展导致子类膨胀的问题，而是用装饰器模式后就会比直接继承显得更加灵活同时这样也就不再需要考虑子类的维护。</p><p>在装饰器模式中有四个比较重要点抽象出来的点；</p><ol><li>抽象构件角色(Component) - <code>定义抽象接口</code></li><li>具体构件角色(ConcreteComponent) - <code>实现抽象接口，可以是一组</code></li><li>装饰角色(Decorator) - <code>定义抽象类并继承接口中的方法，保证一致性</code></li><li>具体装饰角色(ConcreteDecorator) - <code>扩展装饰具体的实现逻辑</code></li></ol><p>通过以上这四项来实现装饰器模式，主要核心内容会体现在抽象类的定义和实现上。</p><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── <span class="token class-name">LoginSsoDecorator</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">SsoDecorator</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>装饰器模式模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-9-03.png" alt="装饰器模式模型结构"></p><ul><li>以上是一个装饰器实现的类图结构，重点的类是<code>SsoDecorator</code>，这个类是一个抽象类主要完成了对接口<code>HandlerInterceptor</code>继承。</li><li>当装饰角色继承接口后会提供构造函数，入参就是继承的接口实现类即可，这样就可以很方便的扩展出不同功能组件。</li></ul><h3 id="_2-代码实现-1" tabindex="-1"><a class="header-anchor" href="#_2-代码实现-1" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-抽象类装饰角色" tabindex="-1"><a class="header-anchor" href="#_2-1-抽象类装饰角色" aria-hidden="true">#</a> 2.1 抽象类装饰角色</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SsoDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">HandlerInterceptor</span> handlerInterceptor<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SsoDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SsoDecorator</span><span class="token punctuation">(</span><span class="token class-name">HandlerInterceptor</span> handlerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handlerInterceptor <span class="token operator">=</span> handlerInterceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> handlerInterceptor<span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在装饰类中有两个重点的地方是；1)继承了处理接口、2)提供了构造函数、3)覆盖了方法<code>preHandle</code>。</li><li>以上三个点是装饰器模式的核心处理部分，这样可以踢掉对子类继承的方式实现逻辑功能扩展。</li></ul><h4 id="_2-2-装饰角色逻辑实现" tabindex="-1"><a class="header-anchor" href="#_2-2-装饰角色逻辑实现" aria-hidden="true">#</a> 2.2 装饰角色逻辑实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginSsoDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">SsoDecorator</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LoginSsoDecorator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> authMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        authMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;huahua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;doudou&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LoginSsoDecorator</span><span class="token punctuation">(</span><span class="token class-name">HandlerInterceptor</span> handlerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>handlerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> authMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟单点登录方法访问拦截校验：{} {}&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟方法校验</span>
        <span class="token keyword">return</span> <span class="token string">&quot;queryUserInfo&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在具体的装饰类实现中，继承了装饰类<code>SsoDecorator</code>，那么现在就可以扩展方法；<code>preHandle</code></li><li>在<code>preHandle</code>的实现中可以看到，这里只关心扩展部分的功能，同时不会影响原有类的核心服务，也不会因为使用继承方式而导致的多余子类，增加了整体的灵活性。</li></ul><h3 id="_3-测试验证-1" tabindex="-1"><a class="header-anchor" href="#_3-测试验证-1" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类-1" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类-1" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_LoginSsoDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LoginSsoDecorator</span> ssoDecorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginSsoDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SsoInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> request <span class="token operator">=</span> <span class="token string">&quot;1successhuahua&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> success <span class="token operator">=</span> ssoDecorator<span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&quot;ewcdqwt40liuiu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;登录校验：&quot;</span> <span class="token operator">+</span> request <span class="token operator">+</span> <span class="token punctuation">(</span>success <span class="token operator">?</span> <span class="token string">&quot; 放行&quot;</span> <span class="token operator">:</span> <span class="token string">&quot; 拦截&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里测试了对装饰器模式的使用，通过透传原有单点登录类<code>new SsoInterceptor()</code>，传递给装饰器，让装饰器可以执行扩充的功能。</li><li>同时对于传递者和装饰器都可以是多组的，在一些实际的业务开发中，往往也是由于太多类型的子类实现而导致不易于维护，从而使用装饰器模式替代。</li></ul><h4 id="_3-2-测试结果-1" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果-1" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">50.796</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span></span>LoginSsoDecorator</span> <span class="token operator">-</span> 模拟单点登录方法访问拦截校验：huahua queryUserInfo
登录校验：<span class="token number">1</span>successhuahua 放行

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果符合预期，扩展了对方法拦截的校验性。</li><li>如果你在学习的过程中有用到过单点登陆，那么可以适当在里面进行扩展装饰器模式进行学习使用。</li><li>另外，还有一种场景也可以使用装饰器。例如；你之前使用某个实现某个接口接收单个消息，但由于外部的升级变为发送<code>list</code>集合消息，但你又不希望所有的代码类都去修改这部分逻辑。那么可以使用装饰器模式进行适配<code>list</code>集合，给使用者依然是<code>for</code>循环后的单个消息。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>使用装饰器模式满足单一职责原则，你可以在自己的装饰类中完成功能逻辑的扩展，而不影响主类，同时可以按需在运行时添加和删除这部分逻辑。另外装饰器模式与继承父类重写方法，在某些时候需要按需选择，并不一定某一个就是最好。</li><li>装饰器实现的重点是对抽象类继承接口方式的使用，同时设定被继承的接口可以通过构造函数传递其实现类，由此增加扩展性并重写方法里可以实现此部分父类实现的功能。</li><li>就像夏天热你穿短裤，冬天冷你穿棉裤，雨天挨浇你穿雨衣一样，你的根本本身没有被改变，而你的需求却被不同的装饰而实现。生活中往往比比皆是设计，当你可以融合这部分活灵活现的例子到代码实现中，往往会创造出更加优雅的实现方式。</li></ul>`,61);function j(x,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)])]),k,v,m,n("ol",null,[h,b,n("li",null,[s("涉及工程三个，可以通过关注"),g,s("："),n("a",f,[q,e(a)]),s("，回复"),_,s("获取(打开获取的链接，找到序号18)")])]),w,n("ul",null,[n("li",null,[s("图片来自："),n("a",y,[s("https://refactoringguru.cn/design-patterns/decorator"),e(a)])])]),S])}const H=p(i,[["render",j],["__file","2020-06-09-zhongxue Java shejimoshi《shizhanzhuangshiqimoshi》.html.vue"]]);export{H as default};
