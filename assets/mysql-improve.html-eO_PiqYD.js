import{_ as i,o as t,c as d,f as a,e as s,a as e,b as l}from"./app-3RcBQnkC.js";const r={},n=s(`<h1 id="mysql-高级主题" tabindex="-1"><a class="header-anchor" href="#mysql-高级主题" aria-hidden="true">#</a> MySQL 高级主题</h1><ul><li><a href="#mysql-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98">MySQL 高级主题</a><ul><li><a href="#%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E5%92%8C%E9%94%81%E5%AE%9A%E8%AF%AD%E5%8F%A5">事务控制和锁定语句</a><ul><li><a href="#%E9%94%81%E5%AE%9A%E8%AF%AD%E5%8F%A5">锁定语句</a></li><li><a href="#%E8%A7%A3%E9%94%81%E8%AF%AD%E5%8F%A5">解锁语句</a></li></ul></li><li><a href="#%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6">事务控制</a><ul><li><a href="#%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4">自动提交</a></li><li><a href="#%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4">手动提交</a><ul><li><a href="#%E4%BA%8B%E5%8A%A1%E8%A1%A8%E5%92%8C%E9%9D%9E%E4%BA%8B%E5%8A%A1%E8%A1%A8">事务表和非事务表</a></li></ul></li></ul></li><li><a href="#sql-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98">SQL 安全问题</a><ul><li><a href="#sql-%E6%B3%A8%E5%85%A5%E7%AE%80%E4%BB%8B">SQL 注入简介</a></li></ul></li><li><a href="#sql-mode">SQL Mode</a><ul><li><a href="#sql-mode-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98">SQL Mode 解决问题</a></li><li><a href="#sql-mode-%E4%B8%89%E7%A7%8D%E4%BD%9C%E7%94%A8%E5%9F%9F">SQL Mode 三种作用域</a></li></ul></li><li><a href="#sql-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">SQL 正则表达式</a></li><li><a href="#%E5%B8%B8%E8%A7%81-sql-%E6%8A%80%E5%B7%A7">常见 SQL 技巧</a><ul><li><a href="#rand-%E5%87%BD%E6%95%B0">RAND() 函数</a></li><li><a href="#group-by--with-rollup">GROUP BY + WITH ROLLUP</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D%E8%A1%A8%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98">数据库名、表名大小写问题</a></li><li><a href="#%E5%A4%96%E9%94%AE%E9%97%AE%E9%A2%98">外键问题</a></li></ul></li><li><a href="#mysql-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0">MySQL 常用函数</a><ul><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0">字符串函数</a></li><li><a href="#%E6%95%B0%E5%80%BC%E5%87%BD%E6%95%B0">数值函数</a></li><li><a href="#%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0">日期和时间函数</a></li><li><a href="#%E6%B5%81%E7%A8%8B%E5%87%BD%E6%95%B0">流程函数</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">其他函数</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><p>之前两篇文章带你了解了 MySQL 的基础语法和 MySQL 的进阶内容，那么这篇文章我们来了解一下 MySQL 中的高级内容。</p><h2 id="事务控制和锁定语句" tabindex="-1"><a class="header-anchor" href="#事务控制和锁定语句" aria-hidden="true">#</a> 事务控制和锁定语句</h2><p>我们知道，MyISAM 和 MEMORY 存储引擎支持<code>表级锁定(table-level locking)</code>，InnoDB 存储引擎支持<code>行级锁定(row-level locking)</code>，BDB 存储引擎支持<code>页级锁定(page-level locking)</code>。各个锁定级别的特点如下</p><p>页级锁：销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><p>表级锁：表级锁是对整张表进行加锁，MyISAM 和 MEMORY 主要支持表级锁，表级锁加锁快，不会出现死锁，锁的粒度比较粗，并发度最低</p><p>行级锁：行级锁可以说是 MySQL 中粒度最细的一种锁了，InnoDB 支持行级锁，行级锁容易发生死锁，并发度比较好，同时锁的开销也比较大。</p><p>MySQL 默认情况下支持表级锁定和行级锁定。但是在某些情况下需要手动控制事务以确保整个事务的完整性，下面我们就来探讨一下事务控制。但是在探讨事务控制之前我们先来认识一下两个锁定语句</p><h3 id="锁定语句" tabindex="-1"><a class="header-anchor" href="#锁定语句" aria-hidden="true">#</a> 锁定语句</h3><p>MySQL 的锁定语句主要有两个 <code>Lock</code> 和 <code>unLock</code>，Lock Tables 可用于锁定当前线程的表，就跟 Java 语法中的 Lock 锁的用法是一样的，如果表锁定，意味着其他线程不能再操作表，直到锁定被释放为止。如下图所示</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>lock table cxuan005 read;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOj1bR.png" alt=""></p><p>我们锁定了 cxuan005 的 read 锁，然后这时我们再进行一次查询，看看是否能够执行这条语句</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from cxuan005 where id = 111;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOj8V1.png" alt=""></p><p>可以看到，在进行 read 锁定了，我们仍旧能够执行查询语句。</p><p>现在我们另外起一个窗口，相当于另起了一个线程来进行查询操作。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from cxuan005;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjGUx.png" alt=""></p><p>这是第二个窗口执行查询的结果，可以看到，在一个线程执行 read 锁定后，其他线程仍然可以进行表的查询操作。</p><p>那么第二个线程能否执行更新操作呢？我们来看一下</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update cxuan005 set info=&#39;cxuan&#39; where id = 111;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjlr9.png" alt=""></p><p>发生了什么？怎么没有提示结果呢？其实这个情况下表示 cxuan005 已经被加上了 read 锁，由于当前线程不是持有锁的线程，所以当前线程无法执行更新。</p><h3 id="解锁语句" tabindex="-1"><a class="header-anchor" href="#解锁语句" aria-hidden="true">#</a> 解锁语句</h3><p>现在我们把窗口切换成持有 read 锁的线程，来进行 read 锁的解锁</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>unlock tables;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjQKJ.png" alt=""></p><p>在解锁完成前，进行更新的线程会一直等待，直到解锁完成后，才会进行更新。我们可以看一下更新线程的结果。</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjJ56.png" alt=""></p><p>可以看到，线程已经更新完毕，我们看一下更新的结果</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from cxuan005 where id = 111;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjtPK.png" alt=""></p><p>如上图所示，id = 111 的值已经被更新成了 cxuan。</p><h2 id="事务控制" tabindex="-1"><a class="header-anchor" href="#事务控制" aria-hidden="true">#</a> 事务控制</h2><p><code>事务(Transaction)</code> 是访问和更新数据库的基本执行单元，一个事务中可能会包含多个 SQL 语句，事务中的这些 SQL 语句要么都执行，要么都不执行，而 MySQL 它是一个关系型数据库，它自然也是支持事务的。事务同时也是区分关系型数据库和非关系型数据库的一个重要的方面。</p><p>在 MySQL 事务中，主要涉及的语法包含 <strong>SET AUTOCOMMIT、START TRANSACTION、COMMIT 和 ROLLBACK</strong> 等。</p><h3 id="自动提交" tabindex="-1"><a class="header-anchor" href="#自动提交" aria-hidden="true">#</a> 自动提交</h3><p>在 MySQL 中，事务默认是<code>自动提交(Autocommit)</code>的，如下所示</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show variables like &#39;autocommit&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjN8O.png" alt=""></p><p>在自动提交的模式下，每个 SQL 语句都会当作一个事务执行提交操作，例如我们上面使用的更新语句</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update cxuan005 set info=&#39;cxuan&#39; where id = 111;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果想要关闭数据库的自动提交应该怎么做呢？</p></blockquote><p>其实，MySQL 是可以关闭自动提交的，你可以执行</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set autocommit = 0;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjU2D.png" alt=""></p><p>然后我们再看一下自动提交是否关闭了，再次执行一下 show variables like &#39;autocommit&#39; 语句</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjaxe.png" alt=""></p><p>可以看到，自动提交已经关闭了，再次执行</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set autocommit = 1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会再次开启自动提交。</p><blockquote><p>这里注意一下特殊操作。</p><p>在 MySQL 中，存在一些特殊的命令，如果在事务中执行了这些命令，会马上强制执行 commit 提交事务；比如 DDL 语句(create table/drop table/alter/table)、lock tables 语句等等。</p><p>不过，常用的 select、insert、update 和 delete命令，都不会强制提交事务。</p></blockquote><h3 id="手动提交" tabindex="-1"><a class="header-anchor" href="#手动提交" aria-hidden="true">#</a> 手动提交</h3><p>如果需要手动 commit 和 rollback 的话，就需要明确的事务控制语句了。</p><p>典型的 MySQL 事务操作如下</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>start transaction;
... # 一条或者多条语句
commit;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中的 start transaction 就是事务的开始语句，编写 SQL 后会调用 commit 提交事务，然后将事务统一执行，如果 SQL 语句出现错误会自动调用 Rollback 进行回滚。</p><p>下面我们就通过示例来演示一下 MySQL 的事务，同样的，我们需要启动两个窗口来演示，为了便于区分，我们使用 mysql01 和 mysql02 来命名。</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjwKH.png" alt=""></p><p>我们用 <code>start transaction</code> 命令启动一个事务，然后再 cxuan005 表中插入一条数据，此时 mysql02 不做任何操作。涉及的 SQL 语句如下。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>start transaction;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOj0rd.png" alt=""></p><p>然后执行</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from cxuan005;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询一下 cxuan005 中的数据</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjrVI.png" alt=""></p><p>嗯。。。很多长度太长了，现在我们把所有的 info 数据都更新为 cxuan 。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update cxuan005 set info=&#39;cxuan&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjBqA.png" alt=""></p><p>更新完毕后，我们先不提交事务，分别在 mysql01 和 mysql02 中进行查询，发现只有 mysql01 窗口中的查询已经生效，而 mysql02 中还是更新前的数据</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjsat.png" alt=""></p><p>现在我们在 mysql01 中 commit 当前事务，然后在 mysql02 中查询，发现数据已经被修改了。</p><p>除了 commit 之外，MySQL 中还有 <code>commit and chain</code> 命令，这个命令会提交当前事务并且重新开启一个新的事务。如下代码所示</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>start transaction; # 开启一个新的事务
insert into cxuan005(id,info) values (555,&#39;cxuan005&#39;); # 插入一条数据
commit and chain; # 提交当前事务并重新开启一个事务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个事务操作，在 commit and chain 键入后，我们可以再次执行 SQL 语句</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update cxuan005 set info = &#39;cxuan&#39; where id = 555;
commit;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次查询</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from cxuan005;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjgG8.png" alt=""></p><p>执行后，可以发现，我们仅仅使用了一个 start transaction 命令就执行了两次事务操作。</p><p>如果在手动提交的事务中，你发现有一条 SQL 语句写的不正确或者有其他原因需要回滚，那么此时你就会用到 <code>rollback</code> 语句，它会回滚当前事务，相当于什么也没发生。如下代码所示。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>start transaction;
delete from cxuan005 where id = 555;
rollback;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里<code>切忌</code>一点：delete 删除语句一定要加 where ，不加 where 语句的删除就是耍流氓。</p></blockquote><p>在同一个事务操作中，最好使用相同存储引擎的表，如果使用不同存储引擎的表后，rollback 语句会对非事务类型的表进行特别处理，因此 commit 、rollback 只能对事务类型的表进行提交和回滚。</p><p>我们提交的事务一般都会被记录到二进制的日志中，但是如果一个事务中包含非事务类型的表，那么回滚操作也会被记录到二进制日志中，以确保非事务类型的表可以被复制到从数据库中。</p><p>这里解释一下什么是事务表和非事务表</p><h4 id="事务表和非事务表" tabindex="-1"><a class="header-anchor" href="#事务表和非事务表" aria-hidden="true">#</a> 事务表和非事务表</h4><p>事务表故名思义就是支持事务的表，支不支持事务和 MySQL 的存储类型有关，一般情况下，<code>InnoDB</code> 存储引擎的表是支持事务的，关于 InnoDB 的知识，我们会在后面详细介绍。</p><p>非事务表相应的就是不支持事务的表，在 MySQL 中，存储引擎 <code>MyISAM</code> 是不支持事务的，非事务表的特点是不支持回滚。</p><p>对于回滚的话，还要讲一点就是 <code>SAVEPOINT</code>，它能指定事务回滚的一部分，但是不能指定事务提交的一部分。 SAVEPOINT 可以指定多个，在满足不同条件的同时，回滚不同的 SAVEPOINT。需要注意的是，如果定义了两个相同名称的 SAVEPOINT，则后面定义的 SAVEPOINT 会覆盖之前的定义。如果 SAVEPOINT 不再需要的话，可以通过 <code>RELEASE SAVEPOINT</code> 来进行删除。删除后的 SAVEPOINT 不能再执行 ROLLBACK TO SAVEPOINT 命令。</p><p>我们通过一个示例来进行模拟不同的 SAVEPOINT</p><p>首先先启动一个事务 ，向 cxuan005 中插入一条数据，然后进行查询，那么是可以查询到这条记录的</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>start transaction;
insert into cxuan005(id,info) values(666,&#39;cxuan666&#39;);
select * from cxuan005 where id = 666;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询之后的记录如下</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjyIP.png" alt=""></p><p>然后我们定义一个 SAVEPOINT，如下所示</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>savepoint test;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后继续插入一条记录</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>insert into cxuan005(id,info) values(777,&#39;cxuan777&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时就可以查询到两条新增记录了，id 是 666 和 777 的记录。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from cxuan005 where id = 777;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjcPf.png" alt=""></p><p>那么我们可以回滚到刚刚定义的 SAVEPOINT</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>rollback to savepoint test;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次查询 cxuan005 这个表，可以看到，只有 id=666 的这条记录插入进来了，说明 id=777 这条记录已经被回滚了。</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjRxg.png" alt=""></p><p>此时我们看到的都是 mysql01 中事务还没有提交前的状态，所以这时候 mysql02 中执行查询操作是看不到 666 这条记录的。</p><p>然后我们在 mysql01 中执行 commit 操作，那么此时在 mysql02 中就可以查询到这条记录了。</p><h2 id="sql-安全问题" tabindex="-1"><a class="header-anchor" href="#sql-安全问题" aria-hidden="true">#</a> SQL 安全问题</h2><p>SQL 安全问题应该是我们程序员比较忽视的一个地方了。日常开发中，我们一般只会关心 SQL 能不能解决我们的业务问题，能不能把数据查出来，而对于 SQL 问题，我们一般都认为这是 DBA 的活，其实我们 CRUD 程序员也应该了解一下 SQL 的安全问题。</p><h3 id="sql-注入简介" tabindex="-1"><a class="header-anchor" href="#sql-注入简介" aria-hidden="true">#</a> SQL 注入简介</h3><p>SQL 注入就是利用某些数据库的外部接口将用户数据插入到实际的 SQL 中，从而达到入侵<code>数据库</code>的目的。SQL 注入是一种常见的网络攻击的方式，它不是利用操作系统的 BUG 来实现攻击的。SQL 主要是针对程序员编写时的疏忽来入侵的。</p><p>SQL 注入攻击有很大的危害，攻击者可以利用它读取、修改或者删除数据库内的数据，获取数据库中的用户名和密码，甚至获得数据库管理员的权限。并且 SQL 注入一般比较难以防范。</p><h2 id="sql-mode" tabindex="-1"><a class="header-anchor" href="#sql-mode" aria-hidden="true">#</a> SQL Mode</h2><p>MySQL 可以运行在不同的 SQL Mode 模式下，不同的 SQL Mode 定义了不同的 SQL 语法，数据校验规则，这样就能够在不同的环境中使用 MySQL ，下面我们就来介绍一下 SQL Mode。</p><h3 id="sql-mode-解决问题" tabindex="-1"><a class="header-anchor" href="#sql-mode-解决问题" aria-hidden="true">#</a> SQL Mode 解决问题</h3><p>SQL Mode 可以解决下面这几种问题</p><ul><li>通过设置 SQL Mode，可以完成不同严格程度的数据校验，有效保障数据的准确性。</li><li>设置 SQL Mode 为 <code>ANSI</code> 模式，来保证大多数 SQL 符合标准的 SQL 语法，这样应用在不同数据库的迁移中，不需要对 SQL 进行较大的改变</li><li>数据在不同数据库的迁移中，通过改变 SQL Mode 能够更方便的进行迁移。</li></ul><p>下面我们就通过示例来演示一下 SQL Mode 用法</p><p>我们可以通过</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select @@sql_mode;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来查看默认的 SQL Mode，如下是我的数据库所支持的 SQL Mode</p><p><img src="https://s3.ax1x.com/2021/01/26/sOj2RS.png" alt=""></p><p>涉及到很多 SQL Mode，下面是这些 SQL Mode 的解释</p><p><code>ONLY_FULL_GROUP_BY</code>：这个模式会对 GROUP BY 进行合法性检查，对于 GROUP BY 操作，如果在SELECT 中的列，没有在 GROUP BY 中出现，那么将认为这个 SQL 是不合法的，因为列不在 GROUP BY 从句中</p><p>同样举个例子，我们现在查询一下 cxuan005 的 id 和 info 字段。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select id,info from cxuan005;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样是可以运行的</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjhrj.png" alt=""></p><p>然后我们使用 GROUP BY 字句进行分组，这里只对 info 进行分组，我们看一下会出现什么情况</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select id,info from cxuan005 group by info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjfMQ.png" alt=""></p><p>我们可以从错误原因中看到，这条 SQL 语句是不符合 ONLY_FULL_GROUP_BY 的这条 SQL Mode 的。因为我们只对 info 进行分组了，没有对 id 进行分组，我们把 SQL 语句改成如下形式</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select id,info from cxuan005 group by id,info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOj4qs.png" alt=""></p><p>这样 SQL 就能正确执行了。</p><p>当然，我们也可以删除 sql_mode = ONLY_FULL_GROUP_BY 的这条 Mode，可以使用</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET sql_mode=(SELECT REPLACE(@@sql_mode,&#39;ONLY_FULL_GROUP_BY&#39;,&#39;&#39;));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来进行删除，删除后我们使用分组语句就可以放飞自我了。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select id,info from cxuan005 group by info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjIZn.png" alt=""></p><p>但是这种做法只是暂时的修改，我们可以修改配置文件 my.ini 中的 sql_mode= STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</p><p><code>STRICT_TRANS_TABLES</code>：这就是严格模式，在这个模式下会对数据进行严格的校验，错误数据不能插入，报error 错误。如果不能将给定的值插入到事务表中，则放弃该语句。对于非事务表，如果值出现在单行语句或多行语句的第1行，则放弃该语句。</p><blockquote><p>当使用 innodb 存储引擎表时，考虑使用 innodb_strict_mode 模式的 sql_mode，它能增量额外的错误检测功能。</p></blockquote><p><code>NO_ZERO_IN_DATE</code>：这个模式影响着日期中的月份和天数是否可以为 0（注意年份是非 0 的），这个模式也取决于严格模式是否被启用。如果这个模式未启用，那么日期中的零部分被允许并且插入没有警告。如果这个模式启用，那么日期中的零部分插入被作为 <code>0000-00-00</code> 并且产生一个警告。</p><p>这个模式需要注意下，如果启用的话，需要 <code>STRICT_TRANS_TABLES</code> 和 <code>NO_ZERO_IN_DATE</code> 同时启用，否则不起作用，也就是</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session sql_mode=&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们换表了，使用 cxuan003 这张表，表结构如下</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjTI0.png" alt=""></p><p>我们主要测试日期的使用，在 cxuan003 中插入一条日期为 <code>0000-00-00</code> 的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>insert into cxuan003 values(111,&#39;study&#39;,&#39;0000-00-00&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现能够执行成功，但是把年月日各自变为 0 之后再进行插入，则会插入失败。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>insert into cxuan003 values(111,&#39;study&#39;,&#39;2021-00-00&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjoaq.png" alt=""></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>insert into cxuan003 values(111,&#39;study&#39;,&#39;2021-01-00&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjHiV.png" alt=""></p><p>这些组合有很多，我这里就不再细致演示了，读者可以自行测试。</p><p>如果要插入 <code>0000-00-00</code> 这样的数据，必须设置 <code>NO_ZERO_IN_DATE</code> 和 <code>NO_ZERO_DATE</code>。</p><p><code>ERROR_FOR_DIVISION_BY_ZERO</code>：如果这个模式未启用，那么零除操作将会插入空值并且不会产生警告；如果这个模式启用，零除操作插入空值并产生警告；如果这个模式和严格模式都启用，零除从操作将会产生一个错误。</p><p><code>NO_AUTO_CREATE_USER</code>：禁止使用 grant 语句自动创建用户，除非认证信息被指定。</p><p><code>NO_ENGINE_SUBSTITUTION</code>：此模式指定当执行 create 语句或者 alter 语句指定的存储引擎没有启用或者没有编译时，控制默认存储引擎的自动切换。默认是启用状态的。</p><h3 id="sql-mode-三种作用域" tabindex="-1"><a class="header-anchor" href="#sql-mode-三种作用域" aria-hidden="true">#</a> SQL Mode 三种作用域</h3><p>SQL Mode 按作用区域和时间可分为 3。个级别，分别是<strong>会话级别，全局级别，配置（永久生效）级别</strong>。</p><p>我们上面使用的 SQL Mode 都是 <code>会话级别</code>，会话级别就是当前窗口域有效。它的设置方式是</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set @@session.sql_mode=&#39;xx_mode&#39;
set session sql_mode=&#39;xx_mode&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>全局域就是当前会话关闭不失效，但是在 MySQL 重启后失效。它的设置方式是</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set global sql_mode=&#39;xx_mode&#39;;
set @@global.sql_mode=&#39;xx_mode&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置域就是在 <code>vi /etc/my.cnf</code> 里面添加</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[mysqld]
sql-mode = &quot;xx_mode&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置域在保存退出后，重启服务器，即可永久生效。</p><h2 id="sql-正则表达式" tabindex="-1"><a class="header-anchor" href="#sql-正则表达式" aria-hidden="true">#</a> SQL 正则表达式</h2><p>正则表达式相信大家应该都用过，不过你在 MySQL 中用过正则表达式吗？下面我们就来聊一聊 SQL 中的正则表达式。</p><p><code>正则表达式(Regular Expression)</code> 是指一个用来描述或者匹配字符串的句法规则。正则表达式通常用来检索和替换某个文本中的文本内容。很多语言都支持正则表达式，MySQL 同样也不例外，MySQL 利用 <code>REGEXP</code> 命令提供给用户扩展的正则表达式功能。下面是 MySQL 中正则表达式的一些规则。</p><p><img src="https://s3.ax1x.com/2021/01/26/sOjLzF.png" alt=""></p><p>下面来演示一下正则表达式的用法</p><ul><li><p><code>^</code> 在字符串的开始进行匹配，根据返回的结果来判断是否匹配，1 = 匹配，0 = 不匹配。下面尝试匹配字符串 <code>aaaabbbccc</code> 是否以字符串 <code>a</code> 为开始</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select &#39;aaaabbbccc&#39; regexp &#39;^a&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjbGT.png" alt=""></p></li><li><p>同样的，<code>$</code> 会在末尾处进行匹配，如下所示</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select &#39;aaaabbbccc&#39; regexp &#39;c$&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://s3.ax1x.com/2021/01/26/sOjqRU.png" alt=""></p></li><li><p><code>.</code> 匹配单个任意字符</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select &#39;berska&#39; regexp &#39;.s&#39;, &#39;zara&#39; regexp &#39;.a&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><!-- &lt;img src=&quot;/Users/mr.l/Library/Application Support/typora-user-images/image-20210123210447592.png&quot; alt=&quot;image-20210123210447592&quot; style=&quot;zoom:67%;&quot; /&gt; --></li><li><p><code>[...]</code> 表示匹配括号内的任意字符，示例如下</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select &#39;whosyourdaddy&#39; regexp &#39;[abc]&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><!-- ![image-20210123210746829](/Users/mr.l/Library/Application Support/typora-user-images/image-20210123210746829.png) --></li><li><p><code>[^...]</code> 匹配括号内不包含的任意字符，和 <code>[...]</code> 是相反的，如果有任何匹配不上，返回 0 ，全部匹配上返回 1。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select &#39;x&#39; regexp &#39;[^xyz]&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><!-- ![image-20210123222923573](/Users/mr.l/Library/Application Support/typora-user-images/image-20210123222923573.png) --></li><li><p><code>n*</code> 表示匹配零个或者多个 n 字符串，如下</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select &#39;aabbcc&#39; regexp &#39;d*&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><!-- ![image-20210123223316050](/Users/mr.l/Library/Application Support/typora-user-images/image-20210123223316050.png) --><p>没有 d 出现也可以返回 1 ，因为 * 表示 0 或者多个。</p></li><li><p><code>n+</code> 表示匹配 1 个或者 n 个字符串</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select &#39;aabbcc&#39; regexp &#39;d+&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><!-- ![image-20210123224310069](/Users/mr.l/Library/Application Support/typora-user-images/image-20210123224310069.png) --></li><li><p><code>n?</code> 的用法和 n+ 类似，只不过 n? 可以匹配空串</p></li></ul><h2 id="常见-sql-技巧" tabindex="-1"><a class="header-anchor" href="#常见-sql-技巧" aria-hidden="true">#</a> 常见 SQL 技巧</h2><h3 id="rand-函数" tabindex="-1"><a class="header-anchor" href="#rand-函数" aria-hidden="true">#</a> RAND() 函数</h3><p>大多数数据库都会提供产生随机数的函数，通过这些函数可以产生随机数，也可以使用从数据库表中抽取随机产生的记录，这对统计分析来说很有用。</p><p>在 MySQL 中，通常使用 <code>RAND()</code> 函数来产生随机数。RAND() 和 ORDER BY 组合完成数据抽取功能，如下所示。</p><p>我们新建一张表用于数据检索。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE \`clerk_Info\` (
  \`id\` int(11) NOT NULL,
  \`name\` varchar(255) DEFAULT NULL,
  \`salary\` decimal(10,2) DEFAULT NULL,
  \`companyId\` int(10) DEFAULT NULL,
  PRIMARY KEY (\`id\`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后插入一些数据，插入完成后的数据如下。</p>`,185),o=e("p",null,"然后我们可以使用 RAND() 函数进行随机检索数据行",-1),c=e("div",{class:"language-mysql line-numbers-mode","data-ext":"mysql"},[e("pre",{class:"language-mysql"},[e("code",null,`select * from clerk_info order by rand();
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),p=e("p",null,"检索完成后的数据如下",-1),m=s(`<p>多次查询后发现每次检索的数据顺序都是随机的。</p><p>这个函数多用于随机抽样，比如选取一定数量的样本在进行随机排序，需要用到 <code>limit</code> 关键字。</p><h3 id="group-by-with-rollup" tabindex="-1"><a class="header-anchor" href="#group-by-with-rollup" aria-hidden="true">#</a> GROUP BY + WITH ROLLUP</h3><p>我们经常使用 GROUP BY 语句，但是你用过 <code>GROUP BY</code> 和 <code>WITH ROLLUP</code> 一起使用的吗？使用 GROUP BY 和 WITH ROLLUP 字句可以检索出更多的分组集合信息。</p><p>我们仍旧对 clerk_info 表进行操作，我们对 name 和 salary 进行分组统计工资总数。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select name,sum(salary) from clerk_info group by name with rollup;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),u=s('<p>可以看到上面的表按照 name 进行分组，然后再对 money 进行统计。</p><p>也就是说 GROUP BY 语句执行完成后可以满足用户想要的任何一个分组以及分组组合的聚合信息值。</p><blockquote><p>这里需要注意一点，不能同时使用 ORDER BY 字句对结果进行排序，ROLLUP 和 ORDER BY 是互斥的。</p></blockquote><h3 id="数据库名、表名大小写问题" tabindex="-1"><a class="header-anchor" href="#数据库名、表名大小写问题" aria-hidden="true">#</a> 数据库名、表名大小写问题</h3><p>在 MySQL 中，<strong>数据库中的每个表至少对应数据库目录中的一个文件，当然这取决于存储引擎的实现了</strong>。不同的操作系统对大小写的敏感性决定了数据库和表名的大小写的敏感性。在 UNIX 操作系统中是对大小写敏感的，因此数据库名和表名也是具有敏感性的，而到了 Windows 则不存在敏感性问题，因为 Windows 操作系统本身对大小写不敏感。<strong>列、索引、触发器</strong>在任何平台上都对大小写不敏感。</p><p>在 MySQL 中，数据库名和表名是由 <code>lower_case_tables_name</code> 系统变量决定的。可以在启动 <code>mysqld</code> 时设置这个系统变量。下面是 <code>lower_case_tables_name</code> 的值。</p>',6),g=s('<p>如果只在一个平台上使用 MySQL 的话，通常不需要修改 <code>lower_case_tables_name</code> 变量。如果想要在不同系统系统之间迁移表就会涉及到大小写问题，因为 UNIX 中 clerk_info 和 CLERK_INFO 被认为是两个不同的表，而 Windows 中则认为是一个。在 UNIX 中使用 lower_case_tables_name=0， 而在 Windows 中使用lower_case_tables_name=2，这样可以保留数据库名和表名的大小写，但是不能保证所有的 SQL 查询中使用的表名和数据库名的大小写相同。如果 SQL 语句中没有正确引用数据库名和表名的大小写，那么虽然在 Windows 中能正确执行，但是如果将查询转移到 UNIX 中，大小写不正确，将会导致查询失败。</p><h3 id="外键问题" tabindex="-1"><a class="header-anchor" href="#外键问题" aria-hidden="true">#</a> 外键问题</h3><p>这里需要注意一个问题，<code>InnoDB</code> 存储引擎是支持外键的，而 <code>MyISAM</code> 存储引擎是不支持外键的，因此在 MyISAM 中设置外键会不起作用。</p><h2 id="mysql-常用函数" tabindex="-1"><a class="header-anchor" href="#mysql-常用函数" aria-hidden="true">#</a> MySQL 常用函数</h2><p>下面我们来了解一下 MySQL 函数，MySQL 函数也是我们日常开发过程中经常使用的，选用合适的函数能够提高我们的开发效率，下面我们就来一起认识一下这些函数</p><h3 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数" aria-hidden="true">#</a> 字符串函数</h3><p>字符串函数是最常用的一种函数了，MySQL 也是支持很多种字符串函数，下面是 MySQL 支持的字符串函数表</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>LOWER</td><td>将字符串所有字符变为小写</td></tr><tr><td>UPPER</td><td>将字符串所有字符变为大写</td></tr><tr><td>CONCAT</td><td>进行字符串拼接</td></tr><tr><td>LEFT</td><td>返回字符串最左边的字符</td></tr><tr><td>RIGHT</td><td>返回字符串最右边的字符</td></tr><tr><td>INSERT</td><td>字符串替换</td></tr><tr><td>LTRIM</td><td>去掉字符串左边的空格</td></tr><tr><td>RTRIM</td><td>去掉字符串右边的空格</td></tr><tr><td>REPEAT</td><td>返回重复的结果</td></tr><tr><td>TRIM</td><td>去掉字符串行尾和行头的空格</td></tr><tr><td>SUBSTRING</td><td>返回指定的字符串</td></tr><tr><td>LPAD</td><td>用字符串对最左边进行填充</td></tr><tr><td>RPAD</td><td>用字符串对最右边进行填充</td></tr><tr><td>STRCMP</td><td>比较字符串 s1 和 s2</td></tr><tr><td>REPLACE</td><td>进行字符串替换</td></tr></tbody></table><p>下面通过具体的示例演示一下每个函数的用法</p><ul><li>LOWER(str) 和 UPPER(str) 函数：用于转换大小写</li></ul>',10),y=e("ul",null,[e("li",null,"CONCAT(s1,s2 ... sn) ：把传入的参数拼接成一个字符串")],-1),h=e("p",null,[l("上面把 "),e("code",null,"c xu an"),l(" 拼接成为了一个字符串，另外需要注意一点，任何和 NULL 进行字符串拼接的结果都是 NULL。")],-1),v=e("ul",null,[e("li",null,"LEFT(str,x) 和 RIGHT(str,x) 函数：分别返回字符串最左边的 x 个字符和最右边的 x 个字符。如果第二个参数是 NULL，那么将不会返回任何字符串")],-1),b=e("ul",null,[e("li",null,"INSERT(str,x,y,instr) ： 将字符串 str 从指定 x 的位置开始， 取 y 个长度的字串替换为 instr。")],-1),E=e("ul",null,[e("li",null,"LTRIM(str) 和 RTRIM(str) 分别表示去掉字符串 str 左侧和右侧的空格")],-1),A=e("ul",null,[e("li",null,"REPEAT(str,x) 函数：返回 str 重复 x 次的结果")],-1),x=e("ul",null,[e("li",null,"TRIM(str) 函数：用于去掉目标字符串的空格")],-1),_=e("ul",null,[e("li",null,"SUBSTRING(str,x,y) 函数：返回从字符串 str 中第 x 位置起 y 个字符长度的字符串")],-1),L=e("ul",null,[e("li",null,"LPAD(str,n,pad) 和 RPAD(str,n,pad) 函数：用字符串 pad 对 str 左边和右边进行填充，直到长度为 n 个字符长度")],-1),S=e("ul",null,[e("li",null,"STRCMP(s1,s2) 用于比较字符串 s1 和 s2 的 ASCII 值大小。如果 s1 < s2，则返回 -1；如果 s1 = s2 ，返回 0 ；如果 s1 > s2 ，返回 1。")],-1),q=e("ul",null,[e("li",null,"REPLACE(str,a,b) : 用字符串 b 替换字符串 str 种所有出现的字符串 a")],-1),O=s('<h3 id="数值函数" tabindex="-1"><a class="header-anchor" href="#数值函数" aria-hidden="true">#</a> 数值函数</h3><p>MySQL 支持数值函数，这些函数能够处理很多数值运算。下面我们一起来学习一下 MySQL 中的数值函数，下面是所有的数值函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ABS</td><td>返回绝对值</td></tr><tr><td>CEIL</td><td>返回大于某个值的最大整数值</td></tr><tr><td>MOD</td><td>返回模</td></tr><tr><td>ROUND</td><td>四舍五入</td></tr><tr><td>FLOOR</td><td>返回小于某个值的最大整数值</td></tr><tr><td>TRUNCATE</td><td>返回数字截断小数的结果</td></tr><tr><td>RAND</td><td>返回 0 - 1 的随机值</td></tr></tbody></table><p>下面我们还是以实践为主来聊一聊这些用法</p><ul><li>ABS(x) 函数：返回 x 的绝对值</li></ul>',5),T=e("ul",null,[e("li",null,"CEIL(x) 函数： 返回大于 x 的整数")],-1),R=e("ul",null,[e("li",null,"MOD(x,y)，对 x 和 y 进行取模操作")],-1),U=e("ul",null,[e("li",null,"ROUND(x,y) 返回 x 四舍五入后保留 y 位小数的值；如果是整数，那么 y 位就是 0 ；如果不指定 y ，那么 y 默认也是 0 。")],-1),N=e("ul",null,[e("li",null,"FLOOR(x) : 返回小于 x 的最大整数，用法与 CEIL 相反")],-1),M=e("ul",null,[e("li",null,"TRUNCATE(x,y): 返回数字 x 截断为 y 位小数的结果， TRUNCATE 知识截断，并不是四舍五入。")],-1),I=e("ul",null,[e("li",null,"RAND() ：返回 0 到 1 的随机值")],-1),B=s('<h3 id="日期和时间函数" tabindex="-1"><a class="header-anchor" href="#日期和时间函数" aria-hidden="true">#</a> 日期和时间函数</h3><p>日期和时间函数也是 MySQL 中非常重要的一部分，下面我们就来一起认识一下这些函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>NOW</td><td>返回当前的日期和时间</td></tr><tr><td>WEEK</td><td>返回一年中的第几周</td></tr><tr><td>YEAR</td><td>返回日期的年份</td></tr><tr><td>HOUR</td><td>返回小时值</td></tr><tr><td>MINUTE</td><td>返回分钟值</td></tr><tr><td>MONTHNAME</td><td>返回月份名</td></tr><tr><td>CURDATE</td><td>返回当前日期</td></tr><tr><td>CURTIME</td><td>返回当前时间</td></tr><tr><td>UNIX_TIMESTAMP</td><td>返回日期 UNIX 时间戳</td></tr><tr><td>DATE_FORMAT</td><td>返回按照字符串格式化的日期</td></tr><tr><td>FROM_UNIXTIME</td><td>返回 UNIX 时间戳的日期值</td></tr><tr><td>DATE_ADD</td><td>返回日期时间 + 上一个时间间隔</td></tr><tr><td>DATEDIFF</td><td>返回起始时间和结束时间之间的天数</td></tr></tbody></table><p>下面结合示例来讲解一下每个函数的使用</p><ul><li>NOW(): 返回当前的日期和时间</li></ul>',5),f=e("ul",null,[e("li",null,"WEEK(DATE) 和 YEAR(DATE) ：前者返回的是一年中的第几周，后者返回的是给定日期的哪一年")],-1),D=e("ul",null,[e("li",null,"HOUR(time) 和 MINUTE(time) : 返回给定时间的小时，后者返回给定时间的分钟")],-1),Q=e("ul",null,[e("li",null,"MONTHNAME(date) 函数：返回 date 的英文月份")],-1),P=e("ul",null,[e("li",null,"CURDATE() 函数：返回当前日期，只包含年月日")],-1),C=e("ul",null,[e("li",null,"CURTIME() 函数：返回当前时间，只包含时分秒")],-1),z=e("ul",null,[e("li",null,"UNIX_TIMESTAMP(date) : 返回 UNIX 的时间戳")],-1),k=e("ul",null,[e("li",null,"FROM_UNIXTIME(date) : 返回 UNIXTIME 时间戳的日期值，和 UNIX_TIMESTAMP 相反")],-1),Y=e("ul",null,[e("li",null,"DATE_FORMAT(date,fmt) 函数：按照字符串 fmt 对 date 进行格式化，格式化后按照指定日期格式显示")],-1),F=e("p",null,"具体的日期格式可以参考这篇文章 https://blog.csdn.net/weixin_38703170/article/details/82177837",-1),j=e("p",null,[l("我们演示一下将当前日期显示为"),e("strong",null,"年月日"),l("的这种形式，使用的日期格式是 "),e("strong",null,"%M %D %Y"),l("。")],-1),w=s("<ul><li>DATE_ADD(date, interval, expr type) 函数：返回与所给日期 date 相差 interval 时间段的日期</li></ul><p>interval 表示间隔类型的关键字，expr 是表达式，这个表达式对应后面的类型，type 是间隔类型，MySQL 提供了 13 种时间间隔类型</p><table><thead><tr><th>表达式类型</th><th>描述</th><th>格式</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>YY</td></tr><tr><td>MONTH</td><td>月</td><td>MM</td></tr><tr><td>DAY</td><td>日</td><td>DD</td></tr><tr><td>HOUR</td><td>小时</td><td>hh</td></tr><tr><td>MINUTE</td><td>分</td><td>mm</td></tr><tr><td>SECOND</td><td>秒</td><td>ss</td></tr><tr><td>YEAR_MONTH</td><td>年和月</td><td>YY-MM</td></tr><tr><td>DAY_HOUR</td><td>日和小时</td><td>DD hh</td></tr><tr><td>DAY_MINUTE</td><td>日和分钟</td><td>DD hh : mm</td></tr><tr><td>DAY_SECOND</td><td>日和秒</td><td>DD hh ：mm ：ss</td></tr><tr><td>HOUR_MINUTE</td><td>小时和分</td><td>hh:mm</td></tr><tr><td>HOUR_SECOND</td><td>小时和秒</td><td>hh:ss</td></tr><tr><td>MINUTE_SECOND</td><td>分钟和秒</td><td>mm:ss</td></tr></tbody></table><ul><li>DATE_DIFF(date1, date2) 用来计算两个日期之间相差的天数</li></ul>",4),G=s('<p>查看离 2021 - 01 - 01 还有多少天</p><h3 id="流程函数" tabindex="-1"><a class="header-anchor" href="#流程函数" aria-hidden="true">#</a> 流程函数</h3><p>流程函数也是很常用的一类函数，用户可以使用这类函数在 SQL 中实现条件选择。这样做能够提高查询效率。下表列出了这些流程函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value,t f)</td><td>如果 value 是真，返回 t；否则返回 f</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果 value1 不为 NULL，返回 value1，否则返回 value2。</td></tr><tr><td>CASE WHEN[value1] THEN[result1] ...ELSE[default] END</td><td>如果 value1 是真，返回 result1，否则返回 default</td></tr><tr><td>CASE[expr] WHEN[value1] THEN [result1]... ELSE[default] END</td><td>如果 expr 等于 value1， 返回 result1， 否则返回 default</td></tr></tbody></table><h3 id="其他函数" tabindex="-1"><a class="header-anchor" href="#其他函数" aria-hidden="true">#</a> 其他函数</h3><p>除了我们介绍过的字符串函数、日期和时间函数、流程函数，还有一些函数并不属于上面三类函数，它们是</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>VERSION</td><td>返回当前数据库的版本</td></tr><tr><td>DATABASE</td><td>返回当前数据库名</td></tr><tr><td>USER</td><td>返回当前登陆用户名</td></tr><tr><td>PASSWORD</td><td>返回字符串的加密版本</td></tr><tr><td>MD5</td><td>返回 MD5 值</td></tr><tr><td>INET_ATON(IP)</td><td>返回 IP 地址的数字表示</td></tr><tr><td>INET_NTOA(num)</td><td>返回数字代表的 IP 地址</td></tr></tbody></table><p>下面来看一下具体的使用</p><ul><li>VERSION: 返回当前数据库版本</li></ul>',9),H=e("ul",null,[e("li",null,"DATABASE: 返回当前的数据库名")],-1),V=e("ul",null,[e("li",null,"USER : 返回当前登录用户名")],-1),W=e("ul",null,[e("li",null,"PASSWORD(str) : 返回字符串的加密版本，例如")],-1),X=e("ul",null,[e("li",null,"MD5(str) 函数：返回字符串 str 的 MD5 值")],-1),Z=e("ul",null,[e("li",null,"INET_ATON(IP): 返回 IP 的网络字节序列")],-1),K=e("ul",null,[e("li",null,"INET_NTOA(num)函数：返回网络字节序列代表的 IP 地址，与 INET_ATON 相对")],-1),J=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),l(" 总结")],-1),$=e("p",null,"这篇文章我带你手把手撸了一波 MySQL 的高级内容，其实说高级也不一定真的高级或者说难，其实就是区分不同梯度的东西。",-1),ee=e("p",null,[e("img",{src:"https://tva1.sinaimg.cn/large/008i3skNly1gsivkbczxoj31l20t8al5.jpg",alt:"image-20210716163352584"})],-1),ae=e("p",null,[e("img",{src:"https://tva1.sinaimg.cn/large/008i3skNly1gsivl4khz9j31d60h8mze.jpg",alt:"image-20210716163433337"})],-1);function se(le,ie){return t(),d("div",null,[n,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20210124084948449.png" alt="image-20210124084948449" style="zoom:67%;" /> '),o,c,p,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20210124085333652.png" alt="image-20210124085333652" style="zoom:67%;" /> '),m,a(" ![image-20210124125743028](/Users/mr.l/Library/Application Support/typora-user-images/image-20210124125743028.png) "),u,a(" ![image-20210124131941141](/Users/mr.l/Library/Application Support/typora-user-images/image-20210124131941141.png) "),g,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618164012868.png" alt="image-20200618164012868" style="zoom: 67%;" /> '),y,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618164319587.png" alt="image-20200618164319587" style="zoom:67%;" /> '),h,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618164428383.png" alt="image-20200618164428383" style="zoom:67%;" /> '),v,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618172529748.png" alt="image-20200618172529748" style="zoom:67%;" /> '),b,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618184422862.png" alt="image-20200618184422862" style="zoom:67%;" /> '),E,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618184615703.png" alt="image-20200618184615703" style="zoom:67%;" /> '),A,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618184850749.png" alt="image-20200618184850749" style="zoom:67%;" /> '),x,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618190739027.png" alt="image-20200618190739027" style="zoom:67%;" /> '),_,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618190933606.png" alt="image-20200618190933606" style="zoom:67%;" /> '),L,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618191304880.png" alt="image-20200618191304880" style="zoom:67%;" /> '),S,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618191457478.png" alt="image-20200618191457478" style="zoom:67%;" /> '),q,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618185040904.png" alt="image-20200618185040904" style="zoom:67%;" /> '),O,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618194657865.png" alt="image-20200618194657865" style="zoom:67%;" /> '),T,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618194939934.png" alt="image-20200618194939934" style="zoom:67%;" /> '),R,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618195052733.png" alt="image-20200618195052733" style="zoom:67%;" /> '),U,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618230452093.png" alt="image-20200618230452093" style="zoom:67%;" /> '),N,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618230600793.png" alt="image-20200618230600793" style="zoom:67%;" /> '),M,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618230848465.png" alt="image-20200618230848465" style="zoom:67%;" /> '),I,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200618231058270.png" alt="image-20200618231058270" style="zoom:67%;" /> '),B,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619142036108.png" alt="image-20200619142036108" style="zoom:67%;" /> '),f,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619142356885.png" alt="image-20200619142356885" style="zoom:67%;" /> '),D,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619142526187.png" alt="image-20200619142526187" style="zoom:67%;" /> '),Q,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619142957654.png" alt="image-20200619142957654" style="zoom:67%;" /> '),P,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619143225773.png" alt="image-20200619143225773" style="zoom:67%;" /> '),C,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619143304467.png" alt="image-20200619143304467" style="zoom:67%;" /> '),z,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619143408681.png" alt="image-20200619143408681" style="zoom:67%;" /> '),k,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619143532109.png" alt="image-20200619143532109" style="zoom:67%;" /> '),Y,F,j,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619145256956.png" alt="image-20200619145256956" style="zoom:67%;" /> '),w,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619150346397.png" alt="image-20200619150346397" style="zoom:67%;" /> '),G,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619170425342.png" alt="image-20200619170425342" style="zoom:67%;" /> '),H,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619170514694.png" alt="image-20200619170514694" style="zoom:67%;" /> '),V,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619170650887.png" alt="image-20200619170650887" style="zoom:67%;" /> '),W,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619170838908.png" alt="image-20200619170838908" style="zoom:67%;" /> '),X,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619171240119.png" alt="image-20200619171240119" style="zoom:67%;" /> '),Z,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619171425647.png" alt="image-20200619171425647" style="zoom:67%;" /> '),K,a(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200619171523449.png" alt="image-20200619171523449" style="zoom:67%;" /> '),J,$,ee,ae])}const de=i(r,[["render",se],["__file","mysql-improve.html.vue"]]);export{de as default};
