import{_ as s,r as i,o,c as r,a as e,b as t,d as a,e as l}from"./app-3RcBQnkC.js";const c={},h=e("h1",{id:"《chatgpt-微服务应用体系构建》-chatgpt-sdk-第2节-流式应答会话设计实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#《chatgpt-微服务应用体系构建》-chatgpt-sdk-第2节-流式应答会话设计实现","aria-hidden":"true"},"#"),t(" 《ChatGPT 微服务应用体系构建》 - chatgpt-sdk 第2节：流式应答会话设计实现")],-1),d=e("br",null,null,-1),_={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},p=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),u=e("li",null,[e("strong",null,"本章难度"),t("：★★★☆☆")],-1),g=e("li",null,[e("strong",null,"本章重点"),t("：由会话工厂模型提供，在 OpenAi Session 会话中，封装渐显效果的流式回答处理。")],-1),x=e("strong",null,"课程视频",-1),k={href:"https://t.zsxq.com/0e7xBakxe",target:"_blank",rel:"noopener noreferrer"},f=l('<h2 id="一、本章诉求" tabindex="-1"><a class="header-anchor" href="#一、本章诉求" aria-hidden="true">#</a> 一、本章诉求</h2><p>以 IOpenAiApi 统一接口、OpenAiSession 统一会话，的2个标准下。封装流式应答操作，流式应答操作以事件实现方式接收应答消息。那么这样的实现，就可以在统一的会话工厂中获得会话接口服务以后，根据接口入参的不同做不同的请求处理。对于使用方来说，这样可以减少口口相传和文档的提示，让代码标准成为更好的文档。</p><h2 id="二、流程设计" tabindex="-1"><a class="header-anchor" href="#二、流程设计" aria-hidden="true">#</a> 二、流程设计</h2><p>整个流程为；丰富 OpenAiSession 会话服务接口，增加流式回答的事件监听处理。此过程的实现以 MyBatis 的会话模型为参照。</p><div align="center"><img src="https://bugstack.cn/images/article/project/chatgpt/chatgpt-sdk-02-01.png?raw=true" width="750px"></div><ul><li>一个需求的实现分为三个部分；架构、设计、代码。架构是骨架、设计方法、代码是填材料。如果没有设计方法的设计模式运用，就相当于把代码的材料，直接扔到架构里。久而久之代码也就越来越混乱了。</li><li>所以本章的重点不只是功能的实现，还包括了如何在会话这个流程下，把流式的事件应答处理，巧妙的封装到同一的会话接口内。</li></ul>',6);function m(b,B){const n=i("ExternalLinkIcon");return o(),r("div",null,[h,e("p",null,[t("作者：小傅哥 "),d,t("博客："),e("a",_,[t("https://bugstack.cn"),a(n)])]),p,e("ul",null,[u,g,e("li",null,[x,t("："),e("a",k,[t("https://t.zsxq.com/0e7xBakxe"),a(n)])])]),f])}const v=s(c,[["render",m],["__file","di2jie：liushiyingdahuihuashejishixian.html.vue"]]);export{v as default};
