import{_ as t,r as o,o as p,c as i,a as n,b as a,d as e,e as c}from"./app-3RcBQnkC.js";const l={},r=n("h1",{id:"《程序员数学-洗牌算法》-随机置换有限序列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-洗牌算法》-随机置换有限序列","aria-hidden":"true"},"#"),a(" 《程序员数学：洗牌算法》- 随机置换有限序列")],-1),u=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),h={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},f=c(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>Fisher–Yates shuffle 的历史</code></p><p>Fisher–Yates shuffle 的现代版本专为计算机使用而设计，由 Richard Durstenfeld 于 1964 年引入，并由Donald E. Knuth在计算机编程艺术中作为<code>算法 P（洗牌）</code>推广。Durstenfeld 的文章和 Knuth 的第一版计算机编程艺术都没有承认 Fisher 和 Yates 的工作；但在 Knuth 的《计算机编程艺术》的后续版本提到了 Fisher 和 Yates 的贡献。</p><h2 id="二、使用场景" tabindex="-1"><a class="header-anchor" href="#二、使用场景" aria-hidden="true">#</a> 二、使用场景</h2><p>最早有诉求使用洗牌算法的场景是在业务需求开发中，需要对线上考试的题目和题目对应的答案进行乱序。也就是说在大家都需要作答10道题的时候，每个人看到的试卷题目是乱序的，并且题目的正确答案选项也被乱序了。</p><p>其实除此之外，洗牌算法也也可以用在一下场景；</p><ol><li>博彩：洗牌算法用于纸牌游戏和棋盘游戏，随机分配牌或棋子给玩家。</li><li>随机抽样：随机抽样算法用于从较大的数据集中随机选择样本以用于测试或验证目的。</li><li>数据混洗：混洗算法用于随机混洗数据集中的元素，例如在机器学习算法中。</li><li>音乐播放列表：随机播放算法用于从播放列表中随机选择歌曲，以获得更多样化的聆听体验。</li><li>随机密码生成：shuffle 算法用于通过从预定义的字符集中打乱字符来随机生成密码。</li><li>加密应用程序：混洗算法用于密码学以出于安全目的生成元素的随机排列。</li><li>彩票：随机抽取算法用于彩票中随机选择中奖号码或奖品。</li></ol><h2 id="三、算法描述" tabindex="-1"><a class="header-anchor" href="#三、算法描述" aria-hidden="true">#</a> 三、算法描述</h2><p>Fisher–Yates shuffle 是一种用于生成有限序列的随机排列的算法——简单来说，该算法对序列进行打乱。该算法有效地将所有元素放入帽子中；它通过从帽子中随机抽取一个元素来不断确定下一个元素，直到没有元素为止。该算法产生无偏排列：每个排列的可能性均等。该算法的现代版本是高效的：它花费的时间与被洗牌的项目数量成正比，并将它们洗牌到位。如图所示；</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fisher-yates-01.png?raw=true" width="450px"></div><p>这个算法也是 Java 中 Collections.shuffle 对应源码实现，在 Java 中直接使用它就可以完成数组元素的洗牌。</p><h2 id="四、算法实现" tabindex="-1"><a class="header-anchor" href="#四、算法实现" aria-hidden="true">#</a> 四、算法实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fisherYates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originalArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> originalArray<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> randomIndex <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        array<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照洗牌算法的描述做一下洗牌排序处理。其实实现起来还是比较简单的。</p><hr>`,16),m={href:"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/Reservoir_sampling",target:"_blank",rel:"noopener noreferrer"};function _(b,g){const s=o("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[a("作者：小傅哥 "),u,a("博客："),n("a",d,[a("https://bugstack.cn"),e(s)]),k,a("源码："),n("a",h,[a("https://github.com/fuzhengwei/java-algorithms"),e(s)])]),f,n("ul",null,[n("li",null,[n("a",m,[a("Fisher–Yates_shuffle"),e(s)])]),n("li",null,[n("a",v,[a("Reservoir_sampling"),e(s)])])])])}const w=t(l,[["render",_],["__file","2023-02-10-fisher-yates.html.vue"]]);export{w as default};
