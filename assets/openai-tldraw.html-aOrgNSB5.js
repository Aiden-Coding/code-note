import{_ as i,r,o,c as l,a as n,b as e,d as s,e as t}from"./app-3RcBQnkC.js";const d={},c=n("h1",{id:"【小场景训练营】openai-tldraw-设计图转前端代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【小场景训练营】openai-tldraw-设计图转前端代码","aria-hidden":"true"},"#"),e(" 【小场景训练营】OpenAI + TLDraw 设计图转前端代码")],-1),p=n("br",null,null,-1),u={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},h=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("p",null,"哈喽，大家好我是技术UP主小傅哥。",-1),g=n("p",null,"大部分前端程序员是不会写后端代码的，但大部分后端程序员都能写点前端代码。不过虽然能写，但也是照葫芦画瓢，修修改改的二把手刀选手。😂 小傅哥就是这样的二把刀前端，每次写前端都感觉像是屎上雕花，一点点扣哧 DIV、CSS 调整样式和数据。",-1),m=n("div",{align:"center"},[n("img",{src:"https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-01.png?raw=true",width:"250px"})],-1),b=n("p",null,[e("但自从有了 OpenAI 以后，我一直惦记着，能不在 Draw.io 这样的工具出设计图后，让 OpenAI 识别自动转换为 HTML 代码。之后把这样的东西做成一整套工具来使用，大大的方便"),n("code",null,"二把刀前端们"),e("快速完成从UI到HTML的初稿。")],-1),_={href:"https://github.com/SawyerHood/draw-a-ui",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zh-hans.react.dev/learn",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/tldraw/tldraw",target:"_blank",rel:"noopener noreferrer"},q={href:"https://platform.openai.com/docs/api-reference/chat/create",target:"_blank",rel:"noopener noreferrer"},f=t('<div align="center"><img src="https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-02.png?raw=true" width="650px"></div><p>对于研发工程师来说，只是使用其实没多大意义，重要的是知道这东西是怎么实现的。那么接下来小傅哥就来详细给大家介绍下具体的设计实现过程。</p><blockquote><p>文末提供了该案例的课程地址（含源码）和项目的体验地址。体验地址：https://openai.itedus.cn/#/draw</p></blockquote><h2 id="一、场景说明" tabindex="-1"><a class="header-anchor" href="#一、场景说明" aria-hidden="true">#</a> 一、场景说明</h2><p>本节小傅哥会带着大家先以最简单的方式完成 OpenAI 多模态接口与 TLDraw 的对接，再讲解项目中如何使用策略模式拆解不同类型的 OpenAI 服务接口（<code>文生文</code>、<code>文生图</code>、<code>多模态</code>）。</p><div align="center"><img src="https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-03.png?raw=true" width="650px"></div>',6),x=n("li",null,"首先，我们知道 OpenAI 的多模态模型，是需要像接口中传一个 BASE64 图片信息，并给予对应的描述性 Prompt 脚本。这样 OpenAI 就会知道我们要基于对这个图片做什么。",-1),A={href:"https://github.com/tldraw/tldraw",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/jgraph/drawio",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"最后，把 OpenAI 传递回来的接口数据，用 React 进行展示和效果渲染。也就是操作完成后，你可以看到 HTML 对应的展示效果。",-1),j=t(`<h2 id="二、功能实现" tabindex="-1"><a class="header-anchor" href="#二、功能实现" aria-hidden="true">#</a> 二、功能实现</h2><h3 id="_1-多模态接口" tabindex="-1"><a class="header-anchor" href="#_1-多模态接口" aria-hidden="true">#</a> 1. 多模态接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>curl <span class="token operator">-</span><span class="token class-name">X</span> <span class="token constant">POST</span> <span class="token string">&quot;https://api.openai.com/v1/chat/completions&quot;</span> \\
     <span class="token operator">-</span><span class="token class-name">H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> \\
     <span class="token operator">-</span><span class="token class-name">H</span> <span class="token string">&quot;Authorization: Bearer sk-kgUPx1vKDywFbsun7c05Ed5eA4C24d4aA7B06aE9F76e6eFe&quot;</span> \\
     <span class="token operator">-</span>d &#39;<span class="token punctuation">{</span>
           <span class="token string">&quot;model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gpt-4-vision-preview&quot;</span><span class="token punctuation">,</span>
           <span class="token string">&quot;max_tokens&quot;</span><span class="token operator">:</span> <span class="token number">4096</span><span class="token punctuation">,</span>
           <span class="token string">&quot;messages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
             <span class="token punctuation">{</span>
               <span class="token string">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Your-System-Prompt-Here&quot;</span>
             <span class="token punctuation">}</span><span class="token punctuation">,</span>
             <span class="token punctuation">{</span>
               <span class="token string">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;content&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                 <span class="token punctuation">{</span>
                   <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image_url&quot;</span><span class="token punctuation">,</span>
                   <span class="token string">&quot;image_url&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                     <span class="token string">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg&quot;</span>
                   <span class="token punctuation">}</span>
                 <span class="token punctuation">}</span><span class="token punctuation">,</span>
                 <span class="token punctuation">{</span>
                   <span class="token string">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Turn this into a single html file using tailwind.&quot;</span><span class="token punctuation">,</span>
                   <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
                 <span class="token punctuation">}</span>
               <span class="token punctuation">]</span>
             <span class="token punctuation">}</span>
           <span class="token punctuation">]</span>
         <span class="token punctuation">}</span>&#39;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先，我们做一个东西的时候，要先知道最根本调用是如何处理的。</li><li>之后，多模态接口与以往的 gpt-3.5、gpt-4.0 都是用的同一个接口，<code>v1/chat/completions</code> 只是用了 <code>gpt-4-vision-preview</code> 模型。同时 content 既可以是单独的描述字符串，也可以是对象类型含有 <code>type</code>、<code>text</code>、<code>image_url</code> 的方式进行使用。</li></ul><h2 id="二、前端实现" tabindex="-1"><a class="header-anchor" href="#二、前端实现" aria-hidden="true">#</a> 二、前端实现</h2>`,5),P={href:"https://zh-hans.react.dev/learn",target:"_blank",rel:"noopener noreferrer"},T=t(`<h3 id="_1-工程介绍" tabindex="-1"><a class="header-anchor" href="#_1-工程介绍" aria-hidden="true">#</a> 1. 工程介绍</h3><div align="center"><img src="https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-04.png?raw=true" width="350px"></div><p>工程主要分为三块，OpenAI 接口、存储和工具类、TLDraw UI绘制页面 + 调用 OpenAI 接口的实现。</p><h3 id="_2-tldraw-组件" tabindex="-1"><a class="header-anchor" href="#_2-tldraw-组件" aria-hidden="true">#</a> 2. tldraw 组件</h3><p>在开发前端代码的时候，需要按照 <code>npm install @tldraw/tldraw@2.0.0-alpha.17</code> 组件。</p><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>// 引入组件
const Tldraw = dynamic(async () =&gt; (await import(&#39;@tldraw/tldraw&#39;)).Tldraw, {
    ssr: false,
})

// 使用组件
&lt;Tldraw persistenceKey=&quot;tldraw&quot;/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引入组件后就可以在 page.tsx 中使用这个组件了，目前你启动 react 会看到整个运行出来的 UI 设计页面。</li></ul><h3 id="_3-生成图片" tabindex="-1"><a class="header-anchor" href="#_3-生成图片" aria-hidden="true">#</a> 3. 生成图片</h3><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>// tldraw 可以把当前页面转换为 svg 图片
const svg = await editor.getSvg(Array.from(editor.currentPageShapeIds))
// 基于工具把 svg 图片转换为 png图片
const png = await svg2image(svg, {
  type: &#39;png&#39;,
  quality: 1,
  scale: 1,
})
// 再把png图片在前端直接转换为 base64
const dataUrl = (await blobToBase64(png!)) as string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-调用接口" tabindex="-1"><a class="header-anchor" href="#_4-调用接口" aria-hidden="true">#</a> 4. 调用接口</h3><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>try {
	let json = await getResponseFromAPI(dataUrl, prompt)
} catch (error: any) {
	console.log(error)
	alert(\`Error from open ai: \${JSON.stringify(error.message)}\`)
	return
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>之后就可以同步调用接口数据等待返回结果，回显到页面即可。</li></ul><h2 id="三、使用体验" tabindex="-1"><a class="header-anchor" href="#三、使用体验" aria-hidden="true">#</a> 三、使用体验</h2><h3 id="_1-初始动作" tabindex="-1"><a class="header-anchor" href="#_1-初始动作" aria-hidden="true">#</a> 1. 初始动作</h3><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>echo &quot;BASE_API_URL=url-your-proxy like https://xxxxx.proxy.com/v1/chat/completions \\r\\nOPENAI_API_KEY=sk-your-key&quot; &gt; .env.local
rm -rf node_modules
npm install
npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),O=n("li",null,[e("推荐使用 WebStorm 打开 openai-tldraw 工程，它会自动的提示你执行 "),n("code",null,"npm install"),e(" 构建项目。")],-1),S=n("li",null,[e("当你进入 openai-tldraw 工程中，需要先执行 echo 教程，创建出 "),n("code",null,".env.local"),e(" 文件。这个配置里写入你 BASE_API_URL 和 OPENAI_API_KEY")],-1),E=n("li",null,[e("最后在工程中 package.json 点击 dev 左侧的绿色按钮或者执行 "),n("code",null,"npm run dev"),e(" 都会启动工程。")],-1),L={href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer"},B=t('<h3 id="_2-生成效果" tabindex="-1"><a class="header-anchor" href="#_2-生成效果" aria-hidden="true">#</a> 2. 生成效果</h3><div align="center"><img src="https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-06.png?raw=true" width="650px"></div><h3 id="_3-生成代码" tabindex="-1"><a class="header-anchor" href="#_3-生成代码" aria-hidden="true">#</a> 3. 生成代码</h3><div align="center"><img src="https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-07.png?raw=true" width="650px"></div><h2 id="五、项目运用" tabindex="-1"><a class="header-anchor" href="#五、项目运用" aria-hidden="true">#</a> 五、项目运用</h2><p>以上还是简单的案例，当我们把这样的接口功能放到项目中开发，就需要考虑到接口的策略调用来让结构更加易于维护。</p><h3 id="_1-流程设计" tabindex="-1"><a class="header-anchor" href="#_1-流程设计" aria-hidden="true">#</a> 1. 流程设计</h3><div align="center"><img src="https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-08.png?raw=true" width="650px"></div><p>此流程为小傅哥星球「码农会锁」OpenAI 项目的的核心流程，最下面三个地方支持；<code>文生文</code>、<code>文生图</code>、<code>多模态（图文理解）</code>，而图文理解本文的案例是同步请求，但前面的<code>文生文</code>、<code>文生图</code>，是异步响应。那么这样的代码结构怎么设计呢？🤔</p>',9),D={href:"https://gaga.plus",target:"_blank",rel:"noopener noreferrer"},U=t('<h3 id="_2-代码举例" tabindex="-1"><a class="header-anchor" href="#_2-代码举例" aria-hidden="true">#</a> 2. 代码举例</h3><div align="center"><img src="https://bugstack.cn/images/article/project/ddd-scene-solution/openai-tldraw-09.png?raw=true" width="650px"></div><p>在小傅哥的星球「码农会锁」中，有大量的此类设计，来解决实际场景的问题。如果能参与一个这样的项目学习，那么对编程的架构和设计的理解会提升的非常多。</p><h2 id="六、加入学习" tabindex="-1"><a class="header-anchor" href="#六、加入学习" aria-hidden="true">#</a> 六、加入学习</h2><p><strong>注意📢</strong>，本项目也只是【星球：码农会锁】众多项目中的1个，其他的项目还包括：正在进行的大营销平台、API网关、Lottery抽奖、IM通信、SpringBoot Starter 组件开发、IDEA Plugin 插件开发等，还有开源项目学习。</p><p><strong>课程💐</strong>，加入星球「码农会锁」，即可获得本项目源码，以及当前92个课程代码仓库。</p><p>如果大家希望通过做有价值的编程项目，提高自己的编程思维和编码能力，可以加入小傅哥的【星球：码农会锁】。加入后解锁🔓所有往期项目，还可以学习后续新开发的项目。</p><blockquote><p>这样一套项目，放在一些平台售卖，一个至少都是几百块。但小傅哥的星球，只需要100多，就可以获得全部的学习项目！</p></blockquote><div align="center"><img src="https://bugstack.cn/images/article/zsxq/zsxq-youhuiquan.png?raw=true" width="300px"></div><p><strong>加入星球</strong>：下载<code>星球APP</code>，从星球【课程入口】进入。里面有完整的学习指引，包括；使用说明、代码仓库、专属项目群、学习路线、往期项目。</p>',10);function H(N,R){const a=r("ExternalLinkIcon");return o(),l("div",null,[c,n("p",null,[e("作者：小傅哥 "),p,e("博客："),n("a",u,[e("https://bugstack.cn"),s(a)])]),h,v,g,m,b,n("p",null,[e("为此小傅哥基于"),n("a",_,[e("开源项目"),s(a)]),e("，使用 "),n("a",k,[e("React"),s(a)]),e(" + "),n("a",w,[e("TLDraw"),s(a)]),e(" + "),n("a",q,[e("OpenAI"),s(a)]),e("（多模态 gpt-4-vision） 做了一款这样的工具案例；")]),f,n("ul",null,[x,n("li",null,[e("那么，我们就需要一款在线画图的工具，比如 "),n("a",A,[e("TLDraw"),s(a)]),e(" 或者 "),n("a",I,[e("Draw.io"),s(a)]),e(" 把这样的绘图能力引入到 React 工程中。通过绘图后生成截图，再把图片转换为 BASE64 就可以使用。")]),y]),j,n("p",null,[e("本案例基于 React 构建的前端页面，如果你还是个前端小白可以学习此份教程；"),n("a",P,[e("https://zh-hans.react.dev/learn"),s(a)]),e(" —— 全中文官网资料非常适合入门。")]),T,n("ul",null,[O,S,E,n("li",null,[e("启动后访问地址："),n("a",L,[e("http://localhost:3000/"),s(a)])])]),B,n("blockquote",null,[n("p",null,[e("欢迎👏🏻加入小傅哥星球「码农会锁」，一起学习这样的有架构、有设计，有高质量编码的项目。演示地址："),n("a",D,[e("https://gaga.plus"),s(a)])])]),U])}const V=i(d,[["render",H],["__file","openai-tldraw.html.vue"]]);export{V as default};
