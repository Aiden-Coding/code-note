import{_ as p,r as c,o,c as i,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"重学-java-设计模式-实战适配器模式「从多个mq消息体中-抽取指定字段值场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战适配器模式「从多个mq消息体中-抽取指定字段值场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战适配器模式「从多个MQ消息体中，抽取指定字段值场景」")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=682825574&bvid=BV1pS4y1K7YH&cid=565112237&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=e('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>擦屁屁纸80%的面积都是保护手的！</code></p><p>工作到3年左右很大一部分程序员都想提升自己的技术栈，开始尝试去阅读一些源码，例如<code>Spring</code>、<code>Mybaits</code>、<code>Dubbo</code>等，但读着读着发现越来越难懂，一会从这过来一会跑到那去。甚至怀疑自己技术太差，慢慢也就不愿意再触碰这部分知识。</p><p>而这主要的原因是一个框架随着时间的发展，它的复杂程度是越来越高的，从最开始只有一个非常核心的点到最后开枝散叶。这就像你自己开发的业务代码或者某个组件一样，最开始的那部分核心代码也许只能占到20%，而其他大部分代码都是为了保证核心流程能正常运行的。所以这也是你读源码费劲的一部分原因。</p><p><code>框架中用到了设计模式吗？</code></p><p>框架中不仅用到设计模式还用了很多，而且有些时候根本不是一个模式的单独使用，而是多种设计模式的综合运用。与大部分小伙伴平时开发的CRUD可就不一样了，如果都是if语句从上到下，也就算得不上什么框架了。就像你到Spring的源码中搜关键字<code>Adapter</code>，就会出现很多实现类，例如；<code>UserCredentialsDataSourceAdapter</code>。而这种设计模式就是我们本文要介绍的适配器模式。</p><p><code>适配器在生活里随处可见</code></p><p>如果提到在日常生活中就很多适配器的存在你会想到什么？在没有看后文之前可以先思考下。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',9),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("strong",null,"公众号",-1),q={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"bugstack虫洞栈",-1),y=n("code",null,"源码下载",-1),_=e('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-6-00</td><td>场景模拟工程；模拟多个MQ消息体</td></tr><tr><td>itstack-demo-design-6-01</td><td>使用一坨代码实现业务需求</td></tr><tr><td>itstack-demo-design-6-02</td><td>通过设计模式优化改造代码，产生对比性从而学习</td></tr></tbody></table><h2 id="三、适配器模式介绍" tabindex="-1"><a class="header-anchor" href="#三、适配器模式介绍" aria-hidden="true">#</a> 三、适配器模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-6-01.png" alt="适配器模式，图片来自 refactoringguru.cn"></p>',3),w={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>适配器模式的主要作用就是把原本不兼容的接口，通过适配修改做到统一。使得用户方便使用，就像我们提到的万能充、数据线、MAC笔记本的转换头、出国旅游买个插座等等，他们都是为了适配各种不同的<code>口</code>，做的兼容。。</p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-6-02.png" alt="万能充、数据线"></p><p><strong>除了我们生活中出现的各种适配的场景，那么在业务开发中呢？</strong></p><p>在业务开发中我们会经常的需要做不同接口的兼容，尤其是中台服务，中台需要把各个业务线的各种类型服务做统一包装，再对外提供接口进行使用。而这在我们平常的开发中也是非常常见的。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-6-03.png" alt="场景模拟；接收多类型MQ消息"></p><p>随着公司的业务的不断发展，当基础的系统逐步成型以后。业务运营就需要开始做用户的拉新和促活，从而保障<code>DAU</code>的增速以及最终<code>ROI</code>转换。</p><p>而这时候就会需要做一些营销系统，大部分常见的都是裂变、拉客，例如；你邀请一个用户开户、或者邀请一个用户下单，那么平台就会给你返利，多邀多得。同时随着拉新的量越来越多开始设置每月下单都会给首单奖励，等等，各种营销场景。</p><p>那么这个时候做这样一个系统就会接收各种各样的MQ消息或者接口，如果一个个的去开发，就会耗费很大的成本，同时对于后期的拓展也有一定的难度。此时就会希望有一个系统可以配置一下就把外部的MQ接入进行，这些MQ就像上面提到的可能是一些注册开户消息、商品下单消息等等。</p><p>而适配器的思想方式也恰恰可以运用到这里，并且我想强调一下，适配器不只是可以适配接口往往还可以适配一些属性信息。</p><h3 id="_1-场景模拟工程" tabindex="-1"><a class="header-anchor" href="#_1-场景模拟工程" aria-hidden="true">#</a> 1. 场景模拟工程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">00</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── mq
                │   ├── create_account<span class="token punctuation">.</span>java
                │   ├── <span class="token class-name">OrderMq</span><span class="token punctuation">.</span>java
                │   └── <span class="token class-name">POPOrderDelivered</span><span class="token punctuation">.</span>java
                └── service
                    ├── <span class="token class-name">OrderServicejava</span>
                    └── <span class="token class-name">POPOrderService</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里模拟了三个不同类型的MQ消息，而在消息体中都有一些必要的字段，比如；用户ID、时间、业务ID，但是每个MQ的字段属性并不一样。就像用户ID在不同的MQ里也有不同的字段：uId、userId等。</li><li>同时还提供了两个不同类型的接口，一个用于查询内部订单订单下单数量，一个用于查询第三方是否首单。</li><li>后面会把这些不同类型的MQ和接口做适配兼容。</li></ul><h3 id="_2-场景简述" tabindex="-1"><a class="header-anchor" href="#_2-场景简述" aria-hidden="true">#</a> 2. 场景简述</h3><h4 id="_1-1-注册开户mq" tabindex="-1"><a class="header-anchor" href="#_1-1-注册开户mq" aria-hidden="true">#</a> 1.1 注册开户MQ</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> create_account <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>      <span class="token comment">// 开户编号</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>     <span class="token comment">// 开户地</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> accountDate<span class="token punctuation">;</span>   <span class="token comment">// 开户时间</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token comment">// 开户描述</span>

    <span class="token comment">// ... get/set     </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-内部订单mq" tabindex="-1"><a class="header-anchor" href="#_1-2-内部订单mq" aria-hidden="true">#</a> 1.2 内部订单MQ</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMq</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> uid<span class="token punctuation">;</span>           <span class="token comment">// 用户ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sku<span class="token punctuation">;</span>           <span class="token comment">// 商品</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderId<span class="token punctuation">;</span>       <span class="token comment">// 订单ID</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> createOrderTime<span class="token punctuation">;</span> <span class="token comment">// 下单时间     </span>

    <span class="token comment">// ... get/set      </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-第三方订单mq" tabindex="-1"><a class="header-anchor" href="#_1-3-第三方订单mq" aria-hidden="true">#</a> 1.3 第三方订单MQ</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POPOrderDelivered</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> uId<span class="token punctuation">;</span>     <span class="token comment">// 用户ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderId<span class="token punctuation">;</span> <span class="token comment">// 订单号</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> orderTime<span class="token punctuation">;</span> <span class="token comment">// 下单时间</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> sku<span class="token punctuation">;</span>       <span class="token comment">// 商品</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> skuName<span class="token punctuation">;</span>   <span class="token comment">// 商品名称</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> decimal<span class="token punctuation">;</span> <span class="token comment">// 金额</span>

    <span class="token comment">// ... get/set      </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-查询用户内部下单数量接口" tabindex="-1"><a class="header-anchor" href="#_1-4-查询用户内部下单数量接口" aria-hidden="true">#</a> 1.4 查询用户内部下单数量接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">POPOrderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">queryUserOrderCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;自营商家，查询用户的订单是否为首单：{}&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">10L</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-查询用户第三方下单首单接口" tabindex="-1"><a class="header-anchor" href="#_1-5-查询用户第三方下单首单接口" aria-hidden="true">#</a> 1.5 查询用户第三方下单首单接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POPOrderService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">POPOrderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFirstOrder</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;POP商家，查询用户的订单是否为首单：{}&quot;</span><span class="token punctuation">,</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上这几项就是不同的MQ以及不同的接口的一个体现，后面我们将使用这样的MQ消息和接口，给它们做相应的适配。</li></ul><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p><code>其实大部分时候接MQ消息都是创建一个类用于消费，通过转换他的MQ消息属性给自己的方法。</code></p><p>我们接下来也是先体现一下这种方式的实现模拟，但是这样的实现有一个很大的问题就是，当MQ消息越来越多后，甚至几十几百以后，你作为中台要怎么优化呢？</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                └── create_accountMqService<span class="token punctuation">.</span>java
                └── <span class="token class-name">OrderMqService</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">POPOrderDeliveredService</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>目前需要接收三个MQ消息，所有就有了三个对应的类，和我们平时的代码几乎一样。如果你的MQ量不多，这样的写法也没什么问题，但是随着数量的增加，就需要考虑用一些设计模式来解决。</li></ul><h3 id="_2-mq接收消息实现" tabindex="-1"><a class="header-anchor" href="#_2-mq接收消息实现" aria-hidden="true">#</a> 2. Mq接收消息实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> create_accountMqService <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        create_account mq <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> create_account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        mq<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mq<span class="token punctuation">.</span><span class="token function">getAccountDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ... 处理自己的业务</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>三组MQ的消息都是一样模拟使用，就不一一展示了。可以获取源码后学习。</li></ul><h2 id="六、适配器模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、适配器模式重构代码" aria-hidden="true">#</a> 六、适配器模式重构代码</h2><p><code>接下来使用适配器模式来进行代码优化，也算是一次很小的重构。</code></p><p>适配器模式要解决的主要问题就是多种差异化类型的接口做统一输出，这在我们学习工厂方法模式中也有所提到不同种类的奖品处理，其实那也是适配器的应用。</p><p>在本文中我们还会再另外体现出一个多种MQ接收，使用MQ的场景。来把不同类型的消息做统一的处理，便于减少后续对MQ接收。</p><p>在这里如果你之前没要开发过接收MQ消息，可能听上去会有些不理解这样的场景。对此，我个人建议先了解下MQ。另外就算不了解也没关系，不会影响对思路的体会。</p><p>再者，本文所展示的MQ兼容的核心部分，也就是处理适配不同的类型字段。而如果我们接收MQ后，在配置不同的消费类时，如果不希望一个个开发类，那么可以使用代理类的方式进行处理。</p><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── impl
                │   ├── <span class="token class-name">InsideOrderService</span><span class="token punctuation">.</span>java
                │   └── <span class="token class-name">POPOrderAdapterServiceImpl</span><span class="token punctuation">.</span>java
                ├── <span class="token class-name">MQAdapter</span><span class="token punctuation">,</span>java
                ├── <span class="token class-name">OrderAdapterService</span><span class="token punctuation">,</span>java
                └── <span class="token class-name">RebateInfo</span><span class="token punctuation">,</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>适配器模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-6-04.png" alt="适配器模型结构"></p><ul><li>这里包括了两个类型的适配；接口适配、MQ适配。之所以不只是模拟接口适配，因为很多时候大家都很常见了，所以把适配的思想换一下到MQ消息体上，增加大家多设计模式的认知。</li><li><strong>先是做MQ适配</strong>，接收各种各样的MQ消息。当业务发展的很快，需要对下单用户首单才给奖励，在这样的场景下再增加对<strong>接口的适配</strong>操作。</li></ul><h3 id="_2-代码实现-mq消息适配" tabindex="-1"><a class="header-anchor" href="#_2-代码实现-mq消息适配" aria-hidden="true">#</a> 2. 代码实现(MQ消息适配)</h3><h4 id="_2-1-统一的mq消息体" tabindex="-1"><a class="header-anchor" href="#_2-1-统一的mq消息体" aria-hidden="true">#</a> 2.1 统一的MQ消息体</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RebateInfo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>  <span class="token comment">// 用户ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bizId<span class="token punctuation">;</span>   <span class="token comment">// 业务ID</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> bizTime<span class="token punctuation">;</span>   <span class="token comment">// 业务时间</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token comment">// 业务描述</span>
    
    <span class="token comment">// ... get/set</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MQ消息中会有多种多样的类型属性，虽然他们都有同样的值提供给使用方，但是如果都这样接入那么当MQ消息特别多时候就会很麻烦。</li><li>所以在这个案例中我们定义了通用的MQ消息体，后续把所有接入进来的消息进行统一的处理。</li></ul><h4 id="_2-2-mq消息体适配类" tabindex="-1"><a class="header-anchor" href="#_2-2-mq消息体适配类" aria-hidden="true">#</a> 2.2 MQ消息体适配类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQAdapter</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RebateInfo</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> strJson<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> link<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>strJson<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RebateInfo</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Map</span> obj<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> link<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token class-name">RebateInfo</span> rebateInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RebateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> link<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> val <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RebateInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;set&quot;</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rebateInfo<span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> rebateInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个类里的方法非常重要，主要用于把不同类型MQ种的各种属性，映射成我们需要的属性并返回。就像一个属性中有<code>用户ID;uId</code>，映射到我们需要的；<code>userId</code>，做统一处理。</li><li>而在这个处理过程中需要把映射管理传递给<code>Map&lt;String, String&gt; link</code>，也就是准确的描述了，当前MQ中某个属性名称，映射为我们的某个属性名称。</li><li>最终因为我们接收到的<code>mq</code>消息基本都是<code>json</code>格式，可以转换为MAP结构。最后使用反射调用的方式给我们的类型赋值。</li></ul><h4 id="_2-3-测试适配类" tabindex="-1"><a class="header-anchor" href="#_2-3-测试适配类" aria-hidden="true">#</a> 2.3 测试适配类</h4><h5 id="_2-3-1-编写单元测试类" tabindex="-1"><a class="header-anchor" href="#_2-3-1-编写单元测试类" aria-hidden="true">#</a> 2.3.1 编写单元测试类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_MQAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span>
    create_account create_account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">create_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    create_account<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    create_account<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;河北省.廊坊市.广阳区.大学里职业技术学院&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    create_account<span class="token punctuation">.</span><span class="token function">setAccountDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    create_account<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;在校开户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          

    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> link01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link01<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link01<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bizId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link01<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bizTime&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;accountDate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link01<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;desc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RebateInfo</span> rebateInfo01 <span class="token operator">=</span> <span class="token class-name">MQAdapter</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>create_account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> link01<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;mq.create_account(适配前)&quot;</span> <span class="token operator">+</span> create_account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;mq.create_account(适配后)&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>rebateInfo01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">OrderMq</span> orderMq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderMq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderMq<span class="token punctuation">.</span><span class="token function">setUid</span><span class="token punctuation">(</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderMq<span class="token punctuation">.</span><span class="token function">setSku</span><span class="token punctuation">(</span><span class="token string">&quot;10928092093111123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderMq<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">&quot;100000890193847111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderMq<span class="token punctuation">.</span><span class="token function">setCreateOrderTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> link02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link02<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link02<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bizId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orderId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link02<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bizTime&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;createOrderTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RebateInfo</span> rebateInfo02 <span class="token operator">=</span> <span class="token class-name">MQAdapter</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>orderMq<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> link02<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;mq.orderMq(适配前)&quot;</span> <span class="token operator">+</span> orderMq<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;mq.orderMq(适配后)&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>rebateInfo02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这里我们分别模拟传入了两个不同的MQ消息，并设置字段的映射关系。</li><li>等真的业务场景开发中，就可以配这种映射配置关系交给配置文件或者数据库后台配置，减少编码。</li></ul><h5 id="_2-3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_2-3-2-测试结果" aria-hidden="true">#</a> 2.3.2 测试结果</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mq<span class="token punctuation">.</span><span class="token function">create_account</span><span class="token punctuation">(</span>适配前<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;accountDate&quot;</span><span class="token operator">:</span><span class="token number">1591024816000</span><span class="token punctuation">,</span><span class="token string">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;河北省.廊坊市.广阳区.大学里职业技术学院&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;desc&quot;</span><span class="token operator">:</span><span class="token string">&quot;在校开户&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;number&quot;</span><span class="token operator">:</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">}</span>
mq<span class="token punctuation">.</span><span class="token function">create_account</span><span class="token punctuation">(</span>适配后<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;bizId&quot;</span><span class="token operator">:</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bizTime&quot;</span><span class="token operator">:</span><span class="token number">1591077840669</span><span class="token punctuation">,</span><span class="token string">&quot;desc&quot;</span><span class="token operator">:</span><span class="token string">&quot;在校开户&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">}</span>

mq<span class="token punctuation">.</span><span class="token function">orderMq</span><span class="token punctuation">(</span>适配前<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;createOrderTime&quot;</span><span class="token operator">:</span><span class="token number">1591024816000</span><span class="token punctuation">,</span><span class="token string">&quot;orderId&quot;</span><span class="token operator">:</span><span class="token string">&quot;100000890193847111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;sku&quot;</span><span class="token operator">:</span><span class="token string">&quot;10928092093111123&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;uid&quot;</span><span class="token operator">:</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">}</span>
mq<span class="token punctuation">.</span><span class="token function">orderMq</span><span class="token punctuation">(</span>适配后<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;bizId&quot;</span><span class="token operator">:</span><span class="token string">&quot;100000890193847111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bizTime&quot;</span><span class="token operator">:</span><span class="token number">1591077840669</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">}</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从上面可以看到，同样的字段值在做了适配前后分别有统一的字段属性，进行处理。这样业务开发中也就非常简单了。</li><li>另外有一个非常重要的地方，在实际业务开发中，除了反射的使用外，还可以加入<strong>代理类</strong>把映射的配置交给它。这样就可以不需要每一个mq都手动创建类了。</li></ul><h3 id="_3-代码实现-接口使用适配" tabindex="-1"><a class="header-anchor" href="#_3-代码实现-接口使用适配" aria-hidden="true">#</a> 3. 代码实现(接口使用适配)</h3><p>就像我们前面提到随着业务的发展，营销活动本身要修改，不能只是接了MQ就发奖励。因为此时已经拉新的越来越多了，需要做一些限制。</p><p>因为增加了只有首单用户才给奖励，也就是你一年或者新人或者一个月的第一单才给你奖励，而不是你之前每一次下单都给奖励。</p><p>那么就需要对此种方式进行限制，而此时MQ中并没有判断首单的属性。只能通过接口进行查询，而拿到的接口如下；</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>org.itstack.demo.design.service.OrderService.queryUserOrderCount(String userId)</td><td>出参long，查询订单数量</td></tr><tr><td>org.itstack.demo.design.service.OrderService.POPOrderService.isFirstOrder(String uId)</td><td>出参boolean，判断是否首单</td></tr></tbody></table><ul><li>两个接口的判断逻辑和使用方式都不同，不同的接口提供方，也有不同的出参。一个是直接判断是否首单，另外一个需要根据订单数量判断。</li><li>因此这里需要使用到适配器的模式来实现，当然如果你去编写if语句也是可以实现的，但是我们经常会提到这样的代码很难维护。</li></ul><h4 id="_3-1-定义统一适配接口" tabindex="-1"><a class="header-anchor" href="#_3-1-定义统一适配接口" aria-hidden="true">#</a> 3.1 定义统一适配接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderAdapterService</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">isFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>后面的实现类都需要完成此接口，并把具体的逻辑包装到指定的类中，满足单一职责。</li></ul><h4 id="_3-2-分别实现两个不同的接口" tabindex="-1"><a class="header-anchor" href="#_3-2-分别实现两个不同的接口" aria-hidden="true">#</a> 3.2 分别实现两个不同的接口</h4><p><strong>内部商品接口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsideOrderService</span> <span class="token keyword">implements</span> <span class="token class-name">OrderAdapterService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">queryUserOrderCount</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第三方商品接口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POPOrderAdapterServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderAdapterService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">POPOrderService</span> popOrderService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POPOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> popOrderService<span class="token punctuation">.</span><span class="token function">isFirstOrder</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这两个接口中都实现了各自的判断方式，尤其像是提供订单数量的接口，需要自己判断当前接到mq时订单数量是否<code>&lt;= 1</code>，以此判断是否为首单。</li></ul><h4 id="_3-3-测试适配类" tabindex="-1"><a class="header-anchor" href="#_3-3-测试适配类" aria-hidden="true">#</a> 3.3 测试适配类</h4><h5 id="_3-3-1-编写单元测试类" tabindex="-1"><a class="header-anchor" href="#_3-3-1-编写单元测试类" aria-hidden="true">#</a> 3.3.1 编写单元测试类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_itfAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">OrderAdapterService</span> popOrderAdapterService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POPOrderAdapterServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;判断首单，接口适配(POP)：&quot;</span> <span class="token operator">+</span> popOrderAdapterService<span class="token punctuation">.</span><span class="token function">isFirst</span><span class="token punctuation">(</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   

    <span class="token class-name">OrderAdapterService</span> insideOrderService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsideOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;判断首单，接口适配(自营)：&quot;</span> <span class="token operator">+</span> insideOrderService<span class="token punctuation">.</span><span class="token function">isFirst</span><span class="token punctuation">(</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-3-2-测试结果" aria-hidden="true">#</a> 3.3.2 测试结果</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">47.076</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>d<span class="token punctuation">.</span>design<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>POPOrderService</span> <span class="token operator">-</span> <span class="token constant">POP</span>商家，查询用户的订单是否为首单：<span class="token number">100001</span>
判断首单，接口适配<span class="token punctuation">(</span><span class="token constant">POP</span><span class="token punctuation">)</span>：<span class="token boolean">true</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">47.079</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>d<span class="token punctuation">.</span>design<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>POPOrderService</span> <span class="token operator">-</span> 自营商家，查询用户的订单是否为首单：<span class="token number">100001</span>
判断首单，接口适配<span class="token punctuation">(</span>自营<span class="token punctuation">)</span>：<span class="token boolean">false</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果上来看，此时已经的接口已经做了统一的包装，外部使用时候就不需要关心内部的具体逻辑了。而且在调用的时候只需要传入统一的参数即可，这样就满足了适配的作用。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>从上文可以看到不使用适配器模式这些功能同样可以实现，但是使用了适配器模式就可以让代码：干净整洁易于维护、减少大量重复的判断和使用、让代码更加易于维护和拓展。</li><li>尤其是我们对MQ这样的多种消息体中不同属性同类的值，进行适配再加上代理类，就可以使用简单的配置方式接入对方提供的MQ消息，而不需要大量重复的开发。非常利于拓展。</li><li>设计模式的学习过程可能会在一些章节中涉及到其他设计模式的体现，只不过不会重点讲解，避免喧宾夺主。但在实际的使用中，往往很多设计模式是综合使用的，并不会单一出现。</li></ul>`,82);function M(O,j){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),t(a)])]),k,v,m,n("ol",null,[b,g,n("li",null,[s("涉及工程三个，可以通过关注"),h,s("："),n("a",q,[f,t(a)]),s("，回复"),y,s("获取(打开获取的链接，找到序号18)")])]),_,n("ul",null,[n("li",null,[s("图片来自："),n("a",w,[s("https://refactoringguru.cn/design-patterns/adapter"),t(a)])])]),S])}const x=p(l,[["render",M],["__file","2020-06-02-zhongxue Java shejimoshi《shipeiqimoshi》.html.vue"]]);export{x as default};
