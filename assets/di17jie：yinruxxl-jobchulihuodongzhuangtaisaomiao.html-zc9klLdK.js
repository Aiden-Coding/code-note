import{_ as r,r as i,o as n,c as a,a as e,b as l,d as t,e as h}from"./app-3RcBQnkC.js";const s={},c=e("h1",{id:"第17节-引入xxl-job处理活动状态扫描",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第17节-引入xxl-job处理活动状态扫描","aria-hidden":"true"},"#"),l(" 第17节：引入xxl-job处理活动状态扫描")],-1),d=e("br",null,null,-1),x={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},_=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！")],-1),u={href:"https://gitcode.net/KnowledgePlanet/Lottery/-/tree/211106_xfg_xxl-job",target:"_blank",rel:"noopener noreferrer"},b=e("li",null,"描述：引入XXL-JOB，分布式任务调度平台，处理需要使用定时任务解决的场景。",-1),f=e("h2",{id:"零、优秀作业",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#零、优秀作业","aria-hidden":"true"},"#"),l(" 零、优秀作业")],-1),p={href:"https://t.zsxq.com/06A6AyFIa",target:"_blank",rel:"noopener noreferrer"},g={href:"https://t.zsxq.com/06f2nie2V",target:"_blank",rel:"noopener noreferrer"},j={href:"https://t.zsxq.com/06ZzFuVBY",target:"_blank",rel:"noopener noreferrer"},m={href:"https://t.zsxq.com/06eeII2fy",target:"_blank",rel:"noopener noreferrer"},k={href:"https://t.zsxq.com/067yvVfIE",target:"_blank",rel:"noopener noreferrer"},q=h('<h2 id="一、开发日志" tabindex="-1"><a class="header-anchor" href="#一、开发日志" aria-hidden="true">#</a> 一、开发日志</h2><ul><li>搭建 XXL-JOB 分布式任务调度环境，这里需要在官网：https://github.com/xuxueli/xxl-job/ 下载运行包，按照 Java SpringBoot 修改一些基本配置，项目启动即可。</li><li>配置 XXL-JOB 的基础使用环境，导入库表、配置文件、验证官网管理，测试任务启动运行</li><li>解决第一个分布式任务场景问题，扫描抽奖活动状态，把审核通过的活动扫描为活动中，把已过期活动中的状态扫描为关闭。后续章节我们还会使用分布式任务调度系统解决其他场景问题。</li></ul><h2 id="二、搭建分布式任务调度环境-xxl-job" tabindex="-1"><a class="header-anchor" href="#二、搭建分布式任务调度环境-xxl-job" aria-hidden="true">#</a> 二、搭建分布式任务调度环境(XXL-JOB)</h2><h3 id="_1-xxl-job-系统简介" tabindex="-1"><a class="header-anchor" href="#_1-xxl-job-系统简介" aria-hidden="true">#</a> 1. XXL-JOB 系统简介</h3><p>XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><h3 id="_2-功能" tabindex="-1"><a class="header-anchor" href="#_2-功能" aria-hidden="true">#</a> 2. 功能</h3><ul><li>1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</li><li>2、动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；</li><li>3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；</li><li>4、执行器HA（分布式）：任务分布式执行，任务&quot;执行器&quot;支持集群部署，可保证任务执行HA；</li><li>5、注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</li><li>6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</li><li>7、触发策略：提供丰富的任务触发策略，包括：Cron触发、固定间隔触发、固定延时触发、API（事件）触发、人工触发、父子任务触发；</li><li>8、调度过期策略：调度中心错过调度时间的补偿处理策略，包括：忽略、立即补偿触发一次等；</li><li>9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</li><li>10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li><li>11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</li><li>12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</li><li>13、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</li><li>14、分片广播任务：执行器集群部署时，任务路由策略选择&quot;分片广播&quot;情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</li><li>15、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</li><li>16、故障转移：任务路由策略选择&quot;故障转移&quot;情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。</li><li>17、任务进度监控：支持实时监控任务进度；</li></ul>',7);function B(X,L){const o=i("ExternalLinkIcon");return n(),a("div",null,[c,e("p",null,[l("作者：小傅哥 "),d,l("博客："),e("a",x,[l("https://bugstack.cn"),t(o)])]),_,e("ul",null,[e("li",null,[l("分支："),e("a",u,[l("211106_xfg_xxl-job"),t(o)])]),b]),f,e("ul",null,[e("li",null,[e("a",p,[l("引入xxl-job处理活动状态扫描 @一点江南"),t(o)])]),e("li",null,[e("a",g,[l("引入xxl job处理活动状态扫描 @BerserkD"),t(o)])]),e("li",null,[e("a",j,[l("学习xxljob，使用xxljob实现扫描活动状态并更新 @Chin"),t(o)])]),e("li",null,[e("a",m,[l("引入xxl-job处理活动状态扫描 @Geroge Liu"),t(o)])]),e("li",null,[e("a",k,[l("引入xxl-job处理活动状态扫描 @liuc"),t(o)])])]),q])}const A=r(s,[["render",B],["__file","di17jie：yinruxxl-jobchulihuodongzhuangtaisaomiao.html.vue"]]);export{A as default};
