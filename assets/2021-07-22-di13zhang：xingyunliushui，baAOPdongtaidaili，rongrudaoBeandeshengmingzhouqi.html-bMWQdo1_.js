import{_ as t,r as p,o as c,c as o,a as n,b as s,d as e,e as i}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"《spring-手撸专栏》第-13-章-行云流水-把aop动态代理-融入到bean的生命周期",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《spring-手撸专栏》第-13-章-行云流水-把aop动态代理-融入到bean的生命周期","aria-hidden":"true"},"#"),s(" 《Spring 手撸专栏》第 13 章：行云流水，把AOP动态代理，融入到Bean的生命周期")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),v={href:"https://mp.weixin.qq.com/s/BFYJLNzVO8NxjmeCUzmLyg",target:"_blank",rel:"noopener noreferrer"},m=i(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>嘎小子，这片代码水太深你把握不住！</code></p><p>在电视剧《楚汉传奇》中有这么一段刘邦与韩信的饮酒对话，刘邦问韩信我那个<code>曹参</code>读过书见过世面能带多少兵，韩信说能带一万五，又补充说一万五都吃力。刘邦又一一说出<code>樊哙</code>、<code>卢绾</code>、<code>周勃</code>，韩信笑着说不足2万，脑子不行。这时候刘邦有点挂不住脸了，问：那我呢，我能带多少兵。韩信说，你能带十万。刘邦一看比他们都多，啊，还行。转头一想就问韩信那你呢，你能带多少兵。韩信喝多了，说啊，我，我多多益善。这时候刘邦恼了领导劲上来了，问：那我为什么能管着你，你给我说，说呀！</p><hr><p>这像不像你领导问你，你能写多少代码、搭多少框架、接多少项目。可能很大一部分没经历太多的新人码农，仅仅是能完成一些简单的功能模块开发，而没有办法驾驭整个项目的涉及到的所有工程，也不能为项目提炼出一些可复用的通用性组件模块。在初级码农的心里，接一点需求还好，但没有人带的时候完全接一个较大型项目就会比较慌了，不知道这里有没有坑，自己也把握住不。<em>这些代码一块块的带着能写，但是都弄到一块，就太难了！</em></p><p>在代码开发成长的这条路上，要经历CRUD、ERP查数据、接口包装、功能开发、服务整合、系统建设等，一直到独立带人承担较大型项目的搭建。这一过程需要你能有大量的编写代码经验积累和复杂问题的处理手段，之后才能一段段的把看似独立的模块后者代码片段组装成一个较大型能跑起来的项目。就像 Spring 的开发过程一样，我们总是不断在添加新的功能片段，最后又把技术实现与Spring 容器整合，让使用方可以更简单的运用 Spring 提供的能力。</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>在上一章节我们通过基于 Proxy.newProxyInstance 代理操作中处理方法匹配和方法拦截，对匹配的对象进行自定义的处理操作。并把这样的技术核心内容拆解到 Spring 中，用于实现 AOP 部分，通过拆分后基本可以明确各个类的职责，包括你的代理目标对象属性、拦截器属性、方法匹配属性，以及两种不同的代理操作 JDK 和 CGlib 的方式。</p><p>再有了一个 AOP 核心功能的实现后，我们可以通过单元测试的方式进行验证切面功能对方法进行拦截，但如果这是一个面向用户使用的功能，就不太可能让用户这么复杂且没有与 Spring 结合的方式单独使用 AOP，虽然可以满足需求，但使用上还是过去分散。</p><p>因此我们需要在本章节完成 AOP 核心功能与 Spring 框架的整合，最终能通过在 Spring 配置的方式完成切面的操作。</p><h2 id="三、方案" tabindex="-1"><a class="header-anchor" href="#三、方案" aria-hidden="true">#</a> 三、方案</h2><p>其实在有了AOP的核心功能实现后，把这部分功能服务融入到 Spring 其实也不难，只不过要解决几个问题，包括：怎么借着 BeanPostProcessor 把动态代理融入到 Bean 的生命周期中，以及如何组装各项切点、拦截、前置的功能和适配对应的代理器。整体设计结构如下图：</p><p><img src="https://bugstack.cn/assets/images/spring/spring-13-01.png" alt=""></p><ul><li>为了可以让对象创建过程中，能把xml中配置的代理对象也就是切面的一些类对象实例化，就需要用到 BeanPostProcessor 提供的方法，因为这个类的中的方法可以分别作用与 Bean 对象执行初始化前后修改 Bean 的对象的扩展信息。但这里需要集合于 BeanPostProcessor 实现新的接口和实现类，这样才能定向获取对应的类信息。</li><li>但因为创建的是代理对象不是之前流程里的普通对象，所以我们需要前置于其他对象的创建，所以在实际开发的过程中，需要在 AbstractAutowireCapableBeanFactory#createBean 优先完成 Bean 对象的判断，是否需要代理，有则直接返回代理对象。<em>在Spring的源码中会有 createBean 和 doCreateBean 的方法拆分</em></li><li>这里还包括要解决方法拦截器的具体功能，提供一些 BeforeAdvice、AfterAdvice 的实现，让用户可以更简化的使用切面功能。除此之外还包括需要包装切面表达式以及拦截方法的整合，以及提供不同类型的代理方式的代理工厂，来包装我们的切面服务。</li></ul><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>small<span class="token operator">-</span>spring<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">12</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework
    │           ├── aop
    │           │   ├── aspectj
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   ├── framework 
    │           │   │   ├── adapter
    │           │   │   │   └── <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">.</span>java
    │           │   │   ├── autoproxy
    │           │   │   │   └── <span class="token class-name">DefaultAdvisorAutoProxyCreator</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Cglib2AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">AdvisedSupport</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Advisor</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ClassFilter</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodMatcher</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Pointcut</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">TargetSource</span><span class="token punctuation">.</span>java
    │           ├── beans
    │           │   ├── factory
    │           │   │   ├── config
    │           │   │   │   ├── <span class="token class-name">AutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanReference</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   ├── support
    │           │   │   │   ├── <span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">FactoryBeanRegistrySupport</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">.</span>java  
    │           │   │   ├── support
    │           │   │   │   └── <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Aware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanNameAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">DisposableBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">FactoryBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">HierarchicalBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">InitializingBean</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeansException</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PropertyValue</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">PropertyValues</span><span class="token punctuation">.</span>java 
    │           ├── context
    │           │   ├── event
    │           │   │   ├── <span class="token class-name">AbstractApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextClosedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   ├── support
    │           │   │   ├── <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractRefreshableApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEvent</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span>java 
    │           │   └── <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span>java
    │           ├── core<span class="token punctuation">.</span>io
    │           │   ├── <span class="token class-name">ClassPathResource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">FileSystemResource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">Resource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span>java 
    │           │   └── <span class="token class-name">UrlResource</span><span class="token punctuation">.</span>java
    │           └── utils
    │               └── <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span>java
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test
                ├── bean
                │   ├── <span class="token class-name">IUserService</span><span class="token punctuation">.</span>java
                │   ├── <span class="token class-name">UserService</span><span class="token punctuation">.</span>java
                │   └── <span class="token class-name">UserServiceInterceptor</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：Spring 专栏，获取完整源码</code></p><p>AOP 动态代理融入到Bean的生命周期中类关系，如图 13-2</p><p><img src="https://bugstack.cn/assets/images/spring/spring-13-02.png" alt="图 13-2"></p><ul><li>整个类关系图中可以看到，在以 BeanPostProcessor 接口实现继承的 InstantiationAwareBeanPostProcessor 接口后，做了一个自动代理创建的类 DefaultAdvisorAutoProxyCreator，这个类的就是用于处理整个 AOP 代理融入到 Bean 生命周期中的核心类。</li><li>DefaultAdvisorAutoProxyCreator 会依赖于拦截器、代理工厂和Pointcut与Advisor的包装服务 AspectJExpressionPointcutAdvisor，由它提供切面、拦截方法和表达式。</li><li>Spring 的 AOP 把 Advice 细化了 BeforeAdvice、AfterAdvice、AfterReturningAdvice、ThrowsAdvice，目前我们做的测试案例中只用到了 BeforeAdvice，这部分可以对照 Spring 的源码进行补充测试。</li></ul><h3 id="_2-定义advice拦截器链" tabindex="-1"><a class="header-anchor" href="#_2-定义advice拦截器链" aria-hidden="true">#</a> 2. 定义Advice拦截器链</h3><p><strong>cn.bugstack.springframework.aop.BeforeAdvice</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeforeAdvice</span> <span class="token keyword">extends</span> <span class="token class-name">Advice</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>cn.bugstack.springframework.aop.MethodBeforeAdvice</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token keyword">extends</span> <span class="token class-name">BeforeAdvice</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Callback before a given method is invoked.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> method being invoked
     * <span class="token keyword">@param</span> <span class="token parameter">args</span>   arguments to the method
     * <span class="token keyword">@param</span> <span class="token parameter">target</span> target of the method invocation. May be <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span> if this object wishes to abort the call.
     *                   Any exception thrown will be returned to the caller if it&#39;s
     *                   allowed by the method signature. Otherwise the exception
     *                   will be wrapped as a runtime exception.
     */</span>
    <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 Spring 框架中，Advice 都是通过方法拦截器 MethodInterceptor 实现的。环绕 Advice 类似一个拦截器的链路，Before Advice、After advice等，不过暂时我们需要那么多就只定义了一个 MethodBeforeAdvice 的接口定义。</li></ul><h3 id="_3-定义-advisor-访问者" tabindex="-1"><a class="header-anchor" href="#_3-定义-advisor-访问者" aria-hidden="true">#</a> 3. 定义 Advisor 访问者</h3><p><strong>cn.bugstack.springframework.aop.Advisor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Advisor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Return the advice part of this aspect. An advice may be an
     * interceptor, a before advice, a throws advice, etc.
     * <span class="token keyword">@return</span> the advice that should apply if the pointcut matches
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">BeforeAdvice</span></span>
     */</span>
    <span class="token class-name">Advice</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>cn.bugstack.springframework.aop.PointcutAdvisor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PointcutAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">Advisor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Get the Pointcut that drives this advisor.
     */</span>
    <span class="token class-name">Pointcut</span> <span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>PointcutAdvisor 承担了 Pointcut 和 Advice 的组合，Pointcut 用于获取 JoinPoint，而 Advice 决定于 JoinPoint 执行什么操作。</li></ul><p><strong>cn.bugstack.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJExpressionPointcutAdvisor</span> <span class="token keyword">implements</span> <span class="token class-name">PointcutAdvisor</span> <span class="token punctuation">{</span>

    <span class="token comment">// 切面</span>
    <span class="token keyword">private</span> <span class="token class-name">AspectJExpressionPointcut</span> pointcut<span class="token punctuation">;</span>
    <span class="token comment">// 具体的拦截方法</span>
    <span class="token keyword">private</span> <span class="token class-name">Advice</span> advice<span class="token punctuation">;</span>
    <span class="token comment">// 表达式</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> expression<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> expression<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> expression<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Pointcut</span> <span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> pointcut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pointcut<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Advice</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> advice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAdvice</span><span class="token punctuation">(</span><span class="token class-name">Advice</span> advice<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advice <span class="token operator">=</span> advice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AspectJExpressionPointcutAdvisor 实现了 PointcutAdvisor 接口，把切面 pointcut、拦截方法 advice 和具体的拦截表达式包装在一起。这样就可以在 xml 的配置中定义一个 pointcutAdvisor 切面拦截器了。</li></ul><h3 id="_4-方法拦截器" tabindex="-1"><a class="header-anchor" href="#_4-方法拦截器" aria-hidden="true">#</a> 4. 方法拦截器</h3><p><strong>cn.bugstack.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodBeforeAdviceInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MethodBeforeAdvice</span> advice<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">(</span><span class="token class-name">MethodBeforeAdvice</span> advice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advice <span class="token operator">=</span> advice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> advice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAdvice</span><span class="token punctuation">(</span><span class="token class-name">MethodBeforeAdvice</span> advice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advice <span class="token operator">=</span> advice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> methodInvocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advice<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>methodInvocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodInvocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodInvocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> methodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MethodBeforeAdviceInterceptor 实现了 MethodInterceptor 接口，在 invoke 方法中调用 advice 中的 before 方法，传入对应的参数信息。</li><li>而这个 advice.before 则是用于自己实现 MethodBeforeAdvice 接口后做的相应处理。<em>其实可以看到具体的 MethodInterceptor 实现类，其实和我们之前做的测试是一样的，只不过现在交给了 Spring 来处理</em></li></ul><h3 id="_5-代理工厂" tabindex="-1"><a class="header-anchor" href="#_5-代理工厂" aria-hidden="true">#</a> 5. 代理工厂</h3><p><strong>cn.bugstack.springframework.aop.framework.ProxyFactory</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AdvisedSupport</span> advisedSupport<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span> advisedSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedSupport <span class="token operator">=</span> advisedSupport<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">createAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">AopProxy</span> <span class="token function">createAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>advisedSupport<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cglib2AopProxy</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其实这个代理工厂主要解决的是关于 JDK 和 Cglib 两种代理的选择问题，有了代理工厂就可以按照不同的创建需求进行控制。</li></ul><h3 id="_6-融入bean生命周期的自动代理创建者" tabindex="-1"><a class="header-anchor" href="#_6-融入bean生命周期的自动代理创建者" aria-hidden="true">#</a> 6. 融入Bean生命周期的自动代理创建者</h3><p><strong>cn.bugstack.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdvisorAutoProxyCreator</span> <span class="token keyword">implements</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">&gt;</span></span> advisors <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AspectJExpressionPointcutAdvisor</span> advisor <span class="token operator">:</span> advisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ClassFilter</span> classFilter <span class="token operator">=</span> advisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>classFilter<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

            <span class="token class-name">AdvisedSupport</span> advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                targetSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetSource</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span>targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">.</span><span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodMatcher</span><span class="token punctuation">(</span>advisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            advisedSupport<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个 DefaultAdvisorAutoProxyCreator 类的主要核心实现在于 postProcessBeforeInstantiation 方法中，从通过 beanFactory.getBeansOfType 获取 AspectJExpressionPointcutAdvisor 开始。</li><li>获取了 advisors 以后就可以遍历相应的 AspectJExpressionPointcutAdvisor 填充对应的属性信息，包括：目标对象、拦截方法、匹配器，之后返回代理对象即可。</li><li>那么现在调用方获取到的这个 Bean 对象就是一个已经被切面注入的对象了，当调用方法的时候，则会被按需拦截，处理用户需要的信息。</li></ul><h3 id="_7-融入到bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_7-融入到bean的生命周期" aria-hidden="true">#</a> 7. 融入到Bean的生命周期</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAutowireCapableBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AutowireCapableBeanFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">InstantiationStrategy</span> instantiationStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断是否返回代理 Bean 对象</span>
            bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            bean <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给 bean 填充属性</span>
            <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span>
            bean <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">&quot;Instantiation of bean failed.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 注册实现了 DisposableBean 接口的 Bean 对象</span>
        <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断 SCOPE_SINGLETON，SCOPE_PROTOTYPE</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">registerSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorBeforeInstantiation</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 注意，此方法为新增方法，与 “applyBeanPostProcessorBeforeInitialization” 是两个方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">applyBeanPostProcessorBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> processor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>processor <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span>processor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> result<span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因为创建的是代理对象不是之前流程里的普通对象，所以我们需要前置于其他对象的创建，即需要在 AbstractAutowireCapableBeanFactory#createBean 优先完成 Bean 对象的判断，是否需要代理，有则直接返回代理对象。</li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;小傅哥，100001，深圳&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;注册用户：&quot;</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">&quot; success！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 UserService 中提供了2个不同方法，另外你还可以增加新的类来加入测试。后面我们的测试过程，会给这个两个方法添加我们的拦截处理，打印方法执行耗时。</li></ul><h3 id="_2-自定义拦截方法" tabindex="-1"><a class="header-anchor" href="#_2-自定义拦截方法" aria-hidden="true">#</a> 2. 自定义拦截方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceBeforeAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;拦截方法：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与上一章节的拦截方法相比，我们不在是实现 MethodInterceptor 接口，而是实现 MethodBeforeAdvice 环绕拦截。在这个方法中我们可以获取到方法的一些信息，如果还开发了它的 MethodAfterAdvice 则可以两个接口一起实现。</li></ul><h3 id="_3-spring-xml-配置-aop" tabindex="-1"><a class="header-anchor" href="#_3-spring-xml-配置-aop" aria-hidden="true">#</a> 3. spring.xml 配置 AOP</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.test.bean.UserService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.test.bean.UserServiceBeforeAdvice<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>methodInterceptor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>advice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeAdvice<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pointcutAdvisor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>expression<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>advice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>methodInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这回再使用 AOP 就可以像 Spring 中一样，通过在 xml 中配置即可。因为我们已经把 AOP 的功能融合到 Bean 的生命周期里去了，你的新增拦截方法都会被自动处理。</li></ul><h3 id="_4-单元测试" tabindex="-1"><a class="header-anchor" href="#_4-单元测试" aria-hidden="true">#</a> 4. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_aop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserService</span> userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在单元测试中你只需要按照正常获取和使用 Bean 对象即可，不过这个时候如果被切面拦截了，那么其实你获取到的就是对应的代理对象里面的处理操作了。</li></ul><p><strong>测试结果</strong></p><p><img src="https://bugstack.cn/assets/images/spring/spring-13-03.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>拦截方法：queryUserInfo
测试结果：小傅哥，<span class="token number">100001</span>，深圳

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过测试结果可以看到，我们已经让拦截方法生效了，也不需要自己手动处理切面、拦截方法等内容。<em>截图上可以看到，这个时候的 IUserService 就是一个代理对象</em></li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>本章节实现 AOP 功能的外在体现主要是把以前自己在单元测试中的切面拦截，交给 Spring 的 xml 配置了，也就不需要自己手动处理了。那么这里有一个非常重要的知识点，就是把相应的功能如何与 Spring 的 Bean 生命周期结合起来，本章节用到的 BeanPostProcessor，因为它可以解决在 Bean 对象执行初始化方法之前，用于修改新实例化 Bean 对象的扩展点，所以我们也就可以处理自己的 AOP 代理对象逻辑了。</li><li>一个功能的实现往往包括核心部分、组装部分、链接部分，为了这些各自职责的分工，则需要创建接口和类，由不同关系的继承、实现进行组装。只有明确了各个职责分工，才好灵活的扩展相应的功能逻辑，否则很难驾驭大型系统的开发和建设，也就是那种不好把握的感觉。</li><li>目前我们实现的 AOP 与 Spring 源码中的核心逻辑是类似的，但更会偏简单一些，也不会考虑更多的复杂场景遇到的问题，包括是否有构造函数、是否为代理中的切面等。其实也可以看出只要是 Java 中的一些特性，都需要在真实使用的 Spring 中进行完整的实现，否则在使用这些功能的时候就会遇到各种问题。</li></ul><h2 id="七、优秀作业" tabindex="-1"><a class="header-anchor" href="#七、优秀作业" aria-hidden="true">#</a> 七、优秀作业</h2>`,73),b={href:"https://t.zsxq.com/05B2vRvzr",target:"_blank",rel:"noopener noreferrer"},g={href:"https://t.zsxq.com/06Ybq3fE2",target:"_blank",rel:"noopener noreferrer"},h={href:"https://t.zsxq.com/081HcrZMA",target:"_blank",rel:"noopener noreferrer"},f={href:"https://t.zsxq.com/08jTKRDFD",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/08tlg2pKA",target:"_blank",rel:"noopener noreferrer"},w={href:"https://t.zsxq.com/0aMY674Df",target:"_blank",rel:"noopener noreferrer"},A={href:"https://t.zsxq.com/0bs96PAkO",target:"_blank",rel:"noopener noreferrer"};function x(j,B){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)]),k,s("原文："),n("a",v,[s("https://mp.weixin.qq.com/s/BFYJLNzVO8NxjmeCUzmLyg"),e(a)])]),m,n("ul",null,[n("li",null,[n("a",b,[s("定义 Advice通知 拦截器链 @Ray"),e(a)])]),n("li",null,[n("a",g,[s("已经通过一些包装类将切点信息进行包装，使用jdk和cglib进行动态代理 @W"),e(a)])]),n("li",null,[n("a",h,[s("借着 BeanPostProcessor（该接口的实现类提供的方法可以作用于Bean对象执行初始化前后，修改Bean对象的扩展信息） 把动态代理融入到 Bean 的生命周期中 @liuc"),e(a)])]),n("li",null,[n("a",f,[s("把 AOP 融入到 Bean 的生命周期中。@Homage"),e(a)])]),n("li",null,[n("a",y,[s("整合 AOP 核心功能到 Spring 框架，达到可以通过 Spring 配置的方式完成切面操作。@水中捞月"),e(a)])]),n("li",null,[n("a",w,[s("AOP融入Bean生命周期 @在九月"),e(a)])]),n("li",null,[n("a",A,[s("过扫描包来获取所有使用注解的 bean @lucien"),e(a)])])])])}const S=t(l,[["render",x],["__file","2021-07-22-di13zhang：xingyunliushui，baAOPdongtaidaili，rongrudaoBeandeshengmingzhouqi.html.vue"]]);export{S as default};
