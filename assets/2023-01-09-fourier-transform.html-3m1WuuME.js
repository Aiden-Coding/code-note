import{_ as t,r as e,o,c,a as n,b as s,d as p,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《程序员数学-离散傅立叶变换》——-把时间信号解析成构成它的频率",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-离散傅立叶变换》——-把时间信号解析成构成它的频率","aria-hidden":"true"},"#"),s(" 《程序员数学：离散傅立叶变换》—— 把时间信号解析成构成它的频率")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},v=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>离散傅立叶变换（DFT）是一种常用的数字信号处理方法，它可以用来将时域信号转换为频域信号，或者将频域信号转换回时域信号。这种变换有许多应用，包括：</p><ul><li>图像压缩：通过将图像的频谱中的低频分量保留，并删除高频分量来减小图像文件大小。</li><li>音频信号处理：可以使用DFT来分析和修改音频信号中的频谱特征，例如增强低频或降低高频。</li><li>时域信号的分析：DFT可以用来确定时域信号中的周期性和波形。</li><li>将时域信号转换为频域信号以进行信号滤波：可以使用DFT将信号转换为频域，然后使用滤波器来滤除不需要的频率分量，再将信号转换回时域。</li></ul><p>这些只是DFT的一些常用用途，实际上还有许多其他用途。</p><h2 id="二、离散傅立叶变换" tabindex="-1"><a class="header-anchor" href="#二、离散傅立叶变换" aria-hidden="true">#</a> 二、离散傅立叶变换</h2><p><strong>离散傅立叶变换</strong>( DFT) 将函数的等间隔样本的有限序列转换为离散时间傅立叶变换 (DTFT) 的等间隔样本的相同长度序列，这是频率的复值函数。DTFT 采样的间隔是输入序列持续时间的倒数。逆 DFT 是一个傅立叶级数，使用 DTFT 样本作为相应 DTFT 频率下的复正弦曲线的系数。它具有与原始输入序列相同的样本值。因此，DFT 被称为原始输入序列的频域表示。如果原始序列跨越函数的所有非零值，则其 DTFT 是连续的（且是周期性的），并且 DFT 提供一个周期的离散样本。如果原始序列是周期函数的一个循环，</p><p>离散傅立叶变换变换<code>N</code>复数序列：</p><p><code>{x n } = x 0 , x 1 , x 2 ..., x N-1</code></p><p>进入另一个复数序列：</p><p><code>{X k } = X 0 , X 1 , X 2 ..., X N-1</code></p><p>定义如下：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-08.png?raw=true" width="500px"></div><p><strong>离散时间傅立叶变换</strong>( <strong>DTFT</strong> ) 是傅立叶分析的一种形式，适用于连续函数的均匀间隔样本。术语离散时间是指变换对离散数据（样本）进行操作，其间隔通常具有时间单位。它仅从样本中生成一个频率函数，该函数是原始连续函数的连续傅立叶变换的周期性求和。</p><p><strong>快速傅立叶变换</strong>( <strong>FFT</strong> ) 是一种算法，它在一段时间（或空间）内对信号进行采样并将其分成频率分量。这些分量是不同频率的单一正弦振荡，每个都有自己的振幅和相位。</p><p>下图说明了此转换。在图中测量的时间段内，信号包含 3 个不同的主频率。</p><p>时域和频域中的信号视图：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-01.png?raw=true" width="500px"></div><p>FFT 算法计算序列的离散傅立叶变换 (DFT) 或其逆变换 (IFFT)。傅立叶分析将信号从其原始域转换为频域中的表示，反之亦然。FFT 通过将 DFT 矩阵分解为稀疏（大部分为零）因子的乘积来快速计算此类变换。因此，它设法降低了从 O(n 2 ) 计算 DFT 的复杂性，如果简单地将 DFT 的定义应用到 O(n log n)，就会出现这种复杂性，其中 n 是数据大小。</p><p>这里对 10、20、30、40 和 50 Hz 的余弦波之和进行离散傅立叶分析：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-02.png?raw=true" width="650px"></div><h2 id="三、解释" tabindex="-1"><a class="header-anchor" href="#三、解释" aria-hidden="true">#</a> 三、解释</h2><p>傅立叶变换是有史以来最深刻的见解之一。不幸的是，含义隐藏在密集的方程式中：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-03.png?raw=true" width="350px"></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-04.png?raw=true" width="350px"></div><p>与其跳入符号，不如让我们亲身体验一下关键思想。这是一个通俗易懂的比喻：</p><ul><li>*傅立叶变换有什么作用？*给定一杯冰沙，它会找到食谱。</li><li>*如何？*通过过滤器运行冰沙以提取每种成分。</li><li>*为什么？*食谱比冰沙本身更容易分析、比较和修改。</li><li>*我们如何取回冰沙？*混合成分。</li></ul><p><strong>用圆圈思考，而不仅仅是正弦曲线</strong></p><p>傅立叶变换是关于圆形路径（不是一维正弦曲线），而欧拉公式是一种生成路径的巧妙方法：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-05.png?raw=true" width="450px"></div><p>一定要用虚指数绕圈吗？没有。但它方便且紧凑。当然，我们可以将我们的路径描述为二维（真实和虚构）的协调运动，但不要忘记大局：我们只是在绕圈移动。</p><p><strong>发现完整的转换</strong></p><p>重要见解：我们的信号只是一堆时间尖峰！如果我们合并每个时间尖峰的配方，我们应该得到完整信号的配方。</p><p>傅立叶变换逐个频率地构建配方：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-06.png?raw=true" width="750px"></div><p>一些注意事项：</p><ul><li>N = 我们拥有的时间样本数</li><li>n = 我们正在考虑的当前样本 (0 ... N-1)</li><li>x n = 时间 n 的信号值</li><li>k = 我们正在考虑的当前频率（0 赫兹到 N-1 赫兹）</li><li>X k = 信号中频率 k 的量（振幅和相位，复数）</li><li>1/N 因子通常移动到反向变换（从频率回到时间）。这是允许的，尽管我更喜欢正向变换中的 1/N，因为它给出了时间尖峰的实际大小。您可以变得狂野，甚至可以在两个变换上使用 1/sqrt(N)（向前和向后创建 1/N 因子）。</li><li>n/N 是我们经历的时间的百分比。2 _ pi _ k 是以弧度/秒为单位的速度。e^-ix 是我们向后移动的循环路径。对于这个速度和时间，组合就是我们移动了多远。</li><li>傅立叶变换的原始方程只是说“添加复数”。许多编程语言无法直接处理复数，因此您将所有内容都转换为直角坐标并相加。</li></ul><p>Stuart Riffle 对傅立叶变换有很好的解释：</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fourier-transform-07.png?raw=true" width="350px"></div><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-apache-math-函数" tabindex="-1"><a class="header-anchor" href="#_1-apache-math-函数" aria-hidden="true">#</a> 1. Apache Math 函数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_ApacheMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> arrayLength <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    inputData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>arrayLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> inputData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inputData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">FastFourierTransformer</span> fft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastFourierTransformer</span><span class="token punctuation">(</span><span class="token class-name">DftNormalization</span><span class="token punctuation">.</span><span class="token constant">STANDARD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> complexes <span class="token operator">=</span> fft<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>inputData<span class="token punctuation">,</span> <span class="token class-name">TransformType</span><span class="token punctuation">.</span><span class="token constant">FORWARD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>inputData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>complexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>需要引入 <code>commons-math3</code></li></ul><h3 id="_2-基础实现" tabindex="-1"><a class="header-anchor" href="#_2-基础实现" aria-hidden="true">#</a> 2. 基础实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dft</span><span class="token punctuation">(</span><span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// exp(-2i*n*PI)=cos(-2*n*PI)+i*sin(-2*n*PI)=1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//使用欧拉公式e^(-i*2pi*k/N) = cos(-2pi*k/N) + i*sin(-2pi*k/N)</span>
            <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>
            <span class="token class-name">Complex</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">multiple</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-快速实现" tabindex="-1"><a class="header-anchor" href="#_3-快速实现" aria-hidden="true">#</a> 3. 快速实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fft</span><span class="token punctuation">(</span><span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 因为exp(-2i*n*PI)=1，n=1时递归原点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果信号数为奇数，使用dft计算</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">dft</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 提取下标为偶数的原始信号值进行递归fft计算</span>
    <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> even <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        even<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evenValue <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 提取下标为奇数的原始信号值进行fft计算</span>
    <span class="token comment">// 节约内存</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        even<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oddValue <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 偶数+奇数</span>
    <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用欧拉公式e^(-i*2pi*k/N) = cos(-2pi*k/N) + i*sin(-2pi*k/N)</span>
        <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>
        <span class="token class-name">Complex</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> evenValue<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">multiple</span><span class="token punctuation">(</span>oddValue<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// exp(-2*(k+n/2)*PI/n) 相当于 -exp(-2*k*PI/n)，其中exp(-n*PI)=-1(欧拉公式);</span>
        result<span class="token punctuation">[</span>k <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> evenValue<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">multiple</span><span class="token punctuation">(</span>oddValue<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dft</span><span class="token punctuation">(</span><span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 1个信号exp(-2i*n*PI)=1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token class-name">Complex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//使用欧拉公式e^(-i*2pi*k/N) = cos(-2pi*k/N) + i*sin(-2pi*k/N)</span>
            <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>
            <span class="token class-name">Complex</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">multiple</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,48),b={href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/fourier-transform",target:"_blank",rel:"noopener noreferrer"},h={href:"https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.youtube.com/watch?v=iN0VG9N2q0U&t=0s&index=77&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.youtube.com/watch?v=spUNpyF58BY&t=0s&index=76&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.youtube.com/watch?v=htCj9exbGo0&index=78&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&t=0s",target:"_blank",rel:"noopener noreferrer"},x={href:"https://en.wikipedia.org/wiki/Fourier_transform",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.wikiwand.com/en/Discrete_Fourier_transform",target:"_blank",rel:"noopener noreferrer"},y={href:"https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.wikiwand.com/en/Fast_Fourier_transform",target:"_blank",rel:"noopener noreferrer"};function T(D,N){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),p(a)]),d,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),p(a)])]),v,n("p",null,[s("本文来自于对Github文章的翻译："),n("a",b,[s("https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/fourier-transform"),p(a)]),s(" 如果你还需要更多的资料可以阅读一下内容；")]),n("ul",null,[n("li",null,[n("a",h,[s("傅里叶变换交互式指南"),p(a)])]),n("li",null,[n("a",f,[s("Better Explained YouTube 上的 DFT"),p(a)])]),n("li",null,[n("a",g,[s("3Blue1Brown 在 YouTube 上发布的英国《金融时报》"),p(a)])]),n("li",null,[n("a",w,[s("YouTube 上的 FFT，作者：Simon Xu"),p(a)])]),n("li",null,[s("维基百科 "),n("ul",null,[n("li",null,[n("a",x,[s("金融时报"),p(a)])]),n("li",null,[n("a",_,[s("离散傅里叶变换"),p(a)])]),n("li",null,[n("a",y,[s("双频傅立叶变换"),p(a)])]),n("li",null,[n("a",F,[s("快速傅里叶变换"),p(a)])])])])])])}const j=t(i,[["render",T],["__file","2023-01-09-fourier-transform.html.vue"]]);export{j as default};
