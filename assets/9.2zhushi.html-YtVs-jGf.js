import{_ as n,o as s,c as a,e as t}from"./app-3RcBQnkC.js";const e={},p=t(`<h1 id="_9-2-注释" tabindex="-1"><a class="header-anchor" href="#_9-2-注释" aria-hidden="true">#</a> 9.2 注释</h1><p>注释的树 API 都基于 AnnotationNode 类，它的公共 API 如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationNode</span> <span class="token keyword">extends</span> <span class="token class-name">AnnotationVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AnnotationNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AnnotationNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// AnnotationVisitor 接口的方法</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">AnnotationVisitor</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>desc 字段包含了注释类型，而 values 字段包含了名称/值对，其中每个名字后面都跟有相关联的值（值的表示在 Javadoc 中描述）。</p><p>可以看出，AnnotationNode 类扩展了 AnnotationVisitor 类，还提供了一个 accept 方法，它以一个这种类型的对象为参数，比如具有这个类和方法访问器类的 ClassNod 和MethodNode 类。我们前面已经看到用于类和方法的模式也可用于合成处理注释的核心与树 API 组件。例如，对于基于继承的模式（见 7.2.2 节），可进行“匿名内部类”的变体，使其适用于注释，给出如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationNode</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将注释转换代码放在这里</span>
            <span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> visible<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","9.2zhushi.html.vue"]]);export{d as default};
