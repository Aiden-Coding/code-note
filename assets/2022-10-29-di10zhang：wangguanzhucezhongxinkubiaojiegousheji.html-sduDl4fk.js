import{_ as o,r as s,o as r,c,a as e,b as n,d as a,e as i}from"./app-3RcBQnkC.js";const l={},h=e("h1",{id:"《api网关》第10章-网关注册中心库表结构设计",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#《api网关》第10章-网关注册中心库表结构设计","aria-hidden":"true"},"#"),n(" 《API网关》第10章：网关注册中心库表结构设计")],-1),d=e("br",null,null,-1),_={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},u=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),p=e("li",null,[e("strong",null,"本章难度"),n("：★★★☆☆")],-1),g=e("li",null,[e("strong",null,"本章重点"),n("：设计网关注册中心的库表结构，满足后续的功能模块实现。")],-1),f=e("strong",null,"课程视频",-1),b={href:"https://t.zsxq.com/07a4f1qNc",target:"_blank",rel:"noopener noreferrer"},x=i('<h2 id="一、学习指引" tabindex="-1"><a class="header-anchor" href="#一、学习指引" aria-hidden="true">#</a> 一、学习指引</h2><p><code>看库表结构就能看出代码好坏！</code></p><p>看一个系统开发的好坏，第一眼先去看这个系统的库表设计，如果库表设计的很好，那么基本代码逻辑不会差哪去。<strong>如果差，肯定设计库表的人与编写代码的人不是一个人！</strong></p><p>这是为啥呢？因为库表的设计，其实就是数据结构的设计，所有的算法逻辑支撑都来自于数据结构的合理搭建。如果库表不清晰，那么所承接实现出来的代码也会非常别扭。要这个数据不好拿，要那个数据不好取，流程间耦合，服务间牵连。所以才说好的代码实现，要做好库表设计。</p><h2 id="二、库表诉求" tabindex="-1"><a class="header-anchor" href="#二、库表诉求" aria-hidden="true">#</a> 二、库表诉求</h2><p>网关注册中心，是一个多边服务，管理的是RPC服务向网关通信层的关联注册。</p><p>这就像美团外面平台，一手管理着商家、一手服务着用户。让用户的订单又商家生产，再配送给用户。而我们的网关注册中心也是这样，一手管理着通信，一手管理着服务。让RPC注册到通信层，在用户调用HTTP接口时，可以把协议转换后调用到对应的RPC服务上。</p><div align="center"><img src="https://bugstack.cn/images/article/assembly/api-gateway/api-gateway-10-01.png?raw=true" width="600px"></div><p>基于以上这样的情况，所以我们要在注册中心维护；网关通信表、RPC服务表、以及两个表的关联表。</p>',9);function m(k,z){const t=s("ExternalLinkIcon");return r(),c("div",null,[h,e("p",null,[n("作者：小傅哥 "),d,n("博客："),e("a",_,[n("https://bugstack.cn"),a(t)])]),u,e("ul",null,[p,g,e("li",null,[f,n("："),e("a",b,[n("https://t.zsxq.com/07a4f1qNc"),a(t)])])]),x])}const N=o(l,[["render",m],["__file","2022-10-29-di10zhang：wangguanzhucezhongxinkubiaojiegousheji.html.vue"]]);export{N as default};
