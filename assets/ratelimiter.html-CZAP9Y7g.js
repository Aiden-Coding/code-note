import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"ratelimiter-限流-——-通过切面对单个用户进行限流和黑名单处理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ratelimiter-限流-——-通过切面对单个用户进行限流和黑名单处理","aria-hidden":"true"},"#"),s(" RateLimiter 限流 —— 通过切面对单个用户进行限流和黑名单处理")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=919588155&bvid=BV1iu4y1G7VQ&cid=1361583047&p=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=n("p",null,[s("本文的宗旨在于通过对实际场景的案例进行抽复现，教会读者如何对应用的接口以"),n("code",null,"浏览器指纹ID"),s("为维度的限流操作，同时对于频繁限流拦截的ID加入黑名单，不需要限流计算就🈲禁止对应用接口访问。通过这样的方式来保护应用的可用性。")],-1),b=n("p",null,"本文涉及的工程：",-1),h={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-ratelimiter",target:"_blank",rel:"noopener noreferrer"},g=p(`<h2 id="一、场景说明" tabindex="-1"><a class="header-anchor" href="#一、场景说明" aria-hidden="true">#</a> 一、场景说明</h2><p>关于登录的安全性管理有较多的手段，包括；设备信息、IP信息、绑定的信息、验证码登各类方式，不过在一些网页版的登录中，手机验证码方式都会有一个对应的提醒：&quot;请勿向他人泄露验证码信息&quot;</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-ratelimiter-01.png?raw=true" width="350px"></div><p>也就是说，如果你把你的验证码给我，我就可以登录你的账户，查看你的数据。对于一些不法分子通过让你进入某些应用的录屏会议后（XXX退货返现），就能拿到你的验证码，并做登录操作。还有一些是完全流氓式做法，就玩命的一些快递📦手机号+验证码频繁的撞接口，也是有概率成功登录的。</p><p>所以，本节的案例我们来考虑下该如何做这样的防护处理。</p><h2 id="二、方案设计" tabindex="-1"><a class="header-anchor" href="#二、方案设计" aria-hidden="true">#</a> 二、方案设计</h2><p>我们可以考虑在登录的阶段必须加一些恶心的图片比对码，或者滑块验证码。这也是一种方式，能尽可能降低登录的撞接口操作。之后再考虑添加一个指纹ID，对于验证码的生成与用户从浏览器设备过来的指纹做绑定。这样即使对方通过录屏拿到你的验证码，也仍然没有做登录操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token comment">// Initialize the agent at application startup.</span>
  <span class="token keyword">const</span> fpPromise <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;https://openfpcdn.io/fingerprintjs/v4&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">FingerprintJS</span> <span class="token operator">=&gt;</span> FingerprintJS<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// Get the visitor identifier when you need it.</span>
  fpPromise
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">fp</span> <span class="token operator">=&gt;</span> fp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// This is the visitor identifier:</span>
      <span class="token keyword">const</span> visitorId <span class="token operator">=</span> result<span class="token punctuation">.</span>visitorId
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>visitorId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了上面这个方案，我们至少可以做一些安全的管控了。但还有臭不要脸的，一直刷你接口。这既有安全风险，又有对服务器的压力。所以我们要考虑对于这样的恶意用户进行<code>限流和自动化黑名单</code>处理。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-ratelimiter-02.png?raw=true" width="750px"></div><p>浏览器指纹的方案只需要做一个验证码绑定即可，之后<code>限流和自动化黑名单</code>，则需要做一些代码的开发。通过配置的方式为每一个需要做此类功能的接口添加上<strong>服务治理</strong>。<em>通常我们把对应用的熔断、降级、限流、切量、黑白名单、人群等，都称为服务治理</em></p><h2 id="三、功能实现" tabindex="-1"><a class="header-anchor" href="#三、功能实现" aria-hidden="true">#</a> 三、功能实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-ratelimiter-03.png?raw=true" width="400px"></div><ul><li>工程中，提供了一个 AOP 切面专门用于处理使用了自定义注解 <code>AccessInterceptor</code> 接口方法。</li><li>这里的自定义注解，在 DDD 分层架构中，要放到 Types 层中，这样其他层才能引入使用。</li></ul><h3 id="_2-限流拦截" tabindex="-1"><a class="header-anchor" href="#_2-限流拦截" aria-hidden="true">#</a> 2. 限流拦截</h3><h4 id="_2-1-切面定义" tabindex="-1"><a class="header-anchor" href="#_2-1-切面定义" aria-hidden="true">#</a> 2.1 切面定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AccessInterceptor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** 用哪个字段作为拦截标识，未配置则默认走全部 */</span>
    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 限制频次（每秒请求次数） */</span>
    <span class="token keyword">double</span> <span class="token function">permitsPerSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 黑名单拦截（多少次限制后加入黑名单）0 不限制 */</span>
    <span class="token keyword">double</span> <span class="token function">blacklistCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 拦截后的执行方法 */</span>
    <span class="token class-name">String</span> <span class="token function">fallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(cn.bugstack.xfg.dev.tech.annotation.AccessInterceptor)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义切面注解，提供了拦截的key、限制频次、黑名单处理、拦截后的回调方法。再通过 @Pointcut 切入配置了自定义注解的接口方法</li></ul><h4 id="_2-2-切面拦截" tabindex="-1"><a class="header-anchor" href="#_2-2-切面拦截" aria-hidden="true">#</a> 2.2 切面拦截</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 个人限频记录1分钟</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">&gt;</span></span> loginRecord <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 个人限频黑名单24h - 自身的分布式业务场景，可以记录到 Redis 中</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> blacklist <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;aopPoint() &amp;&amp; @annotation(accessInterceptor)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doRouter</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">AccessInterceptor</span> accessInterceptor<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> accessInterceptor<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;annotation RateLimiter uId is null！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 获取拦截字段</span>
    <span class="token class-name">String</span> keyAttr <span class="token operator">=</span> <span class="token function">getAttrValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;aop attr {}&quot;</span><span class="token punctuation">,</span> keyAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token comment">// 黑名单拦截</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> accessInterceptor<span class="token punctuation">.</span><span class="token function">blacklistCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!=</span> blacklist<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> blacklist<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">)</span> <span class="token operator">&gt;</span> accessInterceptor<span class="token punctuation">.</span><span class="token function">blacklistCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;限流-黑名单拦截(24h)：{}&quot;</span><span class="token punctuation">,</span> keyAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">fallbackMethodResult</span><span class="token punctuation">(</span>jp<span class="token punctuation">,</span> accessInterceptor<span class="token punctuation">.</span><span class="token function">fallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   
    <span class="token comment">// 获取限流 -&gt; Guava 缓存1分钟</span>
    <span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> loginRecord<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> rateLimiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>accessInterceptor<span class="token punctuation">.</span><span class="token function">permitsPerSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        loginRecord<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">,</span> rateLimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 限流拦截</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>accessInterceptor<span class="token punctuation">.</span><span class="token function">blacklistCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> blacklist<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                blacklist<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                blacklist<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">,</span> blacklist<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>keyAttr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;限流-超频次拦截：{}&quot;</span><span class="token punctuation">,</span> keyAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">fallbackMethodResult</span><span class="token punctuation">(</span>jp<span class="token punctuation">,</span> accessInterceptor<span class="token punctuation">.</span><span class="token function">fallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回结果</span>
    <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过自定义注解中配置的拦截字段，获取对应的值。这里的值作为用户的标识使用，只对这个用户进行拦截。【也可以是一些列的信息确认，包括用户IP、设备等。】</li><li>这段代码流程中会根据自定义注解中的配置，对访问的用户进行限流拦截，当拦击次数达到加入黑名单的次数后，则直接存起来（Guava/Redis）在24h内直接走黑名单。—— 实际的场景中还会有风控的手段介入，以及人工来操作黑名单。</li></ul><h4 id="_2-3-回调处理" tabindex="-1"><a class="header-anchor" href="#_2-3-回调处理" aria-hidden="true">#</a> 2.3 回调处理</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 调用用户配置的回调方法，当拦截后，返回回调结果。
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">fallbackMethodResult</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">String</span> fallbackMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Signature</span> sig <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MethodSignature</span> methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> sig<span class="token punctuation">;</span>
    <span class="token class-name">Method</span> method <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>fallbackMethod<span class="token punctuation">,</span> methodSignature<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最终如果判定为拦截，则会走用户配置的回调方法。如 login 配置一个 loginErr，出入参都一样，只是名字不一样。这样才方便反射调用。</li></ul><h2 id="四、测试验证" tabindex="-1"><a class="header-anchor" href="#四、测试验证" aria-hidden="true">#</a> 四、测试验证</h2><h3 id="_1-接口配置" tabindex="-1"><a class="header-anchor" href="#_1-接口配置" aria-hidden="true">#</a> 1. 接口配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AccessInterceptor</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;fingerprint&quot;</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;loginErr&quot;</span><span class="token punctuation">,</span> permitsPerSecond <span class="token operator">=</span> <span class="token number">1.0d</span><span class="token punctuation">,</span> blacklistCount <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> fingerprint<span class="token punctuation">,</span> <span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;模拟登录 fingerprint:{}&quot;</span><span class="token punctuation">,</span> fingerprint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;模拟登录：登录成功 &quot;</span> <span class="token operator">+</span> uId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">loginErr</span><span class="token punctuation">(</span><span class="token class-name">String</span> fingerprint<span class="token punctuation">,</span> <span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;频次限制，请勿恶意访问！&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给你需要拦截的方法，添加上自定义注解。</p><ul><li>key: 以用户ID作为拦截，这个用户访问次数限制</li><li>fallbackMethod：失败后的回调方法，方法出入参保持一样</li><li>permitsPerSecond：每秒的访问频次限制。1秒1次</li><li>blacklistCount：超过10次都被限制了，还访问的，扔到黑名单里24小时</li></ul><h3 id="_2-测试验证" tabindex="-1"><a class="header-anchor" href="#_2-测试验证" aria-hidden="true">#</a> 2. 测试验证</h3>`,31),f={href:"http://localhost:8091/api/ratelimiter/login?fingerprint=uljpplllll01009&uId=1000&token=8790",target:"_blank",rel:"noopener noreferrer"},y=p(`<div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-ratelimiter-05.png?raw=true" width="700px"></div><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-ratelimiter-04.png?raw=true" width="700px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">47.518</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8091</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">RateLimiterAOP</span> <span class="token operator">-</span> 限流<span class="token operator">-</span>超频次拦截：uljpplllll01009
<span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">47.669</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8091</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">RateLimiterAOP</span> <span class="token operator">-</span> aop attr uljpplllll01009
<span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">49.121</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8091</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">RateLimiterAOP</span> <span class="token operator">-</span> aop attr uljpplllll01009
<span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">49.122</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8091</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">RateLimiterAOP</span> <span class="token operator">-</span> 限流<span class="token operator">-</span>黑名单拦截<span class="token punctuation">(</span><span class="token number">24</span>h<span class="token punctuation">)</span>：uljpplllll01009
<span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">57.647</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8091</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">RateLimiterAOP</span> <span class="token operator">-</span> aop attr uljpplllll01009
<span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">57.650</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8091</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">RateLimiterAOP</span> <span class="token operator">-</span> 限流<span class="token operator">-</span>黑名单拦截<span class="token punctuation">(</span><span class="token number">24</span>h<span class="token punctuation">)</span>：uljpplllll01009
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>好啦，到这，我们就可以看到，用户的访问已经被拦截了。</li><li>赶紧到自己的应用加一下吧，一个指纹ID，一个用户维护限流访问。让自己的应用更加可靠！</li></ul><hr>`,5),w={href:"https://gaga.plus",target:"_blank",rel:"noopener noreferrer"};function _(I,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,m,v,b,n("ul",null,[n("li",null,[s("xfg-dev-tech-ratelimiter："),n("a",h,[s("https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-ratelimiter"),t(a)])])]),g,n("p",null,[s("访问："),n("a",f,[s("http://localhost:8091/api/ratelimiter/login?fingerprint=uljpplllll01009&uId=1000&token=8790"),t(a)])]),y,n("blockquote",null,[n("p",null,[s("这些各项实际场景的内容，在小傅哥的【星球：码农会锁】有7个完结的项目和1个进行的项目，都有大量的实践运用。可以扫码加入，项目体验地址；"),n("a",w,[s("https://gaga.plus"),t(a)])])])])}const q=e(i,[["render",_],["__file","ratelimiter.html.vue"]]);export{q as default};
