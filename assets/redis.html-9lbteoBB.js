import{_ as e,r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"redis-缓存、加锁-独占-分段-、发布-订阅-常用特性的使用和高级编码操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis-缓存、加锁-独占-分段-、发布-订阅-常用特性的使用和高级编码操作","aria-hidden":"true"},"#"),s(" Redis 缓存、加锁(独占/分段)、发布/订阅，常用特性的使用和高级编码操作")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=575827141&bvid=BV17z4y1j7m5&cid=1262749182&p=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=n("p",null,"本文的宗旨在于通过简单干净实践的方式，向读者介绍 Redis 的安装部署，以及使用 Redisson 框架完成 Redis 常用核心功能的场景使用。",-1),b=n("p",null,"这些场景包括；Redis 的基本缓存使用、Redis 加锁（Redisson 提供了很多锁的方式，这里我们会展示独占锁和无锁化的性能测试）。之后还有一个非常重要的场景是关于 Redis 的发布和订阅。",-1),g=n("p",null,"本节内容会涉及到结合 Spring 框架进行自定义 Bean 对象的注入容器操作，以满足尽可能减少配置的情况下，完成对象的实例化和注入使用。这样的操作非常具有高级编码的实战性，值得大家折腾一下，也能顺便补充 Spring 源码的运用。",-1),h=n("p",null,"本文涉及的工程：",-1),f={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-redis",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"docs/dev-ops 提供了 mysql、redis 安装脚本，和数据初始化操作",-1),w={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"开源内存数据存储，被数百万开发人员用作数据库、缓存、流引擎和消息代理。",-1),R={href:"https://github.com/qishibo/AnotherRedisDesktopManager/releases",target:"_blank",rel:"noopener noreferrer"},S={href:"https://redis.io/docs/ui/insight/",target:"_blank",rel:"noopener noreferrer"},q=p('<h2 id="一、案例背景" tabindex="-1"><a class="header-anchor" href="#一、案例背景" aria-hidden="true">#</a> 一、案例背景</h2><p>在互联网应用开发中，Redis 缓存的使用，大部分都是为了保护数据库的。让应用对于非必要的情况下，尽可能减少对数据库的调用。比如一份固定的数据可以放到 Redis 缓存中提供查询，或者需要数据库唯一索引仿重拦截 insert 操作先进行 Redis 布隆过滤器校验，也或者是分布式场景下的加锁处理。这样可以减少了对数据库资源的占用，也提供了接口的响应性能。</p><p>同时也还有一些专门针对 Redis 做的技术方案，来提高系统的响应吞吐量和响应性能。如；基于 Redis 内存存储实现的规则引擎、基于 Redis 队列实现的低延迟任务调度、基于 Redis 发布和订阅实现的流程解耦操作等等，都是互联网需求场景中非常常用的技术方案。那么本节小傅哥会模拟出一个订单下单场景，来使用 Redis 缓存、加锁、发布/订阅等功能，为大家展示 Redis 的使用。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-redis-01.png?raw=true" width="700px"></div><ul><li>整个案例在DDD分层架构下，通过领域层调用仓储，完成订单的写库操作。在写库的时候，添加了不同类型锁的处理，以验证性能的差异。之后写入缓存和发布 Redis 消息。让监听端可以收取到发布的信息。</li><li>通过这样一个非常常见的订单创建和查询的场景，来学习 Redis 的使用。在使用中，我们用到了 Redisson 框架，由它来处理 Redis 的调用。</li></ul><h2 id="二、环境安装" tabindex="-1"><a class="header-anchor" href="#二、环境安装" aria-hidden="true">#</a> 二、环境安装</h2>',6),x={href:"https://bugstack.cn/md/road-map/docker.html",target:"_blank",rel:"noopener noreferrer"},O=p('<div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-redis-02.png?raw=true" width="700px"></div><ul><li>在 docker-compose.yml 中会先安装 MySQL 并执行 sql 文件夹里的 SQL 语句初始化数据库表。之后会安装 Redis 环境，Redis 的配置内容放在了 redis.conf 中，里面有 Redis 的连接密码。</li></ul><h2 id="三、功能实现" tabindex="-1"><a class="header-anchor" href="#三、功能实现" aria-hidden="true">#</a> 三、功能实现</h2><p>接下来小傅哥会带着大家在模拟的订单场景中，把 Redis 的缓存、加锁、发布/订阅的相关功能依次实现下。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-redis-03.png?raw=true" width="600px"></div>',6),T=n("li",null,[n("p",null,"这是一套 DDD 工程模型，也可以说整个教程其实都是 DDD 工程模型的拆解讲解，将各个模块嵌入到 DDD 分层架构中，看看他们是如何使用的。")],-1),E=n("p",null,"工程分为，app、domain、infrastructure、trigger 这样的四层，其实还有一个 types 通用层。",-1),B=n("li",null,"app；用于配置 Redis 的相关启动操作，鉴于 SpringBoot 以及 Redis 版本问题，这里我们自己来创建客户端，更好兼容版本的差异。同时也可以扩展一些额外的功能。",-1),C={href:"https://bugstack.cn/md/road-map/connection-pool.html",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,"infrastructure；基础层是对 domain 依赖倒置的实现，具体到库的操作、缓存的操作，都是用这一层来实现。所以我们操作 Redis 的加锁、缓存，也会放到这里来处理。",-1),L=n("li",null,"trigger；触发器层，一般也有叫接口层。一般 http、rpc、job、mq、listener 都是在这一层进来使用。所以我们订阅 Redis 的消息也是放到这一层中处理。",-1),D=n("li",null,[s("types；工程中还有一个通用类型层，定义一些非专属 domain 领域内的公共资源。如配置一个自定义注解，来处理一些类的动态加载和组件开发。本章中我们就定义了一个这样的注解，来动态注入实例化的 Bean 对象。"),n("strong",null,"这块非常值得学习一下，因为它是解决此类场景的高级编码")],-1),I=p(`<h3 id="_2-配置缓存" tabindex="-1"><a class="header-anchor" href="#_2-配置缓存" aria-hidden="true">#</a> 2. 配置缓存</h3><p>在 app 模块下的 config 中，创建 RedisClientConfigProperties 配置类和 RedisClientConfig 客户端启动类。用于通过 Redisson 创建 Redis 的连接客户端。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">redis</span><span class="token punctuation">:</span>
  <span class="token key atrule">sdk</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
      <span class="token key atrule">pool-size</span><span class="token punctuation">:</span> <span class="token number">10</span>
      <span class="token key atrule">min-idle-size</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
      <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
      <span class="token key atrule">retry-attempts</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">retry-interval</span><span class="token punctuation">:</span> <span class="token number">1000</span>
      <span class="token key atrule">ping-interval</span><span class="token punctuation">:</span> <span class="token number">60000</span>
      <span class="token key atrule">keep-alive</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>本身 Spring 也提供了 Redis 的配置，但鉴于兼容问题和后续的功能拓展，还是比较建议自己添加配置。</li><li>关于代码的实现部分，可以参考 RedisClientConfigProperties、RedisClientConfig</li></ul><h3 id="_3-数据缓存" tabindex="-1"><a class="header-anchor" href="#_3-数据缓存" aria-hidden="true">#</a> 3. 数据缓存</h3><p>Redis 的大部分操作其实都是缓存数据，提高系统的 QPS，在插入、更新、删除(逻辑删)、查询的时候，依赖于 Redis 进行提速操作。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-redis-04.png?raw=true" width="600px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置到缓存，在创建订单完成后写入缓存</span>
redissonService<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> orderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">OrderEntity</span> <span class="token function">queryOrder</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">OrderEntity</span> orderEntity <span class="token operator">=</span> redissonService<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> orderEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserOrderPO</span> userOrderPO <span class="token operator">=</span> userOrderDao<span class="token punctuation">.</span><span class="token function">selectByOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>userOrderPO<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userOrderPO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置到缓存</span>
        redissonService<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> orderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> orderEntity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在插入数据的时候，可以一并切入缓存。如果有更新操作，可以考虑删除缓存，在查询更新。因为更新操作，很多时候都是部分字段更新，这个时候直接更新缓存容易不准。</li><li>最后就是查询时，用缓存拦截，避免所有的查询都打到库上。这样可以提高系统的 QPS</li><li>另外关于缓存击穿，说的就是你本来要在缓存存放大量数据的，但存放偏差或者漏了，那么这个时候大量请求都打到库上，导致把数据库拖垮。尤其是那种需要做事务加锁有资源竞争的，会更严重。</li></ul><h3 id="_4-加锁处理" tabindex="-1"><a class="header-anchor" href="#_4-加锁处理" aria-hidden="true">#</a> 4. 加锁处理</h3><p>使用 Redis 加分布式锁，也是分布式架构设计中非常常用的手段。常用于的场景包括；流程较长，耗时较多的个人开户、下单行为。也包括；一些资源竞争时加分布式锁，排队处理请求。但对于资源竞争的这类库存占用，如果加分布式锁是非常影响系统的吞吐量的，因为所有的用户都在等待上一个用户做完流程后释放锁的处理，相当于你即使系统是分布式的了，但这里的分布式锁依然会把性能拖慢。所以如图，我们要考虑两种场景不同的加锁方式。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-redis-05.png?raw=true" width="600px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 独占锁 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createOrderByLock</span><span class="token punctuation">(</span><span class="token class-name">OrderAggregate</span> orderAggregate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonService<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;create_order_lock_&quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>orderAggregate<span class="token punctuation">.</span><span class="token function">getSkuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> decrCount <span class="token operator">=</span> redissonService<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>orderAggregate<span class="token punctuation">.</span><span class="token function">getSkuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>decrCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;已无库存[初始化的库存和使用库存，保持一致。orderService.initSkuCount(\\&quot;13811216\\&quot;, 10000);]&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>orderAggregate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 分段锁，也可以称为无锁化 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createOrderByNoLock</span><span class="token punctuation">(</span><span class="token class-name">OrderAggregate</span> orderAggregate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserEntity</span> userEntity <span class="token operator">=</span> orderAggregate<span class="token punctuation">.</span><span class="token function">getUserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SKUEntity</span> skuEntity <span class="token operator">=</span> orderAggregate<span class="token punctuation">.</span><span class="token function">getSkuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟锁商品库存</span>
    <span class="token keyword">long</span> decrCount <span class="token operator">=</span> redissonService<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>skuEntity<span class="token punctuation">.</span><span class="token function">getSku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>decrCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;已无库存[初始化的库存和使用库存，保持一致。orderService.initSkuCount(\\&quot;13811216\\&quot;, 10000);]&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> skuEntity<span class="token punctuation">.</span><span class="token function">getSku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>decrCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonService<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>orderAggregate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于第1类的场景，主要是为了避免用户在一次操作后，又反复申请。系统上避免重复受理，所以添加分布式锁的方式进行拦截。如果不加分布式锁，就会进入到库表中通过唯一的索引拦截，这样对数据库的压力就比较大。</li><li>对于第2类的场景，是采用了分段或者自增滑块的锁方式进行处理，减少对同一个锁的等待，而是生成一堆的锁，让用户去使用。<strong>也就是最开始案例背景的图中，一个个⭕️圆圈的分段锁</strong></li></ul><h3 id="_5-发布-订阅" tabindex="-1"><a class="header-anchor" href="#_5-发布-订阅" aria-hidden="true">#</a> 5. 发布/订阅</h3><p>此场景的案例会涉及到如何向 Spring 动态注入已经实例化后的 Bean 对象。为什么会出现这个场景呢？</p><p>首先 Redis 的发布订阅，简单案例代码如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建Redisson客户端</span>
<span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取RTopic对象</span>
<span class="token class-name">RTopic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> topic <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发布消息</span>
topic<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Redisson!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加监听器</span>
topic<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>channel<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 关闭Redisson客户端</span>
redisson<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>发布和订阅，是我们需要对同一个 Topic 进行发布和监听操作。但这个操作的代码是一种手动编码，但在我们实际使用中，如果所有的都是手动编码，<strong>一个是非常麻烦，再有一个是非常累人</strong>。</li><li>所以这里小傅哥决定给你来个高级编码，通过自定义注解，来完成动态监听和将对象动态注入到 Spring 容器中，让需要注入的属性，可以被动态注入。</li></ul><h4 id="_5-1-自定义注解" tabindex="-1"><a class="header-anchor" href="#_5-1-自定义注解" aria-hidden="true">#</a> 5.1 自定义注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RedisTopic</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>起到了一种标识作用。<code>快捷键；你可以在 IDEA 工程中，摁2下 Shift 搜索这个类。</code></li></ul><h4 id="_5-2-注解使用" tabindex="-1"><a class="header-anchor" href="#_5-2-注解使用" aria-hidden="true">#</a> 5.2 注解使用</h4><p><strong>源码</strong>：<code>cn.bugstack.xfg.dev.tech.infrastructure.trigger.mq#RedisTopicListener02</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RedisTopic</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;testRedisTopic02&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTopicListener02</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> channel<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;02-监听消息(Redis 发布/订阅): {}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对需要监听 RedisTopic 的类，进行注解配置。之后在下面的代码中使用。</li></ul><h4 id="_5-3-动态注入" tabindex="-1"><a class="header-anchor" href="#_5-3-动态注入" aria-hidden="true">#</a> 5.3 动态注入</h4><p><strong>源码</strong>：<code>cn.bugstack.xfg.dev.tech.config.RedisClientConfig#redissonClient</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加监听</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanNamesForType <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">MessageListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNamesForType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MessageListener</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token class-name">MessageListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">RedisTopic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTopic</span> redisTopic <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RedisTopic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">RTopic</span> topic <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span>redisTopic<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        topic<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 动态创建 bean 对象，注入到 spring 容器，bean 的名称为 redisTopic，对象为 RTopic</span>
        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>redisTopic<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 applicationContext 获取所有实现了 MessageListener 接口的类，并对这个类的注解进行识别。</li><li>所有使用了咱们定义注解的类，都进行获取获取 Topic 和添加监听操作。获取的 bean 对象，就是要监听的类。</li><li>最后一步，再把这个类，通过 Spring 的 BeanFactory 工厂，进行注册。这样你再其他类中，就可以自动注入 topic 对象了，并进行 push 消息操作。</li></ul><h4 id="_5-4-使用对象" tabindex="-1"><a class="header-anchor" href="#_5-4-使用对象" aria-hidden="true">#</a> 5.4 使用对象</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRepository</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderRepository</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">IRedisService</span> redissonService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">IUserOrderDao</span> userOrderDao<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RTopic</span> testRedisTopic<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;testRedisTopic02&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">RTopic</span> testRedisTopic02<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;testRedisTopic03&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">RTopic</span> testRedisTopic03<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderAggregate</span> orderAggregate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
        <span class="token comment">// 省略...</span>
      
        testRedisTopic02<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testRedisTopic03<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> orderId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>testRedisTopic 是我们硬编码创建的 Bean 对象，testRedisTopic02、testRedisTopic03 是我们通过自定义注解动态创建的 Bean 对象。</li><li>之后就可以在需要 push 消息的方法中，使用 publish 发布你的消息内容了，并可以在监听中获取到消息。</li></ul><h2 id="四、功能测试" tabindex="-1"><a class="header-anchor" href="#四、功能测试" aria-hidden="true">#</a> 四、功能测试</h2><h3 id="_1-分布式锁压测" tabindex="-1"><a class="header-anchor" href="#_1-分布式锁压测" aria-hidden="true">#</a> 1. 分布式锁压测</h3><p><strong>源码</strong>：<code>cn.bugstack.xfg.dev.tech.test.domain.OrderServiceTest</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> sku <span class="token operator">=</span> <span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomNumeric</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
    orderService<span class="token punctuation">.</span><span class="token function">initSkuCount</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">UserEntity</span> userEntity <span class="token operator">=</span> <span class="token class-name">UserEntity</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">&quot;xfg&quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomNumeric</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">userMobile</span><span class="token punctuation">(</span><span class="token string">&quot;+86 13521408***&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SKUEntity</span> skuEntity <span class="token operator">=</span> <span class="token class-name">SKUEntity</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">sku</span><span class="token punctuation">(</span>sku<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">skuName</span><span class="token punctuation">(</span><span class="token string">&quot;《手写MyBatis：渐进式源码实践》&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">quantity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">unitPrice</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">discountAmount</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">tax</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">totalAmount</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DeviceVO</span> deviceVO <span class="token operator">=</span> <span class="token class-name">DeviceVO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">ipv4</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">ipv6</span><span class="token punctuation">(</span><span class="token string">&quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">machine</span><span class="token punctuation">(</span><span class="token string">&quot;IPhone 14 Pro&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token string">&quot;shanghai&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> threadBeginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录线程开始时间</span>
            <span class="token comment">// 耗时:4毫秒</span>
               <span class="token class-name">String</span> orderId <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderAggregate</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">,</span> skuEntity<span class="token punctuation">,</span> deviceVO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 耗时:106毫秒</span>
              <span class="token class-name">String</span> orderId <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOrderByLock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderAggregate</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">,</span> skuEntity<span class="token punctuation">,</span> deviceVO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 耗时:4毫秒</span>
            <span class="token class-name">String</span> orderId <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOrderByNoLock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderAggregate</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">,</span> skuEntity<span class="token punctuation">,</span> deviceVO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> took <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> threadBeginTime<span class="token punctuation">;</span>
            totalExecutionTime<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>took<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 累加线程耗时</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;写入完成 {} 耗时 {} (ms)&quot;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">,</span> took <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;执行完毕，总耗时：{} (ms)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>totalExecutionTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;执行完毕，总耗时:{}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\r\\033[31m&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>totalExecutionTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\033[0m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 等待</span>
    <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试前，记得修改代码 count 值，代表这要初始化内存多少个容量。另外是环境记得先执行安装。</li><li>接下来，我们进入了压测环节。createOrder 不使用锁、createOrderByLock 使用独占锁、createOrderByNoLock 是分段锁，也可以当做无锁处理。</li><li>测试结果为，createOrderByLock 会占用较长的耗时。createOrderByNoLock 分段锁无锁接近于直接操作库。</li><li>测试的过程中，还会看到监听订阅的消息，在控制台打印。</li></ul><h3 id="_2-其他测试" tabindex="-1"><a class="header-anchor" href="#_2-其他测试" aria-hidden="true">#</a> 2. 其他测试</h3><p>除了以上这结合业务的功能测试以外，本章还提供了；读写锁、异步锁、信号量、队列、延迟队列的相关测试。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 延迟队列场景应用；https://mp.weixin.qq.com/s/jJ0vxdeKXHiYZLrwDEBOcQ
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_getDelayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">RBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> blockingQueue <span class="token operator">=</span> redissonService<span class="token punctuation">.</span><span class="token function">getBlockingQueue</span><span class="token punctuation">(</span><span class="token string">&quot;xfg-dev-tech-task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RDelayedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> delayedQueue <span class="token operator">=</span> redissonService<span class="token punctuation">.</span><span class="token function">getDelayedQueue</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Object</span> take <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果 {}&quot;</span><span class="token punctuation">,</span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        delayedQueue<span class="token punctuation">.</span><span class="token function">offerAsync</span><span class="token punctuation">(</span><span class="token string">&quot;测试&quot;</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token number">100L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>详见源码：<code>cn.bugstack.xfg.dev.tech.test.infrastructure.redis.RedisTest</code></li></ul><hr><p>Redis 的使用还有很多有意思、有价值的场景，如果读者还有好的案例，也可以在源码中提交PR。</p>`,44);function A(N,P){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),d,v,m,b,g,h,n("ul",null,[n("li",null,[s("xfg-dev-tech-redis："),n("a",f,[s("https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-redis"),t(a)]),s("- "),y]),n("li",null,[s("官网："),n("a",w,[s("https://redis.io/"),t(a)]),s(" - "),_]),n("li",null,[s("工具："),n("a",R,[s("RedisDesktopManager"),t(a)]),s("、"),n("a",S,[s("insight"),t(a)])])]),q,n("p",null,[s("在安装执行 docker-compose.yml 脚本之前，你需要先在本地安装 "),n("a",x,[s("docker"),t(a)]),s(" 之后 IntelliJ IDEA 打开 docker-compose.yml 文件，如图操作即可安装。")]),O,n("ul",null,[T,n("li",null,[E,n("ul",null,[B,n("li",null,[s("domain；是领域服务层，order 可以看做是一个订单域，包括订单的创建、支付、查询，都可以在这个领域实现。"),n("em",null,[s("这个订单领域涉及的表就是前面章节，所压测的表 "),n("a",C,[s("【压测】MySQL 连接池 c3p0、dbcp、druid、hikari"),t(a)])])]),j,L,D])])]),I])}const M=e(l,[["render",A],["__file","redis.html.vue"]]);export{M as default};
