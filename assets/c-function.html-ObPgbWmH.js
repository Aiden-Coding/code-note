import{_ as n,o as s,c as a,e}from"./app-3RcBQnkC.js";const t={},p=e(`<h1 id="c-函数与程序控制" tabindex="-1"><a class="header-anchor" href="#c-函数与程序控制" aria-hidden="true">#</a> C 函数与程序控制</h1><ul><li><a href="#c-%E5%87%BD%E6%95%B0%E4%B8%8E%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6">C 函数与程序控制</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8">函数创建以及使用</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">函数参数</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC">函数返回值</a></li><li><a href="#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B">函数类型</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">函数声明</a></li></ul></li><li><a href="#%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5">程序控制语句</a><ul><li><a href="#while-%E5%BE%AA%E7%8E%AF">while 循环</a></li><li><a href="#for-%E5%BE%AA%E7%8E%AF">for 循环</a></li><li><a href="#do-while-%E5%BE%AA%E7%8E%AF">do while 循环</a></li><li><a href="#break-%E5%92%8C-continue">break 和 continue</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><p>下面我们来介绍一下 C 语言中一个非常重要的概念 - **函数 ( function ) **。首先就要先给函数下一个定义，函数就是完成特定任务的独立代码单元，这也就是说，一个函数肯定是要为了完成某种功能的，比如一个函数它能够执行加法运算，比如一个函数能交换两个数的值，还有一些函数可能只是为了打印某些东西等等。</p><p>函数也可以把很多大的任务拆分成一个个小的任务，通过设计每个小的任务来完成一个大的功能。一个设计优良的函数能够把程序中不需要了解的细节隐藏起来，从而使整个程序结构更加清晰，降低程序的修改难度。</p><p>C 语言程序由许多小的函数组成，一个程序会被保存在多个源文件中，每个文件可以单独编译，并可以与库中已编译过的函数一起加载。</p><p>下面我们通过一个例子来讨论一下函数是如何创建并使用的。</p><h2 id="函数创建以及使用" tabindex="-1"><a class="header-anchor" href="#函数创建以及使用" aria-hidden="true">#</a> 函数创建以及使用</h2><p>函数的创建和使用会分为三个步骤：</p><ul><li>函数原型 ( function type )：这个是创建函数定义，也叫函数声明，能够表明一个文件中有哪些函数。</li><li>函数调用 ( function call )：调用函数的位置，函数被定义出来肯定是要使用它的，在哪里使用的这个函数就被称为函数调用。</li><li>函数定义 ( function definition )：这个就是函数的具体要干的什么事儿，也就是函数的具体逻辑是什么。</li></ul><p>这么一看，函数和变量简直一模一样了，函数需要原型、调用和定义，而变量也需要这些，只不过变量还可以把原型和定义一起表示。</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>#include &lt;stdio.h&gt;

int num; // 变量原型 

int sum(int,int); // 函数原型 

int main(void){

	num = 12; // 变量定义 
	int num2 = 11; // 函数原型 + 函数定义 
	
	int all = sum(num,num2); // 变量使用 ，函数使用 
	printf(&quot;all = %d&quot;,all);
	
	return 0;
} 

// 函数定义 
int sum(int a,int b){
	
	return a + b;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码很好的列举了变量的定义以及函数的定义。</p><p>我们首先定义了一个 num 变量，这个就是变量的原型，然后在 main 函数中使用这个变量，就是变量的定义和使用，当然变量也可以直接使用原型 + 定义的方式（ 上面的 num2 ），sum 函数演示了函数的原型、定义和使用。这里注意一点，main 函数比较特殊，它是所有方法的入口，而且 main 函数无需定义原型就能直接使用。</p><p>上面这段代码被一起保存在一个文件中，当然你也可以把它们保存在不同的文件中，只不过把它们放在同一个文件中我们在演示的时候比较方便，还有一点就是<strong>能够一起进行编译</strong>，这两个函数也可以定义在不同的文件中，分别进行编译，这样的好处是使程序更加易于维护，代码读起来更加顺畅，事实上项目中也是采用的单独编译的方式。当然你也可以把所有的功能都写在 main 函数中，只不过这样不易于维护，也不符合项目开发标准。</p><p>一个完整的函数定义形同如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>返回值类型	函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    函数体<span class="token punctuation">(</span>函数的具体功能<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们上面说的只是一个完整的函数定义，而不是每个函数必须都要有返回值类型、参数列表、函数体，只有函数名是必须的（这个肯定好理解）。</p><p>当然也有函数定义出来什么都没有做，这就相当于是一个空函数，C 语言默认是允许空函数出现的，比如下面函数就是一个空函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>sort 函数不执行任何操作也不返回任何值，这种函数可以在<strong>程序开发期间用于保留位置，留待以后再填充代码</strong>。</p><p>程序其实就是一些变量和函数的集合，函数之间的通信可以通过函数参数、返回值来进行，函数通过传递参数，进行一系列的逻辑计算后，把返回值返回回去，以此达到函数交流、通信的目的。</p><p>对于函数来说，我们需要了解的两个关键点是<strong>参数列表</strong>和<strong>返回值</strong>。</p><h3 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h3><p>对于上面的 sum 函数来说，它的函数参数有两个，分别是 int 类型的 a 和 b，像这种在函数定义的括号中的变量被称为<strong>函数参数</strong>，这两个变量 a 和 b 也叫做<strong>形式参数</strong>，简称形参。</p><p>和定义在函数中的变量一样，形式参数也是局部变量，这些都属于函数私有的，作用域范围都是从进入函数开始起作用到函数执行完成后作用结束。</p><p>当函数接受参数时，函数原型用逗号分隔的列表指明参数的数量和类型，函数原型中你可以使用下面方式定义</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数原型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以省略具体的变量名称，使用下面这种方式进行定义</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数原型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在函数原型中没有定义变量，只是声明了两个 int 类型的参数。</p><p>除了形参之外，还有一个叫做**实际参数 ( 实参 ) ** 的概念，就对应于上面代码中的 <em>sum(num,num2)</em>，因为在调用 sum 的时候是知道 num 和 num2 的具体值的，像这种在调用函数中对参数进行传值的参数被称为实参。</p><blockquote><p>简单点来说就是 形式参数是被调用函数中的变量，实际参数是调用函数赋给被调函数的具体值。实际参数可以是常量、变量，或甚至是更复杂的表达式。</p></blockquote><p>被调函数不知道也不关心传入的数值是来自常量、变量还是一般表达式。实参在把值传递给函数的时候，其实是把值拷贝给被调函数的形式参数，所以无论被调函数对拷贝数据进行什么操作，都不会影响主调函数中的原始数据。</p><p>如下代码所示</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// 变量原型 </span>

<span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数原型 </span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

	num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// 变量定义 </span>
	<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// 函数原型 + 函数定义 </span>
	
	<span class="token function">sum</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量使用 ，函数使用 </span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %d, num2 = %d&quot;</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token comment">// 函数定义 </span>
<span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
	
	<span class="token keyword">int</span> sumAll <span class="token operator">=</span>  a <span class="token operator">+</span> b<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sumAll = %d\\n&quot;</span><span class="token punctuation">,</span>sumAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果可以看出，只要把值传递给 sum 后，不论 sum 函数内部进行何种处理，都不会影响 main 函数中 num 和 num2 的值。</p><h3 id="函数返回值" tabindex="-1"><a class="header-anchor" href="#函数返回值" aria-hidden="true">#</a> 函数返回值</h3><p>我们上面说过函数之间的通信可以通过函数参数、返回值来进行。函数参数的传递方向是由函数调用者 -&gt; 被调函数，而函数返回值的方向是和参数传递的方向相反，也就是被调函数 -&gt; 函数调用者。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h3n6rc717rj2126088t9c.jpg" alt="image-20220627224608926"></p><p>当然并不是所有的函数都需要返回值，而且 return 语句后面也不一定需要表达式，当 return 语句后面没有表达式时，函数不会向调用者返回值。返回值会通过</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">return</span> 表达式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进行返回，这个返回值的表达式类型和函数定义的返回值类型是一致的。</p><p>我们还用上面的 sum 函数来举例子</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
	
	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，sum 函数的表达式返回了 a + b，这其实就是一个表达式。而我们可以看到上面的 int main 方法，它的返回值是 0 ，这就是返回了一个常量。</p><p>return 后面可以不返回任何值，只是单独写一个 return 也是允许的，不过这种方式相当于没有返回任何值，所以它的函数类型可以定义为 void ，如下代码所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 函数定义 </span>
<span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
	
	<span class="token keyword">int</span> sumAll <span class="token operator">=</span>  a <span class="token operator">+</span> b<span class="token punctuation">;</span>	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sumAll = %d\\n&quot;</span><span class="token punctuation">,</span>sumAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 return 语句的另外一个作用是终止函数的执行，强制把控制返回给调用函数，如下代码所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 函数定义 </span>
<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
 
  <span class="token keyword">int</span> sumAll <span class="token operator">=</span>  a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sumAll = %d\\n&quot;</span><span class="token punctuation">,</span>sumAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">return</span> sumAll<span class="token punctuation">;</span>
 	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 a + b 的值大于 0 的话，会直接返回 a + b 的和，否则为 0 。这个 if 的控制流程就是强制把结果返回给函数调用者。如果在 if 控制流程后面添加代码的话，那么这段代码不会执行，但是编译却没有给出警告。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h3nr8i4202j20ci08wdg7.jpg" alt="image-20220628103557612"></p><p>在 Java 编辑器中，如果最后一行代码出现在 return 强制返回后面的话，编译器会给出警告或者错误提示这行代码不会被执行。</p><h3 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h3><p>这里需要再强调一下函数类型，定义函数的时候需要声明函数的类型，带返回值的函数类型与返回值类型相同，没有返回值的函数应该将其定义为 void 类型。在老版本的 C 编译器中，如果你没有声明函数类型，编译器会默认把函数当做 int 类型来处理，不过这都是早期的事儿了，现在 C 标准不再支持默认函数为 int 类型这种情况。</p><p>在编写函数的时候，你就需要考虑好函数的具体功能是什么，也就是这个函数做了哪些事情，需不需要返回值，如果需要返回值的话，它的返回类型是什么。</p><h3 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明" aria-hidden="true">#</a> 函数声明</h3><p>如果大家学过 Java ，可能对 C 这种先声明再定义的方式很不习惯，为什么函数在定义前需要再单独声明一下呢？我直接定义函数不声明行吗？答案肯定是不行的。</p><p>这个先声明再使用一直是 C 语言的标准，标准没有为什么，这就是一个标准，但是这个标准却是一个历史遗留问题。</p><blockquote><p>上世纪 70 年代，大部分计算机内存很小，处理速度也比较差，所以导致代码的运行&gt;时间很长，效率很差，这时候进行我们就需要考虑内存占用和编译时间的问题。因为 C 语言开发的比较早，而且 C 又是和硬件直接打交道的，所以提前声明一下函数能够提前分配内存空间，提升效率。说白了还是效率问题。</p></blockquote><p>还有为什么 C 语言不选择采用预编译一下呢？</p><p>参考自 https://www.zhihu.com/question/20567689</p><p>首先，C语言出现的很早，那时候编译器也是一个很复杂的东西，当时计算机的内存、外存都很小，编译器做的太大也是一个麻烦的事情，所以事先声明就成为一种规范，保留下来，目的是为了让编译器更简单，虽然这一切已经很过时了。</p><p>其次，预编译的成本很高，与脚本语言、解释语言不同，C语言项目的规模可以很大，比如操作系统一级的C语言工程，其源文件有几万个，涉及全局符号几十万个，这样规模的项目预编译一次的负担是很高的，如果是整个项目完全扫描一遍，遍历所有全局符号，再进行真正的编译，估计很多码农都会疯了，等待时间会特别长。</p><p>再次，C语言是一种静态链接的语言，如果一个项目被设计成<strong>只编译，不链接</strong>的方式，比如有些库就会被设计成这样，有些合作开发的项目里，组员之间有时候也只提供obj文件，那么某些全局符号可能就不包含在现有的代码里，那么预搜索就一定找不到某些符号，那么该怎么办？如果不提供声明，这个代码就没办法编译了。</p><p>基于以上几点考虑，所以C语言才设计成这样，对于开发者而言，不算友好，但也不算很糟糕，甚至在某些方面是有好处的。</p><p>对于一个函数来说，它的最终目的就是通过一系列的逻辑处理获得我们想要的结果，逻辑处理离不开各种程序控制语句，比如说 While 、for、do while 等，下面我们就要来讨论一下这些程序控制语句。</p><h2 id="程序控制语句" tabindex="-1"><a class="header-anchor" href="#程序控制语句" aria-hidden="true">#</a> 程序控制语句</h2><p>在有些时候的某些程序可能会重复做一件事情，就应该让计算机做这些重复性的工作，这才是我们需要计算机的意义。毕竟，需要重复计算是使用计算机的主要原因。</p><p>C 语言中有很多用于重复计算的方法，我们下面先来介绍其中的一种 --- <strong>while 循环</strong>。</p><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环" aria-hidden="true">#</a> while 循环</h3><p>下面我们通过一段代码来看一下 while 循环的使用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码首先声明了一个 i 变量，然后使用了 while 循环来判断 i 的值，当 i 的值 &lt;= 10 的时候，就会执行 while 中的循环逻辑，否则即 i &gt; 10 就会直接跳过循环，不会输出任何结果就直接返回 0 。</p><p>如果 i 的值在 10 以内，就会循环打印出来 i 的值。这就是 while 循环的作用。</p><p>用通俗易懂的语句来描述 while 循环：当某个判断条件为 true 的时候，循环执行 while 中的代码块。</p><p>流程图如下：</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pzrnevjpj20uq0qkdh5.jpg" alt="image-20220831154256661" style="zoom:50%;"><p>在 while 循环中的一个关键点就是进入 while 循环的判断，上面代码就是判断 i &lt;= 10 ，这个表达式是关系运算符的一种。</p><p>while循环经常依赖测试表达式作比较，这样的表达式被称为关系表达式，出现在关系表达式中间的运算符叫做关系运算符，下表是我们经常使用到的关系运算符。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>!=</td><td>不等于</td></tr></tbody></table><p>这些运算符会不单单会出现在 while 循环中，实际上任何逻辑控制语句都会使用到这几种运算符。</p><blockquote><p>这里需要说明一点，不能用关系运算符来比较字符串，比如 ch != &#39;@&#39; 。</p><p>虽然关系运算符可以用来比较浮点数，但是要注意：比较浮点数时，尽量只使用 &lt; 和 &gt; 。因为浮点数的舍入误差会导致在逻辑上应该相等的两数却不相等。例如，3乘以1/3的积是1.0。如果用把1/3表示成小数点后面6位数字，乘积则是 .999999，不等于 1。</p></blockquote><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环" aria-hidden="true">#</a> for 循环</h3><p>for 循环一个非常明显的特征就是把三个行为组合在一处，也就是<strong>初始化、判断、更新</strong>，如下代码所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，上面代码中 for 循环分别做了三件事情，每个表达式用 <code>;</code> 进行分隔。</p><ul><li>int i = 0 相当于是对 i 进行初始化操作；</li><li>i &lt;= 10 相当于对 i 进行一个逻辑判断，逻辑判断是判断是否进行下一次循环的关键。</li><li>i++ 相当于是更新 i 的值。</li></ul><p>for 循环的一般形式定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">;</span>表达式<span class="token number">2</span><span class="token punctuation">;</span>表达式<span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里要注意的是，表达式 1 只在循环开始时执行一次，而表达式 3 是循环结束后再执行。表达式 2 可以省略，省略后默认值为 1，则判断为真，for 循环就会成为一个死循环。</p></blockquote><p>for 循环的流程图如下</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pzy92jkoj20pe0zgdhl.jpg" alt="image-20220831154916371" style="zoom:50%;"><h3 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环" aria-hidden="true">#</a> do while 循环</h3><p>一般来说，循环的方式可以分为两种：<strong>入口循环和出口循环</strong>，什么意思呢？入口循环是先进行循环，再执行每次循环要做的事情，比如上面的 while 循环、for 循环，他们都是先进行判断是否需要进行下一次循环，如果需要的话，才会打印出 i 的值，这就是入口循环。</p><p>而出口循环则是要先执行代码，再判断是否要进行下一次循环，即在循环的每次迭代之后检查测试条件，这保证了至少执行循环体中的内容一次，典型的出口循环就是 do ... while。</p><p>我们把上面的代码进行修改：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">do</span><span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果可以看到，do while 循环在执行完循环体后才执行测试条件，所以 do ... while 循环至少执行循环体一次，而 for 循环和 while 循环在执行循环体之前先执行测试条件，do ... while 的一般形式如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">do</span>
	代码
<span class="token keyword">while</span> <span class="token punctuation">(</span> 表达式 <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>do ... while 循环的流程图如下</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5q01vu3ffj20h80s4wff.jpg" alt="image-20220831155246143" style="zoom:50%;"><p>到现在为止， C 语言中的程序控制语句我们都了解了，那么该如何进行选择呢？</p><p>实际上上面我们已经稍微讨论了一下如何选择的问题了。</p><p>while 循环和 for 循环很类似，这两类循环都是先进行一次循环条件的判断，然后再执行具体的循环体操作，只要一次循环条件不满足则一次都不会执行；而 do ... while 循环会至少先进行一次循环，然后才会执行循环判断。</p><p>一般来说，使用 for 循环的场景比较多，因为 for 循环形式更加简洁，而且在 for 循环中，变量和判断以及更新的作用域都在循环体内，不会有其他外部代码来修改这些变量，更可控，在 while 和 do ... while 循环中，变量的更新不可控，而且代码也没有 for 循环可读性强。</p><h3 id="break-和-continue" tabindex="-1"><a class="header-anchor" href="#break-和-continue" aria-hidden="true">#</a> break 和 continue</h3><p>break 和 continue 相当于是循环体内领导者的这样一个角色，有了这两个角色存在，循环体内的代码会根据这两个关键字来判断是中断循环还是执行下一次循环。</p><p>C 语言中的 break 有两种用法：</p><ul><li>一种用法是用在循环体中，当 break 出现在循环体中时，会中断这个循环。</li><li>一种用法是用在 switch 语句中，用作中断这个 switch 语句的 case 条件。</li></ul><p>break 用于中断循环：如下代码所示</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i 的值 = %d\\n&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果是 i 的值 = 1 - 4， 当 i == 5 时，会进入到 if 判断中，if 判断会直接触发 break，break 用于跳出当前循环，当前是 for 循环，所以 break 会直接跳到 for 循环外面，也就是直接 return ，不会再打印 i 的值。</p><p><img src="https://picturesforarticle.oss-cn-beijing.aliyuncs.com/img/image-20220702230609300.png" alt="image-20220702230609300"></p><p>continue 关键字用于跳过当前循环，执行下一次循环，它和 break 很相似但是有着本质的区别，break 是跳出循环，continue 是执行下一次循环，我们同样拿这个代码来说明，只需要把上面的 break 改成 continue 即可。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i 的值 = %d\\n&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（这段代码的输出结果会输出出 i = 5 以外的值）</p><p>从输出结果可以看出，只有 i = 5 的值没有输出，这也就是说，当代码执行到 i == 5 的时候，会进行 continue 继续执行当前循环，从而跳过这次循环后面的代码，如下图所示。</p><p><img src="https://picturesforarticle.oss-cn-beijing.aliyuncs.com/img/image-20220702235632689.png" alt="image-20220702235632689"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这篇文章我主要和你聊了聊 C 语言中的函数，函数定义、函数返回值、参数以及程序控制流程中的三类循环的特点以及选型，最后又介绍了一下 break 和 continue 的作用。</p><p>如果文章对你有帮助，还请各位小伙伴们三连支持哦！</p>`,121),i=[p];function c(l,o){return s(),a("div",null,i)}const d=n(t,[["render",c],["__file","c-function.html.vue"]]);export{d as default};
