import{_ as t,r as p,o as c,c as o,a as n,b as s,d as e,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《mybatis-手撸专栏》第4章-mapper-xml的解析和注册使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《mybatis-手撸专栏》第4章-mapper-xml的解析和注册使用","aria-hidden":"true"},"#"),s(" 《Mybatis 手撸专栏》第4章：Mapper XML的解析和注册使用")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/C_bb9f1Hr9aJAvbmrDHHig",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=469969468&bvid=BV1qT41157D8&cid=744089465&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),g=l(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>你是怎么面对功能迭代的？</code></p><p>其实很多程序员在刚开始做编程或者新加入一家公司时，都没有多少机会可以做一个新项目，大部分时候都是在老项目上不断的迭代更新。在这个过程你可能要学习N个前人留下的各式各样的风格迥异的代码片段，在这些纵横交错的流程中，找到一席之地，把自己的<code>ifelse</code>加进去。</p><p>虽然这样胡乱的加<code>ifelse</code>，刚上手就“摆烂”的心态，让人很难受。但要想在已经被压缩的工期下，还能交付出高质量的代码其实也很难完成，所以一部分研发被逼到能用就行，能跑就可以。</p><p>但说回来，其实不能逐步清理一片屎山，让代码在你的手上逐步清晰、整洁、干净，很多时候也是作为码农自身经验的不足，不懂得系统重构、不了解设计原则、不熟悉业务背景、不清楚产品走向等等原因造成的。所以最好的办法是提升自身的能力，每接到一次需求都有一些技术上的改变，既然它是屎山，那就当做打怪升级了，修一点、改一块、补一片，总会在你手上越来越易于维护和扩展的。</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>在我们渐进式的逐步实现 Mybatis 框架过程中，首先我们要有一个目标导向的思路，也就是说 Mybatis 的核心逻辑怎么实现。</p><p>其实我们可以把这样一个 ORM 框架的目标，简单的描述成是为了给一个接口提供代理类，类中包括了对 Mapper 也就是 xml 文件中的 SQL 信息(<code>类型</code>、<code>入参</code>、<code>出参</code>、<code>条件</code>)进行解析和处理，这个处理过程就是对数据库的操作以及返回对应的结果给到接口。如图 4-1</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220409-01.png" alt="图 4-1 ORM 框架核心流程"></p><p>那么按照 ORM 核心流程的执行过程，我们本章节就需要在上一章节的基础上，继续扩展对 Mapper 文件的解析以及提取出对应的 SQL 文件。并在当前这个阶段，可以满足我们调用 DAO 接口方法的时候，可以返回 Mapper 中对应的待执行 SQL 语句。<em>为了不至于把整个工程撑大，小傅哥会带着大家逐步完成这些内容，所以本章节暂时不会对数据库进行操作，待后续逐步实现</em></p><h2 id="三、设计" tabindex="-1"><a class="header-anchor" href="#三、设计" aria-hidden="true">#</a> 三、设计</h2><p>结合上一章节我们使用了 <code>MapperRegistry</code> 对包路径进行扫描注册映射器，并在 <code>DefaultSqlSession</code> 中进行使用。那么在我们可以把这些命名空间、SQL描述、映射信息统一维护到每一个 DAO 对应的 Mapper XML 的文件以后，其实 XML 就是我们的源头了。通过对 XML 文件的解析和处理就可以完成 Mapper 映射器的注册和 SQL 管理。这样也就更加我们操作和使用了。如图 4-2</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220409-02.png" alt="图 4-2 XML 文件解析注册处理"></p><ul><li>首先需要定义 <code>SqlSessionFactoryBuilder</code> 工厂建造者模式类，通过入口 IO 的方式对 XML 文件进行解析。当前我们主要以解析 SQL 部分为主，并注册映射器，串联出整个核心流程的脉络。</li><li>文件解析以后会存放到 Configuration 配置类中，接下来你会看到这个配置类会被串联到整个 Mybatis 流程中，所有内容存放和读取都离不开这个类。如我们在 DefaultSqlSession 中获取 Mapper 和执行 selectOne 也同样是需要在 Configuration 配置类中进行读取操作。</li></ul><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mybatis<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">03</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis
    │           ├── binding
    │           │   ├── <span class="token class-name">MapperMethod</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MapperProxy</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MapperProxyFactory</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">MapperRegistry</span><span class="token punctuation">.</span>java
    │           ├── builder
    │           │   ├── xml
    │           │   │   └── <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">BaseBuilder</span><span class="token punctuation">.</span>java
    │           ├── io
    │           │   └── <span class="token class-name">Resources</span><span class="token punctuation">.</span>java
    │           ├── mapping
    │           │   ├── <span class="token class-name">MappedStatement</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>java
    │           └── session
    │               ├── defaults
    │               │   ├── <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">.</span>java
    │               │   └── <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">.</span>java
    │               ├── <span class="token class-name">Configuration</span><span class="token punctuation">.</span>java
    │               ├── <span class="token class-name">SqlSession</span><span class="token punctuation">.</span>java
    │               ├── <span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span>java
    │               └── <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">.</span>java
    └── test
        ├── java
        │   └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dao
        │       ├── dao
        │       │   └── <span class="token class-name">IUserDao</span><span class="token punctuation">.</span>java
        │       ├── po
        │       │   └── <span class="token class-name">User</span><span class="token punctuation">.</span>java
        │       └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
        └── resources
            ├── mapper
            │   └──<span class="token class-name">User_Mapper</span><span class="token punctuation">.</span>xml
            └── mybatis<span class="token operator">-</span>config<span class="token operator">-</span>datasource<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：手写Mybatis，获取完整源码</code></p><p>XML 解析和注册类实现关系，如图 4-2</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220409-03.png" alt="图 4-2 XML 解析和注册类实现关系"></p><ul><li>SqlSessionFactoryBuilder 作为整个 Mybatis 的入口，提供建造者工厂，包装 XML 解析处理，并返回对应 SqlSessionFactory 处理类。</li><li>通过解析把 XML 信息注册到 Configuration 配置类中，再通过传递 Configuration 配置类到各个逻辑处理类里，包括 DefaultSqlSession 中，这样就可以在获取映射器和执行SQL的时候，从配置类中拿到对应的内容了。</li></ul><h3 id="_2-构建sqlsessionfactory建造者工厂" tabindex="-1"><a class="header-anchor" href="#_2-构建sqlsessionfactory建造者工厂" aria-hidden="true">#</a> 2. 构建SqlSessionFactory建造者工厂</h3><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.session.SqlSessionFactoryBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryBuilder</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">XMLConfigBuilder</span> xmlConfigBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>xmlConfigBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SqlSessionFactoryBuilder 是作为整个 Mybatis 的入口类，通过指定解析XML的IO，引导整个流程的启动。</li><li>从这个类开始新增加了 XMLConfigBuilder、Configuration 两个处理类，分别用于解析 XML 和串联整个流程的对象保存操作。接下来我们会分别介绍这些新引入的对象。</li></ul><h3 id="_3-xml-解析处理" tabindex="-1"><a class="header-anchor" href="#_3-xml-解析处理" aria-hidden="true">#</a> 3. XML 解析处理</h3><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.builder.xml.XMLConfigBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLConfigBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Element</span> root<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 调用父类初始化Configuration</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. dom4j 处理 xml</span>
        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DocumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Configuration</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解析映射器</span>
            <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;mappers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> configuration<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mapperElement</span><span class="token punctuation">(</span><span class="token class-name">Element</span> mappers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> mapperList <span class="token operator">=</span> mappers<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">&quot;mapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> e <span class="token operator">:</span> mapperList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            		<span class="token comment">// 解析处理，具体参照源码</span>
            		
                <span class="token comment">// 添加解析 SQL</span>
                configuration<span class="token punctuation">.</span><span class="token function">addMappedStatement</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 注册Mapper映射器</span>
            configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>XMLConfigBuilder 核心操作在于初始化 Configuration，因为 Configuration 的使用离解析 XML 和存放是最近的操作，所以放在这里比较适合。</li><li>之后就是具体的 parse() 解析操作，并把解析后的信息，通过 Configuration 配置类进行存放，包括：添加解析 SQL、注册Mapper映射器。</li><li>解析配置整体包括：类型别名、插件、对象工厂、对象包装工厂、设置、环境、类型转换、映射器，但目前我们还不需要那么多，所以只做一些必要的 SQL 解析处理。</li></ul><h3 id="_4-通过配置类包装注册机和sql语句" tabindex="-1"><a class="header-anchor" href="#_4-通过配置类包装注册机和sql语句" aria-hidden="true">#</a> 4. 通过配置类包装注册机和SQL语句</h3><p><strong>源码详见(配置项)</strong>：<code>cn.bugstack.mybatis.session.Configuration</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 映射注册机
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">MapperRegistry</span> mapperRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 映射的语句，存在Map里
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span><span class="token punctuation">&gt;</span></span> mappedStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mapperRegistry<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMappedStatement</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mappedStatements<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置类中添加映射器注册机和映射语句的存放；</p><ul><li>映射器注册机是我们上一章节实现的内容，用于注册 Mapper 映射器锁提供的操作类。</li><li>另外一个 MappedStatement 是本章节新添加的 SQL 信息记录对象，包括记录：SQL类型、SQL语句、入参类型、出参类型等。<em>详细可参照源码</em></li></ul><h3 id="_5-defaultsqlsession结合配置项获取信息" tabindex="-1"><a class="header-anchor" href="#_5-defaultsqlsession结合配置项获取信息" aria-hidden="true">#</a> 5. DefaultSqlSession结合配置项获取信息</h3><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.session.defaults.DefaultSqlSession</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSession</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSession</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">&quot;你被代理了！&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;\\n方法：&quot;</span> <span class="token operator">+</span> statement <span class="token operator">+</span> <span class="token string">&quot;\\n入参：&quot;</span> <span class="token operator">+</span> parameter <span class="token operator">+</span> <span class="token string">&quot;\\n待执行SQL：&quot;</span> <span class="token operator">+</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> configuration<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>DefaultSqlSession 相对于上一章节，小傅哥这里把 <code>MapperRegistry mapperRegistry</code> 替换为 <code>Configuration configuration</code>，这样才能传递更丰富的信息内容，而不只是注册器操作。</li><li>之后在 DefaultSqlSession#selectOne、DefaultSqlSession#getMapper 两个方法中都使用 configuration 来获取对应的信息。</li><li>目前 selectOne 方法中只是把获取的信息进行打印，后续将引入 SQL 执行器进行结果查询并返回。</li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><p>提供 DAO 接口和对应的 Mapper xml 配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">queryUserInfoById</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.mybatis.test.dao.IUserDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryUserInfoById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Long<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.mybatis.test.po.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        SELECT id, userId, userHead, createTime
        FROM user
        where id = #{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-单元测试" aria-hidden="true">#</a> 2. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_SqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 从SqlSessionFactory中获取SqlSession</span>
    <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config-datasource.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 获取映射器对象</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 测试验证</span>
    <span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfoById</span><span class="token punctuation">(</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>目前的使用方式就和 Mybatis 非常像了，通过加载 xml 配置文件，交给 SqlSessionFactoryBuilder 进行构建解析，并获取 SqlSessionFactory 工厂。这样就可以顺利的开启 Session 以及完成后续的操作。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">07</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">40.519</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：你被代理了！
方法：<span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>IUserDao</span><span class="token punctuation">.</span>queryUserInfoById
入参：<span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">;</span><span class="token annotation punctuation">@23223dd8</span>
待执行<span class="token constant">SQL</span>：
        <span class="token class-name">SELECT</span> id<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> userHead<span class="token punctuation">,</span> createTime
        <span class="token constant">FROM</span> user
        where id <span class="token operator">=</span> <span class="token operator">?</span>
    

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果我们可以看到，目前的代理操作已经可以把我们从 XML 中解析的 SQL 信息进行打印了，后续我们将结合这部分的处理继续完成数据库的操作。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>了解 ORM 处理的核心流程，知晓目前我们所处在的步骤和要完成的内容，只有非常清楚的知道这个代理、封装、解析和返回结果的过程才能更好的完成整个框架的实现。</li><li>SqlSessionFactoryBuilder 的引入包装了整个执行过程，包括：XML 文件的解析、Configuration 配置类的处理，让 DefaultSqlSession 可以更加灵活的拿到对应的信息，获取 Mapper 和 SQL 语句。</li><li>另外从整个工程搭建的过程中，可以看到有很多工厂模式、建造者模式、代理模式的使用，也有很多设计原则的运用，这些技巧都可以让整个工程变得易于维护和易于迭代。<em>这也是研发人员在学习源码的过程中，非常值得重点关注的地方。</em></li></ul><h2 id="七、优秀作业" tabindex="-1"><a class="header-anchor" href="#七、优秀作业" aria-hidden="true">#</a> 七、优秀作业</h2>`,52),h={href:"https://t.zsxq.com/08wDxcVV4",target:"_blank",rel:"noopener noreferrer"},f={href:"https://t.zsxq.com/081RvQF4B",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/0cWqIjDR6",target:"_blank",rel:"noopener noreferrer"};function S(q,M){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)]),k,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/C_bb9f1Hr9aJAvbmrDHHig"),e(a)])]),v,b,g,n("ul",null,[n("li",null,[n("a",h,[s("Mapper XML的解析和注册使用 @liuc"),e(a)])]),n("li",null,[n("a",f,[s("其实中心点在于Configuration这个类。Resources,XMLConfigBuilder是为了获取Configuration做准备。@echo"),e(a)])]),n("li",null,[n("a",y,[s("定义SqlSessionFactoryBuilder工厂建造者模式类 @谁动了我的辣条"),e(a)])])])])}const x=t(i,[["render",S],["__file","2022-04-09-di4zhang：XMLdejiexihezhuceshiyong.html.vue"]]);export{x as default};
