import{_ as o,r as p,o as i,c as l,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const c={},r=n("h1",{id:"关于怎么使用-webhooks-自动部署博客-详细教程文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于怎么使用-webhooks-自动部署博客-详细教程文档","aria-hidden":"true"},"#"),s(" 关于怎么使用 webhooks 自动部署博客，详细教程文档！")],-1),d=n("br",null,null,-1),u={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),k={href:"https://mp.weixin.qq.com/s/VtTHUfyiITNSoGy052jkXQ",target:"_blank",rel:"noopener noreferrer"},g=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=721628967&bvid=BV11S4y1d7hS&cid=440147596&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>小傅哥，我搞了三台服务器，维护学校游戏社站点，我麻了！</code></p><p>📧<strong>女粉来信</strong>：傅哥，我大二了，就编程学的还可以的那种大二女生😄。最近我不是天天看见一大堆人宣传服务器白皮袄吗，我就在11.1日也买了，还让宿舍的两个同学一起跟着买了，都买了三年。想着这样我们三个人就可以搭建和维护我们学校游戏社团的站点了，日常维护着学校的游戏比赛、宣传、通知，还能顺便就把我学的编程技术用上，一举多得嘛。本来还想，可以赶在 EDG VS DK 的时候上线秀一下呢，但是域名要备案好多天，只能鸽了。而且随着我们三个熬夜的折腾服务器、做站点网站、备案域名，真是遇到太多问题了，以前感觉课本学了就能起飞呢，现在全拉胯了。只能一遍学习傅哥的云服务器操作视频，一遍部署验证，真的学到了好多好多！再次感谢傅哥！那么现在问题来了，就是傅哥你的B站视频只有6节，我看完也跟着做了，但这回我遇到了新的问题，就是就是，我三个服务器，按照视频配置完 Nginx 负载以后，每次都要通过 FTP 把网站文件传到三个服务器上去，有时候还忘记一个。这咋弄呀，傅哥给想想办法嘛。</p><p>📨<strong>傅哥回信</strong>：办法是有的，可以把你的网站代码设置私有仓库传到 Github 或者 Gitee，这两个代码库都支持 webhook 简单说就是当你把代码 push 到代码库以后，代码库会调用你预先配置好的一个或者多个回调钩子，其实也就是调用你三个负载均衡的站点提供的 URL，来通知你现在这个代码库有最新更新的代码，你可以在收到 URL 的调用通知以后，通过 <code>git pull</code> 命令把最新上传的网站代码，拉取到服务器上。那么现在的效果就是，你把代码维护在 GitHub 以后，上传最新的网站内容以后，三个站点就可以自动部署了，简要流程如下：</p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-01.png" alt=""></p><p><strong>方案流程</strong>：</p><ol><li>在自己的网站站点中，提供 webhooks URL 访问地址，配置到 <code>Github/Gitee</code> 代码库的 Settings -&gt; Webhooks <code>在下文中会有详细介绍</code></li><li>例如图中 webhooks.php 开发的内容就是在接收到调用的时候，获取入参以后开始执行 git pull 操作 <code>shell_exec(&quot;git pull origin main 2&gt;&amp;1&quot;);</code></li><li>webhooks 配置完成以后，当我们再通过 git push 把本地代码推送到仓库(Github/Gitee)的时候，仓库就会调用全部的 webhooks.php，把仓库(Github/Gitee)中的代码拉取到站点中，这样就完成了整个站点内容的更新。</li></ol><p>🤔 傅哥，你说的我悟了，但需要你再手把手，操作下！</p><h2 id="二、环境说明" tabindex="-1"><a class="header-anchor" href="#二、环境说明" aria-hidden="true">#</a> 二、环境说明</h2>',9),v={href:"https://github.com/fuzhengwei/CodeGuide",target:"_blank",rel:"noopener noreferrer"},_={href:"https://gitee.com/fustack/CodeGuide",target:"_blank",rel:"noopener noreferrer"},w={href:"https://codechina.csdn.net/",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"【必须】Linux 云服务器(公网IP)；安装Git、安装Nginx、安装PHP、安装FTP",-1),x=n("li",null,"【可选】使用宝塔运维面板，部署站点博客，操作起来会比较方便",-1),q=n("h2",{id:"三、站点配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、站点配置","aria-hidden":"true"},"#"),s(" 三、站点配置")],-1),G=n("strong",null,"首先",-1),P={href:"https://space.bilibili.com/15637440/channel/seriesdetail?sid=479958",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"PS：当然你也可以不使用宝塔，通过命令安装 Nginx 或者 Apache 服务器等所需要的软件也是可以的。",-1),$=t(`<h3 id="_1-环境安装" tabindex="-1"><a class="header-anchor" href="#_1-环境安装" aria-hidden="true">#</a> 1. 环境安装</h3><p><strong>安装 Git</strong></p><ul><li>需求：在站点接收到 webhooks 回调时，使用 git pull 拉取网站代码，所以需要安装 git</li><li>命令：<code>yum -y install git</code></li><li>验证：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>root<span class="token annotation punctuation">@CodeGuide</span> <span class="token operator">~</span><span class="token punctuation">]</span># git version
git version <span class="token number">2.27</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>安装 Nginx、FTP</strong></p><ul><li>需求：部署博客站点时会需要到Nginx服务器、FTP上传</li><li>操作：可以直接在宝塔中使用<code>软件商店</code>进行安装</li></ul><p><strong>配置 PHP，允许 exec 脚本指令</strong></p><ul><li><p>需求：由于我们使用的是 PHP 开发的 webhook 回调操作，所以这里需要安装 PHP 模块</p></li><li><p>安装：直接在宝塔的软件商店中进行安装即可</p></li><li><p>配置：安装完 PHP 模块以后，还需要对 PHP 的 <code>php.ini</code> 进行更改，删除 disable_functions 下的 exec、shell_exec，这样才能在 webhooks.php 文件中，执行脚本命令。如图：</p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-05.png" alt=""></p></li></ul><h3 id="_2-站点配置" tabindex="-1"><a class="header-anchor" href="#_2-站点配置" aria-hidden="true">#</a> 2. 站点配置</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-02.png" alt=""></p><ul><li>环境安装完毕后，就可以添加一个网站的站点了，你的网站运行代码都需要上传到这个站点中，它提供了 FTP 操作以及宝塔运维面板中还有一个<code>文件</code>，可以在线修改站点内容。</li></ul><h3 id="_3-访问站点" tabindex="-1"><a class="header-anchor" href="#_3-访问站点" aria-hidden="true">#</a> 3. 访问站点</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-03.png" alt=""></p>`,13),H={href:"http://39.96.73.167",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,[s("描述：默认创建完站点，会在 "),n("code",null,"/www/wwwroot/39.96.73.167"),s(" 目录下有一个 index.html 此时你可以进行在线修改")],-1),N=t(`<h2 id="四、创建公钥" tabindex="-1"><a class="header-anchor" href="#四、创建公钥" aria-hidden="true">#</a> 四、创建公钥</h2><p>SSH 是 Linux 系统的登录工具，现在广泛用于服务器登录和各种加密通信。</p><h3 id="_1-查看运行用户" tabindex="-1"><a class="header-anchor" href="#_1-查看运行用户" aria-hidden="true">#</a> 1. 查看运行用户</h3><p>一般php运行使用的是 <code>www</code> 用户，我们可以通过 ftp 上传一个 index.php 到站点根目录下，之后进行访问站点，查看项目路径和用户目录。</p><p><strong>index.php 中的代码如下</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">?</span>php
<span class="token function">header</span><span class="token punctuation">(</span>&#39;<span class="token class-name">Content</span><span class="token operator">-</span>type<span class="token operator">:</span> text<span class="token operator">/</span>html<span class="token punctuation">;</span> charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">&quot;error_reporting&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E_ALL &amp; ~E_NOTICE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

echo <span class="token string">&quot;Hi，Webhooks！By 小傅哥&lt;br/&gt;&quot;</span><span class="token punctuation">;</span>

echo &#39;<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>测试：输出项目路径和用户目录：<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>&#39;<span class="token punctuation">;</span>

<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;cd ~ &amp;&amp; cd - &amp;&amp; cd -&quot;</span><span class="token punctuation">,</span> $output<span class="token punctuation">)</span><span class="token punctuation">;</span>

echo <span class="token char">&#39;&lt;pre&gt;&#39;</span><span class="token punctuation">;</span>
echo <span class="token function">print_r</span><span class="token punctuation">(</span>$output<span class="token punctuation">)</span><span class="token punctuation">;</span>
echo <span class="token char">&#39;&lt;/pre&gt;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果你未对 <code>php.ini</code> 中的 <code>disable_functions = {exec、shell_exec}</code> 删掉，那么执行这个 php 文件的中脚本指令会报错。</li></ul><p><strong>访问站点</strong></p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-04.png" alt=""></p><ul><li>项目路径：<code>[0] =&gt; /www/wwwroot/39.96.73.167</code></li><li>用户目录：<code>[1] =&gt; /home/www</code> - <em>www 就是这个用户目录，也就是我们需要为其创建 ssh 公钥的用户</em></li></ul><h3 id="_2-生成和配置公钥" tabindex="-1"><a class="header-anchor" href="#_2-生成和配置公钥" aria-hidden="true">#</a> 2. 生成和配置公钥</h3><h4 id="_2-1-开启-www-用户" tabindex="-1"><a class="header-anchor" href="#_2-1-开启-www-用户" aria-hidden="true">#</a> 2.1 开启 www 用户</h4><ul><li><p>命令：<code>vim /etc/passwd</code></p></li><li><p>配置：把 <code>sbin/nologin</code> 为 <code>bin/bash</code></p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-06.png" alt=""></p></li></ul><h4 id="_2-2-生成公钥" tabindex="-1"><a class="header-anchor" href="#_2-2-生成公钥" aria-hidden="true">#</a> 2.2 生成公钥</h4><p>因为我们已经开始了 www 登录权限，那么在生成公钥之前，需要切换到 www 账户下，命令：<code>su www</code></p><ul><li><p>切换用户：<code>su www</code></p></li><li><p>生成公钥：<code>ssh-keygen -t rsa -C &quot;184172133@qq.com&quot;</code> - 默认回车即可</p></li><li><p>查看公钥：<code>cat ~/.ssh/id_rsa.pub</code> - 其他账户下不可见，只有切换到 www 可见</p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-07.png" alt=""></p></li></ul><h4 id="_2-3-配置公钥-github" tabindex="-1"><a class="header-anchor" href="#_2-3-配置公钥-github" aria-hidden="true">#</a> 2.3 配置公钥(Github)</h4><ul><li><p>地址：https://github.com/settings/ssh/new</p></li><li><p>配置：把你通过 <code>cat ~/.ssh/id_rsa.pub</code> 查看到的公钥，配置到这里即可，如下：</p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-08.png" alt=""></p><ul><li>有了这个公钥的配置，我们通过 webhooks.php 中的脚本指令就可以自动的拉取代码了。</li></ul></li></ul><h2 id="五、webhooks-更新博客" tabindex="-1"><a class="header-anchor" href="#五、webhooks-更新博客" aria-hidden="true">#</a> 五、webhooks 更新博客</h2><h3 id="_1-克隆我的代码" tabindex="-1"><a class="header-anchor" href="#_1-克隆我的代码" aria-hidden="true">#</a> 1. 克隆我的代码</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-09.png" alt=""></p><ul><li>源码：<a href="#">关注公众号：bugstack虫洞栈</a> - 回复：<code>guide-webhooks</code> 即可获得</li><li>使用：你可以把我的源码先fork到自己的Github，然后部署到你的站点中。在学习完成搞清楚原理后，再处理你自己的站点</li></ul><h3 id="_2-部署到站点" tabindex="-1"><a class="header-anchor" href="#_2-部署到站点" aria-hidden="true">#</a> 2. 部署到站点</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-10.png" alt=""></p><ul><li>这里我们需要先在站点使用 <code>git clone ”你的网站代码git地址“</code>，把Github代码克隆到自己的博客中，其实也就是启动了部署做的作用。而这步操作，其实就是日常使用 Git 的方式，先克隆代码，在不断 git pull 更新。</li><li>命令：<code>[www@CodeGuide 39.96.73.167]$ git clone git@github.com:fuzhengwei/guide-webhooks.git</code> - 注意，你需要切换为自己的代码库地址，否则 webhooks 不能生效</li></ul><h3 id="_3-更改网站运行目录" tabindex="-1"><a class="header-anchor" href="#_3-更改网站运行目录" aria-hidden="true">#</a> 3. 更改网站运行目录</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-11.png" alt=""></p><ul><li>因为我们已经在博客站点中，从 Github 克隆下来我们的博客运行代码，那么这里需要把网站的运行目录切换到这个文件夹下，这样就能正常访问到我们的博客代码了。</li></ul><h3 id="_4-配置-webhooks" tabindex="-1"><a class="header-anchor" href="#_4-配置-webhooks" aria-hidden="true">#</a> 4. 配置 webhooks</h3><p><strong>webhooks.php</strong></p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-12.png" alt=""></p><p><strong>回调脚本</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token doc-comment comment">/**
 * Git webhooks 自动部署脚本
 * 地址：https://github.com/fuzhengwei/guide-webhooks/settings/hooks
 */</span>

<span class="token comment">// 接收post参数</span>
<span class="token variable">$requestBody</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;php://input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$requestBody</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;data null！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Content type = application/json</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$requestBody</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 验证 Webhooks 配置的 Secret，也可以不验证</span>
<span class="token comment">/*if (empty($content[&#39;password&#39;]) || $content[&#39;password&#39;] != &#39;123456&#39;) {
	exit(&#39;password error&#39;);
}*/</span>

<span class="token comment">// 项目存放物理路径，也就是站点的访问地址</span>
<span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;/www/wwwroot/39.96.73.167/guide-webhooks/&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 判断需要下拉的分支上是否有提交，我们这里的分支名称为 main</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;ref&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;refs/heads/main&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 执行脚本 git pull，拉取分支最新代码</span>
    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;cd <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$path</span><span class="token punctuation">}</span></span> &amp;&amp; git pull origin main 2&gt;&amp;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前为www用户</span>

    <span class="token comment">// 记录日志 ($content 返回的是一整个对象，可以按需获取里面的内容，写入日志)</span>
    <span class="token variable">$res_log</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;-------------------------&gt;&#39;</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>
    <span class="token variable">$res_log</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">&#39;用户 &#39;</span> <span class="token operator">.</span> <span class="token variable">$content</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;pusher&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39; 于 &#39;</span> <span class="token operator">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d H:i:s&#39;</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39; 向项目【&#39;</span> <span class="token operator">.</span> <span class="token variable">$content</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;repository&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;】分支【&#39;</span> <span class="token operator">.</span> <span class="token variable">$content</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;ref&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;】PUSH &#39;</span> <span class="token operator">.</span> <span class="token variable">$content</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;commits&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>
    <span class="token variable">$res_log</span> <span class="token operator">.=</span> <span class="token variable">$res</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>

    <span class="token comment">// 追加方式，写入日志文件</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;git_webhook_log.txt&quot;</span><span class="token punctuation">,</span> <span class="token variable">$res_log</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;done&#39;</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在我们从 Github 克隆下来的代码文件中，有一个名为 <code>webhooks.php</code> 的文件，它是用于处理 Github 回调时拉取 Github 对应博客代码库的脚本文件。</p></li><li><p>现在 http://39.96.73.167/webhooks.php 就可以配置到 Github 的 webhooks 下了，如图：</p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-13.png" alt=""></p><ul><li>配置，URL、Content type、Secret、trigger，配置完成后确认即可，另外你可以把多个服务器实例都配置上 webhooks，这样就可以在推送代码到 Github 仓库时一起部署了。</li></ul></li></ul><h2 id="六、部署验证" tabindex="-1"><a class="header-anchor" href="#六、部署验证" aria-hidden="true">#</a> 六、部署验证</h2><p><strong>目前</strong>，访问博客是这样，如下：<code>接下来我们开始修改博客文件并提交，验证自动部署更新站点</code></p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-15.png" alt=""></p><h3 id="_1-index-php-新增代码" tabindex="-1"><a class="header-anchor" href="#_1-index-php-新增代码" aria-hidden="true">#</a> 1. index.php 新增代码</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-14.png" alt=""></p><ul><li>你可以在 index.php 文件中修改任意内容，或者添加新的内容。</li></ul><h3 id="_2-push-代码到-github" tabindex="-1"><a class="header-anchor" href="#_2-push-代码到-github" aria-hidden="true">#</a> 2. push 代码到 Github</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-16.png" alt=""></p><ul><li>推送新修改的内容，到代码库中，等待 Github webhooks 回调脚本</li></ul><h3 id="_3-验证博客更新" tabindex="-1"><a class="header-anchor" href="#_3-验证博客更新" aria-hidden="true">#</a> 3. 验证博客更新</h3>`,44),L={href:"http://39.96.73.167/",target:"_blank",rel:"noopener noreferrer"},C=n("li",null,[n("p",null,"效果："),n("p",null,[n("img",{src:"https://bugstack.cn/images/article/devops/devops-1107-17.png",alt:""})]),n("ul",null,[n("li",null,"通过访问博客地址，已经可以看到我们新加入的内容，已经自动部署更新到站点了！✌🏻")])],-1),j=t('<h3 id="_4-查看脚本执行日志" tabindex="-1"><a class="header-anchor" href="#_4-查看脚本执行日志" aria-hidden="true">#</a> 4. 查看脚本执行日志</h3><p>在我们的 webhooks.php 中，执行 git pull 脚本的时候，还有一段日志记录，便于知晓谁对网站对了什么！</p><p><strong>git_webhook_log.txt</strong></p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-18.png" alt=""></p><ul><li>git_webhook_log.txt 是在 webhooks.php 中记录的日志文件，你可以自行扩展其他需要输出的内容。</li></ul><h3 id="_5-查看webhooks推送日志" tabindex="-1"><a class="header-anchor" href="#_5-查看webhooks推送日志" aria-hidden="true">#</a> 5. 查看webhooks推送日志</h3><p><img src="https://bugstack.cn/images/article/devops/devops-1107-19.png" alt=""></p><p><img src="https://bugstack.cn/images/article/devops/devops-1107-20.png" alt=""></p><ul><li>每一次 webhooks 执行时，都会有对应的记录，来告诉你本次代码推送是否被回调成功。并且在日志中，你还可以看到 webhooks 向你推送的内容 JSON 文件内容，你可以从中获取需要的信息，比如这是谁推送的、在哪个分支推送的、推送的文件有哪些等等。</li><li>这里也截取了一段推送的 JSON，其余信息你可以在推送记录中自己查看了。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2>',10),E=n("li",null,[s("本章节我们带着大家彻底的把 webhooks 的使用走了一遍，也让需要此技术的小伙伴可以让自己的站点部署变更的更加"),n("code",null,"聪明一些"),s("。当然自己做记录也帮助了一些师弟和小姐姐！")],-1),T={href:"https://space.bilibili.com/15637440/channel/seriesdetail?sid=479958",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.aliyun.com/minisite/goods?taskPkg=1111ydsrwb&pkgSid=11388&recordId=1033318&userCode=is4kfbdt",target:"_blank",rel:"noopener noreferrer"};function I(V,z){const a=p("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",u,[s("https://bugstack.cn"),e(a)]),h,s("原文："),n("a",k,[s("https://mp.weixin.qq.com/s/VtTHUfyiITNSoGy052jkXQ"),e(a)])]),g,b,m,n("ol",null,[n("li",null,[s("【必须】使用 "),n("a",v,[s("Github"),e(a)]),s("、"),n("a",_,[s("Gitee"),e(a)]),s("、"),n("a",w,[s("Codechina"),e(a)]),s(" 维护网站代码，因为这些代码库可以支持配置 webhooks")]),f,x]),q,n("p",null,[G,s("，我们使用 Linux 宝塔运维面板，添加一个博客站点，在添加之前需要在宝塔中安装 Nginx、FTP、PHP模块，如果你对这里的操作比较陌生，可以先看小傅哥在B站录制好的云服务器学习视频，地址："),n("a",P,[s("https://space.bilibili.com/15637440/channel/seriesdetail?sid=479958"),e(a)]),s(),y]),$,n("ul",null,[n("li",null,[s("地址："),n("a",H,[s("http://39.96.73.167"),e(a)]),s(" - 你换成自己的访问IP即可")]),S]),N,n("ul",null,[n("li",null,[n("p",null,[s("地址："),n("a",L,[s("http://39.96.73.167/"),e(a)])])]),C]),j,n("ul",null,[E,n("li",null,[s("那么现在如果你手里有服务器正在吃灰不知道怎么用起来，现在可以折腾起来了，因为傅哥给你录好了入门视频、写好了操作文章，那么不要等待了，上吧！年轻人！课程链接："),n("a",T,[s("https://space.bilibili.com/15637440/channel/seriesdetail?sid=479958"),e(a)])]),n("li",null,[s("最后，如果你还没有服务器，那么赶紧搞一个吧，趁着还有活动🔥 链接："),n("a",B,[s("https://www.aliyun.com/minisite/goods?taskPkg=1111ydsrwb&pkgSid=11388&recordId=1033318&userCode=is4kfbdt"),e(a)])])])])}const U=o(c,[["render",I],["__file","2021-11-07-guanyuzenmeshiyong webhooks zidongbushuboke，xiangxijiaochengwendang！.html.vue"]]);export{U as default};
