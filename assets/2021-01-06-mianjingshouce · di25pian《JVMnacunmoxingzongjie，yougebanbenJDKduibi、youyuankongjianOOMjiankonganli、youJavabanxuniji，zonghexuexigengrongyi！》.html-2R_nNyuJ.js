import{_ as p,r as c,o,c as l,a as n,b as a,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"面经手册-·-第25篇《jvm内存模型总结-有各版本jdk对比、有元空间oom监控案例、有java版虚拟机-综合学习更容易-》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第25篇《jvm内存模型总结-有各版本jdk对比、有元空间oom监控案例、有java版虚拟机-综合学习更容易-》","aria-hidden":"true"},"#"),a(" 面经手册 · 第25篇《JVM内存模型总结，有各版本JDK对比、有元空间OOM监控案例、有Java版虚拟机，综合学习更容易！》")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=t(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>看了一篇文章30岁有多难！</code></p><p>每篇文章的开篇总喜欢写一些，从个人视角看这个世界的感悟。</p><p>最近看到一篇文章，<code>30岁有多难</code>。文中的一些主人公好像在学业、工作、生活、爱情等方面都过的都不如意。要不是错过这，要不是走错那。总结来看，就像是很倒霉的一群倒霉蛋儿在跟生活对干！</p><p>但其实每个人可能都遇到过生活中最难的时候，或早或晚。就像我刚毕业不久时一连串遇到；<code>冬天里丢过第一部手机</code>、<code>修一个进了水的电脑</code>、<code>租的房子第一次被骗</code>，一连串下来头一次要赶在工资没发的时候，选择少吃早饭还是午饭，看看能扛过去那顿。</p><p>哈哈哈哈哈，现在想想还挺有意思的，不过这些乱遭的事很多是自己的意识和能力不足时做出的错误选择而导致的。</p><p>人那，想开车就要考驾照，想走远就要有能力。多提升认知，多拓宽眼界！<code>生活的意义就是不断的更新自己！</code></p><h2 id="二、面试题" tabindex="-1"><a class="header-anchor" href="#二、面试题" aria-hidden="true">#</a> 二、面试题</h2><p><code>谢飞机，小记！</code>，冬风吹、战鼓擂。被窝里，谁怕谁。</p><p><strong>谢飞机</strong>：歪？大哥，你在吗？</p><p><strong>面试官</strong>：咋了，大周末的，这么早打电话！？</p><p><strong>谢飞机</strong>：我梦见，我去谷歌写JVM了，给你们公司用，之后蹦了，让我起来改bug！</p><p><strong>面试官</strong>：啊！？啊，那我问你，JDK 1.8 与 JDK 1.7 在运行时数据区的设计上，你都怎么做的优化策略的？</p><p><strong>谢飞机</strong>：我没写这，我不知道！</p><p><strong>面试官</strong>：擦。。。</p><h2 id="三、-jdk1-6、jdk1-7、jdk1-8-内存模型演变" tabindex="-1"><a class="header-anchor" href="#三、-jdk1-6、jdk1-7、jdk1-8-内存模型演变" aria-hidden="true">#</a> 三、 JDK1.6、JDK1.7、JDK1.8 内存模型演变</h2><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-25-1.png" alt="图 25-1  JDK1.6、JDK1.7、JDK1.8，内存模型演变"></p><p>如图 25-1 是 JDK 1.6、1.7、1.8 的内存模型演变过程，其实这个内存模型就是 JVM 运行时数据区依照JVM虚拟机规范的具体实现过程。</p><p>在图 25-1 中各个版本的迭代都是为了更好的适应CPU性能提升，最大限度提升的JVM运行效率。这些版本的JVM内存模型主要有以下差异：</p><ul><li>JDK 1.6：有永久代，静态变量存放在永久代上。</li><li>JDK 1.7：有永久代，但已经把字符串常量池、静态变量，存放在堆上。逐渐的减少永久代的使用。</li><li>JDK 1.8：无永久代，运行时常量池、类常量池，都保存在元数据区，也就是常说的<code>元空间</code>。但字符串常量池仍然存放在堆上。</li></ul><h2 id="四、内存模型各区域介绍" tabindex="-1"><a class="header-anchor" href="#四、内存模型各区域介绍" aria-hidden="true">#</a> 四、内存模型各区域介绍</h2><h3 id="_1-程序计数器" tabindex="-1"><a class="header-anchor" href="#_1-程序计数器" aria-hidden="true">#</a> 1. 程序计数器</h3><ul><li>较小的内存空间、线程私有，记录当前线程所执行的字节码行号。</li><li>如果执行 Java 方法，计数器记录虚拟机字节码当前指令的地址，本地方法则为空。</li><li>这一块区域没有任何 OutOfMemoryError 定义。</li></ul><p><strong>以上</strong>，就是关于程序计数器的定义，如果这样看没有感觉，我们举一个例子。</p><p>定义一段 Java 方法的代码，这段代码是计算圆形的周长。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token keyword">float</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> area <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> pi <span class="token operator">*</span> r<span class="token punctuation">;</span>
        <span class="token keyword">return</span> area<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，如图 25-2 是这段代码的在虚拟机中的执行过程，左侧是它的程序计数器对应的行号。</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-25-2.png" alt="图 25-2 程序计数器"></p><ul><li>这些行号每一个都会对应一条需要执行的字节码指令，是压栈还是弹出或是执行计算。</li><li>之所以说是线程私有的，因为如果不是私有的，那么整个计算过程最终的结果也将错误。</li></ul><h3 id="_2-java虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_2-java虚拟机栈" aria-hidden="true">#</a> 2. Java虚拟机栈</h3><ul><li>每一个方法在执行的同时，都会创建出一个栈帧，用于存放局部变量表、操作数栈、动态链接、方法出口、线程等信息。</li><li>方法从调用到执行完成，都对应着栈帧从虚拟机中入栈和出栈的过程。</li><li>最终，栈帧会随着方法的创建到结束而销毁。</li></ul><p>可能这么只从定义看上去仍然没有什么感觉，我们再找一个例子。</p><p>这是一个关于<code>斐波那契数列（Fibonacci sequence）</code>求值的例子，我们通过斐波那契数列在虚拟机中的执行过程，来体会Java虚拟机栈的用途。</p><blockquote><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=3，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从1963年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。</p></blockquote><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-25-3.png" alt="图 25-3 斐波那契数列在虚拟机栈中的执行过程"></p><ul><li>整个这段流程，就是方法的调用和返回。在调用过程申请了操作数栈的深度和局部变量的大小。</li><li>以及相应的信息从各个区域获取并操作，其实也就是入栈和出栈的过程。</li></ul><h3 id="_3-本地方法栈" tabindex="-1"><a class="header-anchor" href="#_3-本地方法栈" aria-hidden="true">#</a> 3. 本地方法栈</h3><ul><li>本地方法栈与Java虚拟机栈作用类似，唯一不同的就是本地方法栈执行的是Native方法，而虚拟机栈是为JVM执行Java方法服务的。</li><li>另外，与 Java 虚拟机栈一样，本地方法栈也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</li><li>JDK1.8 HotSpot虚拟机直接就把本地方法栈和虚拟机栈合二为一。</li></ul><p><em>关于本地方法栈在以上的例子已经涉及了这部分内容，这里就不在赘述了。</em></p><h3 id="_4-堆和元空间" tabindex="-1"><a class="header-anchor" href="#_4-堆和元空间" aria-hidden="true">#</a> 4. 堆和元空间</h3><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-25-4.png" alt="图 25-4 Java 堆区域划分"></p><ul><li>JDK 1.8 JVM 的内存结构主要由三大块组成：堆内存、元空间和栈，Java 堆是内存空间占据最大的一块区域。</li><li>Java 堆，由年轻代和年老代组成，分别占据1/3和2/3。</li><li>而年轻代又分为三部分，<strong>Eden</strong>、<strong>From Survivor</strong>、<strong>To Survivor</strong>，占据比例为8:1:1，可调。</li><li>另外这里我们特意画出了元空间，也就是直接内存区域。在 JDK 1.8 之后就不在堆上分配方法区了。</li><li><strong>元空间</strong>从虚拟机Java堆中转移到本地内存，默认情况下，元空间的大小仅受本地内存的限制，说白了也就是以后不会因为永久代空间不够而抛出OOM异常出现了。<em>jdk1.8以前版本的 class和JAR包数据存储在 PermGen下面 ，PermGen 大小是固定的，而且项目之间无法共用，公有的 class，所以比较容易出现OOM异常。</em></li><li>升级 JDK 1.8后，元空间配置参数，<code>-XX:MetaspaceSize=512M XX:MaxMetaspaceSize=1024M</code>。教你个小技巧通过jps、jinfo查看元空间，如下： <ul><li><img src="https://bugstack.cn/assets/images/2020/interview/interview-25-4-1.png" alt="通过命令查看元空间"></li><li>通过jinfo查看默认MetaspaceSize大小（约20M）,MaxMetaspaceSize比较大。</li></ul></li></ul>`,43),m=n("strong",null,"其他：关于 JDK1.8 元空间的介绍：",-1),v={href:"http://openjdk.java.net/jeps/122",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="_5-常量池" tabindex="-1"><a class="header-anchor" href="#_5-常量池" aria-hidden="true">#</a> 5. 常量池</h3><ul><li>从 JDK 1.7开始把常量池从永久代中剥离，直到 JDK1.8 去掉了永久代。而字符串常量池一直放在堆空间，用于存储字符串对象，或是字符串对象的引用。</li></ul><h2 id="五、手撸虚拟机-内存模型" tabindex="-1"><a class="header-anchor" href="#五、手撸虚拟机-内存模型" aria-hidden="true">#</a> 五、手撸虚拟机(内存模型)</h2><p>其实以上的内容，已经完整的介绍了JVM虚拟机的内存模型，也就是运行时数据区的结构。但是这东西看完可能就忘记了，因为缺少一个可亲手操作的代码。</p><p><strong>所以</strong>，这里我给大家用Java代码写一段关于数据槽、栈帧、局部变量、虚拟机栈以及堆的代码结构，让大家更好的加深对虚拟机内存模型的印象。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>运行时数据区
├── heap
│   ├── constantpool
│   ├── methodarea
│   │   ├── <span class="token class-name">Class</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">ClassMember</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">Field</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">Method</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">MethodDescriptor</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">MethodDescriptorParser</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">MethodLookup</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">Object</span><span class="token punctuation">.</span>java
│   │   ├── <span class="token class-name">Slots</span><span class="token punctuation">.</span>java
│   │   └── <span class="token class-name">StringPool</span><span class="token punctuation">.</span>java
│   └── <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span>java
├── <span class="token class-name">Frame</span><span class="token punctuation">.</span>java
├── <span class="token class-name">JvmStack</span><span class="token punctuation">.</span>java
├── <span class="token class-name">LocalVars</span><span class="token punctuation">.</span>java
├── <span class="token class-name">OperandStack</span><span class="token punctuation">.</span>java
├── <span class="token class-name">Slot</span><span class="token punctuation">.</span>java
└── <span class="token class-name">Thread</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这部分就是使用Java实现的部分JVM虚拟机功能，这部分主要包括如下内容：</p><ul><li>Frame，栈帧</li><li>JvmStack，虚拟机栈</li><li>LocalVars，局部变量</li><li>OperandStack，操作数栈</li><li>Slot，数据槽</li><li>Thread，线程</li><li>heap，堆，里面包括常量池和方法区</li></ul><h3 id="_2-重点代码" tabindex="-1"><a class="header-anchor" href="#_2-重点代码" aria-hidden="true">#</a> 2. 重点代码</h3><p><strong>操作数栈 OperandStack</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperandStack</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Slot</span><span class="token punctuation">[</span><span class="token punctuation">]</span> slots<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">OperandStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxStack <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            slots <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Slot</span><span class="token punctuation">[</span>maxStack<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxStack<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                slots<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>虚拟机栈 OperandStack</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmStack</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Frame</span> _top<span class="token punctuation">;</span>
    
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>栈帧 Frame</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>

    <span class="token comment">//stack is implemented as linked list</span>
    <span class="token class-name">Frame</span> lower<span class="token punctuation">;</span>

    <span class="token comment">//局部变量表</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalVars</span> localVars<span class="token punctuation">;</span>

    <span class="token comment">//操作数栈</span>
    <span class="token keyword">private</span> <span class="token class-name">OperandStack</span> operandStack<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Method</span> method<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> nextPC<span class="token punctuation">;</span>
 
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),h=n("li",null,"关于代码结构看到这有点感觉了吗？",-1),g=n("li",null,"Slot数据槽，就是一个数组结构，用于存放数据的。",-1),j=n("li",null,"操作数栈、局部变量表，都是使用数据槽进行入栈入栈操作。",-1),f=n("li",null,[a("在栈帧里，可以看到连接、局部变量表、操作数栈、方法、线程等，那么文中说到的当有一个新的"),n("code",null,"每一个方法在执行的同时，都会创建出一个栈帧"),a("，是不就对了上，可以真的理解了。")],-1),_=n("code",null,"用Java实现JVM源码",-1),w={href:"https://github.com/fuzhengwei/itstack-demo-jvm",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="六、jconsole监测元空间溢出" tabindex="-1"><a class="header-anchor" href="#六、jconsole监测元空间溢出" aria-hidden="true">#</a> 六、jconsole监测元空间溢出</h2><p>不是说 JDK 1.8 的内存模型把永久代下掉，换上<code>元空间</code>了吗？但不测试下，就感受不到呀，没有证据！</p><p>所有关于代码逻辑的学习，都需要有数据基础和证明过程，这样才能有深刻的印象。走着，带你把元空间干满，让它OOM！</p><h3 id="_1-找段持续创建大对象的代码" tabindex="-1"><a class="header-anchor" href="#_1-找段持续创建大对象的代码" aria-hidden="true">#</a> 1. 找段持续创建大对象的代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">ClassLoadingMXBean</span> loadingBean <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getClassLoadingMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">MetaSpaceOomMock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Dispatcher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallbackFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enhancer<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> loadingBean<span class="token punctuation">.</span><span class="token function">getTotalLoadedClassCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> loadingBean<span class="token punctuation">.</span><span class="token function">getLoadedClassCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> loadingBean<span class="token punctuation">.</span><span class="token function">getUnloadedClassCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>网上找了一段基于CGLIB的，你可以写一些其他的。</li><li><code>Thread.sleep(5000);</code>，睡一会，方便我们点检测，要不程序太快就异常了。</li></ul><h3 id="_2-调整元空间大小" tabindex="-1"><a class="header-anchor" href="#_2-调整元空间大小" aria-hidden="true">#</a> 2. 调整元空间大小</h3><p>默认情况下元空间太大了，不方便测试出结果，所以我们把它调的小一点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MetaspaceSize</span><span class="token operator">=</span><span class="token number">8</span>m
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxMetaspaceSize</span><span class="token operator">=</span><span class="token number">80</span>m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-设置监控参数" tabindex="-1"><a class="header-anchor" href="#_3-设置监控参数" aria-hidden="true">#</a> 3. 设置监控参数</h3><p>基于 jconsole 监控，我们需要设置下参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">7397</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ssl<span class="token operator">=</span><span class="token boolean">false</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-测试运行" tabindex="-1"><a class="header-anchor" href="#_4-测试运行" aria-hidden="true">#</a> 4. 测试运行</h3><h4 id="_4-1-配置参数" tabindex="-1"><a class="header-anchor" href="#_4-1-配置参数" aria-hidden="true">#</a> 4.1 配置参数</h4><p><strong>以上的测试参数</strong>，配置到IDEA中运行程序里就可以，如下：</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-25-5.png" alt="图 25-5 设置程序运行参数，监控OOM"></p><p>另外，jconsole 可以通过 IDEA 提供的 Terminal 启动，直接输入 <code>jconsole</code>，回车即可。</p><h4 id="_4-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_4-2-测试结果" aria-hidden="true">#</a> 4.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span></span>MetaSpaceOomMock</span>$$<span class="token class-name">EnhancerByCGLIB</span>$$bd2bb16e999099900
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span></span>MetaSpaceOomMock</span>$$<span class="token class-name">EnhancerByCGLIB</span>$$<span class="token number">9</span>c774e64999199910
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span></span>MetaSpaceOomMock</span>$$<span class="token class-name">EnhancerByCGLIB</span>$$cac97732999299920
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span></span>MetaSpaceOomMock</span>$$<span class="token class-name">EnhancerByCGLIB</span>$$<span class="token number">91</span>c6a15a999399930
<span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalStateException</span><span class="token operator">:</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">load</span> cache item
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>LoadingCache</span><span class="token punctuation">.</span><span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token class-name">LoadingCache</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">79</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>LoadingCache</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">LoadingCache</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">34</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>AbstractClassGenerator</span>$<span class="token class-name">ClassLoaderData</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">AbstractClassGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">119</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>AbstractClassGenerator</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">AbstractClassGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">294</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>Enhancer</span><span class="token punctuation">.</span><span class="token function">createHelper</span><span class="token punctuation">(</span><span class="token class-name">Enhancer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">480</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>Enhancer</span><span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token class-name">Enhancer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">337</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>interview<span class="token punctuation">.</span></span>MetaSpaceOomMock</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">MetaSpaceOomMock</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">34</span><span class="token punctuation">)</span>
<span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Metaspace</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span><span class="token punctuation">.</span><span class="token function">forName0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">348</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ReflectUtils</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token class-name">ReflectUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">467</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>AbstractClassGenerator</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">AbstractClassGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">339</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>Enhancer</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Enhancer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">492</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>AbstractClassGenerator</span>$<span class="token class-name">ClassLoaderData</span>$<span class="token number">3.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">AbstractClassGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>AbstractClassGenerator</span>$<span class="token class-name">ClassLoaderData</span>$<span class="token number">3.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">AbstractClassGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">94</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>LoadingCache</span>$<span class="token number">2.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">LoadingCache</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">54</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>FutureTask</span><span class="token punctuation">.</span>run$$$<span class="token function">capture</span><span class="token punctuation">(</span><span class="token class-name">FutureTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">266</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>FutureTask</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">FutureTask</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>LoadingCache</span><span class="token punctuation">.</span><span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token class-name">LoadingCache</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">6</span> more
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要的就是这句，java.lang.OutOfMemoryError: Metaspace，元空间OOM，证明 JDK1.8 已经去掉永久代，换位元空间。</li></ul><h4 id="_4-3-监控截图" tabindex="-1"><a class="header-anchor" href="#_4-3-监控截图" aria-hidden="true">#</a> 4.3 监控截图</h4><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-25-6.png" alt="图 25-6 jconsole监测元空间溢出"></p><ul><li>图 25-6，就是监测程序OOM时的元空间表现。这回对这个元空间就有感觉了吧！</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>本文从 JDK 各个版本关于内存模型结构的演变，来了解各个区域，包括：程序计数器、Java 虚拟机栈、本地方法栈、堆和元空间。并了解从 JDK 1.8 开始去掉方法区引入元空间的核心目的和作用。</li><li>在通过手撸JVM代码的方式让大家对运行时数据区有一个整体的认知，也通过这样的方式让大家对学习这部分知识有一个抓手。</li><li>最后我们通过 jconsole 检测元空间溢出的整个过程，来学以致用，看看元空间到底在解决什么问题以及怎么测试。</li></ul>`,25);function M(x,J){const s=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[a("作者：小傅哥 "),r,a("博客："),n("a",k,[a("https://bugstack.cn"),e(s)])]),d,n("p",null,[m,a(" Move part of the contents of the permanent generation in Hotspot to the Java heap and the remainder to native memory. "),n("a",v,[a("http://openjdk.java.net/jeps/122"),e(s)])]),b,n("ul",null,[h,g,j,f,n("li",null,[a("如果你对JVM的实现感兴趣，可以阅读"),_,a("："),n("a",w,[a("https://github.com/fuzhengwei/itstack-demo-jvm"),e(s)])])]),y])}const S=p(i,[["render",M],["__file","2021-01-06-mianjingshouce · di25pian《JVMnacunmoxingzongjie，yougebanbenJDKduibi、youyuankongjianOOMjiankonganli、youJavabanxuniji，zonghexuexigengrongyi！》.html.vue"]]);export{S as default};
