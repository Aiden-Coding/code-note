import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"字节码编程-javassist篇五《使用bytecode指令码生成含有自定义注解的类和方法》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字节码编程-javassist篇五《使用bytecode指令码生成含有自定义注解的类和方法》","aria-hidden":"true"},"#"),s(" 字节码编程，Javassist篇五《使用Bytecode指令码生成含有自定义注解的类和方法》")],-1),d=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=e('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>到本章为止已经写了四篇关于字节码编程的内容，涉及了大部分的API方法。整体来说对 <code>Javassist</code> 已经有一个基本的使用认知。那么在 <code>Javassist</code> 中不仅提供了高级 <code>API</code> 用于创建和修改类、方法，还提供了低级 <code>API</code> 控制<em>字节码指令</em>的方式进行操作类、方法。</p>',3),m={href:"http://www.javassist.org/html/index.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"javassist API",-1),b=n("p",null,[s("接下来我们通过字节码指令模拟一段含有自定义注解的方法修改和生成。在修改的过程中会将原有方法计算"),n("code",null,"息费"),s("的返回值替换成 "),n("code",null,"0"),s("，最后我们使用这样的技术去生成一段计算息费的方法。通过这样的练习学会字节码操作。")],-1),h=n("h2",{id:"二、开发环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、开发环境","aria-hidden":"true"},"#"),s(" 二、开发环境")],-1),g=n("li",null,"JDK 1.8.0",-1),y=n("li",null,"javassist 3.12.1.GA",-1),f=n("code",null,"itstack-demo-bytecode-1-04",-1),q=n("strong",null,"公众号",-1),w={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"bugstack虫洞栈",-1),z=n("em",null,"源码下载",-1),A=n("code",null,"你会获得一个下载链接列表，打开后里面的第17个「因为我有好多开源代码」",-1),j=n("code",null,"Star",-1),C=e(`<h2 id="三、案例目标" tabindex="-1"><a class="header-anchor" href="#三、案例目标" aria-hidden="true">#</a> 三、案例目标</h2><ol><li>使用指令码修改原有方法返回值</li><li>使用指令码生成一样的方法</li></ol><p><strong>测试方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RpcGatewayClazz</span><span class="token punctuation">(</span>clazzDesc <span class="token operator">=</span> <span class="token string">&quot;用户信息查询服务&quot;</span><span class="token punctuation">,</span> alias <span class="token operator">=</span> <span class="token string">&quot;api&quot;</span><span class="token punctuation">,</span> timeOut <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RpcGatewayMethod</span><span class="token punctuation">(</span>methodDesc <span class="token operator">=</span> <span class="token string">&quot;查询息费&quot;</span><span class="token punctuation">,</span> methodName <span class="token operator">=</span> <span class="token string">&quot;interestFee&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">queryInterestFee</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 模拟息费计算返回</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里使用的注解是测试中自定义的，模拟一个相当于网关接口的暴漏。</li></ul><h2 id="四、技术实现" tabindex="-1"><a class="header-anchor" href="#四、技术实现" aria-hidden="true">#</a> 四、技术实现</h2><h3 id="_1-读取类自定义注解" tabindex="-1"><a class="header-anchor" href="#_1-读取类自定义注解" aria-hidden="true">#</a> 1. 读取类自定义注解</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 类、注解</span>
<span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ApiTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过集合获取自定义注解</span>
<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> clazzAnnotations <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RpcGatewayClazz</span> rpcGatewayClazz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">)</span> clazzAnnotations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayClazz.clazzDesc：&quot;</span> <span class="token operator">+</span> rpcGatewayClazz<span class="token punctuation">.</span><span class="token function">clazzDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayClazz.alias：&quot;</span> <span class="token operator">+</span> rpcGatewayClazz<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayClazz.timeOut：&quot;</span> <span class="token operator">+</span> rpcGatewayClazz<span class="token punctuation">.</span><span class="token function">timeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ctClass.getAnnotations()</code>，可以获取所有的注解，进行操作</li></ul><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span>clazzDesc：用户信息查询服务
<span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span>alias：api
<span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span>timeOut：<span class="token number">500</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-读取方法的自定义注解" tabindex="-1"><a class="header-anchor" href="#_2-读取方法的自定义注解" aria-hidden="true">#</a> 2. 读取方法的自定义注解</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;queryInterestFee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RpcGatewayMethod</span> rpcGatewayMethod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">)</span> ctMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayMethod.methodName：&quot;</span> <span class="token operator">+</span> rpcGatewayMethod<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayMethod.methodDesc：&quot;</span> <span class="token operator">+</span> rpcGatewayMethod<span class="token punctuation">.</span><span class="token function">methodDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在读取方法自定义注解时，通过的是注解的 <code>class</code> 获取的，这样按照名称可以只获取最需要的注解名称。</li></ul><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">.</span>methodName：interestFee
<span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">.</span>methodDesc：查询息费
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-读取方法指令码" tabindex="-1"><a class="header-anchor" href="#_3-读取方法指令码" aria-hidden="true">#</a> 3. 读取方法指令码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CodeAttribute</span> codeAttribute <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span><span class="token function">getCodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CodeIterator</span> iterator <span class="token operator">=</span> codeAttribute<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> code <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">byteAt</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;指令码：&quot;</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">&quot; &gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Mnemonic</span><span class="token punctuation">.</span><span class="token constant">OPCODE</span><span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里的指令码就是一个方法编译后在 <code>JVM</code> 执行的操作流程。</li></ul><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>指令码：<span class="token number">0</span> <span class="token operator">&gt;</span> getstatic
指令码：<span class="token number">3</span> <span class="token operator">&gt;</span> invokevirtual
指令码：<span class="token number">6</span> <span class="token operator">&gt;</span> dreturn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-通过指令修改方法" tabindex="-1"><a class="header-anchor" href="#_4-通过指令修改方法" aria-hidden="true">#</a> 4. 通过指令修改方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConstPool</span> cp <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span><span class="token function">getConstPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Bytecode</span> bytecode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bytecode</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>
bytecode<span class="token punctuation">.</span><span class="token function">addDconst</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bytecode<span class="token punctuation">.</span><span class="token function">addReturn</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInfo<span class="token punctuation">.</span><span class="token function">setCodeAttribute</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">.</span><span class="token function">toCodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>addDconst</code>，将 double 型0推送至栈顶</li><li><code>addReturn</code>，返回 double 类型的结果</li></ul><p>此时的方法的返回值已经被修改，下面的是新的 <code>class</code> 类；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RpcGatewayClazz</span><span class="token punctuation">(</span>
    clazzDesc <span class="token operator">=</span> <span class="token string">&quot;用户信息查询服务&quot;</span><span class="token punctuation">,</span>
    alias <span class="token operator">=</span> <span class="token string">&quot;api&quot;</span><span class="token punctuation">,</span>
    timeOut <span class="token operator">=</span> <span class="token number">500L</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ApiTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RpcGatewayMethod</span><span class="token punctuation">(</span>
        methodDesc <span class="token operator">=</span> <span class="token string">&quot;查询息费&quot;</span><span class="token punctuation">,</span>
        methodName <span class="token operator">=</span> <span class="token string">&quot;interestFee&quot;</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">queryInterestFee</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0.0D</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到查询息费的返回结果已经是 <code>0.0D</code>。如果你的程序被这样操作，那么还是很危险的。所以有时候会进行一些混淆编译，降低破解风险。</li></ul><h3 id="_5-使用指令码生成方法" tabindex="-1"><a class="header-anchor" href="#_5-使用指令码生成方法" aria-hidden="true">#</a> 5. 使用指令码生成方法</h3><h4 id="_5-1-创建基础方法信息" tabindex="-1"><a class="header-anchor" href="#_5-1-创建基础方法信息" aria-hidden="true">#</a> 5.1 创建基础方法信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建类信息</span>
<span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.javassist.HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加方法</span>
<span class="token class-name">CtMethod</span> mainMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">,</span> <span class="token string">&quot;queryInterestFee&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
mainMethod<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> mainMethod<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ConstPool</span> cp <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span><span class="token function">getConstPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建类和方法的信息在我们几个章节中也经常使用，主要是创建方法的时候需要传递；返回类型、方法名称、入参类型，以及最终标记方法的可访问量。</li></ul><h4 id="_5-2-创建类使用注解" tabindex="-1"><a class="header-anchor" href="#_5-2-创建类使用注解" aria-hidden="true">#</a> 5.2 创建类使用注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 类添加注解</span>
<span class="token class-name">AnnotationsAttribute</span> clazzAnnotationsAttribute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationsAttribute</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> <span class="token class-name">AnnotationsAttribute</span><span class="token punctuation">.</span>visibleTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Annotation</span> clazzAnnotation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Annotation</span><span class="token punctuation">(</span><span class="token string">&quot;org/itstack/demo/javassist/RpcGatewayClazz&quot;</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>
clazzAnnotation<span class="token punctuation">.</span><span class="token function">addMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;clazzDesc&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;用户信息查询服务&quot;</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
clazzAnnotation<span class="token punctuation">.</span><span class="token function">addMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;alias&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
clazzAnnotation<span class="token punctuation">.</span><span class="token function">addMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;timeOut&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LongMemberValue</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
clazzAnnotationsAttribute<span class="token punctuation">.</span><span class="token function">setAnnotation</span><span class="token punctuation">(</span>clazzAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
ctClass<span class="token punctuation">.</span><span class="token function">getClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>clazzAnnotationsAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>AnnotationsAttribute</code>，创建自定义注解标签</li><li><code>Annotation</code>，创建实际需要的自定义注解，这里需要传递自定义注解的类路径</li><li><code>addMemberValue</code>，用于添加自定义注解中的值。需要注意不同类型的值 <code>XxxMemberValue</code> 前缀不一样；<em>StringMemberValue</em>、<em>LongMemberValue</em></li><li><code>setAnnotation</code>，最终设置自定义注解。如果不设置，是不能生效的。</li></ul><h4 id="_5-3-创建方法注解" tabindex="-1"><a class="header-anchor" href="#_5-3-创建方法注解" aria-hidden="true">#</a> 5.3 创建方法注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方法添加注解</span>
<span class="token class-name">AnnotationsAttribute</span> methodAnnotationsAttribute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationsAttribute</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> <span class="token class-name">AnnotationsAttribute</span><span class="token punctuation">.</span>visibleTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Annotation</span> methodAnnotation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Annotation</span><span class="token punctuation">(</span><span class="token string">&quot;org/itstack/demo/javassist/RpcGatewayMethod&quot;</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>
methodAnnotation<span class="token punctuation">.</span><span class="token function">addMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;methodName&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;查询息费&quot;</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodAnnotation<span class="token punctuation">.</span><span class="token function">addMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;methodDesc&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringMemberValue</span><span class="token punctuation">(</span><span class="token string">&quot;interestFee&quot;</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodAnnotationsAttribute<span class="token punctuation">.</span><span class="token function">setAnnotation</span><span class="token punctuation">(</span>methodAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInfo<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>methodAnnotationsAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置类的注解与设置方法的注解，前面的内容都是一样的。唯独需要注意的是方法的注解，需要设置到方法的；<code>addAttribute</code> 上。</li></ul><h4 id="_5-4-字节码编写方法快" tabindex="-1"><a class="header-anchor" href="#_5-4-字节码编写方法快" aria-hidden="true">#</a> 5.4 字节码编写方法快</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 指令控制</span>
<span class="token class-name">Bytecode</span> bytecode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bytecode</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>
bytecode<span class="token punctuation">.</span><span class="token function">addGetstatic</span><span class="token punctuation">(</span><span class="token string">&quot;java/math/BigDecimal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TEN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ljava/math/BigDecimal;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bytecode<span class="token punctuation">.</span><span class="token function">addInvokevirtual</span><span class="token punctuation">(</span><span class="token string">&quot;java/math/BigDecimal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;doubleValue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bytecode<span class="token punctuation">.</span><span class="token function">addReturn</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>doubleType<span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInfo<span class="token punctuation">.</span><span class="token function">setCodeAttribute</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">.</span><span class="token function">toCodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Javassist</code> 中的指令码通过，<em>Bytecode</em> 的方式进行添加。基本所有的指令你都可以在这里使用，它有非常强大的 <code>API</code>。</li><li><code>addGetstatic</code>，获取指定类的静态域, 并将其压入栈顶</li><li><code>addInvokevirtual</code>，调用实例方法</li><li><code>addReturn</code>，从当前方法返回double</li><li>最终讲字节码添加到方法中，也就是会变成方法体。</li></ul><h4 id="_5-5-添加方法信息并输出" tabindex="-1"><a class="header-anchor" href="#_5-5-添加方法信息并输出" aria-hidden="true">#</a> 5.5 添加方法信息并输出</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加方法</span>
ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>mainMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 输出类信息到文件夹下</span>
ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分内容就比较简单了，也是我们做 <code>Javassist</code> 字节码开发常用的内容。添加方法和输出字节码编程后的类信息。</li></ul><h4 id="_5-6-最终创建的类方法" tabindex="-1"><a class="header-anchor" href="#_5-6-最终创建的类方法" aria-hidden="true">#</a> 5.6 最终创建的类方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RpcGatewayClazz</span><span class="token punctuation">(</span>
    clazzDesc <span class="token operator">=</span> <span class="token string">&quot;用户信息查询服务&quot;</span><span class="token punctuation">,</span>
    alias <span class="token operator">=</span> <span class="token string">&quot;api&quot;</span><span class="token punctuation">,</span>
    timeOut <span class="token operator">=</span> <span class="token number">500L</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RpcGatewayMethod</span><span class="token punctuation">(</span>
        methodName <span class="token operator">=</span> <span class="token string">&quot;查询息费&quot;</span><span class="token punctuation">,</span>
        methodDesc <span class="token operator">=</span> <span class="token string">&quot;interestFee&quot;</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">queryInterestFee</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-bytecode-1-05-1.png" alt="字节码生成含有注解的类和方法"></p><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>本章节我们看到字节码编程不只可以像以前使用强大的api去直接编写代码，还可以向方法中添加指令，控制方法。这样就可以非常方便的处理一些特殊场景。例如 <code>TryCatch</code> 中的开始位置。</li><li>关于 <code>javassist</code> 字节码编程本身常用的方法基本已经覆盖完成，后续会集合 <code>JavaAgent</code> 做一些案例汇总，将知识点与实际场景进行串联。</li><li>学习终究还是要成体系的系统化深入学习，只言片语有的内容不能很好的形成一个技术栈的闭环，也不利于在项目中实战。</li></ul>`,48);function M(x,G){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),r,n("p",null,[s("有了这样的 "),n("a",m,[v,t(a)]),s(" 在一些特殊场景下就可以使用字节码指令控制方法。")]),b,h,n("ol",null,[g,y,n("li",null,[s("本章涉及源码在："),f,s("，可以关注"),q,s("："),n("a",w,[_,t(a)]),s("，回复"),z,s("获取。"),A,s("，记得给个"),j,s("！")])]),C])}const I=p(i,[["render",M],["__file","2020-04-29-zijiemabiancheng，Javassistpianwu《shiyongBytecodezhilingmashengchenghanyouzidingyizhujiedeleihefangfa》.html.vue"]]);export{I as default};
