import{_ as n,o as s,c as a,e as t}from"./app-3RcBQnkC.js";const p={},e=t(`<h1 id="_8-2-接口与组件" tabindex="-1"><a class="header-anchor" href="#_8-2-接口与组件" aria-hidden="true">#</a> 8.2 接口与组件</h1><p>用于代码分析的 ASM API 在 <code>org.objectweb.asm.tree.analysis</code> 包中。由包的名字可以看出，它是基于树 API 的。事实上，这个包提供了一个进行正向数据流分析的框架。 为了能够以准确度不一的取值进行各种数据流分析，数据流分析算法分为两部分：一种是固定的，由框架提供，另一种是变化的，由用户提供。更准确地说：</p><ul><li>整体数据流分析算法、将适当数量的值从栈中弹出和压回栈中的任务仅实现一次，用于 Analyzer 和 Frame 类中的所有内容。</li><li>合并值的任何和计算值集并集的任务由用户定义的 Interpreter 和 Value 抽象类的子类提供。提供了几个预定义的子类，下面几节将进行介绍。</li></ul><p>尽管框架的主要目的是执行数据流分析，但 Analyzer 类也可构造所分析方法的控制流图。为此，可以重写这个类的newControlFlowEdge 和newControlFlowExceptionEdge 方法， 它们默认情况下不做任何事情。其结果可用于进行控制流分析。</p><h2 id="_8-2-1-基本数据流分析" tabindex="-1"><a class="header-anchor" href="#_8-2-1-基本数据流分析" aria-hidden="true">#</a> 8.2.1 基本数据流分析</h2><p>Interpreter 类是抽象类中预定义的 Interpreter 子类之一。它利用在 BasicValue 类中定义的七个值集来模拟字节代码指令的效果：</p><ul><li>UNINITIALIZED_VALUE 指“所有可能值”。</li><li>INT_VALUE 指“所有 int、short、byte、boolean 或 char 值”。</li><li>FLOAT_VALUE 指“所有 float 值”。</li><li>LONG_VALUE 指“所有 long 值”。</li><li>DOUBLE_VALUE 指“所有 double 值”。</li><li>REFERENCE_VALUE 指“所有对象和数组值”。</li><li>RETURNADDRESS_VALUE 用于子例程（见附录 A.2）</li></ul><p>这个解释器本身不是非常有用（方法帧中已经提供了这一信息，而且更为详细——见 3.1.5 节），但它可以用作一个“空的”Interpreter 实现，以构建一个 Analyzer。这个分析器可用于检测方法中的不可及代码。事实上，即使是沿着跳转指令的两条分支，也不可能到达那些不能由第一条指令到达的代码。其结果是：在分析之后，无论什么样的 Interpreter 实现，由Analyzer.getFrames 方法返回的计算帧，对于不可到达的指令都是 null。这一特性可用于非常轻松地实现一个 RemoveDeadCodeAdapter 类（还有一些更高效的方法，但它们需要编写的代码也更多）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveDeadCodeAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> owner<span class="token punctuation">;</span>
    <span class="token class-name">MethodVisitor</span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveDeadCodeAdapter</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodNode</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
        next <span class="token operator">=</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MethodNode</span> mn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodNode</span><span class="token punctuation">)</span> mv<span class="token punctuation">;</span>
        <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicInterpreter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">.</span><span class="token function">analyze</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> frames <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">AbstractInsnNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> insns <span class="token operator">=</span> mn<span class="token punctuation">.</span>instructions<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> frames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>insns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">LabelNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mn<span class="token punctuation">.</span>instructions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>insns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AnalyzerException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        mn<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合 7.1.5 节的 OptimizeJumpAdapter，由跳转优化器引入的死代码被移除。例如，对checkAndSetF 方法应用这个适配器链将给出：</p><table><thead><tr><th style="text-align:left;">在 OptimizeJump 之后</th><th style="text-align:left;">在 RemoveDeadCode 之后</th></tr></thead><tbody><tr><td style="text-align:left;">ILOAD 1</td><td style="text-align:left;">ILOAD 1</td></tr><tr><td style="text-align:left;">IFLT label</td><td style="text-align:left;">IFLT label</td></tr><tr><td style="text-align:left;">ALOAD 0</td><td style="text-align:left;">ALOAD 0</td></tr><tr><td style="text-align:left;">ILOAD 1</td><td style="text-align:left;">ILOAD 1</td></tr><tr><td style="text-align:left;">PUTFIELD ...</td><td style="text-align:left;">PUTFIELD ...</td></tr><tr><td style="text-align:left;">RETURN</td><td style="text-align:left;">RETURN</td></tr><tr><td style="text-align:left;">label:</td><td style="text-align:left;">label:</td></tr><tr><td style="text-align:left;">F_SAME</td><td style="text-align:left;">F_SAME</td></tr><tr><td style="text-align:left;">NEW ...</td><td style="text-align:left;">NEW ...</td></tr><tr><td style="text-align:left;">DUP</td><td style="text-align:left;">DUP</td></tr><tr><td style="text-align:left;">INVOKESPECIAL ...</td><td style="text-align:left;">INVOKESPECIAL ...</td></tr><tr><td style="text-align:left;">ATHROW</td><td style="text-align:left;">ATHROW</td></tr><tr><td style="text-align:left;">end:</td><td style="text-align:left;">end:</td></tr></tbody></table><p>注意，死标记未被移除。这是故意的：它实际上没有改变最终代码，但避免删除一个尽管不可及但可能会在比如 LocalVariableNode 中引用的标记。</p><h2 id="_8-2-2-基本数据流验证器" tabindex="-1"><a class="header-anchor" href="#_8-2-2-基本数据流验证器" aria-hidden="true">#</a> 8.2.2 基本数据流验证器</h2><p>BasicVerifier 类扩展 BasicInterpreter 类。它使用的事件集相同，但不同于BasicInterpreter 的是，它会验证对指令的使用是否正确。例如，它会验证 IADD 指令的操作数为 INTEGER_VALUE 值（而 BasicInterpreter 只是返回结果，即 INTEGER_VALUE）。这个类可在开发类生成器或适配器时进行调试，见 3.3 节的解释。例如，这个类可以检测出 ISTORE 1 ALOAD 1 序列是无效的。它可以包含在像下面这样一个实用工具适配器中（在实践中，使用 CheckMethodAdapter 类要更简单一些，可以将其配置为使用 BasicVerifier）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicVerifierAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> owner<span class="token punctuation">;</span>
    <span class="token class-name">MethodVisitor</span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BasicVerifierAdapter</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodNode</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
        next <span class="token operator">=</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">MethodNode</span> mn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodNode</span><span class="token punctuation">)</span> mv<span class="token punctuation">;</span>
        <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">Analyzer</span><span class="token operator">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">.</span><span class="token function">analyze</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AnalyzerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mn<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-2-3-简单的数据流验证器" tabindex="-1"><a class="header-anchor" href="#_8-2-3-简单的数据流验证器" aria-hidden="true">#</a> 8.2.3 简单的数据流验证器</h2><p>SimpleVerifier 类扩展了 BasicVerifier 类。它使用更多的集合来模拟字节代码指令的执行：事实上，每个类都由它自己的集合表示，这个集合表示了这个类的所有可能对象。因此， 它可以检测出更多的错误，比如如下情况：一个对象的可能值为“所有 Thread 类型的对象”，却对这个对象调用在 String 类中定义的方法。</p><p>这个类使用 Java 反射 API，以执行与类层次结构有关的验证和计算。然后，它将一个方法引用的类加载到 JVM 中。这一默认行为可以通过重写这个类的受保护方法来改变。</p><p>和 BasicVerifier 一样，这个类也可以在开发类生成器或适配器时使用，以便更轻松地找出 Bug。但它也可以用于其他目的。下面这个转换就是一个例子，它会删除方法中不必要的类型转换：如果这个分析器发现 CHECKCAST to 指令的操作数是“所有 from 类型的对象”值集， 如果 to 是 from 的一个超类，那 CHECKCAST 指令就是不必要的，可以删除。这个转换的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveUnusedCastTransformer</span> <span class="token keyword">extends</span> <span class="token class-name">MethodTransformer</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> owner<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveUnusedCastTransformer</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">MethodTransformer</span> mt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodNode</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">MethodNode</span> mn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">.</span><span class="token function">analyze</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> frames <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">AbstractInsnNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> insns <span class="token operator">=</span> mn<span class="token punctuation">.</span>instructions<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">AbstractInsnNode</span> insn <span class="token operator">=</span> insns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>insn<span class="token punctuation">.</span><span class="token function">getOpcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">CHECKCAST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Frame</span> f <span class="token operator">=</span> frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span><span class="token function">getStackSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Object</span> operand <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getStack</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getStackSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TypeInsnNode</span><span class="token punctuation">)</span> insn<span class="token punctuation">)</span><span class="token punctuation">.</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> from <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BasicValue</span><span class="token punctuation">)</span> operand<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            mn<span class="token punctuation">.</span>instructions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AnalyzerException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mt <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> mn <span class="token operator">:</span> mt<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>mn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>’ <span class="token operator">/</span>’<span class="token punctuation">,</span> ’<span class="token punctuation">.</span>’<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token class-name">Type</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">OBJECT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getInternalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但对于 Java 6 类（或者用 COMPUTE_FRAMES 升级到 Java 6 的类），用 AnalyzerAdapter 以核心 API 来完成这一任务要更简单一些，效率要高得多：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveUnusedCastAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AnalyzerAdapter</span> aa<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveUnusedCastAdapter</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitTypeInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">CHECKCAST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>aa<span class="token punctuation">.</span>stack <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> aa<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Object</span> operand <span class="token operator">=</span> aa<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>operand <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> from <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> operand<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        mv<span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Class</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>’ <span class="token operator">/</span>’<span class="token punctuation">,</span> ’<span class="token punctuation">.</span>’<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-2-4-用户定义的数据流分析" tabindex="-1"><a class="header-anchor" href="#_8-2-4-用户定义的数据流分析" aria-hidden="true">#</a> 8.2.4 用户定义的数据流分析</h2><p>假定我们希望检测出一些字段访问和方法调用的对象可能是 null，比如在下面的源代码段中（其中，第一行防止一些编译器检测 Bug，否则它可能会被认作一个“o 可能尚未初始化”错误）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
o <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
o<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 潜在的 NullPointerException！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是我们需要一个数据流分析，它能告诉我们，在对应于最后一行的 INVOKEVIRTUAL 指令处，与 o 对应的底部栈值可能为 null。为此，我们需要为引用值区分三个集合：包含 null 值的 NULL 集，包含所有非 null 引用值的 NONNULL 集，以及包含所有引用值的 MAYBENULL 集。于是，我们只需要考虑 ACONST_NULL 将 NULL 集压入操作数栈，而所有其他在栈中压入引用值的指令将压入 NONNULL 集（换句话说，我们考虑任意字段访问或方法调用的结果都不是null，如果不对程序的所有类进行全局分析，那就不可能得到更好的结果）。为表示 NULL 和NONNULL 集的并集，MAYBENULL 集合是必需的。</p><p>上述规则必须在一个自定义的 Interpreter 子类中实现。完全可以从头实现它，但也可以通过扩展 BasicInterpreter 类来实现它，而且这种做法要容易得多。事实上，如果我们考虑 BasicValue.REFERENCE_VALUE 对应于 NONNULL 集，那只需重写模拟 ACONST_NULL 执行的方法，使它返回 NULL，还有计算并集的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">IsNullInterpreter</span> <span class="token keyword">extends</span> <span class="token class-name">BasicInterpreter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">BasicValue</span> <span class="token constant">NULL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">BasicValue</span> <span class="token constant">MAYBENULL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">IsNullInterpreter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BasicValue</span> <span class="token function">newOperation</span><span class="token punctuation">(</span><span class="token class-name">AbstractInsnNode</span> insn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>insn<span class="token punctuation">.</span><span class="token function">getOpcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ACONST_NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newOperation</span><span class="token punctuation">(</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BasicValue</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">BasicValue</span> v<span class="token punctuation">,</span> <span class="token class-name">BasicValue</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRef</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">!=</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">MAYBENULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRef</span><span class="token punctuation">(</span><span class="token class-name">Value</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v <span class="token operator">==</span> <span class="token constant">REFERENCE_VALUE</span> <span class="token operator">||</span> v <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> v <span class="token operator">==</span> <span class="token constant">MAYBENULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是，可以很容易地利用这个 IsNullnterpreter 来检测那些可能导致潜在 null 指针异常的指令：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullDereferenceAnalyzer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractInsnNode</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNullDereferences</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">MethodNode</span> mn<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AnalyzerException</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractInsnNode</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractInsnNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IsNullInterpreter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">analyze</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> frames <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AbstractInsnNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> insns <span class="token operator">=</span> mn<span class="token punctuation">.</span>instructions<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">AbstractInsnNode</span> insn <span class="token operator">=</span> insns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token class-name">Value</span> v <span class="token operator">=</span> <span class="token function">getTarget</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> v <span class="token operator">==</span> <span class="token constant">MAYBENULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BasicValue</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token class-name">AbstractInsnNode</span> insn<span class="token punctuation">,</span> <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>insn<span class="token punctuation">.</span><span class="token function">getOpcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">GETFIELD</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">ARRAYLENGTH</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">MONITORENTER</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">MONITOREXIT</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token function">getStackValue</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">PUTFIELD</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token function">getStackValue</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">INVOKEVIRTUAL</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">INVOKESPECIAL</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">INVOKEINTERFACE</span><span class="token operator">:</span>
                <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInsnNode</span><span class="token punctuation">)</span> insn<span class="token punctuation">)</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">getStackValue</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token function">getArgumentTypes</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BasicValue</span> <span class="token function">getStackValue</span><span class="token punctuation">(</span><span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> top <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getStackSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> index <span class="token operator">&lt;=</span> top <span class="token operator">?</span> f<span class="token punctuation">.</span><span class="token function">getStack</span><span class="token punctuation">(</span>top <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>findNullDereferences</strong> 方法用一个 IsNullInterpreter 分析给定方法节点。然后， 对于每条指令，检测其引用操作数（如果有的话）的可能值集是不是 NULL 集或 NONNULL 集。若是，则这条指令可能导致一个 null 指针异常，将它添加到此类指令的列表中，该列表由这一方法返回。</p><p><strong>getTarget</strong> 方法在帧 f 中返回与 insn 对象操作数相对应的 Value，如果 insn 没有对象操作数，则返回 null。它的主要任务就是计算这个值相对于操作数栈顶端的偏移量，这一数量取决于指令类型。</p><h2 id="_8-2-5-控制流分析" tabindex="-1"><a class="header-anchor" href="#_8-2-5-控制流分析" aria-hidden="true">#</a> 8.2.5 控制流分析</h2><p>控制流分析可以有许多应用。一个简单的例子就是计算方法的“圆复杂度”。这一度量定义为控制流图的边数减去节点数，再加上 2。例如，checkAndSetF 方法的控制流图如 8.1.2 节所示，它的圈复杂度为 11-12+2=1。这个度量很好地表征了一个方法的“复杂度”（在这个数字与方法的平均 bug 数之间存在一种关联）。它还给出了要“正确”测试一个方法所需要的建议测试情景数目。</p><p>用于计算这一度量的算法可以用 ASM 分析框架来实现（还有仅基于核心 API 的更高效方法， 只是它们需要编写更多的代码）。第一步是构建控制流图。我们在本章开头曾经说过，可以通过重写 Analyzer 类的 newControlFlowEdge 方法来构建。这个类将节点表示为 Frame 对象。 如果希望将这个图存储在这些对象中，则需要扩展 Frame 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span> <span class="token keyword">extends</span> <span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> successors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> nLocals<span class="token punctuation">,</span> <span class="token keyword">int</span> nStack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nLocals<span class="token punctuation">,</span> nStack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，可以提供一个 Analyzer 子类，用来构建控制流图，并用它的结果来计算边数、节点数，最终计算出圈复杂度：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclomaticComplexity</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCyclomaticComplexity</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">MethodNode</span> mn<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AnalyzerException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">Analyzer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicInterpreter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">protected</span> <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> <span class="token function">newFrame</span><span class="token punctuation">(</span><span class="token keyword">int</span> nLocals<span class="token punctuation">,</span> <span class="token keyword">int</span> nStack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>nLocals<span class="token punctuation">,</span> nStack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">protected</span> <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> <span class="token function">newFrame</span><span class="token punctuation">(</span><span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">newControlFlowEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> dst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token function">getFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>src<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        s<span class="token punctuation">.</span>successors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token function">getFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>dst<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">analyze</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Frame</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> frames <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> edges <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> nodes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> frames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                edges <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BasicValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>successors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> edges <span class="token operator">-</span> nodes <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),c=[e];function o(l,u){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","8.2zujianyujiekou.html.vue"]]);export{k as default};
