import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"数据结构-布隆过滤器-bloom-filter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-布隆过滤器-bloom-filter","aria-hidden":"true"},"#"),s(" 数据结构：布隆过滤器 Bloom Filter")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=p(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>布隆过滤器的历史</code></p><p>布隆过滤器由 Burton Howard Bloom 于 1970 年提出，它是一种节省空间的概率数据结构，包括一个很长的二进制向量和一些列随机映射函数。</p><h2 id="二、布隆过滤器结构" tabindex="-1"><a class="header-anchor" href="#二、布隆过滤器结构" aria-hidden="true">#</a> 二、布隆过滤器结构</h2><p>布隆过滤器是一个基于数组和哈希函数散列元素的结构，很像HashMap的哈希桶。布隆过滤器可以用于检测一个元素是否在集合中。它的优点是空间效率和查询时间比一般算法要好很多，但也有一定概率的误判性。<em>如HashMap出现哈希碰撞💥</em></p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/bloom-filter-01.png?raw=true" width="600px"></div><ul><li>赵敏：无忌，成昆上了光明顶！</li><li>张无忌：咱们过滤器年久失修，已经不准了！</li><li>张无忌：布隆过滤器的长度太小，哈希计算单一。导致谢飞机、拎瓢冲、成昆，三个人的哈希值都是相同的，所以没法判断成昆是否上了光明顶。咱们只能快些上山了，沿途小心。</li><li>杨左使：老大，我现在就去维修一下。布隆过滤器的优化方式可以通过增加长度和多样新计算哈希解决。</li></ul><h2 id="三、布隆过滤器实现" tabindex="-1"><a class="header-anchor" href="#三、布隆过滤器实现" aria-hidden="true">#</a> 三、布隆过滤器实现</h2><p>布隆过滤器的实现条件包括可以存放二进制元素的 BitSet 以及多样性的哈希计算函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashGenerator<span class="token punctuation">.</span>HashGroup</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">GROUPS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashGenerator<span class="token punctuation">.</span>HashGroup</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">HashGenerator<span class="token punctuation">.</span>HashGroup</span><span class="token punctuation">.</span><span class="token constant">G1</span><span class="token punctuation">,</span> <span class="token class-name">HashGenerator<span class="token punctuation">.</span>HashGroup</span><span class="token punctuation">.</span><span class="token constant">G2</span><span class="token punctuation">,</span> <span class="token class-name">HashGenerator<span class="token punctuation">.</span>HashGroup</span><span class="token punctuation">.</span><span class="token constant">G3</span><span class="token punctuation">,</span> <span class="token class-name">HashGenerator<span class="token punctuation">.</span>HashGroup</span><span class="token punctuation">.</span><span class="token constant">G4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BitSet</span> bits<span class="token punctuation">;</span>
  
    <span class="token keyword">private</span> <span class="token class-name">HashGenerator</span><span class="token punctuation">[</span><span class="token punctuation">]</span> generators<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的元素存放都经过多样的哈希计算存放到 BitSet 中，这样可以尽可能的分散元素，减少误判性。</p>`,12),v={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/bloom_filter",target:"_blank",rel:"noopener noreferrer"},h=p(`<h3 id="_1-哈希函数" tabindex="-1"><a class="header-anchor" href="#_1-哈希函数" aria-hidden="true">#</a> 1. 哈希函数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hashG1</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> hash <span class="token operator">+</span> c<span class="token punctuation">;</span>
        hash <span class="token operator">&amp;=</span> hash<span class="token punctuation">;</span>
        hash <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hash <span class="token operator">%</span> <span class="token punctuation">(</span>seed <span class="token operator">*</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hashG2</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">7397</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> hash <span class="token operator">+</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>hash <span class="token operator">%</span> seed <span class="token operator">*</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hashG3</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> hash <span class="token operator">+</span> c<span class="token punctuation">;</span>
        hash <span class="token operator">+=</span> c<span class="token punctuation">;</span>
        hash <span class="token operator">&amp;=</span> hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>hash <span class="token operator">%</span> <span class="token punctuation">(</span>seed <span class="token operator">*</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hashG4</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>seed <span class="token operator">*</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里提供了四种哈希计算的方式，相当于每一个哈希计算都是一次扰动处理。一个元素的存放可以经过四次哈希，尽量让元素值做到散列。</li></ul><h3 id="_2-构建容器" tabindex="-1"><a class="header-anchor" href="#_2-构建容器" aria-hidden="true">#</a> 2. 构建容器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> seeds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    generators <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashGenerator</span><span class="token punctuation">[</span>seeds<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> seeds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        generators<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashGenerator</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> seeds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">GROUPS</span><span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token constant">GROUPS</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造函数根据所需创建的容器大小和哈希种子来初始化布隆过滤器。</li></ul><h3 id="_3-添加元素" tabindex="-1"><a class="header-anchor" href="#_3-添加元素" aria-hidden="true">#</a> 3. 添加元素</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashGenerator</span> generator <span class="token operator">:</span> generators<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">doHash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bits<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加元素时按照元素初始化时的哈希计算种类，获取哈希并存放。</li></ul><h3 id="_4-比对元素" tabindex="-1"><a class="header-anchor" href="#_4-比对元素" aria-hidden="true">#</a> 4. 比对元素</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> ret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashGenerator</span> generator <span class="token operator">:</span> generators<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> ret <span class="token operator">&amp;&amp;</span> bits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">doHash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>比对元素时用的是同一类哈希计算方式，并且把这些哈希值 <code>&amp;&amp;</code> 计算。<em>用N个比特位置记录一个值更准确</em></li></ul><h2 id="四、布隆过滤器测试" tabindex="-1"><a class="header-anchor" href="#四、布隆过滤器测试" aria-hidden="true">#</a> 四、布隆过滤器测试</h2><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> val00 <span class="token operator">=</span> <span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> val01 <span class="token operator">=</span> <span class="token string">&quot;https://bugstack.cn&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> val02 <span class="token operator">=</span> <span class="token string">&quot;https://github.com/fuzhengwei/CodeGuide&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> val03 <span class="token operator">=</span> <span class="token string">&quot;https://github.com/fuzhengwei&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">BloomFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    filter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val00<span class="token punctuation">)</span><span class="token punctuation">;</span>
    filter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val01<span class="token punctuation">)</span><span class="token punctuation">;</span>
    filter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val02<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果 val00：{} 布隆过滤器：{}&quot;</span><span class="token punctuation">,</span> val00<span class="token punctuation">,</span> filter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>val00<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果 val01：{} 布隆过滤器：{}&quot;</span><span class="token punctuation">,</span> val01<span class="token punctuation">,</span> filter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>val01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果 val02：{} 布隆过滤器：{}&quot;</span><span class="token punctuation">,</span> val02<span class="token punctuation">,</span> filter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>val02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果 val02：{} 布隆过滤器：{}&quot;</span><span class="token punctuation">,</span> val03<span class="token punctuation">,</span> filter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>val03<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到这里初始化了一个比较大的布隆过滤器，并且提供了4个随机种子；<code>7, 19, 43, 77</code>计算哈希值。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">21</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">22.790</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> bloom_filter<span class="token punctuation">.</span>__test__<span class="token punctuation">.</span>BloomFilterTest <span class="token operator">-</span> 测试结果 val00：小傅哥 布隆过滤器：<span class="token boolean">true</span>
<span class="token number">21</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">22.794</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> bloom_filter<span class="token punctuation">.</span>__test__<span class="token punctuation">.</span>BloomFilterTest <span class="token operator">-</span> 测试结果 val01：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>bugstack<span class="token punctuation">.</span>cn 布隆过滤器：<span class="token boolean">true</span>
<span class="token number">21</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">22.794</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> bloom_filter<span class="token punctuation">.</span>__test__<span class="token punctuation">.</span>BloomFilterTest <span class="token operator">-</span> 测试结果 val02：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>fuzhengwei<span class="token operator">/</span><span class="token class-name">CodeGuide</span> 布隆过滤器：<span class="token boolean">true</span>
<span class="token number">21</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">22.795</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> bloom_filter<span class="token punctuation">.</span>__test__<span class="token punctuation">.</span>BloomFilterTest <span class="token operator">-</span> 测试结果 val02：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>fuzhengwei 布隆过滤器：<span class="token boolean">false</span>


<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过测试可以看到，存放的val00、val01、val02 分别可以验证出 true 没有存放的 val03 验证为fasle</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2>`,20),b=n("li",null,"布隆过滤器的使用场景？",-1),g=n("li",null,"布隆过滤器的实现原理和方式？",-1),f=n("li",null,"如何提高布隆过滤器的准确性？",-1),w=n("li",null,"有哪些中哈希计算方式？",-1),_={href:"https://github.com/RedisBloom/RedisBloom",target:"_blank",rel:"noopener noreferrer"};function y(x,G){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,n("ul",null,[n("li",null,[s("源码地址："),n("a",v,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),n("li",null,[s("本章源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/bloom_filter"),t(a)])])]),h,n("ul",null,[b,g,f,w,n("li",null,[s("都有哪些类型的布隆过滤器实现？"),n("em",null,[s("Google 开源的 Guava 中自带的布隆过滤器、Redis 中的布隆过滤器("),n("a",_,[s("https://github.com/RedisBloom/RedisBloom"),t(a)]),s(")")])])])])}const B=e(u,[["render",y],["__file","2022-10-05-bloom-filter.html.vue"]]);export{B as default};
