import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《程序员数学-快速计算次方》——-math-pow-函数源码如何实现的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-快速计算次方》——-math-pow-函数源码如何实现的","aria-hidden":"true"},"#"),s(" 《程序员数学：快速计算次方》—— Math.pow() 函数源码如何实现的？")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},m=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>不知道读者伙伴用了那么久的 Java Math 函数，是否有打开它的源码，看看是如何实现的。比如 <code>Math.pow</code> 函数计算数字的次方值，只要你打开它的源码，你会惊讶到；<code>这在弄啥，这都是啥，这要干啥</code>！</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fast-powering-02.png?raw=true" width="650px"></div><p>这是啥，这就是一段用于计算次方的算法。简单来说，它是通过在 Math.pow 中预先构建了一个基于查表的算法，保存了常用的幂的值，然后使用这些值来快速计算幂次方。</p><p>其实用于计算次幂的方法还有很多，包括；递归、滑动窗口（Sliding-window method）、蒙哥马利的梯子技术（Montgomery&#39;s ladder technique）、固定底数（Fixed-base exponent）等方式来计算。接下来小傅哥就给大家分享下这些算法方案。</p><h2 id="二、算法实现" tabindex="-1"><a class="header-anchor" href="#二、算法实现" aria-hidden="true">#</a> 二、算法实现</h2><p>其实无论是那样一种计算次幂的方式，都离不开核心的基础模型。也就是说，任何一个数的次幂，都是这个次幂下数字的乘积累计值。包括使用递归、还是通过二进制数字移位，最终都要归到幂的乘积。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/fast-powering-01.png?raw=true" width="650px"></div><ul><li>这里举例了2^4次幂递归计算和2^10次幂使用二进制移位。</li><li>接下来我们可以看下具体的代码实现。</li></ul><h3 id="_1-递归" tabindex="-1"><a class="header-anchor" href="#_1-递归" aria-hidden="true">#</a> 1. 递归</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">pow01</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">double</span> power<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> multiplier <span class="token operator">=</span> <span class="token function">pow01</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> power <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> multiplier <span class="token operator">*</span> multiplier<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">double</span> multiplier <span class="token operator">=</span> <span class="token function">pow01</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>power <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> multiplier <span class="token operator">*</span> multiplier <span class="token operator">*</span> base<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把次方数不断的通过除2递归，计算乘积值。就和上图中的左面部分逻辑一致。</li></ul><h3 id="_2-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_2-滑动窗口" aria-hidden="true">#</a> 2. 滑动窗口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow03</span><span class="token punctuation">(</span><span class="token keyword">int</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> base<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> window <span class="token operator">=</span> base<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>exponent <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>exponent <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">*=</span> window<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        window <span class="token operator">*=</span> window<span class="token punctuation">;</span>
        exponent <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>滑动窗口法是一种用于在一个数列中查找满足某些条件的子序列的算法。它的基本思路是，使用一个指针指向子序列的左端点，然后通过不断移动这个指针来扩展子序列的右端点，直到找到满足条件的子序列为止。</li></ul><h3 id="_3-蒙哥马利的梯子技术" tabindex="-1"><a class="header-anchor" href="#_3-蒙哥马利的梯子技术" aria-hidden="true">#</a> 3. 蒙哥马利的梯子技术</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BigInteger</span> <span class="token function">pow04</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> x<span class="token punctuation">,</span> <span class="token class-name">BigInteger</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigInteger</span> x1 <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token class-name">BigInteger</span> x2 <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">testBit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x1 <span class="token operator">=</span> x1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            x2 <span class="token operator">=</span> x2<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            x2 <span class="token operator">=</span> x1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            x1 <span class="token operator">=</span> x1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> x1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>蒙哥马利的梯子技术（Montgomery&#39;s ladder technique）是一种在密码学中计算幂次方的算法。它的基本思路是通过不断地进行二次求幂运算来计算高次幂。</li><li>蒙哥马利的梯子技术需要使用 BigInteger 类型的数据进行计算。BigInteger 类是 Java 中的一个用于处理任意精度整数的类。</li></ul><h3 id="_4-固定底数" tabindex="-1"><a class="header-anchor" href="#_4-固定底数" aria-hidden="true">#</a> 4. 固定底数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BigInteger</span> <span class="token function">pow05</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> base<span class="token punctuation">,</span> <span class="token class-name">BigInteger</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> e <span class="token operator">=</span> exponent<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigInteger</span> result <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">;</span>
    <span class="token class-name">BigInteger</span> current <span class="token operator">=</span> base<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        e <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>固定底数指数法（Fixed-base exponentiation）是一种用于快速计算幂次方的算法。它的基本思路是使用预先计算的幂的表来减少求幂的次数。</li></ul><h2 id="三、测试验证" tabindex="-1"><a class="header-anchor" href="#三、测试验证" aria-hidden="true">#</a> 三、测试验证</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_FastPowering</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> <span class="token class-name">FastPowering</span><span class="token punctuation">.</span><span class="token function">pow01</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> <span class="token class-name">FastPowering</span><span class="token punctuation">.</span><span class="token function">pow02</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> <span class="token class-name">FastPowering</span><span class="token punctuation">.</span><span class="token function">pow03</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> <span class="token class-name">FastPowering</span><span class="token punctuation">.</span><span class="token function">pow04</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> <span class="token class-name">FastPowering</span><span class="token punctuation">.</span><span class="token function">pow05</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>测试结果：<span class="token number">16.0</span>
测试结果：<span class="token number">1024</span>
测试结果：<span class="token number">16</span>
测试结果：<span class="token number">1024</span>
测试结果：<span class="token number">1024</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,27),b={href:"https://en.wikipedia.org/wiki/Exponentiation_by_squaring",target:"_blank",rel:"noopener noreferrer"};function g(h,w){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)]),d,s("源码："),n("a",v,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),m,n("ul",null,[n("li",null,[n("a",b,[s("https://en.wikipedia.org/wiki/Exponentiation_by_squaring"),t(a)])])])])}const y=p(i,[["render",g],["__file","2023-01-08-fast-powering.html.vue"]]);export{y as default};
