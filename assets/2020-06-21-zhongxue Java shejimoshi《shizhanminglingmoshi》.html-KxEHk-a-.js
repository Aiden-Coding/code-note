import{_ as t,r as o,o as c,c as i,a as n,b as s,d as e,e as p}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"重学-java-设计模式-实战命令模式「模拟高档餐厅八大菜系-小二点单厨师烹饪场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战命令模式「模拟高档餐厅八大菜系-小二点单厨师烹饪场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战命令模式「模拟高档餐厅八大菜系，小二点单厨师烹饪场景」")],-1),d=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=511224806&bvid=BV1Gu411r7nR&cid=590160975&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=p('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>持之以恒的重要性</code></p><p>初学编程往往都很懵，几乎在学习的过程中会遇到各种各样的问题，哪怕别人那运行好好的代码，但你照着写完就报错。但好在你坚持住了，否则你可能看不到这篇文章。时间和成长就是相互关联着，你在哪条路上坚持走的久，就能看见那条的终点有多美，但如果你浪费了一次又一次努力的机会，那么你也会同样错过很多机遇，因为你的路换了。坚持学习、努力成长，持以恒的付出一定会有所收获。</p><p><code>学习方法的重要性</code></p><p>不会学习往往会耽误很多时间，又没有可观的收成。但不会学习有时候是因为<strong>懒</strong>造成的，尤其是学习视频、书籍资料、技术文档等，如果只是看了却不是实际操作验证，那么真的很难把别人的知识让自己吸收，即使是当时感觉会了也很快就会忘记。时而也经常会有人找到你说；“这个我不知道，你先告诉我，过后我就学。”但过后你学了吗？</p><p><code>你愿意为一个知识盲区付出多长时间</code></p><p>你心里时而会蹦出这样的词吗；<code>太难了我不会</code>、<code>找个人帮一下吧</code>、<code>放弃了放弃了</code>，其实谁都可能遇到很不好解决的问题，也是可以去问去咨询的。但，如果在这之前你没有在自己的大脑中反复的寻找答案，那么你的大脑中就不会形成一个凸点的知识树，缺少了这个学习过程也就缺少了查阅各种资料给自己大脑填充知识的机会，哪怕是问到了答案最终也会因时间流逝而忘记。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("strong",null,"公众号",-1),w={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"bugstack虫洞栈",-1),C=n("code",null,"源码下载",-1),f=p('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-14-01</td><td>使用一坨代码实现业务需求</td></tr><tr><td>itstack-demo-design-14-02</td><td>通过设计模式优化代码结构，增加扩展性和维护性</td></tr></tbody></table><h2 id="三、命令模式介绍" tabindex="-1"><a class="header-anchor" href="#三、命令模式介绍" aria-hidden="true">#</a> 三、命令模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-14-01.png" alt="命令模式，图片来自 refactoringguru.cn"></p>',3),_={href:"https://refactoringguru.cn/design-patterns/command",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>命令模式在我们通常的互联网开发中相对来说用的比较少，但这样的模式在我们的日常中却经常使用到，那就是<code>Ctrl+C</code>、<code>Ctrl+V</code>。当然如果你开发过一些桌面应用，也会感受到这样设计模式的应用场景。从这样的模式感受上，可以想到这是把逻辑实现与操作请求进行分离，降低耦合方便扩展。</p><p>命令模式是行为模式中的一种，以数据驱动的方式将<code>命令对象</code>，可以使用构造函数的方式传递给调用者。调用者再提供相应的实现为命令执行提供操作方法。可能会感觉这部分有一些饶，可以通过对代码的实现进行理解，在通过实操来熟练。</p><p>在这个设计模式的实现过程中有如下几个比较重要的点；</p><ol><li>抽象命令类；声明执行命令的接口和方法</li><li>具体的命令实现类；接口类的具体实现，可以是一组相似的行为逻辑</li><li>实现者；也就是为命令做实现的具体实现类</li><li>调用者；处理命令、实现的具体操作者，负责对外提供命令服务</li></ol><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-14-02.png" alt="场景模拟；大餐厅点餐场景"></p><p><strong>在这个案例中我们模拟在餐厅中点餐交给厨师👨‍🍳烹饪的场景</strong></p><p>命令场景的核心的逻辑是调用方与不需要去关心具体的逻辑实现，在这个场景中也就是点餐人员只需要把需要点的各种菜系交个<code>小二</code>就可以，小二再把各项菜品交给各个厨师进行烹饪。也就是点餐人员不需要跟各个厨师交流，只需要在统一的环境里下达命令就可以。</p><p>在这个场景中可以看到有不同的菜品；山东（鲁菜）、四川（川菜）、江苏（苏菜）、广东（粤菜）、福建（闽菜）、浙江（浙菜）、湖南（湘菜），每种菜品都会有不同的厨师👩‍🍳进行烹饪。而客户并不会去关心具体是谁烹饪，厨师也不会去关心谁点的餐。客户只关心早点上菜，厨师只关心还有多少个菜要做。而这中间的衔接的过程，由小二完成。</p><p>那么在这样的一个模拟场景下，可以先思考🤔哪部分是命令模式的拆解，哪部分是命令的调用者以及命令的实现逻辑。</p><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p><code>不考虑设计模式的情况下，在做这样一个点单系统，有一个类就够了</code></p><p>像是这样一个复杂的场景，如果不知道设计模式直接开发，也是可以达到目的的。但对于后续的各项的菜品扩展、厨师实现以及如何调用上会变得非常耦合难以扩展。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">14</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                └── <span class="token class-name">XiaoEr</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里只有一个饭店小二的类，通过这样的一个类实现整个不同菜品的点单逻辑。</li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoEr</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">XiaoEr</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cuisineMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token keyword">int</span> cuisine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 广东（粤菜）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> cuisine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cuisineMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;广东厨师，烹饪鲁菜，宫廷最大菜系，以孔府风味为龙头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 江苏（苏菜）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> cuisine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cuisineMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;江苏厨师，烹饪苏菜，宫廷第二大菜系，古今国宴上最受人欢迎的菜系。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 山东（鲁菜）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> cuisine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cuisineMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;山东厨师，烹饪鲁菜，宫廷最大菜系，以孔府风味为龙头.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 四川（川菜）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">==</span> cuisine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cuisineMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;四川厨师，烹饪川菜，中国最有特色的菜系，也是民间最大菜系。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;菜单：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>cuisineMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这个类的实现中提供了两个方法，一个方法用于点单添加菜品<code>order()</code>，另外一个方法展示菜品的信息<code>placeOrder()</code>。</li><li>从上面可以看到有比较多的if语句判断类型进行添加菜品，那么对于这样的代码后续就需要大量的经历进行维护，同时可能实际的逻辑要比这复杂的多。都写在这样一个类里会变得耦合的非常严重。</li></ul><h2 id="六、命令模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、命令模式重构代码" aria-hidden="true">#</a> 六、命令模式重构代码</h2><p><code>接下来使用命令模式来进行代码优化，也算是一次很小的重构。</code></p><p>命令模式可以将上述的模式拆解三层大块，命令、命令实现者、命令的调用者，当有新的菜品或者厨师扩充时候就可以在指定的类结构下进行实现添加即可，外部的调用也会非常的容易扩展。</p><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">14</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    ├── main
    │   └── java
    │       └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
    │           ├── cook
    │           │	├── impl
    │           │	│   ├── <span class="token class-name">GuangDongCook</span><span class="token punctuation">.</span>java
    │           │	│   ├── <span class="token class-name">JiangSuCook</span><span class="token punctuation">.</span>java
    │           │	│   ├── <span class="token class-name">ShanDongCook</span><span class="token punctuation">.</span>java
    │           │	│   └── <span class="token class-name">SiChuanCook</span><span class="token punctuation">.</span>java
    │           │	└── <span class="token class-name">ICook</span><span class="token punctuation">.</span>java
    │           ├── cuisine
    │           │	├── impl
    │           │	│   ├── <span class="token class-name">GuangDoneCuisine</span><span class="token punctuation">.</span>java
    │           │	│   ├── <span class="token class-name">JiangSuCuisine</span><span class="token punctuation">.</span>java
    │           │	│   ├── <span class="token class-name">ShanDongCuisine</span><span class="token punctuation">.</span>java
    │           │	│   └── <span class="token class-name">SiChuanCuisine</span><span class="token punctuation">.</span>java
    │           │	└── <span class="token class-name">ICuisine</span><span class="token punctuation">.</span>java
    │           └── <span class="token class-name">XiaoEr</span><span class="token punctuation">.</span>java
    └── test
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>命令模式模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-14-03.png" alt="命令模式模型结构"></p><ul><li>从上图可以看到整体分为三大块；命令实现(菜品)、逻辑实现(厨师)、调用者(小二)，以上这三面的实现就是命令模式的核心内容。</li><li>经过这样的拆解就可以非常方面的扩展菜品、厨师，对于调用者来说这部分都是松耦合的，在整体的框架下可以非常容易加入实现逻辑。</li></ul><h3 id="_2-代码实现-1" tabindex="-1"><a class="header-anchor" href="#_2-代码实现-1" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-抽象命令定义-菜品接口" tabindex="-1"><a class="header-anchor" href="#_2-1-抽象命令定义-菜品接口" aria-hidden="true">#</a> 2.1 抽象命令定义(菜品接口)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 博客：https://bugstack.cn - 沉淀、分享、成长，让自己和他人都能有所收获！
 * 公众号：bugstack虫洞栈
 * Create by 小傅哥(fustack) @2020
 *
 * 菜系
 * 01、山东（鲁菜）——宫廷最大菜系，以孔府风味为龙头。
 * 02、四川（川菜）——中国最有特色的菜系，也是民间最大菜系。
 * 03、江苏（苏菜）——宫廷第二大菜系，古今国宴上最受人欢迎的菜系。
 * 04、广东（粤菜）——国内民间第二大菜系，国外最有影响力的中国菜系，可以代表中国。
 * 05、福建（闽菜）——客家菜的代表菜系。
 * 06、浙江（浙菜）——中国最古老的菜系之一，宫廷第三大菜系。
 * 07、湖南（湘菜）——民间第三大菜系。
 * 08、安徽（徽菜）——徽州文化的典型代表。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICuisine</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 烹调、制作</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是命令接口类的定义，并提供了一个烹饪方法。后面会选四种菜品进行实现。</li></ul><h4 id="_2-2-具体命令实现-四种菜品" tabindex="-1"><a class="header-anchor" href="#_2-2-具体命令实现-四种菜品" aria-hidden="true">#</a> 2.2 具体命令实现(四种菜品)</h4><p><strong>广东（粤菜）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuangDoneCuisine</span> <span class="token keyword">implements</span> <span class="token class-name">ICuisine</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ICook</span> cook<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">GuangDoneCuisine</span><span class="token punctuation">(</span><span class="token class-name">ICook</span> cook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cook <span class="token operator">=</span> cook<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cook<span class="token punctuation">.</span><span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>江苏（苏菜）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JiangSuCuisine</span> <span class="token keyword">implements</span> <span class="token class-name">ICuisine</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ICook</span> cook<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">JiangSuCuisine</span><span class="token punctuation">(</span><span class="token class-name">ICook</span> cook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cook <span class="token operator">=</span> cook<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cook<span class="token punctuation">.</span><span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>山东（鲁菜）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShanDongCuisine</span> <span class="token keyword">implements</span> <span class="token class-name">ICuisine</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ICook</span> cook<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ShanDongCuisine</span><span class="token punctuation">(</span><span class="token class-name">ICook</span> cook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cook <span class="token operator">=</span> cook<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cook<span class="token punctuation">.</span><span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>四川（川菜）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SiChuanCuisine</span> <span class="token keyword">implements</span> <span class="token class-name">ICuisine</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ICook</span> cook<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SiChuanCuisine</span><span class="token punctuation">(</span><span class="token class-name">ICook</span> cook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cook <span class="token operator">=</span> cook<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cook<span class="token punctuation">.</span><span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上是四种菜品的实现，在实现的类中都有添加了一个厨师类(<code>ICook</code>)，并通过这个类提供的方法进行操作命令(烹饪菜品)<code>cook.doCooking()</code>。</li><li>命令的实现过程可以是按照逻辑进行添加补充，目前这里抽象的比较简单，只是模拟一个烹饪的过程，相当于同时厨师进行菜品烹饪。</li></ul><h4 id="_2-3-抽象实现者定义-厨师接口" tabindex="-1"><a class="header-anchor" href="#_2-3-抽象实现者定义-厨师接口" aria-hidden="true">#</a> 2.3 抽象实现者定义(厨师接口)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICook</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里定义的是具体的为命令的实现者，这里也就是菜品对应的厨师烹饪的指令实现。</li></ul><h4 id="_2-4-实现者具体实现-四类厨师" tabindex="-1"><a class="header-anchor" href="#_2-4-实现者具体实现-四类厨师" aria-hidden="true">#</a> 2.4 实现者具体实现(四类厨师)</h4><p><strong>粤菜，厨师</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuangDongCook</span> <span class="token keyword">implements</span> <span class="token class-name">ICook</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ICook</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;广东厨师，烹饪鲁菜，宫廷最大菜系，以孔府风味为龙头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>苏菜，厨师</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JiangSuCook</span> <span class="token keyword">implements</span> <span class="token class-name">ICook</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ICook</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;江苏厨师，烹饪苏菜，宫廷第二大菜系，古今国宴上最受人欢迎的菜系。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>鲁菜，厨师</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShanDongCook</span> <span class="token keyword">implements</span> <span class="token class-name">ICook</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ICook</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;山东厨师，烹饪鲁菜，宫廷最大菜系，以孔府风味为龙头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>苏菜，厨师</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SiChuanCook</span> <span class="token keyword">implements</span> <span class="token class-name">ICook</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ICook</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;四川厨师，烹饪川菜，中国最有特色的菜系，也是民间最大菜系。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里是四类不同菜品的厨师👩‍🍳，在这个实现的过程是模拟打了日志，相当于通知了厨房里具体的厨师进行菜品烹饪。</li><li>从以上可以看到，当我们需要进行扩从的时候是可以非常方便的进行添加的，每一个类都具备了单一职责原则。</li></ul><h4 id="_2-5-调用者-小二" tabindex="-1"><a class="header-anchor" href="#_2-5-调用者-小二" aria-hidden="true">#</a> 2.5 调用者(小二)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoEr</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">XiaoEr</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ICuisine</span><span class="token punctuation">&gt;</span></span> cuisineList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ICuisine</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">ICuisine</span> cuisine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cuisineList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cuisine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ICuisine</span> cuisine <span class="token operator">:</span> cuisineList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cuisine<span class="token punctuation">.</span><span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cuisineList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在调用者的具体实现中，提供了菜品的添加和菜单执行烹饪。这个过程是命令模式的具体调用，通过外部将菜品和厨师传递进来而进行具体的调用。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token comment">// 菜系 + 厨师；广东（粤菜）、江苏（苏菜）、山东（鲁菜）、四川（川菜）</span>
    <span class="token class-name">ICuisine</span> guangDoneCuisine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuangDoneCuisine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GuangDongCook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JiangSuCuisine</span> jiangSuCuisine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JiangSuCuisine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JiangSuCook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ShanDongCuisine</span> shanDongCuisine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShanDongCuisine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShanDongCook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SiChuanCuisine</span> siChuanCuisine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SiChuanCuisine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SiChuanCook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 点单</span>
    <span class="token class-name">XiaoEr</span> xiaoEr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoEr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xiaoEr<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>guangDoneCuisine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xiaoEr<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>jiangSuCuisine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xiaoEr<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>shanDongCuisine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xiaoEr<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>siChuanCuisine<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 下单</span>
    xiaoEr<span class="token punctuation">.</span><span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里可以主要观察<code>菜品</code>与<code>厨师</code>的组合；<code>new GuangDoneCuisine(new GuangDongCook());</code>，每一个具体的命令都拥有一个对应的实现类，可以进行组合。</li><li>当菜品和具体的实现定义完成后，由小二进行操作点单，<code>xiaoEr.order(guangDoneCuisine);</code>，这里分别添加了四种菜品，给小二。</li><li>最后是下单，这个是具体命令实现的操作，相当于把小二手里的菜单传递给厨师。当然这里也可以提供删除和撤销，也就是客户取消了自己的某个菜品。</li></ul><h4 id="_3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">13.056</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>cook<span class="token punctuation">.</span></span>ICook</span> <span class="token operator">-</span> 广东厨师，烹饪鲁菜，宫廷最大菜系，以孔府风味为龙头
<span class="token number">22</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">13.059</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>cook<span class="token punctuation">.</span></span>ICook</span> <span class="token operator">-</span> 江苏厨师，烹饪苏菜，宫廷第二大菜系，古今国宴上最受人欢迎的菜系。
<span class="token number">22</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">13.059</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>cook<span class="token punctuation">.</span></span>ICook</span> <span class="token operator">-</span> 山东厨师，烹饪鲁菜，宫廷最大菜系，以孔府风味为龙头
<span class="token number">22</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">13.059</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>cook<span class="token punctuation">.</span></span>ICook</span> <span class="token operator">-</span> 四川厨师，烹饪川菜，中国最有特色的菜系，也是民间最大菜系。

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从上面的测试结果可以看到，我们已经交给调用者(小二)的点单，由不同的厨师具体实现(烹饪)。</li><li>此外当我们需要不同的菜品时候或者修改时候都可以非常方便的添加和修改，在具备单一职责的类下，都可以非常方便的扩展。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>从以上的内容和例子可以感受到，命令模式的使用场景需要分为三个比较大的块；<code>命令</code>、<code>实现</code>、<code>调用者</code>，而这三块内容的拆分也是选择适合场景的关键因素，经过这样的拆分可以让逻辑具备单一职责的性质，便于扩展。</li><li>通过这样的实现方式与if语句相比，降低了耦合性也方便其他的命令和实现的扩展。但同时这样的设计模式也带来了一点问题，就是在各种命令与实现的组合下，会扩展出很多的实现类，需要进行管理。</li><li>设计模式的学习一定要勤加练习，哪怕最开始是模仿实现也是可以的，多次的练习后再去找到一些可以优化的场景，并逐步运用到自己的开发中。提升自己对代码的设计感觉，让代码结构更加清晰易扩展。</li></ul>`,66);function x(I,S){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)])]),r,v,m,n("ol",null,[b,g,n("li",null,[s("涉及工程三个，可以通过关注"),h,s("："),n("a",w,[y,e(a)]),s("，回复"),C,s("获取(打开获取的链接，找到序号18)")])]),f,n("ul",null,[n("li",null,[s("图片来自："),n("a",_,[s("https://refactoringguru.cn/design-patterns/command"),e(a)])])]),j])}const D=t(l,[["render",x],["__file","2020-06-21-zhongxue Java shejimoshi《shizhanminglingmoshi》.html.vue"]]);export{D as default};
