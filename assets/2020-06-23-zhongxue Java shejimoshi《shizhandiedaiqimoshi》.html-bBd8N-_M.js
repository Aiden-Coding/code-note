import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战迭代器模式「模拟公司组织架构树结构关系-深度迭代遍历人员信息输出场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战迭代器模式「模拟公司组织架构树结构关系-深度迭代遍历人员信息输出场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战迭代器模式「模拟公司组织架构树结构关系，深度迭代遍历人员信息输出场景」")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=298698924&bvid=BV1hF411T71U&cid=710671759&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=p('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>相信相信的力量！</code></p><p>从懵懂的少年，到拿起键盘，可以写一个HelloWorld。多数人在这并不会感觉有多难，也不会认为做不出来。因为这样的例子，有老师的指导、有书本的例子、有前人的经验。但随着你的开发时间越来越长，要解决更复杂的问题或者技术创新，因此在网上搜了几天几夜都没有答案，这个时候是否想过放弃，还是一直坚持不断的尝试一点点完成自己心里要的结果。往往这种没有前车之鉴需要自己解决问题的时候，可能真的会折磨到要崩溃，但你要愿意执着、愿意倔强，愿意选择相信相信的力量，就一定能解决。哪怕解决不了，也可以在这条路上摸索出其他更多的收获，为后续前进的道路填充好垫脚石。</p><p><code>时间紧是写垃圾代码的理由？</code></p><p>拧螺丝？Ctrl+C、Ctrl+V？贴膏药一样写代码？没有办法，没有时间，往往真的是借口，胸中没有笔墨，才只能凑合。难道一定是好好写代码就浪费时间，拼凑CRUD就快吗，根本不可能的。因为不会，没有实操过，很少架构出全场景的设计，才很难写出优良的代码。多增强自身的编码(<code>武术</code>)修为，在各种编码场景中让自己变得老练，才好应对紧急情况下的需求开发和人员安排。就像韩信一样有谋有略，才能执掌百万雄兵。</p><p><code>不要只是做个工具人！</code></p><p>因为日常的编写简单业务需求，导致自己像个工具人一样，日久天长的也就很少去深入学习更多技术栈。看见有工具、有组件、有框架，拿来就用用，反正没什么体量也不会出什么问题。但如果你想要更多的收入，哪怕是重复的造轮子，你也要去尝试造一个，就算不用到生产，自己玩玩总可以吧。有些事情只有自己经历过，才能有最深的感触，参与过实践过，才好总结点评学习。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("strong",null,"公众号",-1),y={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"bugstack虫洞栈",-1),w=n("code",null,"源码下载",-1),q=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"工程"),n("th",null,"描述")])]),n("tbody",null,[n("tr",null,[n("td",null,"itstack-demo-design-15-00"),n("td",null,"开发树形组织架构关系迭代器")])])],-1),I=n("h2",{id:"三、迭代器模式介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、迭代器模式介绍","aria-hidden":"true"},"#"),s(" 三、迭代器模式介绍")],-1),_=n("p",null,[n("img",{src:"https://bugstack.cn/assets/images/2020/itstack-demo-design-15-01.png",alt:"迭代器模式，图片来自 refactoringguru.cn"})],-1),x={href:"https://refactoringguru.cn/design-patterns/iterator",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>迭代器模式，常见的就是我们日常使用的<code>iterator</code>遍历。虽然这个设计模式在我们的实际业务开发中的场景并不多，但却几乎每天都要使用<code>jdk</code>为我们提供的<code>list</code>集合遍历。另外增强的for循环虽然是循环输出数据，但是他不是迭代器模式。迭代器模式的特点是实现<code>Iterable</code>接口，通过<code>next</code>的方式获取集合元素，同时具备对元素的删除等操作。而增强的for循环是不可以的。</p><p>这种设计模式的优点是可以让我们以相同的方式，遍历不同的数据结构元素，这些数据结构包括；<code>数组</code>、<code>链表</code>、<code>树</code>等，而用户在使用遍历的时候并不需要去关心每一种数据结构的遍历处理逻辑，从让使用变得统一易用。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-15-02.png" alt="场景模拟；公司树形组织架构"></p><p><strong>在本案例中我们模拟迭代遍历输出公司中树形结构的组织架构关系中雇员列表</strong></p><p>大部分公司的组织架构都是金字塔结构，也就这种树形结构，分为一级、二级、三级等部门，每个组织部门由雇员填充，最终体现出一个整体的树形组织架构关系。</p><p>一般我们常用的遍历就是jdk默认提供的方法，对list集合遍历。但是对于这样的偏业务特性较大的树形结构，如果需要使用到遍历，那么就可以自己来实现。接下来我们会把这个组织层次关系通过树形数据结构来实现，并完成迭代器功能。</p><h2 id="五、迭代器模式遍历组织结构" tabindex="-1"><a class="header-anchor" href="#五、迭代器模式遍历组织结构" aria-hidden="true">#</a> 五、迭代器模式遍历组织结构</h2><p>在实现迭代器模式之前可以先阅读下<code>java</code>中<code>list</code>方法关于<code>iterator</code>的实现部分，几乎所有的迭代器开发都会按照这个模式来实现，这个模式主要分为以下几块；</p><ol><li>Collection，集合方法部分用于对自定义的数据结构添加通用方法；<code>add</code>、<code>remove</code>、<code>iterator</code>等核心方法。</li><li>Iterable，提供获取迭代器，这个接口类会被<code>Collection</code>继承。</li><li>Iterator，提供了两个方法的定义；<code>hasNext</code>、<code>next</code>，会在具体的数据结构中写实现方式。</li></ol><p>除了这样通用的迭代器实现方式外，我们的组织关系结构树，是由节点和节点间的关系链构成，所以会比上述的内容多一些入参。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">15</span><span class="token operator">-</span><span class="token number">00</span>
└── src
    ├── main
    │   └── java
    │       └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
    │           ├── group
    │           │	├── <span class="token class-name">Employee</span><span class="token punctuation">.</span>java
    │           │	├── <span class="token class-name">GroupStructure</span><span class="token punctuation">.</span>java
    │           │	└── <span class="token class-name">Link</span><span class="token punctuation">.</span>java
    │           └──  lang
    │            	├── <span class="token class-name">Collection</span><span class="token punctuation">.</span>java
    │            	├── <span class="token class-name">Iterable</span><span class="token punctuation">.</span>java
    │            	└── <span class="token class-name">Iterator</span><span class="token punctuation">.</span>java
    └── test
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>迭代器模式模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-15-03.png" alt="迭代器模式模型结构"></p><ul><li>以上是我们工程类图的模型结构，左侧是对迭代器的定义，右侧是在数据结构中实现迭代器功能。</li><li>关于左侧部分的实现与jdk中的方式是一样的，所以在学习的过程中可以互相参考，也可以自己扩展学习。</li><li>另外这个遍历方式一个树形结构的深度遍历，为了可以更加让学习的小伙伴容易理解，这里我实现了一种比较简单的树形结构深度遍历方式。<em>后续读者也可以把遍历扩展为横向遍历也就是宽度遍历。</em></li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-雇员实体类" tabindex="-1"><a class="header-anchor" href="#_2-1-雇员实体类" aria-hidden="true">#</a> 2.1 雇员实体类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 雇员
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> uId<span class="token punctuation">;</span>   <span class="token comment">// ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">// 姓名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>  <span class="token comment">// 备注</span>
    
    <span class="token comment">// ...get/set</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是一个简单的雇员类，也就是公司员工的信息类，包括必要的信息；id、姓名、备注。</li></ul><h4 id="_2-2-树节点链路" tabindex="-1"><a class="header-anchor" href="#_2-2-树节点链路" aria-hidden="true">#</a> 2.2 树节点链路</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 树节点链路
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> fromId<span class="token punctuation">;</span> <span class="token comment">// 雇员ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> toId<span class="token punctuation">;</span>   <span class="token comment">// 雇员ID    </span>
    
    <span class="token comment">// ...get/set</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个类用于描述结构树中的各个节点之间的关系链，也就是<code>A to B</code>、<code>B to C</code>、<code>B to D</code>，以此描述出一套完整的树组织结构。</li></ul><h4 id="_2-3-迭代器定义" tabindex="-1"><a class="header-anchor" href="#_2-3-迭代器定义" aria-hidden="true">#</a> 2.3 迭代器定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里的这个类和<code>java</code>的<code>jdk</code>中提供的是一样的，这样也方面后续读者可以对照<code>list</code>的<code>Iterator</code>进行源码学习。</li><li>方法描述；<code>hasNext</code>，判断是否有下一个元素、<code>next</code>，获取下一个元素。这个在<code>list</code>的遍历中是经常用到的。</li></ul><h4 id="_2-4-可迭代接口定义" tabindex="-1"><a class="header-anchor" href="#_2-4-可迭代接口定义" aria-hidden="true">#</a> 2.4 可迭代接口定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个接口中提供了上面迭代器的实现<code>Iterator</code>的获取，也就是后续在自己的数据结构中需要实现迭代器的功能并交给<code>Iterable</code>，由此让外部调用方进行获取使用。</li></ul><h4 id="_2-5-集合功能接口定义" tabindex="-1"><a class="header-anchor" href="#_2-5-集合功能接口定义" aria-hidden="true">#</a> 2.5 集合功能接口定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">addLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">L</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">removeLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们定义集合操作接口；<code>Collection</code>，同时继承了另外一个接口<code>Iterable</code>的方法<code>iterator()</code>。这样后续谁来实现这个接口，就需要实现上述定义的一些基本功能；<code>添加元素</code>、<code>删除元素</code>、<code>遍历</code>。</li><li>同时你可能注意到这里定义了两个泛型<code>&lt;E, L&gt;</code>，因为我们的数据结构一个是用于添加元素，另外一个是用于添加树节点的链路关系。</li></ul><h4 id="_2-6-核心-迭代器功能实现" tabindex="-1"><a class="header-anchor" href="#_2-6-核心-迭代器功能实现" aria-hidden="true">#</a> 2.6 (核心)迭代器功能实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupStructure</span> <span class="token keyword">implements</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span> <span class="token class-name">Link</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> groupId<span class="token punctuation">;</span>                                                 <span class="token comment">// 组织ID，也是一个组织链的头部ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> groupName<span class="token punctuation">;</span>                                               <span class="token comment">// 组织名称</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employeeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 雇员列表</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Link</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> linkMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Link</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 组织架构关系；id-&gt;list</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> invertedMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 反向关系链</span>

    <span class="token keyword">public</span> <span class="token class-name">GroupStructure</span><span class="token punctuation">(</span><span class="token class-name">String</span> groupId<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>groupId <span class="token operator">=</span> groupId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>groupName <span class="token operator">=</span> groupName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">!=</span> employeeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">!=</span> employeeMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Link</span> link<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        invertedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getToId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> link<span class="token punctuation">.</span><span class="token function">getFromId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>linkMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> linkMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span><span class="token punctuation">&gt;</span></span> links <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            links<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
            linkMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> links<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">!=</span> linkMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> keyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> totalIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">private</span> <span class="token class-name">String</span> fromId <span class="token operator">=</span> groupId<span class="token punctuation">;</span>  <span class="token comment">// 雇员ID，From</span>
            <span class="token keyword">private</span> <span class="token class-name">String</span> toId <span class="token operator">=</span> groupId<span class="token punctuation">;</span>   <span class="token comment">// 雇员ID，To</span>

            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> totalIdx <span class="token operator">&lt;</span> employeeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span><span class="token punctuation">&gt;</span></span> links <span class="token operator">=</span> linkMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>toId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> cursorIdx <span class="token operator">=</span> <span class="token function">getCursorIdx</span><span class="token punctuation">(</span>toId<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 同级节点扫描</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> links<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cursorIdx <span class="token operator">=</span> <span class="token function">getCursorIdx</span><span class="token punctuation">(</span>fromId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    links <span class="token operator">=</span> linkMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fromId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 上级节点扫描</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>cursorIdx <span class="token operator">&gt;</span> links<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    fromId <span class="token operator">=</span> invertedMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fromId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    cursorIdx <span class="token operator">=</span> <span class="token function">getCursorIdx</span><span class="token punctuation">(</span>fromId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    links <span class="token operator">=</span> linkMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fromId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 获取节点</span>
                <span class="token class-name">Link</span> link <span class="token operator">=</span> links<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                toId <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">getToId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                fromId <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">getFromId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalIdx<span class="token operator">++</span><span class="token punctuation">;</span>

                <span class="token comment">// 返回结果</span>
                <span class="token keyword">return</span> employeeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getToId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
             
            <span class="token comment">// 给每个层级定义宽度遍历进度</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCursorIdx</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    idx <span class="token operator">=</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">++</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> idx<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上的这部分代码稍微有点长，主要包括了对元素的添加和删除。另外最重要的是对遍历的实现<code> new Iterator&lt;Employee&gt;</code>。</li><li>添加和删除元素相对来说比较简单，使用了两个map数组结构进行定义；<code>雇员列表</code>、<code>组织架构关系；id-&gt;list</code>。当元素添加元素的时候，会分别在不同的方法中向<code>map</code>结构中进行填充<strong>指向关系(A-&gt;B)</strong>，也就构建出了我们的树形组织关系。</li></ul><p><strong>迭代器实现思路</strong></p><ol><li>这里的树形结构我们需要做的是深度遍历，也就是左侧的一直遍历到最深节点。</li><li>当遍历到最深节点后，开始遍历最深节点的横向节点。</li><li>当横向节点遍历完成后则向上寻找横向节点，直至树结构全部遍历完成。</li></ol><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 数据填充</span>
    <span class="token class-name">GroupStructure</span> groupStructure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupStructure</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    
    <span class="token comment">// 雇员信息</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;花花&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;二级部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;豆包&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;二级部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;蹦蹦&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;三级部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;大烧&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;三级部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;虎哥&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;四级部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;玲姐&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;四级部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;秋雅&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;四级部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    
    <span class="token comment">// 节点关系 1-&gt;(1,2) 2-&gt;(4,5)</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">addLink</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">addLink</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">addLink</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">addLink</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">addLink</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">addLink</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groupStructure<span class="token punctuation">.</span><span class="token function">addLink</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       

    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> groupStructure<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}，雇员 Id：{} Name：{}&quot;</span><span class="token punctuation">,</span> employee<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employee<span class="token punctuation">.</span><span class="token function">getuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">37.166</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 二级部门，雇员 <span class="token class-name">Id</span>：<span class="token number">2</span> <span class="token class-name">Name</span>：花花
<span class="token number">22</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">37.168</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 三级部门，雇员 <span class="token class-name">Id</span>：<span class="token number">4</span> <span class="token class-name">Name</span>：蹦蹦
<span class="token number">22</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">37.169</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 三级部门，雇员 <span class="token class-name">Id</span>：<span class="token number">5</span> <span class="token class-name">Name</span>：大烧
<span class="token number">22</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">37.169</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 四级部门，雇员 <span class="token class-name">Id</span>：<span class="token number">6</span> <span class="token class-name">Name</span>：虎哥
<span class="token number">22</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">37.169</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 四级部门，雇员 <span class="token class-name">Id</span>：<span class="token number">7</span> <span class="token class-name">Name</span>：玲姐
<span class="token number">22</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">37.169</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 四级部门，雇员 <span class="token class-name">Id</span>：<span class="token number">8</span> <span class="token class-name">Name</span>：秋雅
<span class="token number">22</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">37.169</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 二级部门，雇员 <span class="token class-name">Id</span>：<span class="token number">3</span> <span class="token class-name">Name</span>：豆包

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从遍历的结果可以看到，我们是顺着树形结构的深度开始遍历，一直到右侧的节点<strong>3</strong>；<code>雇员 Id：2、雇员 Id：4...雇员 Id：3</code></li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>迭代器的设计模式从以上的功能实现可以看到，满足了单一职责和开闭原则，外界的调用方也不需要知道任何一个不同的数据结构在使用上的遍历差异。可以非常方便的扩展，也让整个遍历变得更加干净整洁。</li><li>但从结构的实现上可以看到，迭代器模式的实现过程相对来说是比较复杂的，类的实现上也扩增了需要外部定义的类，使得遍历与原数据结构分开。虽然这是比较麻烦的，但可以看到在使用java的jdk时候，迭代器的模式还是很好用的，可以非常方便扩展和升级。</li><li>以上的设计模式场景实现过程可能对新人有一些不好理解点，包括；迭代器三个接口的定义、树形结构的数据关系、树结构深度遍历思路。这些都需要反复实现练习才能深入的理解，事必躬亲，亲历亲为，才能让自己掌握这些知识。</li></ul>`,45);function S(L,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),d,m,v,n("ol",null,[b,g,n("li",null,[s("涉及工程一个，可以通过关注"),h,s("："),n("a",y,[f,t(a)]),s("，回复"),w,s("获取(打开获取的链接，找到序号18)")])]),q,I,_,n("ul",null,[n("li",null,[s("图片来自："),n("a",x,[s("https://refactoringguru.cn/design-patterns/iterator"),t(a)])])]),j])}const N=e(i,[["render",S],["__file","2020-06-23-zhongxue Java shejimoshi《shizhandiedaiqimoshi》.html.vue"]]);export{N as default};
