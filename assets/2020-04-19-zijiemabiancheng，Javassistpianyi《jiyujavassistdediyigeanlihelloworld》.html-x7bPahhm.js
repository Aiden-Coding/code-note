import{_ as t,r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"字节码编程-javassist篇一《基于javassist的第一个案例helloworld》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字节码编程-javassist篇一《基于javassist的第一个案例helloworld》","aria-hidden":"true"},"#"),s(" 字节码编程，Javassist篇一《基于javassist的第一个案例helloworld》")],-1),d=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>在字节码编程方面有三个比较常见的框架；<code>ASM</code>、<code>byte-buddy</code>、<code>Javassist</code>，他们都可以对这字节码进行操作，只是操作方式和控制粒度不同。</p><p>其中 <strong>ASM</strong> 更偏向于底层，需要了解 <strong>JVM</strong> 虚拟机中指定规范以及对局部变量以及操作数栈的知识。虽然在编写起来比较麻烦，但是它也是性能最好功能最强的字节码操作框架。常见的会用在 <strong>CGLIB</strong> 动态代理类中，以及一些非入侵的探针监控场景中。</p><p>另外两个框架都是有强大的 API，操作使用上更加容易控制。虽然对对比上会比 <strong>ASM</strong> 性能差一些，但不是说性能完全不好。同样在一些监控场景中也用的非常多。如果你细心可以在你的工程 <strong>jar</strong> 包搜索一下。</p><p>在这之前我已经编写了 <code>Javaagent全链路监控</code> 和 <code>ASM</code> 的部分文章，虽然这部分技术内容在 <strong>CRUD</strong> 开发中并不常用，但随着自动化测试、非入侵监控的大量使用，还是蛮多人需要这样的技能学习的。同时我也是这样一个技能的学习者，为此后面会陆续编写和完善关于 <strong>字节码编程</strong> 这个专栏。也希望这个专栏在提升自己技术栈的同时也帮助他人成长。</p><p><strong>那么</strong>，小傅哥计划从 <code>Javassist</code> 到 <code>ASM</code> 陆续完成整套专栏学习的文章编写。从简单入门到应用操作，一步步来完成成体系的技术知识栈学习。</p><p><strong>好！</strong>，现在开始第一个Helloworld案例。<em>相关源码可以通过关注 <code>公众号：bugstack虫洞栈</code> 获取</em></p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2><ol><li><p>JDK 1.8.0</p></li><li><p>javassist 3.12.1.GA</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.12.1.GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="三、案例目标" tabindex="-1"><a class="header-anchor" href="#三、案例目标" aria-hidden="true">#</a> 三、案例目标</h2><p>不看实现过程的话，我们的案例目标其实很简单，就是使用 <code>javassist</code> 输出一行 Helloworld 。<s>这话像不像产品说的</s></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;javassist hi helloworld by 小傅哥(bugstack.cn)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的这段代码就是我们接下来需要使用字节码编程技术来实现的内容。</p><h2 id="四、技术实现" tabindex="-1"><a class="header-anchor" href="#四、技术实现" aria-hidden="true">#</a> 四、技术实现</h2><p>其实输出一个 <code>Helloworld</code> 还是蛮简单的，主要是从这里面去学习一下 <code>Javassist</code> 的基本语法结构，也能为后续的学习有一个基础的概念。</p><blockquote><p>javassist Helloworld</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 公众号：bugstack虫洞栈
 * 博客栈：https://bugstack.cn - 沉淀、分享、成长，让自己和他人都能有所收获！
 * 本专栏是小傅哥多年从事一线互联网Java开发的学习历程技术汇总，旨在为大家提供一个清晰详细的学习教程。如果能为您提供帮助，请给予支持(关注、点赞、分享)！
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenerateClazzMethod</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">CannotCompileException</span><span class="token punctuation">,</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span>

        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建类 classname：创建类路径和名称</span>
        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.javassist.HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加方法</span>
        <span class="token class-name">CtMethod</span> mainMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>voidType<span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mainMethod<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mainMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;{System.out.println(\\&quot;javassist hi helloworld by 小傅哥(bugstack.cn)\\&quot;);}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>mainMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建无参数构造方法</span>
        <span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctConstructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>ctConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出类内容</span>
        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 测试调用</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Method</span> main <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        main<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码分为几块内容来实现功能，分别包括；</p><ol><li>创建 ClassPool，它是一个基于HashMap实现的 CtClass 对象容器。</li><li>使用 CtClass，创建我们的类信息，也就是类的路径和名称。</li><li>接下来就是给类添加方法。包括；方法的属性、类型、名称、入参、出参和方法体的内容。</li><li>在方法创建好后还需要创建一个空的构造函数，每一个类都会在编译后生成这样一个构造函数。</li><li>当方法创建完成后，我们使用 <code>ctClass.writeFile()</code> 进行输出方法的内容信息。也就可以看到通过我们使用 <code>Javassist</code> 生成类的样子。</li><li>最后就是我们的反射调用 <code>main</code> 方法，测试输出结果。</li></ol><h2 id="五、测试结果" tabindex="-1"><a class="header-anchor" href="#五、测试结果" aria-hidden="true">#</a> 五、测试结果</h2><p>当我们执行测试的时候会输出类信息到工程文件夹下，同时会输出我们的测试结果；</p><h3 id="_1-使用javassist生成的类" tabindex="-1"><a class="header-anchor" href="#_1-使用javassist生成的类" aria-hidden="true">#</a> 1. 使用Javassist生成的类</h3><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-bytecode-1-01-1.png" alt="使用Javassist生成的类，在工程文件夹下"></p><h3 id="_2-输出的测试结果" tabindex="-1"><a class="header-anchor" href="#_2-输出的测试结果" aria-hidden="true">#</a> 2. 输出的测试结果</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>javassist hi helloworld by 小傅哥<span class="token punctuation">(</span>bugstack<span class="token punctuation">.</span>cn<span class="token punctuation">)</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>关于 <code>Javassist</code> 的使用在完整的且强大的 <code>API</code> 下，确实还是蛮容易使用的。并且代码的使用上并不是很难理解。</li><li>后续会陆续推出字节码编程的案例文章，逐步完善这部分技术知识栈的内容。最终尝试使用这样的技术知识完成一个案例级别的质量检测系统。也欢迎喜欢此类内容的小伙伴跟进学习。</li><li>后续的文章可能在专栏类的文章里，文章内容上会短一点。尽可能在一篇文章中描述清楚一个详尽的知识点，也方便后续整理成 PDF 书籍，方便学习使用。</li></ul>`,28);function v(m,b){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",k,[s("https://bugstack.cn"),c(a)])]),r])}const h=t(i,[["render",v],["__file","2020-04-19-zijiemabiancheng，Javassistpianyi《jiyujavassistdediyigeanlihelloworld》.html.vue"]]);export{h as default};
