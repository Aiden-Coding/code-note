import{_ as r,r as a,o as i,c as s,a as t,b as e,d as l,e as n}from"./app-3RcBQnkC.js";const c={},o=t("h1",{id:"mysql-连接池-c3p0、dbcp、druid、hikari",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mysql-连接池-c3p0、dbcp、druid、hikari","aria-hidden":"true"},"#"),e(" MySQL 连接池 c3p0、dbcp、druid、hikari")],-1),h=t("br",null,null,-1),p={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},y=t("blockquote",null,[t("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),g=t("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=362541635&bvid=BV1a94y1r7bP&cid=1241367723&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),x=t("p",null,"本文的宗旨在于通过简单干净实践的方式，向读者展示 SpringBoot 应用程序对接 MySQL 时，在使用不同连接池以及不使用连接池时，在增删改查的一个性能对比。这也包括更新和查询时，索引字段的关键性。",-1),m=t("p",null,"内容开始之前，你知道1张21个字段的表，存放100万数据，大于会占用多少空间容量吗？如果这100万数据在不使用连接池的方式，10个并发一条条插入，要多少时间？",-1),u=t("p",null,[e("问题1需要"),t("code",null,"350M"),e("左右、问题2需要"),t("code",null,"2-3"),e("小时。可能你会说，这字段不一定都多长，这插入不知道的机器配置。但其实这些并不是重要的，如果你做过一次你肯定能说出自己一个所在机器配置下的数据验证结果。而本文则借着对 MySQL 连接池的 ApacheBench 压测验证，让读者伙伴可以学习到相关的知识。")],-1),b=t("p",null,"本文涉及的工程：",-1),_={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-connection-pool",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"mysql-docker-compose.yml",-1),q=t("code",null,"apachebench-docker-compose.yml",-1),k=t("code",null,"road_map_8.0.sql",-1),I=n('<h2 id="一、案例背景" tabindex="-1"><a class="header-anchor" href="#一、案例背景" aria-hidden="true">#</a> 一、案例背景</h2><p><code>拿100万订单数据，压到数据库中！</code></p><p>本章节小傅哥会带着大家初始化一个空的数据库表，并向数据库表中写入100万数据。之后在分别不使用<code>连接池</code>和使用不同的连接池(c3p0、dbcp、druid、hikari)写入数据，测试各个连接池的性能。这也能让大家知道，日常我们应该选择哪个连接池。</p><h2 id="二、环境配置" tabindex="-1"><a class="header-anchor" href="#二、环境配置" aria-hidden="true">#</a> 二、环境配置</h2><p>因为本章节很偏实操，所以需要大家做下提前安装好 Docker 环境，以便于执行本章节工程中的脚本和代码。可参考Java简明教程系列内容 Docker、Portainer 学习安装和使用。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-connection-pool-01.png?raw=true" width="850px"></div>',6),B=t("li",null,"在 IntelliJ IDEA 打开 xfg-dev-tech-connection-pool 分别点开 mysql-docker-compose、apachebench-docker-compose，之后点击安装即可。",-1),S={href:"https://httpd.apache.org/docs/2.4/programs/ab.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://apps.apple.com/us/app/sequel-ace/id1518036000?ls=1",target:"_blank",rel:"noopener noreferrer"},M=n('<h2 id="三、工程说明" tabindex="-1"><a class="header-anchor" href="#三、工程说明" aria-hidden="true">#</a> 三、工程说明</h2><p>在 xfg-dev-tech-connection-pool 工程中提供了不同连接池的配置和一些非常常用的 SQL 操作，以及提供了对应的接口进行压测使用；</p><table><thead><tr><th>序号</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>http://127.0.0.1:8091/api/mysql/cacheData</td><td>用于缓存数据的接口，拿缓存好的数据压测更新、查询</td></tr><tr><td>2</td><td>http://127.0.0.1:8091/api/mysql/insert</td><td>插入数据接口</td></tr><tr><td>3</td><td>http://127.0.0.1:8091/api/mysql/updateOrderStatusByUserId</td><td>使用索引字段 userId 更新订单状态</td></tr><tr><td>4</td><td>http://127.0.0.1:8091/api/mysql/updateOrderStatusByUserMobile</td><td>使用无索引字段 userMobile 更新订单状态</td></tr><tr><td>5</td><td>http://127.0.0.1:8091/api/mysql/updateOrderStatusByOrderId</td><td>使用索引字段 orderId 更新订单状态</td></tr><tr><td>6</td><td>http://127.0.0.1:8091/api/mysql/selectByUserId</td><td>使用索引字段 userId 查询订单</td></tr><tr><td>7</td><td>http://127.0.0.1:8091/api/mysql/selectByUserMobile</td><td>使用无索引字段 userMobile 查询订单，测试中添加索引</td></tr><tr><td>8</td><td>http://127.0.0.1:8091/api/mysql/selectByOrderId</td><td>使用有索引字段 orderId 查询订单</td></tr><tr><td>9</td><td>http://127.0.0.1:8091/api/mysql/selectByOrderIdAndUserId</td><td>区分度高的索引字段在前，区分度低的索引字段在后</td></tr><tr><td>10</td><td>http://127.0.0.1:8091/api/mysql/selectByUserIdAndOrderId</td><td>区分度低的索引字段在前，区分度高的索引字段在后</td></tr></tbody></table><ul><li>具体代码实现可以直接对照工程来看，以及按需添加SQL语句进行性能压测验证。</li></ul><h2 id="四、库表语句" tabindex="-1"><a class="header-anchor" href="#四、库表语句" aria-hidden="true">#</a> 四、库表语句</h2><p>SQL：<code>xfg-dev-tech-connection-pool/docs/sql/road_map_8.0.sql</code></p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-connection-pool-02.png?raw=true" width="850px"></div><ul><li>这是本节所需要测试的一个订单表和测试前所建的索引字段。以及初始化了100万数据，占用350M空间。</li><li>接下来，我们就可以做测试验证了。</li></ul><h2 id="五、压测指令" tabindex="-1"><a class="header-anchor" href="#五、压测指令" aria-hidden="true">#</a> 五、压测指令</h2>',9),O={href:"https://httpd.apache.org/docs/2.4/programs/ab.html",target:"_blank",rel:"noopener noreferrer"},U=n('<div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-connection-pool-03.png?raw=true" width="850px"></div><p>常用的如：<code>ab -c 20 -n 1000 http://127.0.0.1:8091/hi</code> - 20个并发1000次</p><h2 id="六、压测验证" tabindex="-1"><a class="header-anchor" href="#六、压测验证" aria-hidden="true">#</a> 六、压测验证</h2><p>首先在测试前，正式测试前，你大概需要花费几十分钟来初始化100万数据。执行脚本；<code>ab -c 20 -n 1000000 http://127.0.0.1:8091/api/mysql/insert</code> - 如果你在工程中配置了 no-pool 大概要花费几个小时才能跑完，这就使用和不使用连接池的差距。</p><h3 id="_1-连接池比对" tabindex="-1"><a class="header-anchor" href="#_1-连接池比对" aria-hidden="true">#</a> 1. 连接池比对</h3><p><strong>条件</strong>；</p><ol><li>插入1万条数据</li><li>连接池配置 initialPoolSize=5、minPoolSize=5、maxPoolSize=20</li><li>此时数据库已经有100万数据，分别用几个链接方式插入数据。hikari 放到最后，它是 SpringBoot 的默认连接池。</li><li>脚本；<code>ab -c 20 -n 10000 http://127.0.0.1:8091/api/mysql/insert</code></li></ol><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">no-pool</th><th style="text-align:center;">c3p0</th><th style="text-align:center;">dbcp</th><th style="text-align:center;">druid</th><th style="text-align:center;">hikari</th></tr></thead><tbody><tr><td style="text-align:center;">耗时</td><td style="text-align:center;">88.990 seconds</td><td style="text-align:center;">24.228 seconds</td><td style="text-align:center;">33.656 seconds</td><td style="text-align:center;">25.971 seconds</td><td style="text-align:center;">25.002 seconds</td></tr><tr><td style="text-align:center;">50%</td><td style="text-align:center;">155ms</td><td style="text-align:center;">39ms</td><td style="text-align:center;">60ms</td><td style="text-align:center;">45ms</td><td style="text-align:center;">43ms</td></tr><tr><td style="text-align:center;">80%</td><td style="text-align:center;">223ms</td><td style="text-align:center;">61ms</td><td style="text-align:center;">86ms</td><td style="text-align:center;">64ms</td><td style="text-align:center;">64ms</td></tr><tr><td style="text-align:center;">90%</td><td style="text-align:center;">291ms</td><td style="text-align:center;">75ms</td><td style="text-align:center;">103ms</td><td style="text-align:center;">75ms</td><td style="text-align:center;">76ms</td></tr></tbody></table><ul><li>通过对比可以发现，如果不使用连接池，会比使用连接池，要占用更多的时间连接数据库使用数据库。</li><li>c3p0、hikari 的性能还是非常不错的，dbcp 相对是弱一些的。所以这可以给你在使用连接池时有一个参考。也可以结合你的机器再次进行压测验证。</li></ul><h3 id="_2-更新对比" tabindex="-1"><a class="header-anchor" href="#_2-更新对比" aria-hidden="true">#</a> 2. 更新对比</h3><p><strong>条件</strong>；</p><ol><li>使用接口，向内存加入600条数据。每个测试方式，分别消耗200条。<code>ab -c 10 -n 600 http://127.0.0.1:8091/api/mysql/cacheData</code></li><li>之后使用无索引字段、有索引但区分度不高的字段以及使用有索引区分度非常好的字段来更新。</li><li>脚本； <ol><li><code>ab -c 20 -n 200 http://127.0.0.1:8091/api/mysql/updateOrderStatusByUserMobile</code></li><li><code>ab -c 20 -n 200 http://127.0.0.1:8091/api/mysql/updateOrderStatusByUserId</code></li><li><code>ab -c 20 -n 200 http://127.0.0.1:8091/api/mysql/updateOrderStatusByOrderId</code></li></ol></li></ol><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">无索引</th><th style="text-align:center;">有索引-区分度不高</th><th style="text-align:center;">有索引-区分度很高</th></tr></thead><tbody><tr><td style="text-align:center;">耗时</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">0.432 seconds</td></tr><tr><td style="text-align:center;">50%</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">35ms</td></tr><tr><td style="text-align:center;">80%</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">48ms</td></tr><tr><td style="text-align:center;">90%</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">24小时+</td><td style="text-align:center;">67ms</td></tr></tbody></table><ul><li>无索引的时候；会把整个表的这个记录，全部锁上。那么越执行越慢，最后拖垮数据库。甚至可能1天都执行不完。</li><li>有索引-区分度不高；几乎是一样的，如果你批量的对一个用户的所有数据都更新，也会锁很多记录。</li><li>有索引-区分度很高；只要你锁的是自己的一条记录，就与别人没有影响。效率也会非常高。</li></ul><h3 id="_3-查询对比" tabindex="-1"><a class="header-anchor" href="#_3-查询对比" aria-hidden="true">#</a> 3. 查询对比</h3><p><strong>条件</strong>；</p><ol><li>查询100万加的数据库表记录，每次缓存记录5000条数据id；<code>ab -c 10 -n 5000 http://127.0.0.1:8091/api/mysql/cacheData</code></li><li>userId 有索引、orderId 有索引、userMobie 无索引。</li><li>每次查询的时候，都要关闭服务重启，避免有缓存干扰结果。</li><li>脚本： <ol><li><code>ab -c 20 -n 5000 http://127.0.0.1:8091/api/mysql/selectByUserMobile</code></li><li><code>ab -c 20 -n 5000 http://127.0.0.1:8091/api/mysql/selectByUserId</code></li><li><code>ab -c 20 -n 5000 http://127.0.0.1:8091/api/mysql/selectByOrderId</code></li><li><code>ab -c 20 -n 5000 http://127.0.0.1:8091/api/mysql/selectByOrderIdAndUserId</code></li><li><code>ab -c 20 -n 5000 http://127.0.0.1:8091/api/mysql/selectByUserIdAndOrderId</code></li></ol></li></ol><table><thead><tr><th></th><th style="text-align:center;">无索引</th><th style="text-align:center;">有索引-区分度不高</th><th style="text-align:center;">有索引区分度高</th><th style="text-align:center;">高在前</th><th style="text-align:center;">低在前</th></tr></thead><tbody><tr><td>耗时</td><td style="text-align:center;">6小时+</td><td style="text-align:center;">8.343 seconds</td><td style="text-align:center;">2.051 seconds</td><td style="text-align:center;">2.168 seconds</td><td style="text-align:center;">3.279 seconds</td></tr><tr><td>50%</td><td style="text-align:center;">7s</td><td style="text-align:center;">13ms</td><td style="text-align:center;">7ms</td><td style="text-align:center;">7ms</td><td style="text-align:center;">11ms</td></tr><tr><td>80%</td><td style="text-align:center;">9s</td><td style="text-align:center;">20ms</td><td style="text-align:center;">10ms</td><td style="text-align:center;">11ms</td><td style="text-align:center;">17ms</td></tr><tr><td>90%</td><td style="text-align:center;">15s</td><td style="text-align:center;">26ms</td><td style="text-align:center;">13ms</td><td style="text-align:center;">13ms</td><td style="text-align:center;">22ms</td></tr></tbody></table><ul><li>无索引，还是查询字段的。非常危险。</li><li>不要在一些区分度不高的字段建索引。当然本案例中，userId 最多也就1000来个用户所产生的1百万数据，这样的情况更适合分库分表。</li><li>区分度很高的字段，查询效率会非常好。</li><li>把高区分度的索引字段放在前面，更有利于查询。—— 注意不要测试完上一个，直接测试下一个。有缓存的情况下，会影响对比结果。</li></ul><hr><p>这就是整个数据库表的压测过程了。如果你有使用的诉求，需要做技术调研，那么一定要做一些这样的压测处理。这样有真实数据才好讲道理。另外需要面试的伙伴，你不是总没有数据吗，来吧，按照这个压一压！</p>',21);function w(L,A){const d=a("ExternalLinkIcon");return i(),s("div",null,[o,t("p",null,[e("作者：小傅哥 "),h,e("博客："),t("a",p,[e("https://bugstack.cn"),l(d)])]),y,g,x,m,u,b,t("ul",null,[t("li",null,[e("xfg-dev-tech-connection-pool："),t("a",_,[e("https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-connection-pool"),l(d)]),e(" - 工程内含有环境的安装脚本；"),f,e("、"),q,e("、"),k])]),I,t("ul",null,[B,t("li",null,[e("执行完脚本，你可以得到一份安装好的 MySQL 8.0 并安装了数据库表。另外一份是用于压测使用的 "),t("a",S,[e("ApacheBench"),l(d)])]),t("li",null,[e("连接 MySQL 的工具，推荐使用开源免费的 "),t("a",v,[e("Sequel Ace"),l(d)])])]),M,t("p",null,[e("ApacheBench 官网教程："),t("a",O,[e("https://httpd.apache.org/docs/2.4/programs/ab.html"),l(d)])]),U])}const Q=r(c,[["render",w],["__file","connection-pool.html.vue"]]);export{Q as default};
