import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"源码分析-手写mybait-spring核心功能-干货好文一次学会工厂bean、类代理、bean注册的使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源码分析-手写mybait-spring核心功能-干货好文一次学会工厂bean、类代理、bean注册的使用","aria-hidden":"true"},"#"),s(" 源码分析 | 手写mybait-spring核心功能(干货好文一次学会工厂bean、类代理、bean注册的使用)")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=e('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言介绍" tabindex="-1"><a class="header-anchor" href="#一、前言介绍" aria-hidden="true">#</a> 一、前言介绍</h2><p>一个知识点的学习过程基本分为；运行helloworld、熟练使用api、源码分析、核心专家。在分析mybaits以及mybatis-spring源码之前，我也只是简单的使用，因为它好用。但是他是怎么做的多半是凭自己的经验去分析，但始终觉得这样的感觉缺少点什么，在几次夙兴夜寐，靡有朝矣之后决定彻底的研究一下，之后在去仿照着写一版核心功能。依次来补全自己的技术栈的空缺。在现在技术知识像爆炸一样迸发，而我们多半又忙于工作业务开发。就像一个不会修车的老司机，只能一脚油门，一脚刹车的奔波。车速很快，但经不起坏，累觉不爱。好！为了解决这样问题，也为了钱程似锦（形容钱多的想家里的棉布一样），努力！</p><p>开动之前先庆祝下我的iPhone4s又活了，还是那么好用(嗯！有点卡)； <img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-demo-code-mybatis-2-1.jpg" alt=""></p><h2 id="二、以往章节" tabindex="-1"><a class="header-anchor" href="#二、以往章节" aria-hidden="true">#</a> 二、以往章节</h2><p>关于mybaits &amp; spring 源码分析以及demo功能的章节汇总，可以通过下列内容进行系统的学习，同时以下章节会有部分内容涉及到demo版本的mybaits；</p>',6),m={href:"https://bugstack.cn/itstack-demo-any/2019/12/25/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Mybatis%E6%8E%A5%E5%8F%A3%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://bugstack.cn/itstack-demo-any/2020/01/08/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%83%8F%E7%9B%97%E5%A2%93%E4%B8%80%E6%A0%B7%E5%88%86%E6%9E%90Spring%E6%98%AF%E6%80%8E%E4%B9%88%E5%88%9D%E5%A7%8B%E5%8C%96xml%E5%B9%B6%E6%B3%A8%E5%86%8Cbean%E7%9A%84.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://bugstack.cn/itstack-demo-any/2020/01/13/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%9F%BA%E4%BA%8Ejdbc%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AADemo%E7%89%88%E7%9A%84Mybatis.html",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="三、一碟小菜类代理" tabindex="-1"><a class="header-anchor" href="#三、一碟小菜类代理" aria-hidden="true">#</a> 三、一碟小菜类代理</h2><p>往往从最简单的内容才有抓手。先看一个接口到实现类的使用，在将这部分内容转换为代理类。</p><h3 id="_1-定义一个-iuserdao-接口并实现这个接口类" tabindex="-1"><a class="header-anchor" href="#_1-定义一个-iuserdao-接口并实现这个接口类" aria-hidden="true">#</a> 1. 定义一个 IUserDao 接口并实现这个接口类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">implements</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;实现类&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-new-方式实例化" tabindex="-1"><a class="header-anchor" href="#_2-new-方式实例化" aria-hidden="true">#</a> 2. new() 方式实例化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userDao<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是最简单的也是最常用的使用方式，new 个对象。</p><h3 id="_3-proxy-方式实例化" tabindex="-1"><a class="header-anchor" href="#_3-proxy-方式实例化" aria-hidden="true">#</a> 3. proxy 方式实例化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;你被代理了 &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> classes<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Proxy.newProxyInstance 代理类实例化方式，对应传入类的参数即可</li><li>ClassLoader，是这个类加载器，我们可以获取当前线程的类加载器</li><li>InvocationHandler 是代理后实际操作方法执行的内容，在这里可以添加自己业务场景需要的逻辑，在这里我们只返回方法名</li></ul><p><strong>测试结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">18.841</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：你被代理了 queryUserInfo

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、盛宴来自bean工厂" tabindex="-1"><a class="header-anchor" href="#四、盛宴来自bean工厂" aria-hidden="true">#</a> 四、盛宴来自Bean工厂</h2><p>在使用Spring的时候，我们会采用注册或配置文件的方式，将我们的类交给Spring管理。例如；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;userDao&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.itstack.demo.UserDao&quot;</span> scope<span class="token operator">=</span><span class="token string">&quot;singleton&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>UserDao是接口IUserDao的实现类，通过上面配置，就可以实例化一个类供我们使用，但如果IUserDao没有实现类或者我们希望去动态改变他的实现类比如挂载到别的地方(像mybaits一样)，并且是由spring bean工厂管理的，该怎么做呢？</p><h3 id="_1-factorybean的使用" tabindex="-1"><a class="header-anchor" href="#_1-factorybean的使用" aria-hidden="true">#</a> 1. FactoryBean的使用</h3><p>FactoryBean 在spring起到着二当家的地位，它将近有70多个小弟(实现它的接口定义)，那么它有三个方法；</p><ul><li>T getObject() throws Exception; 返回bean实例对象</li><li>Class&lt;?&gt; getObjectType(); 返回实例类类型</li><li>boolean isSingleton(); 判断是否单例，单例会放到Spring容器中单实例缓存池中</li></ul><p>那么我们现在就将上面用到的<strong>代理类</strong>交给spring的FactoryBean进行管理，代码如下；</p><blockquote><p>ProxyBeanFactory.java &amp; bean工厂实现类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IUserDao</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IUserDao</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;你被代理了 &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> classes<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>spring-config.xml &amp; 配置bean类信息</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;userDao&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.itstack.demo.bean.ProxyBeanFactory&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>ApiTest.test_IUserDao() &amp; 单元测试</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_IUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>一月 <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2020</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">35</span> 上午 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span>XmlBeanDefinitionReader</span> loadBeanDefinitions
信息<span class="token operator">:</span> <span class="token class-name">Loading</span> <span class="token constant">XML</span> bean definitions from <span class="token keyword">class</span> path resource <span class="token punctuation">[</span>spring<span class="token operator">-</span>config<span class="token punctuation">.</span>xml<span class="token punctuation">]</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">35.440</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：你被代理了 queryUserInfo

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>咋样</strong>，神奇不！你的接口都不需要实现类，就被安排的明明白白的。记住这个方法FactoryBean和动态代理。</p><h3 id="_2-beandefinitionregistrypostprocessor-类注册" tabindex="-1"><a class="header-anchor" href="#_2-beandefinitionregistrypostprocessor-类注册" aria-hidden="true">#</a> 2. BeanDefinitionRegistryPostProcessor 类注册</h3><p>你是否有怀疑过你媳妇把你钱没收了之后都存放到哪去了，为啥你每次get都那么费劲，像垃圾回收了一样，不可达。</p><p><strong>好嘞</strong>，媳妇那就别想了，研究下你的bean都被注册到哪了就可以了。在spring的bean管理中，所有的bean最终都会被注册到类DefaultListableBeanFactory中，接下来我们就主动注册一个被我们代理了的bean。</p><blockquote><p>RegisterBeanFactory.java &amp; 注册bean的实现类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

        <span class="token class-name">GenericBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token class-name">ProxyBeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> <span class="token string">&quot;userDao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// left intentionally blank</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里包含4块主要内容，分别是； <ul><li>实现BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry方法，获取bean注册对象</li><li>定义bean，GenericBeanDefinition，这里主要设置了我们的代理类工厂。我们已经测试过他获取一个代理类</li><li>创建bean定义处理类，BeanDefinitionHolder，这里需要的主要参数；定义bean、bean名称</li><li>最后将我们自己的bean注册到spring容器中去，registry.registerBeanDefinition()</li></ul></li></ul><blockquote><p>spring-config.xml &amp; 配置bean类信息</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;userDao&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.itstack.demo.bean.RegisterBeanFactory&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>ApiTest.test_IUserDao() &amp; 单元测试</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_IUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>信息<span class="token operator">:</span> <span class="token class-name">Loading</span> <span class="token constant">XML</span> bean definitions from <span class="token keyword">class</span> path resource <span class="token punctuation">[</span>spring<span class="token operator">-</span>config<span class="token punctuation">.</span>xml<span class="token punctuation">]</span>
一月 <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2020</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">29</span> 上午 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>DefaultListableBeanFactory</span> registerBeanDefinition
信息<span class="token operator">:</span> <span class="token class-name">Overriding</span> bean definition <span class="token keyword">for</span> bean &#39;userDao&#39; <span class="token keyword">with</span> <span class="token namespace">a</span> different definition<span class="token operator">:</span> replacing <span class="token punctuation">[</span><span class="token class-name">Generic</span> bean<span class="token operator">:</span> <span class="token keyword">class</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span>RegisterBeanFactory</span><span class="token punctuation">]</span><span class="token punctuation">;</span> scope<span class="token operator">=</span><span class="token punctuation">;</span> <span class="token keyword">abstract</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> lazyInit<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> autowireMode<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> dependencyCheck<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> autowireCandidate<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> primary<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> factoryBeanName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> factoryMethodName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> initMethodName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> destroyMethodName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> defined in <span class="token keyword">class</span> path resource <span class="token punctuation">[</span>spring<span class="token operator">-</span>config<span class="token punctuation">.</span>xml<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token class-name">Generic</span> bean<span class="token operator">:</span> <span class="token keyword">class</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span>ProxyBeanFactory</span><span class="token punctuation">]</span><span class="token punctuation">;</span> scope<span class="token operator">=</span><span class="token punctuation">;</span> <span class="token keyword">abstract</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> lazyInit<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> autowireMode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> dependencyCheck<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> autowireCandidate<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> primary<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> factoryBeanName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> factoryMethodName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> initMethodName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> destroyMethodName<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">]</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">29.754</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：你被代理了 queryUserInfo

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>纳尼</strong>？是不有一种满脑子都是骚操作的感觉，自己注册的bean自己知道在哪了，咋回事了。</p><h2 id="五、老板郎上主食呀-mybaits-spring" tabindex="-1"><a class="header-anchor" href="#五、老板郎上主食呀-mybaits-spring" aria-hidden="true">#</a> 五、老板郎上主食呀(mybaits-spring)</h2><p>如果通过上面的知识点；代理类、bean工厂、bean注册，将我们一个没有实现类的接口安排的明明白白，让他执行啥就执行啥，那么你是否可以想到，这个没有实现类的接口，可以通过我们的折腾，去调用到我们的mybaits呢！</p><p>如下图，通过mybatis使用的配置，我们可以看到数据源DataSource交给SqlSessionFactoryBean，SqlSessionFactoryBean实例化出的SqlSessionFactory，再交给MapperScannerConfigurer。而我们要实现的就是MapperScannerConfigurer这部分；</p><p><img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-demo-code-mybatis-2-2.png" alt=""></p><h3 id="_1-需要实现哪些核心类" tabindex="-1"><a class="header-anchor" href="#_1-需要实现哪些核心类" aria-hidden="true">#</a> 1. 需要实现哪些核心类</h3><p>为了更易理解也更易于对照，我们将实现mybatis-spring中的流程核心类，如下；</p><ul><li>MapperFactoryBean ｛给每一个没有实现类的接口都代理一个这样的类，用于操作数据库执行crud｝</li><li>MapperScannerConfigurer ｛扫描包下接口类，免去配置。这样是上图中核心配置类｝</li><li>SimpleMetadataReader ｛这个类完全和mybatis-spring中的类一样，为了解析class文件。如果你对类加载处理很好奇，可以阅读我的<a href="#">《用JVM实现JVM》</a>｝</li><li>SqlSessionFactoryBean {这个类核心内容就一件事，将我们写的demo版的mybatis结合进来}</li></ul><p>在分析之前先看下我们实现主食是怎么食用的，如下；</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.itstack.demo.like.spring.SqlSessionFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>resource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spring/mybatis-config-datasource.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.itstack.demo.like.spring.MapperScannerConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 注入sqlSessionFactory --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basePackage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.itstack.demo.dao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-类介绍-sqlsessionfactorybean" tabindex="-1"><a class="header-anchor" href="#_2-类介绍-sqlsessionfactorybean" aria-hidden="true">#</a> 2. (类介绍)SqlSessionFactoryBean</h3><p>这类本身比较简单，主要实现了 <code>FactoryBean&lt;SqlSessionFactory&gt;</code>, InitializingBean 用于帮我们处理mybatis核心流程类的加载处理。（关于demo版的mybatis已经在上文中提供学习链接）</p><blockquote><p>SqlSessionFactoryBean.java</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> resource<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> resource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现InitializingBean主要用于加载mybatis相关内容；解析xml、构造SqlSession、链接数据库等</li><li>FactoryBean，这个类我们介绍过，主要三个方法；getObject()、getObjectType()、isSingleton()</li></ul><h3 id="_3-类介绍-mapperscannerconfigurer" tabindex="-1"><a class="header-anchor" href="#_3-类介绍-mapperscannerconfigurer" aria-hidden="true">#</a> 3. (类介绍)MapperScannerConfigurer</h3><p>这类的内容看上去可能有点多，但是核心事情也就是将我们的dao层接口扫描、注册</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperScannerConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> basePackage<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// classpath*:org/itstack/demo/dao/**/*.class</span>
            <span class="token class-name">String</span> packageSearchPath <span class="token operator">=</span> <span class="token string">&quot;classpath*:&quot;</span> <span class="token operator">+</span> basePackage<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/**/*.class&quot;</span><span class="token punctuation">;</span>

            <span class="token class-name">ResourcePatternResolver</span> resourcePatternResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> resourcePatternResolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageSearchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span> resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">MetadataReader</span> metadataReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMetadataReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getDefaultClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">ScannedGenericBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">decapitalize</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getShortName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                beanDefinition<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beanDefinition<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token string">&quot;singleton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                beanDefinition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                beanDefinition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token class-name">MapperFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// left intentionally blank</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBasePackage</span><span class="token punctuation">(</span><span class="token class-name">String</span> basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>basePackage <span class="token operator">=</span> basePackage<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类的扫描注册，classpath*:org/itstack/demo/dao/**/*.class，解析calss文件获取资源信息；Resource[] resources = resourcePatternResolver.getResources(packageSearchPath);</li><li>遍历Resource，这里就你的class信息，用于注册bean。ScannedGenericBeanDefinition</li><li>这里有一点，bean的定义设置时候，是把beanDefinition.setBeanClass(MapperFactoryBean.class);设置进去的。同时在前面给他设置了构造参数。<strong>（细细品味）</strong></li><li>最后执行注册registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</li></ul><h3 id="_4-类介绍-mapperfactorybean" tabindex="-1"><a class="header-anchor" href="#_4-类介绍-mapperfactorybean" aria-hidden="true">#</a> 4. (类介绍)MapperFactoryBean</h3><p>这个类就非常有意思了，因为你所有的dao接口类，实际就是他。他这里帮你执行你对sql的所有操作的分发处理。为了更加简化清晰，目前这里只实现了查询部分，在mybatis-spring源码中分别对select、update、insert、delete、其他等做了操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperFactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MapperFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你被代理了，执行SQL操作！&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>mapperInterface<span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mapperInterface<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>T getObject()，中是一个java代理类的实现，这个代理类对象会被挂到你的注入中。真正调用方法内容时会执行到代理类的实现部分，也就是“你被代理了，执行SQL操作！”</p></li><li><p>InvocationHandler，代理类的实现部分非常简单，主要开启SqlSession，并通过固定的key；“org.itstack.demo.dao.IUserDao.queryUserInfoById”执行SQL操作；</p><blockquote><p>session.selectOne(mapperInterface.getName() + &quot;.&quot; + method.getName(), args[0]);</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.itstack.demo.dao.IUserDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryUserInfoById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Long<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.itstack.demo.po.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		SELECT id, name, age, createTime, updateTime
		FROM user
		where id = #{id}
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最终返回了执行结果，关于查询到结果信息会反射操作成对象类，这部分内容可以遇到demo版本的mybatis</p></li></ul><h2 id="六、酒倒满走一个" tabindex="-1"><a class="header-anchor" href="#六、酒倒满走一个" aria-hidden="true">#</a> 六、酒倒满走一个</h2><p>好！到这一切开发内容就完成了，测试走一个。</p><blockquote><p>mybatis-config-datasource.xml &amp; 数据源配置</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> configuration <span class="token constant">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token operator">&gt;</span>

<span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span>environments <span class="token keyword">default</span><span class="token operator">=</span><span class="token string">&quot;development&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">&quot;development&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">&quot;JDBC&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">&quot;POOLED&quot;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;driver&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;url&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/itstack_demo_ddd?useUnicode=true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;username&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>environments<span class="token operator">&gt;</span>

    <span class="token generics"><span class="token punctuation">&lt;</span>mappers<span class="token punctuation">&gt;</span></span>
        <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">&quot;mapper/User_Mapper.xml&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">&quot;mapper/School_Mapper.xml&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>test-config.xml &amp; 配置xml</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/beans&quot;</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/context&quot;</span>
       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/aop&quot;</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;</span>
       <span class="token keyword">default</span><span class="token operator">-</span>autowire<span class="token operator">=</span><span class="token string">&quot;byName&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">&quot;org.itstack&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;sqlSessionFactory&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.itstack.demo.like.spring.SqlSessionFactoryBean&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;resource&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;spring/mybatis-config-datasource.xml&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.itstack.demo.like.spring.MapperScannerConfigurer&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入sqlSessionFactory <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;sqlSessionFactory&quot;</span> ref<span class="token operator">=</span><span class="token string">&quot;sqlSessionFactory&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 给出需要扫描<span class="token class-name">Dao</span>接口包 <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;basePackage&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;org.itstack.demo.dao&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>SpringTest.java &amp; 单元测试</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SpringTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;test-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;IUserDao&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfoById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>一月 <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2020</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">43</span> 上午 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>ClassPathXmlApplicationContext</span> prepareRefresh
信息<span class="token operator">:</span> <span class="token class-name">Refreshing</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>ClassPathXmlApplicationContext</span><span class="token annotation punctuation">@30b8a058</span><span class="token operator">:</span> startup date <span class="token punctuation">[</span><span class="token class-name">Mon</span> <span class="token class-name">Jan</span> <span class="token number">20</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">43</span> <span class="token constant">CST</span> <span class="token number">2020</span><span class="token punctuation">]</span><span class="token punctuation">;</span> root of context hierarchy
一月 <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2020</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">43</span> 上午 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span>XmlBeanDefinitionReader</span> loadBeanDefinitions
信息<span class="token operator">:</span> <span class="token class-name">Loading</span> <span class="token constant">XML</span> bean definitions from <span class="token keyword">class</span> path resource <span class="token punctuation">[</span>test<span class="token operator">-</span>config<span class="token punctuation">.</span>xml<span class="token punctuation">]</span>
你被代理了，执行<span class="token constant">SQL</span>操作！queryUserInfoById
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">45.592</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>SpringTest</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&quot;createTime&quot;</span><span class="token operator">:</span><span class="token number">1576944000000</span><span class="token punctuation">,</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;水水&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;updateTime&quot;</span><span class="token operator">:</span><span class="token number">1576944000000</span><span class="token punctuation">}</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>酒干热火笑红尘，春秋几载年轮，不问。回首皆是Spring！<strong>Gun！变心！你被代理了！</strong></p><h2 id="七、综上总结" tabindex="-1"><a class="header-anchor" href="#七、综上总结" aria-hidden="true">#</a> 七、综上总结</h2><ul><li>通过这些核心关键类的实现；SqlSessionFactoryBean、MapperScannerConfigurer、SqlSessionFactoryBean，我们将spring与mybaits集合起来使用，解决了没有实现类的接口怎么处理数据库CRUD操作</li><li>那么这个知识点可以用到哪里，不要只想着面试！在我们业务开发中是不会有很多其他数据源操作，比如ES、Hadoop、数据中心等等，包括自建。那么我们就可以做成一套统一数据源处理服务，以优化服务开发效率</li><li>由于这次工程类是在itstack-demo-code-mybatis中继续开发，如果需要获取源码可以关注公众号：bugstack虫洞栈，回复：源码分析</li><li>最后祝福大家在新的一年里；万事如意、恭贺新禧、喜气洋洋、福星高照、欢天喜地、吉祥如意、一帆风顺、万事大吉、龙凤呈祥、步步高升，一家瑞气，二气雍和，三星拱户，四季平安，五星高照。六六大顺，七星高照，八方来财，九九同心，十全十美。</li></ul>`,77);function y(f,h){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,n("ul",null,[n("li",null,[n("a",m,[s("源码分析 - Mybatis接口没有实现类为什么可以执行增删改查"),t(a)])]),n("li",null,[n("a",v,[s("源码分析 - 像盗墓一样分析Spring是怎么初始化xml并注册bean的"),t(a)])]),n("li",null,[n("a",b,[s("源码分析 - 基于jdbc实现一个Demo版的Mybatis"),t(a)])])]),g])}const w=p(i,[["render",y],["__file","2020-01-20-_yuanmafenxi_shouxiemybait-springhexingongnen，ganhuohaowenyicixuehuigongchangbean、leidaili、beanzhucedeshiyong.html.vue"]]);export{w as default};
