import{_ as n,o as s,c as a,e as p}from"./app-3RcBQnkC.js";const t={},e=p(`<h1 id="_6-1-接口和组件" tabindex="-1"><a class="header-anchor" href="#_6-1-接口和组件" aria-hidden="true">#</a> 6.1 接口和组件</h1><h2 id="_6-1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_6-1-1-介绍" aria-hidden="true">#</a> 6.1.1 介绍</h2><p>用于生成和转换已编译 Java 类的 ASM 树 API 是基于 ClassNode 类的（见图 6.1）。</p><blockquote><p>图 6.1 ClassNode 类（仅给出了字段）</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassNode</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> access<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> signature<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> superName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> interfaces<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> sourceFile<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> sourceDebug<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> outerClass<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> outerMethod<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> outerMethodDesc<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationNode</span><span class="token punctuation">&gt;</span></span> visibleAnnotations<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationNode</span><span class="token punctuation">&gt;</span></span> invisibleAnnotations<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Attribute</span><span class="token punctuation">&gt;</span></span> attrs<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InnerClassNode</span><span class="token punctuation">&gt;</span></span> innerClasses<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FieldNode</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，这个类的公共字段对应于图 2.1 中给出的类文件结构部分。这些字段的内容与核心 API 相同。例如，name 是一个内部名字，signature 是一个类签名（见 2.1.2 节和 4.1 节）。一些字段包含其他 XxxNode 类：这些类将在随后各章详细介绍，它们拥有一种类似的结构，即拥有一些字段，对应于类文件结构的子部分。例如，FieldNode 类看起来是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldNode</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> access<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> signature<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">FieldNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> desc<span class="token punctuation">,</span><span class="token class-name">String</span> signature<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MethodNode 类是类似的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodNode</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">int</span> access<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token class-name">String</span> signature<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exceptions<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-1-2-生成类" tabindex="-1"><a class="header-anchor" href="#_6-1-2-生成类" aria-hidden="true">#</a> 6.1.2 生成类</h2><p>用树 API 生成类的过程就是：创建一个 ClassNode 对象，并初始化它的字段。例如，2.2.3 节的 Comarable 接口可用如下代码生成（其代码数量大体与 2.2.3 节相同）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassNode</span> cn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
cn<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token constant">V1_5</span><span class="token punctuation">;</span>
cn<span class="token punctuation">.</span>access <span class="token operator">=</span> <span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_ABSTRACT</span> <span class="token operator">+</span> <span class="token constant">ACC_INTERFACE</span><span class="token punctuation">;</span>
cn<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;pkg/Comparable&quot;</span><span class="token punctuation">;</span> cn<span class="token punctuation">.</span>superName <span class="token operator">=</span> <span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">;</span> cn<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;pkg/Mesurable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cn<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldNode</span><span class="token punctuation">(</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_FINAL</span> <span class="token operator">+</span> <span class="token constant">ACC_STATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;LESS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cn<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldNode</span><span class="token punctuation">(</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_FINAL</span> <span class="token operator">+</span> <span class="token constant">ACC_STATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;EQUAL&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cn<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldNode</span><span class="token punctuation">(</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_FINAL</span> <span class="token operator">+</span> <span class="token constant">ACC_STATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;GREATER&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cn<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodNode</span><span class="token punctuation">(</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_ABSTRACT</span><span class="token punctuation">,</span> <span class="token string">&quot;compareTo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/Object;)I&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用树 API 生成类时，需要多花费大约 30%的时间（见附录 A.1），占用的内存也多于使用核心 API。但可以按任意顺序生成类元素，这在一些情况下可能非常方便。</p><h2 id="_6-1-3-添加和删除类成员" tabindex="-1"><a class="header-anchor" href="#_6-1-3-添加和删除类成员" aria-hidden="true">#</a> 6.1.3 添加和删除类成员</h2><p>添加和删除类就是在 ClassNode 对象的 fields 或 methods 列表中添加或删除元素。例如，如果像下面这样定义了 ClassTransformer 类，以便能够轻松地编写类转换器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassTransformer</span> <span class="token punctuation">{</span> 
    <span class="token keyword">protected</span> <span class="token class-name">ClassTransformer</span> ct<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">ClassTransformer</span><span class="token punctuation">(</span><span class="token class-name">ClassTransformer</span> ct<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>ct <span class="token operator">=</span> ct<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassNode</span> cn<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ct <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ct<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则 2.2.5 节中的 RemoveMethodAdapter 可实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveMethodTransformer</span> <span class="token keyword">extends</span> <span class="token class-name">ClassTransformer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> methodName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> methodDesc<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveMethodTransformer</span><span class="token punctuation">(</span><span class="token class-name">ClassTransformer</span> ct<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">String</span> methodDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>methodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>methodDesc <span class="token operator">=</span> methodDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassNode</span> cn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodNode</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> cn<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">MethodNode</span> mn <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> methodDesc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，它与核心 API 的主要区别是需要迭代所有方法，而在使用核心 API 时是不需要这样做的（这一工作会在 ClassReader 中为你完成）。事实上，这一区别对于几乎所有基于树的转换都是有效的。例如，在用树 API 实现 2.2.6 节的 AddFieldAdapter 时，它还需要一个迭代器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddFieldTransformer</span> <span class="token keyword">extends</span> <span class="token class-name">ClassTransformer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fieldAccess<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fieldDesc<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddFieldTransformer</span><span class="token punctuation">(</span><span class="token class-name">ClassTransformer</span> ct<span class="token punctuation">,</span> <span class="token keyword">int</span> fieldAccess<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fieldAccess <span class="token operator">=</span> fieldAccess<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fieldName <span class="token operator">=</span> fieldName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fieldDesc <span class="token operator">=</span> fieldDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassNode</span> cn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> isPresent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FieldNode</span> fn <span class="token operator">:</span> cn<span class="token punctuation">.</span>fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                isPresent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cn<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldNode</span><span class="token punctuation">(</span>fieldAccess<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> fieldDesc<span class="token punctuation">,</span>

                    <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和生成类的情景一样，使用树 API 转换类时，所花费的时间和占用的内存也要多于使用核心 API 的时候。但使用树 API 有可能使一些转换的实现更为容易。比如有一个转换，要向一个类中添加注释，包含其内容的数字签名，就属于上述情景。在使用核心 API 时，只有在访问了整个类之后才能计算数字签名，但这时再添加包含其内容的注释就太晚了，因为对注释的访问必须位于类成员之前。而在使用树 API 时，这个问题就消失了，因为这时不存在此种限制。</p><p>事实上，有可能用核心 API 实现 AddDigitialSignature 示例，但随后，必须分两遍来转换这个类。第一遍，首先用一个 ClassReader（没有 ClassWriter）来访问这个类，以根据类的内容来计算数字签名。在第二遍，重复利用同一个 ClassReader 对类进行第一次访问， 这一次是向一个 ClassWriter 链接一个 AddAnnotationAdapter。通过推广这一论述过程， 我们可以看出，事实上，任何转换都可以仅用核心 API 来实现，只需在必要时分几遍完成。但这样就提高了转换代码的复杂性，要求在各遍之间存储状态（这种状态可能非常复杂，需要一个完整的树形表示！），而且对一个类进行多次分析是有成本的，必需将这一成本与构造相应 ClassNode 的成本进行比较。</p><p>结论是：<strong>树 API 通常用于那些不能由核心 API 一次实现的转换</strong>。但当然也存在例外。例如一个混淆器不能由核心 API 一遍实现，因为必须首先在原名称和混淆后的名字之间建立了完整的映射之后，才可能转换类，而这个映射的建立需要对所有类进行分析。但树 API 也不是一个好的解决方案，因为它需要将所有待混淆类的对象表示保存在内存中。在这种情况下，最好是分两遍使用核心 API：一遍用于计算原名与混淆后名称之间的映射（一个简单的散列表，它需要的内存要远少于所有类的完整对象表示），另一遍用于根据这一映射来转换类。</p>`,23),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","6.1jiekouhezujian.html.vue"]]);export{k as default};
