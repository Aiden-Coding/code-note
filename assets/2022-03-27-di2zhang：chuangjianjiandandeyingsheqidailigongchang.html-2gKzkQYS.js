import{_ as t,r as p,o as c,c as o,a as n,b as s,d as e,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《mybatis-手撸专栏》第2章-创建简单的映射器代理工厂",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《mybatis-手撸专栏》第2章-创建简单的映射器代理工厂","aria-hidden":"true"},"#"),s(" 《Mybatis 手撸专栏》第2章：创建简单的映射器代理工厂")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/G3fZES2FvNQK8JLnd9Hx9w",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=597036405&bvid=BV18B4y1X7iP&cid=732918039&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),g=l(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>着急和快，是最大的障碍！</code></p><p>慢下来，慢下来，只有慢下来，你才能看到更全的信息，才能学到更扎实的技术。而那些满足你快的短篇内容虽然有时候更抓眼球，但也容易把人在技术学习上带偏，总想着越快越好。</p><p>在小傅哥编写技术文章的过程中，也会遇到这样的情况，不少读者更喜欢看；一个系列内容的开头、一段成长故事的分享、一天成为架构的秘籍。当然我也能理解这种喜欢，毕竟大多数人都喜欢走捷径，就像冬天买了运动健身装备，夏天过去了还没有拆封。</p><p>好了，接下来咱们干正事！</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>在你能阅读这篇文章之时，我相信你已经是一个 Mybatis ORM 框架工具使用的熟练工了，那你是否清楚这个 ORM 框架是怎么屏蔽我们对数据库操作的细节的？</p><p>比如我们使用 JDBC 的时候，需要手动建立数据库链接、编码 SQL 语句、执行数据库操作、自己封装返回结果等。但在使用 ORM 框架后，只需要通过简单配置即可对定义的 DAO 接口进行数据库的操作了。</p><p>那么本章节我们就来解决 ORM 框架第一个关联对象接口和映射类的问题，把 DAO 接口使用代理类，包装映射操作。</p><h2 id="三、设计" tabindex="-1"><a class="header-anchor" href="#三、设计" aria-hidden="true">#</a> 三、设计</h2><p>通常如果能找到大家所在事情的共性内容，具有统一的流程处理，那么它就是可以被凝聚和提炼的，做成通用的组件或者服务，被所有人进行使用，减少重复的人力投入。</p><p>而参考我们最开始使用 JDBC 的方式，从连接、查询、封装、返回，其实都一个固定的流程，那么这个过程就可以被提炼以及封装和补全大家所需要的功能。</p><p>当我们来设计一个 ORM 框架的过程中，首先要考虑怎么把用户定义的数据库操作接口、xml配置的SQL语句、数据库三者联系起来。其实最适合的操作就是使用代理的方式进行处理，因为代理可以封装一个复杂的流程为接口对象的实现类，设计如图 2-1：</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220327-01.png" alt="图 2-1 代理类设计"></p><ul><li>首先提供一个映射器的代理实现类 <code>MapperProxy</code>，通过代理类包装对数据库的操作，目前我们本章节会先提供一个简单的包装，模拟对数据库的调用。</li><li>之后对 <code>MapperProxy</code> 代理类，提供工厂实例化操作 MapperProxyFactory#newInstance，为每个 IDAO 接口生成代理类。<em>这块其实用到的就是一个简单工厂模式</em></li></ul><p><em>接下来我们就按照这个设计实现一个简单的映射器代理操作，编码过程比较简单。如果对代理知识不熟悉可以先补充下。</em></p><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mybatis<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">01</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>binding
    │           ├── <span class="token class-name">MapperProxy</span><span class="token punctuation">.</span>java
    │           └── <span class="token class-name">MapperProxyFactory</span><span class="token punctuation">.</span>java
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dao
                ├── dao
                │   └── <span class="token class-name">IUserDao</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：手写Mybatis，获取完整源码</code></p><p>Mybatis 映射器代理类关系，如图 2-2</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220327-02.png" alt="如图 2-2 代理类关系图"></p><ul><li>目前这个 Mybatis 框架的代理操作实现的还只是最核心的功能，相当于是光屁股的娃娃，还没有添加衣服。不过这样渐进式的实现可以让大家先了解到最核心的内容，后续我们在陆续的完善。</li><li>MapperProxy 负责实现 InvocationHandler 接口的 invoke 方法，最终所有的实际调用都会调用到这个方法包装的逻辑。</li><li>MapperProxyFactory 是对 MapperProxy 的包装，对外提供实例化对象的操作。当我们后面开始给每个操作数据库的接口映射器注册代理的时候，就需要使用到这个工厂类了。</li></ul><h3 id="_2-映射器代理类" tabindex="-1"><a class="header-anchor" href="#_2-映射器代理类" aria-hidden="true">#</a> 2. 映射器代理类</h3><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.binding.MapperProxy</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6424540398559729838L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sqlSession<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MapperProxy</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;你的被代理了！&quot;</span> <span class="token operator">+</span> sqlSession<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过实现 InvocationHandler#invoke 代理类接口，封装操作逻辑的方式，对外接口提供数据库操作对象。</li><li>目前我们这里只是简单的封装了一个 sqlSession 的 Map 对象，你可以想象成所有的数据库语句操作，都是通过<code>接口名称+方法名称作为key</code>，操作作为逻辑的方式进行使用的。那么在反射调用中则获取对应的操作直接执行并返回结果即可。<em>当然这还只是最核心的简化流程，后续不断补充内容后，会看到对数据库的操作</em></li><li>另外这里要注意如果是 Object 提供的 toString、hashCode 等方法是不需要代理执行的，所以添加 <code>Object.class.equals(method.getDeclaringClass())</code> 判断。</li></ul><h3 id="_3-代理类工厂" tabindex="-1"><a class="header-anchor" href="#_3-代理类工厂" aria-hidden="true">#</a> 3. 代理类工厂</h3><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.binding.MapperProxyFactory</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MapperProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>mapperInterface<span class="token punctuation">}</span><span class="token punctuation">,</span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>工厂操作相当于把代理的创建给封装起来了，如果不做这层封装，那么每一个创建代理类的操作，都需要自己使用 <code>Proxy.newProxyInstance</code> 进行处理，那么这样的操作方式就显得比较麻烦了。</li><li>另外如果你对代理不是太熟悉，可以着重把 JDK Proxy 的内容做几个案例补充下这块的内容。</li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><p><strong>cn.bugstack.mybatis.test.dao.IUserDao</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">queryUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Integer</span> <span class="token function">queryUserAge</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先提供一个 DAO 接口，并定义2个接口方法。</li></ul><h3 id="_2-测试用例" tabindex="-1"><a class="header-anchor" href="#_2-测试用例" aria-hidden="true">#</a> 2. 测试用例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_MapperProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IUserDao</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sqlSession <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    sqlSession<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;cn.bugstack.mybatis.test.dao.IUserDao.queryUserName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;模拟执行 Mapper.xml 中 SQL 语句的操作：查询用户姓名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;cn.bugstack.mybatis.test.dao.IUserDao.queryUserAge&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;模拟执行 Mapper.xml 中 SQL 语句的操作：查询用户年龄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserName</span><span class="token punctuation">(</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在单测中创建 MapperProxyFactory 工厂，并手动给 sqlSession Map 赋值，这里的赋值相当于模拟数据库中的操作。</li><li>接下来再把赋值信息传递给代理对象实例化操作，这样就可以在我们调用具体的 DAO 方法时从 sqlSession 中取值了。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">17</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">41.817</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：你的被代理了！模拟执行 <span class="token class-name">Mapper</span><span class="token punctuation">.</span>xml 中 <span class="token constant">SQL</span> 语句的操作：查询用户姓名

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果可以看到的，我们的接口已经被代理类实现了，同时我们可以在代理类中进行自己的操作封装。那么在我们后续实现的数据库操作中，就可以对这部分内容进行扩展了。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>本章节我们初步对 Mybatis 框架中的数据库 DAO 操作接口和映射器通过代理类的方式进行链接，这一步也是 ORM 框架里非常核心的部分。有了这块的内容，就可以在代理类中进行自己逻辑的扩展了。</li><li>在框架实现方面引入简单工厂模式包装代理类，屏蔽创建细节，这些也是大家在学习过程中需要注意的设计模式的点。</li><li>目前内容还比较简单的，可以手动操作练习，随着我们内容的增加，会有越来越多的包和类引入，完善 ORM 框架功能。</li></ul><h2 id="七、优秀作业" tabindex="-1"><a class="header-anchor" href="#七、优秀作业" aria-hidden="true">#</a> 七、优秀作业</h2>`,45),h={href:"https://t.zsxq.com/0662Nzr3j",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/063ZvJubq",target:"_blank",rel:"noopener noreferrer"},f={href:"https://t.zsxq.com/06aei2NfA",target:"_blank",rel:"noopener noreferrer"},x={href:"https://t.zsxq.com/08DRpPAav",target:"_blank",rel:"noopener noreferrer"},_={href:"https://t.zsxq.com/08ldxyf2S",target:"_blank",rel:"noopener noreferrer"};function w(q,M){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/G3fZES2FvNQK8JLnd9Hx9w"),e(a)])]),v,b,g,n("ul",null,[n("li",null,[n("a",h,[s("使用动态代理为接口生成代理对象 @W"),e(a)])]),n("li",null,[n("a",y,[s("学会动态代理的原理及使用 @Alpha"),e(a)])]),n("li",null,[n("a",f,[s("通过jdk动态代理的方式，将生成代理对象 @"),e(a)])]),n("li",null,[n("a",x,[s("在mybatis中都是使用Mapper接口，直接调用查询方法 @灬"),e(a)])]),n("li",null,[n("a",_,[s("创建简单的映射器工厂 @liuc"),e(a)])])])])}const j=t(i,[["render",w],["__file","2022-03-27-di2zhang：chuangjianjiandandeyingsheqidailigongchang.html.vue"]]);export{j as default};
