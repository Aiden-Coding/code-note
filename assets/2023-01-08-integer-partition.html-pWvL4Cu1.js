import{_ as t,r as o,o as p,c,a as n,b as s,d as e,e as i}from"./app-3RcBQnkC.js";const u={},r=n("h1",{id:"《程序员数学-整数拆分》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-整数拆分》","aria-hidden":"true"},"#"),s(" 《程序员数学：整数拆分》")],-1),l=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},b=i(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>4可以被拆分为；<code>3+1</code>、<code>2+2</code>、<code>2+1+1</code>、<code>1+1+1+1</code>，这个过程叫做整数划分，表示在数论和组合学中，正整数n的划分。</p><p>那么这东西在数学和计算机科学的领域都有啥用呢；</p><ul><li><strong>组合学</strong>：配分函数与将集合划分为子集的概念密切相关，在组合学中使用它来计算可以将集合划分为一定大小的子组的方式的数量。</li><li><strong>数论</strong>：配分函数在数论中用于研究整数的性质及其相互之间的关系。它还用于研究素数的分布。</li><li><strong>算法</strong>：分区函数可以用来解决各种涉及分区和子集求和问题的问题，例如背包问题和子集​​求和问题。</li><li><strong>物理学</strong>：配分函数与统计力学的概念有关，用于热力学系统的研究。它还用于研究量子系统的行为。</li><li><strong>计算机科学</strong>：分区函数在计算机科学中用于解决涉及数据结构的问题，例如哈希表和动态规划。它还用于计算机程序算法的设计。</li></ul><h2 id="二、分区图示" tabindex="-1"><a class="header-anchor" href="#二、分区图示" aria-hidden="true">#</a> 二、分区图示</h2><p>在维基百科中介绍，有两种常用的图解方法来表示分区：以Norman Macleod Ferrers命名的 Ferrers 图和以Alfred Young命名的 Young 图。两者都有几种可能的约定；在这里，我们使用英文符号，图表在左上角对齐。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/integer-partition-01.png?raw=true" width="650px"></div><ul><li>与正整数 1 到 8 的分区相关联的Young 图。它们的排列使得正方形主对角线反射下的图像是共轭分区。</li></ul><h2 id="三、案例实现" tabindex="-1"><a class="header-anchor" href="#三、案例实现" aria-hidden="true">#</a> 三、案例实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">integerPartition</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建矩阵</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> partitionMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 填充数据，需要将数字 1，2，3，...，n 与数字 0 组合的方法数。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> numberIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> numberIndex <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> numberIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        partitionMatrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从 0，0 和 1，0 和 1 和 2，0 和 1 和 2 和 3 等数字中形成数字 0 的方法数。显然，我们只能使用数字 0 本身形成数字 0 的一种方法。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> summandIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> summandIndex <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> summandIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        partitionMatrix<span class="token punctuation">[</span>summandIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 通过动态规划方法来探究我们如何从 0，1，...，m 的加数中形成数字 m 的其他可能的选项。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> summandIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> summandIndex <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> summandIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> numberIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> numberIndex <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> numberIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>summandIndex <span class="token operator">&gt;</span> numberIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果加数大于当前数字本身，那么它就不会增加任何新的数字形成方法。因此，我们可以直接从上面的行中复制数字。</span>
                partitionMatrix<span class="token punctuation">[</span>summandIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span> <span class="token operator">=</span> partitionMatrix<span class="token punctuation">[</span>summandIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">/*
                 * 组合数等于不使用当前加数形成相同数字的组合数加上使用当前加数形成当前数字减去当前加数的数字的组合数。
                 * 例如，使用 {0, 1, 2} 的加数形成 5 的方法数等于使用 {0, 1} 的加数形成 5 的方法数（排除了加数 2）加上使用 {0, 1, 2} 的加数形成 3 的方法数（包括加数 2）的和。
                 */</span>
                <span class="token keyword">int</span> combosWithoutSummand <span class="token operator">=</span> partitionMatrix<span class="token punctuation">[</span>summandIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> combosWithSummand <span class="token operator">=</span> partitionMatrix<span class="token punctuation">[</span>summandIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>numberIndex <span class="token operator">-</span> summandIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
                partitionMatrix<span class="token punctuation">[</span>summandIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span> <span class="token operator">=</span> combosWithoutSummand <span class="token operator">+</span> combosWithSummand<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> partitionMatrix<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/integer-partition-03.png?raw=true" width="850px"></div><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/integer-partition-02.png?raw=true" width="250px"></div><ul><li>这段代码使用了动态规划来求解数字分割问题。它首先创建了一个 <code>number+1</code> 行 <code>number+1</code> 列的二维数组 <code>partitionMatrix</code>，然后使用三重循环来填充这个数组。</li><li>第一重循环从 1 到 <code>number</code>，枚举数字 <code>numberIndex</code>。第二重循环从 0 到 <code>number</code>，枚举数字 <code>summandIndex</code>。第三重循环从 1 到 <code>number</code>，枚举数字 <code>numberIndex</code>。</li><li>在这个三重循环中，<code>partitionMatrix[summandIndex][numberIndex]</code> 表示将数字 <code>numberIndex</code> 分割成若干个不大于 <code>summandIndex</code> 的正整数的和的方案数。根据动态规划的思想，这个值可以从 <code>partitionMatrix[summandIndex][numberIndex-summandIndex]</code> 转移而来。这样就可以通过填充这个二维数组来求解数字分割问题。</li><li>最后，返回了 <code>partitionMatrix[number][number]</code>，即将数字 <code>number</code> 分割成若干个不大于 <code>number</code> 的正整数的和的方案数。</li></ul><hr>`,15),v={href:"https://en.wikipedia.org/wiki/Partition_(number_theory)",target:"_blank",rel:"noopener noreferrer"};function h(x,g){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("作者：小傅哥 "),l,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)]),k,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),e(a)])]),b,n("p",null,[n("a",v,[s("https://en.wikipedia.org/wiki/Partition_(number_theory)"),e(a)])])])}const _=t(u,[["render",h],["__file","2023-01-08-integer-partition.html.vue"]]);export{_ as default};
