import{_ as l,r as s,o as i,c,a as e,b as t,d as r,f as n,e as a}from"./app-3RcBQnkC.js";const d={},h=e("h1",{id:"第14节-门面接口封装和对象转换",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第14节-门面接口封装和对象转换","aria-hidden":"true"},"#"),t(" 第14节：门面接口封装和对象转换")],-1),u=e("br",null,null,-1),_={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},p=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！")],-1),f={href:"https://gitcode.net/KnowledgePlanet/Lottery/-/tree/211016_xfg_vo2dto",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,[t("描述：在 lottery-interfaces 接口层创建 "),e("code",null,"facade 门面模式"),t(" 包装抽奖接口，并在 "),e("code",null,"assembler 包"),t(" 使用 MapStruct 做对象转换操作处理。")],-1),m=e("h2",{id:"零、优秀作业",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#零、优秀作业","aria-hidden":"true"},"#"),t(" 零、优秀作业")],-1),b={href:"https://t.zsxq.com/06vzzVbuV",target:"_blank",rel:"noopener noreferrer"},k={href:"https://t.zsxq.com/06M7uzJuB",target:"_blank",rel:"noopener noreferrer"},x={href:"https://t.zsxq.com/06yBiyN7E",target:"_blank",rel:"noopener noreferrer"},z={href:"https://t.zsxq.com/06R76aeYf",target:"_blank",rel:"noopener noreferrer"},v={href:"https://t.zsxq.com/06VzjEAqf",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/06RbMVrRV",target:"_blank",rel:"noopener noreferrer"},M={href:"https://t.zsxq.com/06fuvfMrn",target:"_blank",rel:"noopener noreferrer"},V=a('<h2 id="一、开发日志" tabindex="-1"><a class="header-anchor" href="#一、开发日志" aria-hidden="true">#</a> 一、开发日志</h2><ul><li>补充 lottery-application 应用层对规则引擎的调用，添加接口方法 IActivityProcess#doRuleQuantificationCrowd</li><li>删掉 lottery-rpc 测试内容，新增加抽奖活动展台接口 ILotteryActivityBooth，并添加两个抽奖的接口方法，普通抽奖和量化人群抽奖。</li><li>开发 lottery-interfaces 接口层，对抽奖活动的封装，并对外提供抽奖服务。</li></ul><h2 id="二、对象转换" tabindex="-1"><a class="header-anchor" href="#二、对象转换" aria-hidden="true">#</a> 二、对象转换</h2><p><strong>背景</strong>：以 DDD 设计的结构框架，在接口层和应用层需要做防污处理，也就是说不能直接把应用层、领域层的对象直接暴露处理，因为暴露出去可能会随着业务发展的过程中不断的添加各类字段，从而破坏领域结构。那么就需要增加一层对象转换，也就有了 vo2dto、dto2vo 的操作。但这些转换的字段又基本都是重复的，在保证性能的情况下，一些高并发场景就只会选择手动编写 get、set，但其实也有很多其他的方式，转换性能也不差，这里我们列举一下。</p><p>在 Java 系统工程开发过程中，都会有各个层之间的对象转换，比如 VO、DTO、PO、VO 等，而如果都是手动get、set又太浪费时间，还可能操作错误，选择一个自动化工具会更加方便。目前市面上有大概12种类型转换的操作，如下：</p>',5),S=e("strong",null,"源码",-1),q={href:"https://github.com/fuzhengwei/guide-vo2dto",target:"_blank",rel:"noopener noreferrer"},A=e("p",null,[e("strong",null,"描述"),t("：在案例工程下创建 interfaces.assembler 包，定义 IAssembler<SOURCE, TARGET>#sourceToTarget(SOURCE var) 接口，提供不同方式的对象转换操作类实现，学习的过程中可以直接下载运行调试。")],-1),B=e("p",null,"目前我整理出，用于对象属性转换有12种，包括：普通的getset、json2Json、Apache属性拷贝、Spring属性拷贝、bean-mapping、bean-mapping-asm、BeanCopier、Orika、Dozer、ModelMapper、JMapper、MapStruct 接下来我们分别测试这11种属性转换操作分别在一百次、一千次、一万次、十万次、一百万次时候的性能时间对比。",-1),j=a("<ul><li><code>BeanUtils.copyProperties</code> 是大家代码里最常出现的工具类，但只要你不把它用错成 <code>Apache</code> 包下的，而是使用 Spring 提供的，就基本还不会对性能造成多大影响。</li><li>但如果说性能更好，可替代手动<code>get、set</code>的，还是 <code>MapStruct</code> 更好用，因为它本身就是在编译期生成<code>get、set</code>代码，和我们写<code>get、set</code>一样。</li><li>其他一些组件包主要基于 <code>AOP</code>、<code>ASM</code>、<code>CGlib</code>，的技术手段实现的，所以也会有相应的性能损耗。</li></ul>",1);function C(E,O){const o=s("ExternalLinkIcon");return i(),c("div",null,[h,e("p",null,[t("作者：小傅哥 "),u,t("博客："),e("a",_,[t("https://bugstack.cn"),r(o)])]),p,e("ul",null,[e("li",null,[t("分支："),e("a",f,[t("211016_xfg_vo2dto"),r(o)])]),g]),m,e("ul",null,[e("li",null,[e("a",b,[t("门面接口封装和对象转换 @一点江南"),r(o)])]),e("li",null,[e("a",k,[t("搭建MQ消息组件Kafka服务环境；使用MQ解耦抽奖发货流程 @一点江南"),r(o)])]),e("li",null,[e("a",x,[t("门面接口封装和对象转换 @BerserkD"),r(o)])]),e("li",null,[e("a",z,[t("门面接口封装和对象转换 @杨杨得亿🙉"),r(o)])]),e("li",null,[e("a",v,[t("门面模式接口封装与对象转换 @Geroge Liu"),r(o)])]),e("li",null,[e("a",y,[t("封装门面，学习使用MapStruct @Chin"),r(o)])]),e("li",null,[e("a",M,[t("门面接口封装和对象转换 @liuc"),r(o)])])]),V,n(" ![](/images/article/project/lottery/Part-2/14-01.png) "),e("p",null,[S,t("："),e("a",q,[t("https://github.com/fuzhengwei/guide-vo2dto"),r(o)])]),A,B,n(" ![](/images/article/project/lottery/Part-2/14-02.png) "),j])}const R=l(d,[["render",C],["__file","di14jie：menmianjiekoufengzhuangheduixiangzhuanhuan.html.vue"]]);export{R as default};
