import{_ as e,o as a,c as s,e as n}from"./app-3RcBQnkC.js";const d={},l=n(`<h1 id="linux-开篇" tabindex="-1"><a class="header-anchor" href="#linux-开篇" aria-hidden="true">#</a> Linux 开篇！！！</h1><ul><li><a href="#linux-%E5%BC%80%E7%AF%87">Linux 开篇！！！</a><ul><li><a href="#linux-%E7%AE%80%E4%BB%8B">Linux 简介</a><ul><li><a href="#linux-%E6%8E%A5%E5%8F%A3">Linux 接口</a></li><li><a href="#linux-%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86">Linux 组成部分</a></li><li><a href="#shell">Shell</a></li><li><a href="#linux-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">Linux 应用程序</a></li><li><a href="#linux-%E5%86%85%E6%A0%B8%E7%BB%93%E6%9E%84">Linux 内核结构</a></li></ul></li></ul></li></ul><p>此篇文章主要会带你介绍 Linux 操作系统，包括 Linux 本身、Linux 如何使用、以及系统调用和 Linux 是如何工作的。</p><h2 id="linux-简介" tabindex="-1"><a class="header-anchor" href="#linux-简介" aria-hidden="true">#</a> Linux 简介</h2><p>UNIX 是一个交互式系统，用于同时处理多进程和多用户同时在线。为什么要说 UNIX，那是因为 Linux 是由 UNIX 发展而来的，UNIX 是由程序员设计，它的主要服务对象也是程序员。Linux 继承了 UNIX 的设计目标。从智能手机到汽车，超级计算机和家用电器，从家用台式机到企业服务器，Linux 操作系统无处不在。</p><p>大多数程序员都喜欢让系统尽量简单，优雅并具有一致性。举个例子，从最底层的角度来讲，一个文件应该只是一个字节集合。为了实现顺序存取、随机存取、按键存取、远程存取只能是妨碍你的工作。相同的，如果命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> A*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>意味着只列出以 A 为开头的所有文件，那么命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> A*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应该会移除所有以 A 为开头的文件而不是只删除文件名是 <code>A*</code> 的文件。这个特性也是<code>最小吃惊原则(principle of least surprise)</code></p><blockquote><p>最小吃惊原则一半常用于用户界面和软件设计。它的原型是：该功能或者特征应该符合用户的预期，不应该使用户感到惊讶和震惊。</p></blockquote><p>一些有经验的程序员通常希望系统具有较强的功能性和灵活性。设计 Linux 的一个基本目标是每个应用程序只做一件事情并把他做好。所以编译器只负责编译的工作，编译器不会产生列表，因为有其他应用比编译器做的更好。</p><p>很多人都不喜欢冗余，为什么在 cp 就能描述清楚你想干什么时候还使用 copy？这完全是在浪费宝贵的 <code>hacking time</code>。为了从文件中提取所有包含字符串 <code>ard</code> 的行，Linux 程序员应该输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> ard f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="linux-接口" tabindex="-1"><a class="header-anchor" href="#linux-接口" aria-hidden="true">#</a> Linux 接口</h3><p>Linux 系统是一种金字塔模型的系统，如下所示</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202007/1515111-20200702125647348-1852602413.png" alt=""></p><p>应用程序发起系统调用把参数放在寄存器中(有时候放在栈中)，并发出 <code>trap</code> 系统陷入指令切换用户态至内核态。因为不能直接在 C 中编写 trap 指令，因此 C 提供了一个库，库中的函数对应着系统调用。有些函数是使用汇编编写的，但是能够从 C 中调用。每个函数首先把参数放在合适的位置然后执行系统调用指令。因此如果你想要执行 read 系统调用的话，C 程序会调用 read 函数库来执行。这里顺便提一下，是由 POSIX 指定的库接口而不是系统调用接口。也就是说，POSIX 会告诉一个标准系统应该提供哪些库过程，它们的参数是什么，它们必须做什么以及它们必须返回什么结果。</p><p>除了操作系统和系统调用库外，Linux 操作系统还要提供一些标准程序，比如文本编辑器、编译器、文件操作工具等。直接和用户打交道的是上面这些应用程序。因此我们可以说 Linux 具有三种不同的接口：<strong>系统调用接口、库函数接口和应用程序接口</strong></p><p>Linux 中的 <code>GUI(Graphical User Interface)</code> 和 UNIX 中的非常相似，这种 GUI 创建一个桌面环境，包括窗口、目标和文件夹、工具栏和文件拖拽功能。一个完整的 GUI 还包括窗口管理器以及各种应用程序。</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202007/1515111-20200702125655760-608634230.png" alt=""></p><p>Linux 上的 GUI 由 X 窗口支持，主要组成部分是 X 服务器、控制键盘、鼠标、显示器等。当在 Linux 上使用图形界面时，用户可以通过鼠标点击运行程序或者打开文件，通过拖拽将文件进行复制等。</p><h3 id="linux-组成部分" tabindex="-1"><a class="header-anchor" href="#linux-组成部分" aria-hidden="true">#</a> Linux 组成部分</h3><p>事实上，Linux 操作系统可以由下面这几部分构成</p><ul><li><code>引导程序(Bootloader)</code>：引导程序是管理计算机启动过程的软件，对于大多数用户而言，只是弹出一个屏幕，但其实内部操作系统做了很多事情</li><li><code>内核(Kernel)</code>：内核是操作系统的核心，负责管理 CPU、内存和外围设备等。</li><li><code>初始化系统(Init System)</code>：这是一个引导用户空间并负责控制守护程序的子系统。一旦从引导加载程序移交了初始引导，它就是用于管理引导过程的初始化系统。</li><li><code>后台进程(Daemon)</code>：后台进程顾名思义就是在后台运行的程序，比如打印、声音、调度等，它们可以在引导过程中启动，也可以在登录桌面后启动</li><li><code>图形服务器(Graphical server)</code>：这是在监视器上显示图形的子系统。通常将其称为 X 服务器或 X。</li><li><code>桌面环境(Desktop environment)</code>：这是用户与之实际交互的部分，有很多桌面环境可供选择，每个桌面环境都包含内置应用程序，比如文件管理器、Web 浏览器、游戏等</li><li><code>应用程序(Applications)</code>：桌面环境不提供完整的应用程序，就像 Windows 和 macOS 一样，Linux 提供了成千上万个可以轻松找到并安装的高质量软件。</li></ul><h3 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> Shell</h3><p>尽管 Linux 应用程序提供了 GUI ，但是大部分程序员仍偏好于使用<code>命令行(command-line interface)</code>，称为<code>shell</code>。用户通常在 GUI 中启动一个 shell 窗口然后就在 shell 窗口下进行工作。</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202007/1515111-20200702125705341-1629912704.png" alt=""></p><p>shell 命令行使用速度快、功能更强大、而且易于扩展、并且不会带来<code>肢体重复性劳损(RSI)</code>。</p><p>下面会介绍一些最简单的 bash shell。当 shell 启动时，它首先进行初始化，在屏幕上输出一个 <code>提示符(prompt)</code>，通常是一个百分号或者美元符号，等待用户输入</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202007/1515111-20200702125711207-685430064.png" alt=""></p><p>等用户输入一个命令后，shell 提取其中的第一个词，这里的词指的是被空格或制表符分隔开的一连串字符。假定这个词是将要运行程序的程序名，那么就会搜索这个程序，如果找到了这个程序就会运行它。然后 shell 会将自己挂起直到程序运行完毕，之后再尝试读入下一条指令。shell 也是一个普通的用户程序。它的主要功能就是读取用户的输入和显示计算的输出。shell 命令中可以包含参数，它们作为字符串传递给所调用的程序。比如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> src dest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会调用 cp 应用程序并包含两个参数 <code>src</code> 和 <code>dest</code>。这个程序会解释第一个参数是一个已经存在的文件名，然后创建一个该文件的副本，名称为 dest。</p><p>并不是所有的参数都是文件名，比如下面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">head</span> <span class="token parameter variable">-20</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数 -20，会告诉 head 应用程序打印文件的前 20 行，而不是默认的 10 行。控制命令操作或者指定可选值的参数称为<code>标志(flag)</code>，按照惯例标志应该使用 <code>-</code> 来表示。这个符号是必要的，比如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">head</span> <span class="token number">20</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是一个完全合法的命令，它会告诉 head 程序输出文件名为 20 的文件的前 10 行，然后输出文件名为 file 文件的前 10 行。Linux 操作系统可以接受一个或多个参数。</p><p>为了更容易的指定多个文件名，shell 支持 <code>魔法字符(magic character)</code>，也被称为<code>通配符(wild cards)</code>。比如，<code>*</code> 可以匹配一个或者多个可能的字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> *.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>告诉 ls 列举出所有文件名以 <code>.c</code> 结束的文件。如果同时存在多个文件，则会在后面进行并列。</p><p>另一个通配符是问号，负责匹配任意一个字符。一组在中括号中的字符可以表示其中任意一个，因此</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token punctuation">[</span>abc<span class="token punctuation">]</span>*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会列举出所有以 <code>a</code>、<code>b</code> 或者 <code>c</code> 开头的文件。</p><p>shell 应用程序不一定通过终端进行输入和输出。shell 启动时，就会获取 <strong>标准输入、标准输出、标准错误</strong>文件进行访问的能力。</p><p>标准输出是从键盘输入的，标准输出或者标准错误是输出到显示器的。许多 Linux 程序默认是从标准输入进行输入并从标准输出进行输出。比如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sort</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会调用 sort 程序，会从终端读取数据(直到用户输入 ctrl-d 结束)，根据字母顺序进行排序，然后将结果输出到屏幕上。</p><p>通常还可以重定向标准输入和标准输出，重定向标准输入使用 <code>&lt;</code> 后面跟文件名。标准输出可以通过一个大于号 <code>&gt;</code> 进行重定向。允许一个命令中重定向标准输入和输出。例如命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sort</span> <span class="token operator">&lt;</span>in <span class="token operator">&gt;</span>out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会使 sort 从文件 in 中得到输入，并把结果输出到 out 文件中。由于标准错误没有重定向，所以错误信息会直接打印到屏幕上。从标准输入读入，对其进行处理并将其写入到标准输出的程序称为 <code>过滤器</code>。</p><p>考虑下面由三个分开的命令组成的指令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sort</span> <span class="token operator">&lt;</span>in <span class="token operator">&gt;</span>temp<span class="token punctuation">;</span><span class="token function">head</span> <span class="token parameter variable">-30</span> <span class="token operator">&lt;</span>temp<span class="token punctuation">;</span><span class="token function">rm</span> temp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先会调用 sort 应用程序，从标准输入 in 中进行读取，并通过标准输出到 temp。当程序运行完毕后，shell 会运行 head ，告诉它打印前 30 行，并在标准输出(默认为终端)上打印。最后，temp 临时文件被删除。<strong>轻轻的，你走了，你挥一挥衣袖，不带走一片云彩</strong>。</p><p>命令行中的第一个程序通常会产生输出，在上面的例子中，产生的输出都不 temp 文件接收。然而，Linux 还提供了一个简单的命令来做这件事，例如下面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sort</span> <span class="token operator">&lt;</span>in <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面 <code>|</code> 称为竖线符号，它的意思是从 sort 应用程序产生的排序输出会直接作为输入显示，无需创建、使用和移除临时文件。由管道符号连接的命令集合称为<code>管道(pipeline)</code>。例如如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> cxuan *.c <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-30</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-5</span> <span class="token operator">&gt;</span>f00
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对任意以 <code>.t</code> 结尾的文件中包含 <code>cxuan</code> 的行被写到标准输出中，然后进行排序。这些内容中的前 30 行被 head 出来并传给 tail ，它又将最后 5 行传递给 foo。这个例子提供了一个管道将多个命令连接起来。</p><p>可以把一系列 shell 命令放在一个文件中，然后将此文件作为输入来运行。shell 会按照顺序对他们进行处理，就像在键盘上键入命令一样。包含 shell 命令的文件被称为 <code>shell 脚本(shell scripts)</code>。</p><blockquote><p>推荐一个 shell 命令的学习网站：https://www.shellscript.sh/</p></blockquote><p>shell 脚本其实也是一段程序，shell 脚本中可以对变量进行赋值，也包含循环控制语句比如 <strong>if、for、while</strong> 等，shell 的设计目标是让其看起来和 C 相似(There is no doubt that C is father)。由于 shell 也是一个用户程序，所以用户可以选择不同的 shell。</p><h3 id="linux-应用程序" tabindex="-1"><a class="header-anchor" href="#linux-应用程序" aria-hidden="true">#</a> Linux 应用程序</h3><p>Linux 的命令行也就是 shell，它由大量标准应用程序组成。这些应用程序主要有下面六种</p><ul><li>文件和目录操作命令</li><li>过滤器</li><li>文本程序</li><li>系统管理</li><li>程序开发工具，例如编辑器和编译器</li><li>其他</li></ul><p>除了这些标准应用程序外，还有其他应用程序比如 <strong>Web 浏览器、多媒体播放器、图片浏览器、办公软件和游戏程序等</strong>。</p><p>我们在上面的例子中已经见过了几个 Linux 的应用程序，比如 sort、cp、ls、head，下面我们再来认识一下其他 Linux 的应用程序。</p><p>我们先从几个例子开始讲起，比如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> a b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是将 a 复制一个副本为 b ，而</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> a b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是将 a 移动到 b ，但是删除原文件。</p><p>上面这两个命令有一些区别，<code>cp</code> 是将文件进行复制，复制完成后会有两个文件 a 和 b；而 <code>mv</code> 相当于是文件的移动，移动完成后就不再有 a 文件。<code>cat</code> 命令可以把多个文件内容进行连接。使用 <code>rm</code> 可以删除文件；使用 <code>chmod</code> 可以允许所有者改变访问权限；文件目录的的创建和删除可以使用 <code>mkdir</code> 和 <code>rmdir</code> 命令；使用 <code>ls</code> 可以查看目录文件，ls 可以显示很多属性，比如大小、用户、创建日期等；sort 决定文件的显示顺序</p><p>Linux 应用程序还包括过滤器 grep，<code>grep</code> 从标准输入或者一个或多个输入文件中提取特定模式的行；<code>sort</code> 将输入进行排序并输出到标准输出；<code>head</code> 提取输入的前几行；tail 提取输入的后面几行；除此之外的过滤器还有 <code>cut</code> 和 <code>paste</code>，允许对文本行的剪切和复制；<code>od</code> 将输入转换为 ASCII ；<code>tr</code> 实现字符大小写转换；<code>pr</code> 为格式化打印输出等。</p><p>程序编译工具使用 <code>gcc </code>；</p><p><code>make</code> 命令用于自动编译，这是一个很强大的命令，它用于维护一个大的程序，往往这类程序的源码由许多文件构成。典型的，有一些是 <code>header files 头文件</code>，源文件通常使用 <code>include</code> 指令包含这些文件，make 的作用就是跟踪哪些文件属于头文件，然后安排自动编译的过程。</p><p>下面列出了 POSIX 的标准应用程序</p><table><thead><tr><th>程序</th><th>应用</th></tr></thead><tbody><tr><td>ls</td><td>列出目录</td></tr><tr><td>cp</td><td>复制文件</td></tr><tr><td>head</td><td>显示文件的前几行</td></tr><tr><td>make</td><td>编译文件生成二进制文件</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>mkdir</td><td>创建目录</td></tr><tr><td>chmod</td><td>修改文件访问权限</td></tr><tr><td>ps</td><td>列出文件进程</td></tr><tr><td>pr</td><td>格式化打印</td></tr><tr><td>rm</td><td>删除一个文件</td></tr><tr><td>rmdir</td><td>删除文件目录</td></tr><tr><td>tail</td><td>提取文件最后几行</td></tr><tr><td>tr</td><td>字符集转换</td></tr><tr><td>grep</td><td>分组</td></tr><tr><td>cat</td><td>将多个文件连续标准输出</td></tr><tr><td>od</td><td>以八进制显示文件</td></tr><tr><td>cut</td><td>从文件中剪切</td></tr><tr><td>paste</td><td>从文件中粘贴</td></tr></tbody></table><h3 id="linux-内核结构" tabindex="-1"><a class="header-anchor" href="#linux-内核结构" aria-hidden="true">#</a> Linux 内核结构</h3><p>在上面我们看到了 Linux 的整体结构，下面我们从整体的角度来看一下 Linux 的内核结构</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202007/1515111-20200702125726032-209343471.png" alt=""></p><p>内核直接坐落在硬件上，内核的主要作用就是 I/O 交互、内存管理和控制 CPU 访问。上图中还包括了 <code>中断</code> 和 <code>调度器</code>，中断是与设备交互的主要方式。中断出现时调度器就会发挥作用。这里的低级代码停止正在运行的进程，将其状态保存在内核进程结构中，并启动驱动程序。进程调度也会发生在内核完成一些操作并且启动用户进程的时候。图中的调度器是 dispatcher。</p><blockquote><p>注意这里的调度器是 <code>dispatcher</code> 而不是 <code>scheduler</code>，这两者是有区别的</p><p>scheduler 和 dispatcher 都是和进程调度相关的概念，不同的是 scheduler 会从几个进程中随意选取一个进程；而 dispatcher 会给 scheduler 选择的进程分配 CPU。</p></blockquote><p>然后，我们把内核系统分为三部分。</p><ul><li>I/O 部分负责与设备进行交互以及执行网络和存储 I/O 操作的所有内核部分。</li></ul><p>从图中可以看出 I/O 层次的关系，最高层是一个<code>虚拟文件系统</code>，也就是说不管文件是来自内存还是磁盘中，都是经过虚拟文件系统中的。从底层看，所有的驱动都是字符驱动或者块设备驱动。二者的主要区别就是是否允许随机访问。网络驱动设备并不是一种独立的驱动设备，它实际上是一种字符设备，不过网络设备的处理方式和字符设备不同。</p><p>上面的设备驱动程序中，每个设备类型的内核代码都不同。字符设备有两种使用方式，有<code>一键式</code>的比如 vi 或者 emacs ，需要每一个键盘输入。其他的比如 shell ，是需要输入一行按回车键将字符串发送给程序进行编辑。</p><p>网络软件通常是模块化的，由不同的设备和协议来支持。大多数 Linux 系统在内核中包含一个完整的硬件路由器的功能，但是这个不能和外部路由器相比，路由器上面是<code>协议栈</code>，包括 TCP/IP 协议，协议栈上面是 socket 接口，socket 负责与外部进行通信，充当了门的作用。</p><p>磁盘驱动上面是 I/O 调度器，它负责排序和分配磁盘读写操作，以尽可能减少磁头的无用移动。</p><ul><li><p>I/O 右边的是内存部件，程序被装载进内存，由 CPU 执行，这里会涉及到虚拟内存的部件，页面的换入和换出是如何进行的，坏页面的替换和经常使用的页面会进行缓存。</p></li><li><p>进程模块负责进程的创建和终止、进程的调度、Linux 把进程和线程看作是可运行的实体，并使用统一的调度策略来进行调度。</p></li></ul><p>在内核最顶层的是系统调用接口，所有的系统调用都是经过这里，系统调用会触发一个 trap，将系统从用户态转换为内核态，然后将控制权移交给上面的内核部件。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivkbczxoj31l20t8al5.jpg" alt="image-20210716163352584"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivl4khz9j31d60h8mze.jpg" alt="image-20210716163433337"></p>`,94),i=[l];function t(c,o){return a(),s("div",null,i)}const r=e(d,[["render",t],["__file","linux-first.html.vue"]]);export{r as default};
