import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"码德需求-这不就是产品给我留的数学作业",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#码德需求-这不就是产品给我留的数学作业","aria-hidden":"true"},"#"),s(" 码德需求，这不就是产品给我留的数学作业！")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/t_ExuckR6Pd-H1Pa21HFyg",target:"_blank",rel:"noopener noreferrer"},h=t(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><img src="https://bugstack.cn/assets/images/2020/all-15-1.png" alt="图 15-1 写好代码的核心"></p><p><code>为什么你的代码一坨坨？其实来自你有那么多为什么你要这样写代码！</code></p><ul><li>为什么你的代码那么多for循环？因为没有合理的数据结构和算法逻辑。</li><li>为什么你的代码那么多ifelse？因为缺少设计模式对业务场景的运用。</li><li>为什么你的程序应用复杂对接困难？因为没有良好的系统架构拆分和规划。</li><li>为什么你的程序逻辑开发交付慢返工多？因为不具备某些业务场景的开发经验。</li><li>为什么你的程序展现都是看上去不说人话？因为没有产品思维都是程序员逻辑的体现。</li></ul><p><strong>最终</strong>，所有的这些不合理交织在一起，就是你能看到的一坨坨的代码！<strong>所以</strong>，要想把代码写好、写美，写到自己愿意反复欣赏，那么基本需要你有一定的：基础能力(<em>数据结构、算法逻辑、设计模式</em>)、应用能力(<em>系统架构、开发经验</em>)、拓展能力(<em>产品思维</em>)，这三方面综合起来才能更好的开发程序。</p><p><code>但可能杠精会喊，我就写个CRUD要什么逻辑、什么数据结构，还算法？</code> 但写CRUD并不一定业务需求是CRUD，只是你的知识面和技术深度只能把它设计成CRUD，用ifelse和for循环在一个类里反复粘贴复制罢了。</p><p>可能同样的需求交给别人手里，就会想的更多搭建的更加完善。就像：树上10只鸟开一枪还剩下几只，你会想到什么？比如：</p><ul><li>手抢是无声的吗？</li><li>枪声大吗？</li><li>这个城市打鸟犯不犯法？</li><li>确定那只鸟被打死了？</li><li>树上的鸟有没有聋子？</li><li>有没有被关在笼子里或者绑在树上的鸟？</li><li>旁边还有其他树吗？</li><li>有残疾或者飞不动的鸟吗？</li><li>有怀孕肚子里的鸟吗？</li><li>打鸟的人眼睛花没花？</li><li>保证是10只吗？</li><li>有没有那种不怕死的鸟？</li><li>会不会一枪打死两只或者更多？</li><li>所有的鸟都可以自由活动飞离树以外吗？</li><li>打死以后挂在树上还是掉下来了？</li></ul><p>所以，你还相信写程序只是简简单单的搞CRUD吗？接下来小傅哥再带着你搞几个例子看一看！</p><h2 id="二、代码就是对数学逻辑的具体实现" tabindex="-1"><a class="header-anchor" href="#二、代码就是对数学逻辑的具体实现" aria-hidden="true">#</a> 二、代码就是对数学逻辑的具体实现</h2><p>数据结构：数组、链表、红黑树 算法逻辑：哈希、扰动函数、负载因子、拉链寻址、</p><p>其实我们所开发的业务程序，哪怕是CRUD也都是对数学逻辑的具体实现过程。只不过简单的业务有简单的数学逻辑、复杂的业务有复杂的数学逻辑。数学逻辑是对数据结构的使用，(<code>例如：把大象装进冰箱分几步</code>)合理的数据的结构有利于数据逻辑的实现和复杂程度。</p><p>在我们常用的API中，HashMap 就是一个非常好的例子，既有非常好的数据结构的使用，也有强大的数学逻辑的实现。为此也让 HashMap 成为开发过程中非常常用的API，当然也成为面试过程中最常问的技术点。</p><p><img src="https://bugstack.cn/assets/images/2020/all-15-2.png" alt="图 15-2 HashMap中的数据结构和数学逻辑"></p><p><strong>重点</strong>，HashMap 中涉及的知识点非常多，包括数据结构的使用、数组、链表、红黑树，也包括算法逻辑的实现：哈希、扰动函数、负载因子、拉链寻址等等。而这些知识如果可以深入的搞清楚，是完全不需要死记硬背的，也不需要为了面试造火箭。就像如下问题：</p><ul><li>HashMap 怎么来的？因为有非常多业务开发中需要key、value的形式存放获取数据。</li><li>为什么要用哈希计算下标呢？因为哈希值求计算出的 key 具有低碰撞性。</li><li>为什么还要加扰动函数呀？因为扰动函数可以让数据散列的均匀，如果HashMap中的数据都碰撞成短链表，就会大大降低HashMap的索引性能。</li><li>为什么会有链表呢？因为无论如何都有会有节点碰撞的可能，碰撞后HashMap选择拉链寻址的方式存放数据。当然在 ThreadLocal 中采用的是斐波那契（Fibonacci）散列+开放寻址，感兴趣也可以看看。</li><li>为什么链表会转换树呢？因为时间复杂度问题，链表的时间复杂度是O(n)，越长越慢。</li><li>为什么树是红黑树呢？红黑树具有平衡性，也就是黑色节点是平衡的，平衡带来的效果就是控制整体树高，让时间复杂度最终保持在O(logn)，否则都是一丿的树就没意义了。</li><li>为什么有个负载因子呢？负载因子决定HashMap的高矮胖瘦，负载你可以理解成一辆卡车能装多少货，装的越多这一趟赚的也阅读风险也越高，装的越少跑的越快赚的也少。所以选择了适当大小0.75。</li><li>为什么JDK8优化了数据扩容时迁移？那不就是因为计算哈希值求下标耗费时间吗，已经找到了数学规律，直接迁移就可以了，提高性能。</li></ul><p><strong>看到了吗？</strong> HashMap完全就是对数据结构的综合使用，以及对数学逻辑的完美结合，才让我们有了非常好用的HashMap。这些知识的学习就可以技术迁移到我们自己业务开发中，把有些业务开发优化到非常不错的性能体现上。<em>同时你的代码也值得加薪！</em></p><p><strong>哈希下标</strong></p><p>图 15-2 中涉及到的下标位置存放的数据，不是胡乱写的。是按照 HashMap 中的计算逻辑找到的固定位置值。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// System.out.println(i + &quot; Idx：&quot; + idx);</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">62</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot; Idx：&quot;</span> <span class="token operator">+</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),v={href:"https://bugstack.cn/itstack/interview.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="三、得物-毒-8位随机抽奖码设计" tabindex="-1"><a class="header-anchor" href="#三、得物-毒-8位随机抽奖码设计" aria-hidden="true">#</a> 三、得物(毒) 8位随机抽奖码设计</h2><h3 id="_1-需求描述" tabindex="-1"><a class="header-anchor" href="#_1-需求描述" aria-hidden="true">#</a> 1. 需求描述</h3><p><img src="https://bugstack.cn/assets/images/2020/all-15-3.png" alt="图 15-3 模仿得物(毒) APP抽奖码需求"></p><p>图 15-3 是我们模拟得物APP中关于抽奖码需求的样式图，核心技术点包括：</p><ol><li>需要一个8位的随机码，全局唯一。</li><li>每个人可以获得多个这样的随机码，随机码阅读中奖概率越大。</li><li>随机码我们这里的设计与毒App的展现形式略有不同，组成包括：大写字母、小写字母和数字。</li></ol><p>在你没有看实现方案前，你可以先考虑下这样的唯一的随机码该怎样去生成。</p><h3 id="_2-实现方案" tabindex="-1"><a class="header-anchor" href="#_2-实现方案" aria-hidden="true">#</a> 2. 实现方案</h3><h4 id="_2-1-基于redis生成" tabindex="-1"><a class="header-anchor" href="#_2-1-基于redis生成" aria-hidden="true">#</a> 2.1 基于Redis生成</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> codeId <span class="token operator">=</span> <span class="token class-name">RedisUtil</span><span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">&quot;codeUUID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">UUID</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%08d&quot;</span><span class="token punctuation">,</span> codeId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 测试结果</span>
<span class="token number">00000001</span>
<span class="token number">00000002</span>
<span class="token number">00000003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>评分：⭐</li><li>方案：基于 Redis 的 incr 方法，全局自增从0开始，以上是伪代码。</li><li>点评：以上方案不可用，除了并不一定能保证全局自增和可靠性外，有一个很大的问题是你的顺序自增，把APP有多少人参加活动的数据暴露了。</li></ul><h4 id="_2-2-随机数生成" tabindex="-1"><a class="header-anchor" href="#_2-2-随机数生成" aria-hidden="true">#</a> 2.2 随机数生成</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuffer</span> code <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            code<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 65 ~ 90</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            code<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97 ~ 122</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            code<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 48 ~ 97</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 测试结果</span>
qvY0Fqrk
<span class="token number">8</span>uyehK3H
<span class="token class-name">U7z2v4qK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>评分：⭐⭐</li><li>方案：基于随机数生成8位随机码，相当于62^8次幂，有将近百万亿的随机数。</li><li>点评：此方案在很多业务场景中都有使用，但这里的实现还有一个问题，就是随性后的不唯一性，虽然我们知道这么大体量很难出现两个相同的。但如果随着业务运营日积月累的使用，终究会有两个一样的随机数，只要出现就会是客诉。所以还需要保证唯一性，可以在随机数中加入年或者月的标记，按照这个体量落库用防重方式保证唯一。<em>当然你还可以有其他的方式来保证唯一</em></li></ul><h4 id="_2-3-基于雪花算法" tabindex="-1"><a class="header-anchor" href="#_2-3-基于雪花算法" aria-hidden="true">#</a> 2.3 基于雪花算法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span>
        <span class="token char">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;G&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;I&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;J&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;K&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">,</span>
        <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;g&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;j&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;k&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span>
        <span class="token char">&#39;m&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;q&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;u&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;y&#39;</span><span class="token punctuation">,</span>
        <span class="token char">&#39;M&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;P&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;R&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;T&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;U&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;W&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;Y&#39;</span><span class="token punctuation">,</span>
        <span class="token char">&#39;Z&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SnowflakeIdWorker</span> idWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>idWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> code <span class="token operator">=</span> idWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> charPos <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> mask <span class="token operator">=</span> radix <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span><span class="token operator">--</span>charPos<span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>code <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        code <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>code <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> charPos<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> charPos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试结果</span>
uxdDQOG001
uxd8Uoj001
uxdERuG000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>评分：⭐⭐⭐</li><li>方案：基于雪花算法的核心目的是，生成随机串的本身就是唯一值，那么就不需要考虑重复性。只需要将唯一值转换为对应64进制的字符串组合就可以了。</li><li>点评：这里的思路很好，但有几个问题需要解决。首先是雪花算法的长度是18位，在转换为64位时会会有10位长的随机字符串组合，不满足要求。另外大写字母、小写字母和数字组合是62个，还缺少2个不满足64个，所以需要后面补充两位，但这两位生成的组合数需要废弃。<strong>那么</strong>，如果按照这个生成随机串且保证唯一的思路，就需要完善雪花算法，降低位数，在满足业务自身的情况下，控制生成长度。</li></ul><p><strong>实现方案</strong>，终究不会一次就完美，还需要不断的优化完善。除此之外也会有很多其他的思路，例如电商生成订单号的方案也可以考虑设计，另外你以为这就完事了？当你已经工作多年，那么你每一天其实都在解决技术问题也是数学问题，产品的需求也更像是数学作业！<code>加油数学老师！</code></p><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h2><ul><li>好的程序实现离不开数据结构的设计、逻辑算法的完善、设计模式的考量，再配合符合业务发展和程序设计的架构才能搭建出更加合理的程序。</li><li>在学习的过程中不要刻意去背答案、背套路，那不是理科内容的学习方式。只有你更多的去实践、去验证，让懂了就是真的懂，才更加舒心！</li><li>本篇又扯到了这，想问一句你是害怕35岁，还是害怕自己能力不及年龄增长？<em>想学就把知识学透，你骗不了面试官，只能骗自己！</em></li></ul>`,19);function g(f,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),p(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/t_ExuckR6Pd-H1Pa21HFyg"),p(a)])]),h,n("p",null,[s("如果你需要英文的，那么可以跑10万单词的字典表。关于HashMap的内容小傅哥已经整理到面经手册中，链接："),n("a",v,[s("面经手册 • 拿大厂Offer"),p(a)])]),b])}const _=e(i,[["render",g],["__file","2020-12-13-madexuqiu，zhebujiushichanpingeiwoliudeshuxuezuoye！.html.vue"]]);export{_ as default};
