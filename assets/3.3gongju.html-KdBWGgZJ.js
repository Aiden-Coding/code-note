import{_ as n,o as s,c as a,e as t}from"./app-3RcBQnkC.js";const p={},o=t(`<h1 id="_3-3-工具" tabindex="-1"><a class="header-anchor" href="#_3-3-工具" aria-hidden="true">#</a> 3.3 工具</h1><p><code>org.objectweb.asm.commons</code> 包中包含了一些预定义的方法适配器，可用于定义我们自己的适配器。这一节将介绍其中的三个，并用 3.2.4 节的 <strong>AddTimerAdapter</strong> 示例说明如何使用它们。我们还说说明，如何利用上一章看到的工具来简化方法生成或转换。</p><h2 id="_3-3-1-基本工具" tabindex="-1"><a class="header-anchor" href="#_3-3-1-基本工具" aria-hidden="true">#</a> 3.3.1 基本工具</h2><p>2.3 节介绍的工具也可用于方法。</p><ol><li><p>Type 许多字节代码指令，比如 <code>xLOAD</code>、<code>xADD</code> 或 <code>xRETURN</code> 依赖于将它们应用于哪种类型。Type 类提供了一个 getOpcode 方法，可用于为这些指令获取与一给定类型相对应的操作码。这一方法的参数是一个 int 类型的操作码，针对哪种类型调用该方法，则返回该哪种类型的操作码。例如 <strong>t.getOpcode(IMUL)</strong>，若 t 等于 <strong>Type.FLOAT_TYPE</strong>，则返回 <strong>FMUL</strong>。</p></li><li><p>TraceClassVisitor 这个类在上一章已经介绍过，它打印它所访问类的文本表示，包括类的方法的文本表示，其方式非常类似于这一章使用的方式。因此，可以将它用来跟踪在一个转换链中任意点处所生成或所转换方法的内容。例如：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span>classpath asm<span class="token punctuation">.</span>jar<span class="token operator">:</span>asm<span class="token operator">-</span>util<span class="token punctuation">.</span>jar \\ 
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>TraceClassVisitor</span> \\ 
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// class version 49.0 (49)</span>
<span class="token comment">// access flags 49</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Void</span> <span class="token punctuation">{</span>
<span class="token comment">// access flags 25</span>
<span class="token comment">// signature Ljava/lang/Class&lt;Ljava/lang/Void;&gt;;</span>
<span class="token comment">// declaration: java.lang.Class&lt;java.lang.Void&gt; public final static Ljava/lang/Class; TYPE</span>
<span class="token comment">// access flags 2 private &lt;init&gt;()V</span>
<span class="token constant">ALOAD</span> <span class="token number">0</span>
<span class="token constant">INVOKESPECIAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span> <span class="token class-name">RETURN</span>
<span class="token constant">MAXSTACK</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token constant">MAXLOCALS</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// access flags 8 static &lt;clinit&gt;()V</span>
<span class="token constant">LDC</span> <span class="token string">&quot;void&quot;</span>
<span class="token constant">INVOKESTATIC</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Class</span><span class="token punctuation">.</span>getPrimitiveClass <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token constant">PUTSTATIC</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Void</span><span class="token punctuation">.</span><span class="token constant">TYPE</span> <span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Class</span><span class="token punctuation">;</span> <span class="token class-name">RETURN</span>
<span class="token constant">MAXSTACK</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token constant">MAXLOCALS</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它说明如何生成一个静态块 static { ... }，也就是用<code>&lt;clinit&gt;</code>方法（用于 CLass INITializer）。注意，如果希望跟踪某一个方法在链中某一点处的内容，而不是跟踪类的所有内容，可以用 TraceMethodVisitor 代替 TraceClassVisitor（在这种情况下，必须显式指定后端；这里使用了一个 Textifier）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>debug <span class="token operator">&amp;&amp;</span> mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 如果必须跟踪此方法</span>
        <span class="token class-name">Printer</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Textifier</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMethodEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">print</span><span class="token punctuation">(</span>aPrintWriter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在其被访问后输出它</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceMethodVisitor</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyMethodAdapter</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一代码输出该方法经 MyMethodAdapter 转换过后的结果。</p><ol start="3"><li>CheckClassAdapter</li></ol><p>这个类也已经在上一章介绍过，它检查 ClassVisitor 方法的调用顺序是否适当，参数是否有效，所做的工作与 MethodVisitor 方法相同。因此，可用于检查 MethodVisitor API 在一个转换链中任意点的使用是否正常。和 TraceMethodVisitor 类似， 可以用CheckMethodAdapter 类来检查一个方法，而不是检查它的整个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>debug <span class="token operator">&amp;&amp;</span> mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 如果必须检查这个方法</span>
        mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckMethodAdapter</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyMethodAdapter</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一代码验证 MyMethodAdapter 正确地使用了 MethodVisitor API。但要注意，这一适配器并没有验证字节代码是正确的：例如，它没有检测出 ISTORE 1 ALOAD 1 是无效的。实际上，如果使用 CheckMethodAdapter 的其他构造器（见 Javadoc），并且在 visitMaxs中提供有效的 maxStack 和 maxLocals 参数，那这种错误是可以被检测出来的。</p><ol start="4"><li>ASMifier 这个类已经在上一章介绍过，也用于处理方法的内容。利用它，可以知道如何用 ASM 生成一些编译后的代码：只需要用 Java 编写相应的源代码，用 javac 编译它，然后用 <strong>ASMifier</strong> 访问这个类。你会得到 ASM 代码，以生成与源代码相对应的字节代码。</li></ol><h2 id="_3-3-2-analyzeradapter" tabindex="-1"><a class="header-anchor" href="#_3-3-2-analyzeradapter" aria-hidden="true">#</a> 3.3.2 AnalyzerAdapter</h2><p>这个方法适配器根据 visitFrame 中访问的帧，计算每条指令之前的栈映射帧。实际上， 如 3.1.5 节中的解释，visitFrame 仅在方法中的一些特定指令前调用，一方面是为了节省空间， 另一方面也是因为“其他帧可以轻松快速地由这些帧推导得出”。这就是这个适配器所做的工作。当然，它仅对那些包含预计算栈映射帧的类有效，也就是对于用 Java 6 或更高版本编译的有效（或者用一个使用 COMPUTE_FRAMES 选项的 ASM 适配器升级到 Java 6）。</p><p>在我们的 AddTimerAdapter 示例中，这个适配器可用于获得操作数栈恰在 RETURN 指令之前的大小，从而允许为 visitMaxs 中的 maxStack 计算一个最优的已转换值（事实上，在实践中并不建议使用这一方法，因为它的效率要远低于使用 COMPUTE_MAXS）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AddTimerMethodAdapter2</span> <span class="token keyword">extends</span> <span class="token class-name">AnalyzerAdapter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxStack<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddTimerMethodAdapter2</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LSUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxStack <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opcode <span class="token operator">&gt;=</span> <span class="token constant">IRETURN</span> <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LADD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            maxStack <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxStack<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxStack<span class="token punctuation">,</span> maxStack<span class="token punctuation">)</span><span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>stack 字段在 AnalyzerAdapter 类中定义，包含操作数栈中的类型。更准确地说，在一个 visitXxx Insn 中，且在调用被重写的方法之前，它会列出操作数栈正好在这条指令之前的状态。注意，必须调用被重写的方法，使 stack 字段被正确更新（因此，用 super 代替源代码中的 mv）。</p><p>或者，也可以通过调用超类中的方法来插入新指令：其方法就是这些指令的帧将由 AnalyzerAdapter 计算，由于这个适配器会根据它计算的帧来更新 visitMaxs 的参数，所以我们不需要自己来更新它们：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AddTimerMethodAdapter3</span> <span class="token keyword">extends</span> <span class="token class-name">AnalyzerAdapter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AddTimerMethodAdapter3</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span>
                                  <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LSUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opcode <span class="token operator">&gt;=</span> <span class="token constant">IRETURN</span> <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LADD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-3-localvariablessorter" tabindex="-1"><a class="header-anchor" href="#_3-3-3-localvariablessorter" aria-hidden="true">#</a> 3.3.3 LocalVariablesSorter</h2><p>这个方法适配器将一个方法中使用的局部变量按照它们在这个方法中的出现顺序重新进行编号。例如，在一个有两个参数的方法中，第一个被读取或写入且索引大于或等于 3 的局部变量 （前三个局部变量对应于 this 及两个方法参数，因此不会发生变化）被赋予索引 3，第二个被赋予索引 4，以此类推。在向一个方法中插入新的局部变量时，这个适配器很有用。没有这个适配 器，就需要在所有已有局部变量之后添加新的局部变量，但遗憾的是，在 visitMaxs 中，要直到方法的末尾处才能知道这些局部变量的编号。</p><p>为说明如何使用这个适配器，假定我们希望使用一个局部变量来实现 AddTimerAdapter：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> timer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer <span class="token operator">+=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一点很容易做到：只需扩展 LocalVariablesSorter ，并使用这个类中定义的 newLocal 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AddTimerMethodAdapter4</span> <span class="token keyword">extends</span> <span class="token class-name">LocalVariablesSorter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> time<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddTimerMethodAdapter4</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> access<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        time <span class="token operator">=</span> <span class="token function">newLocal</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">LONG_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">LSTORE</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opcode <span class="token operator">&gt;=</span> <span class="token constant">IRETURN</span> <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">LLOAD</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LSUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LADD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span>maxStack <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在对局部变量重新编号后，与该方法相关联的原帧变为无效，在插入新局部变量后更不必说了。幸好，还是可能避免从头重新计算这些帧的：事实上，并不存在必须添加或删除的帧， 只需对原帧中局部变量的内容进行重新排序， 为转换后的方法获得帧就“足够” 了。 LocalVariablesSorter 会自动负责完成。如果还需要为你的方法适配器进行增量栈映射帧更新，可以由这个类的源代码中获得灵感。</p><p>前面曾经说过，这个类的原版本中存在关于最糟情景下 maxStack 取值的问题，在上面可以看出，使用局部变量并不能解决这个问题。如果希望用 AnalyzerAdapter 解决这个问题， 除了 LocalVariablesSorter 之外，必须通过委托使用这些适配器，而不是通过继承（因为不可能存在多个继承）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AddTimerMethodAdapter5</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalVariablesSorter</span> lvs<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">AnalyzerAdapter</span> aa<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> time<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxStack<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddTimerMethodAdapter5</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mv<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        time <span class="token operator">=</span> lvs<span class="token punctuation">.</span><span class="token function">newLocal</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">LONG_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">LSTORE</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxStack <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opcode <span class="token operator">&gt;=</span> <span class="token constant">IRETURN</span> <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">LLOAD</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LSUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LADD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            maxStack <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> maxStack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxStack<span class="token punctuation">,</span> maxStack<span class="token punctuation">)</span><span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为使用这 个适配器 ，必须将 一个 LocalVariablesSorter 链接到一 个 AnalyzerAdapter，再将它自身连接到你的适配器：第一个适配器将对局部变量排序，并相应地更新帧，分析适配器将计算中间帧，在此过程中会考虑上一个适配器中完成的重新编号，你的适配器将可以访问这些重新编号的中间帧。这个链接可以在 visitMethod 中构造如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mv<span class="token operator">=</span>cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span>name<span class="token punctuation">,</span>desc<span class="token punctuation">,</span>signature<span class="token punctuation">,</span>exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isInterface <span class="token operator">&amp;&amp;</span> mv<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;init&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">AddTimerMethodAdapter5</span> at <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddTimerMethodAdapter5</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    at<span class="token punctuation">.</span>aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnalyzerAdapter</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span>access<span class="token punctuation">,</span>name<span class="token punctuation">,</span>desc<span class="token punctuation">,</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>
    at<span class="token punctuation">.</span>lvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalVariablesSorter</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span>desc<span class="token punctuation">,</span>at<span class="token punctuation">.</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> at<span class="token punctuation">.</span>lvs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-4-adviceadapter" tabindex="-1"><a class="header-anchor" href="#_3-3-4-adviceadapter" aria-hidden="true">#</a> 3.3.4 AdviceAdapter</h2><p>这个方法适配器是一个抽象类，可用于在一个方法的开头以及恰在任意 RETURN 或 ATHROW 指令之前插入代码。它的主要好处就是对于构造器也是有效的，在构造器中，不能将代码恰好插入到构造器的开头，而是插在对超构造器的调用之后。事实上，这个适配器的大多数代码都专门用于检测对这个超构造器的调用。</p><p>仔细研究 3.2.4 节中的 AddTimerAdapter 类将会看到，AddTimerMethodAdapter 因为这一原因而未被用于构造器。这一方法适配器从 AdviceAdapter 继承而来，可以对其进行改 进，以便对于构造器同样有效（注意，AdviceAdapter 继承自 LocalVariablesSorter， 所以也可以轻松使用一个局部变量）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AddTimerMethodAdapter6</span> <span class="token keyword">extends</span> <span class="token class-name">AdviceAdapter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AddTimerMethodAdapter6</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> mv<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMethodEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LSUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMethodExit</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LADD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span>maxStack <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","3.3gongju.html.vue"]]);export{k as default};
