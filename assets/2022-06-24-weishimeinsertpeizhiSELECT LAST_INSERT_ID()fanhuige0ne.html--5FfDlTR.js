import{_ as e,r as o,o as p,c,a as n,b as s,d as t,e as i}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"为什么-insert-配置-select-last-insert-id-返回个0呢",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么-insert-配置-select-last-insert-id-返回个0呢","aria-hidden":"true"},"#"),s(' 为什么 insert 配置 "SELECT LAST_INSERT_ID()" 返回个0呢？')],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("h2",{id:"一、前言-一个bug",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言-一个bug","aria-hidden":"true"},"#"),s(" 一、前言：一个Bug")],-1),g=n("p",null,[n("code",null,"没想到一个Bug，竟然搞我两次！")],-1),v=n("p",null,"我大抵是卷上瘾了，横竖都睡不着，坐起来身来打开Mac和外接显示器，这Bug没有由来，默然看着打印异常的屏幕，一个是我的，另外一个也是我的。",-1),h=n("hr",null,null,-1),b={href:"https://bugstack.cn/md/spring/develop-spring/2021-05-16-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Spring%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://bugstack.cn/md/spring/develop-mybatis/2022-03-20-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Mybatis%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},_=i(`<p>今天这个问题主要体现在大家平常用的Mybatis，在插入数据的时候，我们可以把库表索引的返回值通过入参对象返回回来。但是通过我自己手写的Mybatis，每次返回来的都是0，而不是最后插入库表的索引值。<em>因为是手写的，不是直接使用Mybatis，所以我会从文件的解析、对象的映射、SQL的查询、结果的封装等一直排查下去，但竟然问题都不在这？！</em></p><p><img src="https://bugstack.cn/images/article/spring/source-code-220624-01.png" alt=""></p><ul><li>就是这个 selectKey 的配置，在执行插入SQL后，开始执行获取最后的索引值。</li><li>通常只要配置的没问题，返回对象中也有对应的 id 字段，那么就可以正确的拿到返回值了。PS：问题就出现在这里，小傅哥手写的 Mybatis 竟然只难道返回一个0！</li></ul><h2 id="二、分析-诊断异常" tabindex="-1"><a class="header-anchor" href="#二、分析-诊断异常" aria-hidden="true">#</a> 二、分析：诊断异常</h2><h3 id="_1-源码分析" tabindex="-1"><a class="header-anchor" href="#_1-源码分析" aria-hidden="true">#</a> 1. 源码分析</h3><p>可能大部分研发伙伴没有阅读过 Mybatis 源码，所以可能不太清楚这里发生了什么，小傅哥这里给大家画张图，告诉你发生了什么才让返回的结果为0的。</p><p><img src="https://bugstack.cn/images/article/spring/source-code-220624-02.png" alt=""></p><ul><li><p>Mybatis 的处理过程可以分为两个大部分来看，一部分是解析，另外一部分是使用。解析的时候把 Mapper XML 中的 insert 标签语句解析出来，同时解析 selectKey 标签。最终解析完成后，把解析的语句信息使用 MappedStatement 映射语句类存放起来。便于后续在 DefaultSqlSession 执行操作的时候，可以从 Configuration 配置项中获取出来使用。</p></li><li><p>那么这里有一个非常重要的点，就是执行 insert 插入的时候，里面还包含了一句查询的操作。那也就是说，我们会在一次 Insert 中，包含两条执行语句。<strong>重点</strong>：bug就发生在这里，为什么呢？因为最开始这两条语句执行的时候，在获取链接的时候，每一条都是获取一个新的链接，那么也就是说，insert xxx、select LAST_INSERT_ID() 在两个 connection 连接执行时，其实是不对的，没法获取到插入后的索引 ID，只有在一个链接或者一个事务下(一次 commit)才能有事务的特性，获取插入数据后的自增ID。</p></li><li><p>而因为这部分最开始手写 JdbcTransaction 实现 Transaction 接口获取连接的时候，每一次都是新的链接，代码块如下； <img src="https://bugstack.cn/images/article/spring/source-code-220624-03.png" alt=""></p><ul><li>这里的链接获取，最开始没有 if null 的判断，每次都是直接获取链接，所以这种非一个链接下的两条 SQL 操作，所以必然不会获得到正确的结果，相当于只是单独执行 <code>SELECT LAST_INSERT_ID()</code> 所以最终的查询结果为 0 了就！<em>你可以测试把这条语句复制到 SQL查询工具中执行</em></li></ul></li></ul><h3 id="_2-借助插件" tabindex="-1"><a class="header-anchor" href="#_2-借助插件" aria-hidden="true">#</a> 2. 借助插件</h3><p><strong>如果说找不到可能发生异常的地方怎么办？</strong></p><p>其实很多时候我们排查的不一定是我们的代码，不清楚这个过程都调用了哪些模块，也不太清楚都包括了哪些调用流程。其实这个时候可以结合 IDEA Plugin：<code>sequence Diagram</code> 它可以帮助你创建出一个 UML 流程图帮助你分析代码执行流程。</p><p>但这里我们不能直接使用最外层获取 Mapper 调用 insert 看流程，因为这样的流程生成出来是有缺失的。如下：</p><p><strong>测试代码：普通调用</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 获取映射器对象</span>
    <span class="token class-name">IActivityDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">IActivityDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Activity</span> activity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setActivityId</span><span class="token punctuation">(</span><span class="token number">10004L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setActivityName</span><span class="token punctuation">(</span><span class="token string">&quot;测试活动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setActivityDesc</span><span class="token punctuation">(</span><span class="token string">&quot;测试数据插入&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token string">&quot;xiaofuge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 测试验证</span>
    <span class="token class-name">Integer</span> res <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：count：{} idx：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/images/article/spring/source-code-220624-05.png" alt=""></p><ul><li>这样的测试案例直接使用插件 <code>sequence Diagram</code> 生成出来的流程图是有些粗的，只能作为参考，但不能看到内部流程。因为很多流程都被 Mybatis 给封装了，所以这样不能看到细节。</li></ul><p><strong>测试代码：细节调用</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_insert_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析 XML</span>
    <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config-datasource.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">XMLConfigBuilder</span> xmlConfigBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> xmlConfigBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 DefaultSqlSession</span>
    <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span><span class="token punctuation">.</span><span class="token constant">READ_COMMITTED</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建执行器</span>
    <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行查询：默认是一个集合参数</span>
    <span class="token class-name">Activity</span> activity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setActivityId</span><span class="token punctuation">(</span><span class="token number">10004L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setActivityName</span><span class="token punctuation">(</span><span class="token string">&quot;测试活动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setActivityDesc</span><span class="token punctuation">(</span><span class="token string">&quot;测试数据插入&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activity<span class="token punctuation">.</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token string">&quot;xiaofuge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;cn.bugstack.mybatis.test.dao.IActivityDao.insert&quot;</span><span class="token punctuation">,</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">&quot;cn.bugstack.mybatis.test.dao.IActivityDao.insert!selectKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：count：{} idx：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/images/article/spring/source-code-220624-06.png" alt=""></p><ul><li>当小傅哥把整个 Mybatis 的调用，自己用代码分块调用后，就能看到每一步的细节了。PS：这里是一个小技巧</li><li>所以在你测试这部分代码的时候，把这段单元测试添加后，在使用插件 <code>sequence Diagram</code> 生成出来的流程图，就能看清楚的看到每一步的处理过程和步骤。PS：因为相当于我们把 SQL 的执行拆解出来了，所以在不被封装的情况下就可以展示全部调用过程。</li><li>那么这里就能看到 JdbcTransaction 对数据源的获取操作，我们点击每一个 UML 创建出的节点，都可以直接定位到具体的代码中，也就借助这个工具，更容易分析出问题所在了。<strong>当然，这里面也有很多技巧和编程经验的积累，不是一把西瓜刀，就谁都能问人家保熟不。</strong></li></ul><h2 id="三、震惊-同一个坑" tabindex="-1"><a class="header-anchor" href="#三、震惊-同一个坑" aria-hidden="true">#</a> 三、震惊：同一个坑</h2><p>😂 但其实就这么一个链接的问题，在小傅哥手写Spring中也同样遇到过。</p><p><img src="https://bugstack.cn/images/article/spring/source-code-220624-04.png" alt=""></p><p>在 Spring 中有一部分是关于事务的处理，其实这些事务的操作也是对 JDBC 的包装操作，依赖于数据源获得的链接来管理事务。而我们通常使用 Spring 也是结合着 Mybatis 配置上数据源的方式进行使用，那么在一个事务下操作多个 SQL 语句的时候，是怎么获得同一个链接的呢。<em>因为从上面👆🏻的案例中，我们得知保证事务的特性，需要在同一个链接下，即使是操作多条SQL</em></p><p>由于多个SQL的操作，已经是相当于每次都获取一个新的 Session 有一个新的链接从连接池中获得，但为了能达到事务的特性，所以在需要有事务操作下的多个 SQL 前需要开启事务操作，无论是手动还是注解。</p><p>而这个事务的开启动作处理做一些事务传播行为和隔离级别的限制，其实更重要的是让多个 SQL 的执行获取的链接，需要是同一个。所以这里就引入了 ThreadLocal 基于它在同一个线程操作下保存信息的同步特性，其实这里的从事务下获取的链接，其实就是保存到 TransactionSynchronizationManager#resources 属性中的。</p><p>虽然就这么一小块内容，但在小傅哥最开始手写Spring的时候，也是给漏下了。直到到测试的时候，才发现链接发现事务总是不成功，最初还以为是整个切面逻辑没有切进去或者是我的操作方式有误。直到逐步排查调试代码，发现原来多个SQL的执行竟然不是获得的同一个链接，所以也就没法让事务生效。</p><h2 id="四、常见-事务失效" tabindex="-1"><a class="header-anchor" href="#四、常见-事务失效" aria-hidden="true">#</a> 四、常见：事务失效</h2><p>可能就是这么一个小小的链接问题，有时候就会引起一堆的异常，如果说我们没有学习过源码，那么可能也不知道这样的问题到底是如何发生的。所以往往深入的研究和探索，才能让你解释一个问题的时候，更加简单直接。</p><p>那么你说，事务失效的原因还有哪些？- 分享一些常见，如果你还有遇到其他的，可以发到评论区一起看看。</p>`,30),S={href:"https://dev.mysql.com/doc/refman/8.0/en/storage-engine-setting.html",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"方法不是 public 的：来自 Spring 官方文档【When using proxies, you should apply the @Transactional annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings. Consider the use of AspectJ (see below) if you need to annotate non-public methods.】@Transactional 只能用于 public 的方法上，否则事务会失效，如果要用在非 public 方法上，可以开启 AspectJ 代理模式。",-1),E=n("li",null,[s("没有被 Spring 管理："),n("code",null,"// @Service - 这里被注释掉了 public class OrderServiceImpl implements OrderService { @Transactional public void placeOrder(Order order) { // ... } }")],-1),B=n("li",null,[s("数据源没有配置事务管理器：一般来自于自研的数据库路由组件 "),n("code",null,"@Bean public PlatformTransactionManager transactionManager(DataSource dataSource) { return new DataSourceTransactionManager(dataSource); }")],-1),A=n("li",null,[s("异常被吞了。catch 后直接吃了，事务异常无法回滚。同时要配置上对应的异常 "),n("code",null,"@Transactional(rollbackFor = Exception.class)")],-1),q=n("h2",{id:"五、总结-学习经验",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、总结-学习经验","aria-hidden":"true"},"#"),s(" 五、总结：学习经验")],-1),D=n("p",null,"很多类似这样的技术问题，都是来自于小傅哥对源码的学习，最开始是遇到问题的时候去翻看源码，虽然很多时候也很难把整个逻辑捋顺，但一点点的积累确实会让研发人员对技术有更加夯实的认知。",-1),T=n("p",null,"那么在现在我之所以去手写Spring、手写Mybatis，也是希望通过把这样的知识全部整理处理，从中学习复杂逻辑的设计方案、设计原则和如何运用设计模式解决复杂场景的问题。PS：通常我们的业务代码复杂度很难到这个程度，所以在见过”天“后，以后所承接的业务就很容易做设计了。",-1),x=n("p",null,"另外就是对各类技术细节的把控，以及积累于这样的经验把相关技术设计运用到一些类似 SpringBoot Starter 等的开发，只有类似这样的广度、高度、深度，才能真的把个人的研发能力提升起来。PS：也是为了在技术的路上走的更远，无论是高级开发、架构师、CTO！",-1),M=n("p",null,[n("strong",null,"欢迎一起学习手写源码和实战项目！"),s(" 适合：有需要校招、面试、晋升，想提高自己的技术深度，为自己的职业生涯续期，可以长稳发展，完善自己的技术体系，奔着高级开发和架构师路线的研发伙伴。")],-1),I=n("p",null,[n("img",{src:"https://bugstack.cn/images/article/about/about-220605-06.png?raw=true",alt:"校招、面试、晋升，加入小傅哥的私有技术朋友圈！"})],-1);function L(C,w){const a=o("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,m,g,v,h,n("p",null,[s("最近可能是卷源码，卷上瘾了。先是"),n("a",b,[s("《手写Spring》"),t(a)]),s("，再是"),n("a",f,[s("《手写Mybatis》"),t(a)]),s("，但没想到一个小问题竟然搞了我2次！")]),_,n("ol",null,[n("li",null,[s("数据库引擎不支持事务：这里以 MySQL 为例，其 MyISAM 引擎是不支持事务操作的，InnoDB 才是支持事务的引擎，一般要支持事务都会使用 InnoDB。"),n("a",S,[s("https://dev.mysql.com/doc/refman/8.0/en/storage-en..."),t(a)]),s(" 从 MySQL 5.5.5 开始的默认存储引擎是：InnoDB，之前默认的都是：MyISAM，所以这点要值得注意，底层引擎不支持事务再怎么搞都是白搭。")]),y,E,B,A]),q,D,T,x,M,I])}const N=e(l,[["render",L],["__file","2022-06-24-weishimeinsertpeizhiSELECT LAST_INSERT_ID()fanhuige0ne.html.vue"]]);export{N as default};
