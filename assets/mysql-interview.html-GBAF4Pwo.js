import{_ as e,o as d,c as i,e as l}from"./app-3RcBQnkC.js";const a={},o=l(`<h1 id="mysql-常见面试题" tabindex="-1"><a class="header-anchor" href="#mysql-常见面试题" aria-hidden="true">#</a> MySQL 常见面试题</h1><ul><li><a href="#mysql-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98">MySQL 常见面试题</a><ul><li><a href="#%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%BA%E5%88%AB%E4%BC%98%E5%8A%BF%E6%AF%94%E8%BE%83">非关系型数据库和关系型数据库区别，优势比较</a></li><li><a href="#mysql-%E4%BA%8B%E5%8A%A1%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7">MySQL 事务四大特性</a></li><li><a href="#mysql-%E5%B8%B8%E8%A7%81%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E5%8C%BA%E5%88%AB">MySQL 常见存储引擎的区别</a><ul><li><a href="#myisam-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E7%89%B9%E7%82%B9">MyISAM 存储引擎的特点</a></li><li><a href="#innodb-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E7%89%B9%E7%82%B9">InnoDB 存储引擎的特点</a></li><li><a href="#myisam-%E5%92%8C-innodb-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E5%AF%B9%E6%AF%94">MyISAM 和 InnoDB 存储引擎的对比</a></li></ul></li><li><a href="#mysql-%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84">MySQL 基础架构</a><ul><li><a href="#%E8%BF%9E%E6%8E%A5%E5%99%A8">连接器</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98">查询缓存</a></li><li><a href="#%E5%88%86%E6%9E%90%E5%99%A8">分析器</a></li><li><a href="#%E4%BC%98%E5%8C%96%E5%99%A8">优化器</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E5%99%A8">执行器</a></li></ul></li><li><a href="#sql-%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F">SQL 的执行顺序</a><ul><li><a href="#from-%E8%BF%9E%E6%8E%A5">FROM 连接</a></li><li><a href="#on-%E8%BF%87%E6%BB%A4">ON 过滤</a></li><li><a href="#join-%E8%BF%9E%E6%8E%A5">JOIN 连接</a></li><li><a href="#where-%E8%BF%87%E6%BB%A4">WHERE 过滤</a></li><li><a href="#group-by">GROUP BY</a></li><li><a href="#having">HAVING</a></li><li><a href="#select">SELECT</a></li><li><a href="#distinct">DISTINCT</a></li><li><a href="#order-by">ORDER BY</a></li></ul></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BD%95%E6%97%B6%E5%88%A0%E9%99%A4%E4%B8%B4%E6%97%B6%E8%A1%A8">什么是临时表，何时删除临时表</a></li><li><a href="#mysql-%E5%B8%B8%E8%A7%81%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B">MySQL 常见索引类型</a></li><li><a href="#varchar-%E5%92%8C-char-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">varchar 和 char 的区别和使用场景</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-%E5%86%85%E8%BF%9E%E6%8E%A5%E5%A4%96%E8%BF%9E%E6%8E%A5%E4%BA%A4%E5%8F%89%E8%BF%9E%E6%8E%A5%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF">什么是 内连接、外连接、交叉连接、笛卡尔积</a></li><li><a href="#%E8%B0%88%E8%B0%88-sql-%E4%BC%98%E5%8C%96%E7%9A%84%E7%BB%8F%E9%AA%8C">谈谈 SQL 优化的经验</a></li></ul></li></ul><p>MySQL 一直是本人很薄弱的部分，后面会多输出 MySQL 的文章贡献给大家，毕竟 MySQL 涉及到数据存储、锁、磁盘寻道、分页等操作系统概念，而且互联网对 MySQL 的注重程度是不言而喻的，后面要加紧对 MySQL 的研究。写的如果不好，还请大家见谅。</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418093828904-1212164161.png" alt=""></p><h2 id="非关系型数据库和关系型数据库区别-优势比较" tabindex="-1"><a class="header-anchor" href="#非关系型数据库和关系型数据库区别-优势比较" aria-hidden="true">#</a> 非关系型数据库和关系型数据库区别，优势比较</h2><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418093837627-1573928470.png" alt=""></p><p>非关系型数据库（感觉翻译不是很准确）称为 <code>NoSQL</code>，也就是 Not Only SQL，不仅仅是 SQL。非关系型数据库不需要写一些复杂的 SQL 语句，其内部存储方式是以 <code>key-value</code> 的形式存在可以把它想象成电话本的形式，每个人名（key）对应电话（value）。常见的非关系型数据库主要有 <strong>Hbase、Redis、MongoDB</strong> 等。非关系型数据库不需要经过 SQL 的重重解析，所以性能很高；非关系型数据库的可扩展性比较强，数据之间没有耦合性，遇见需要新加字段的需求，就直接增加一个 key-value 键值对即可。</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418093847387-358018394.png" alt=""></p><p>关系型数据库以<code>表格</code>的形式存在，以<code>行和列</code>的形式存取数据，关系型数据库这一系列的行和列被称为表，无数张表组成了<code>数据库</code>，常见的关系型数据库有 <strong>Oracle、DB2、Microsoft SQL Server、MySQL</strong>等。关系型数据库能够支持复杂的 SQL 查询，能够体现出数据之间、表之间的关联关系；关系型数据库也支持事务，便于提交或者回滚。</p><p>它们之间的劣势都是基于对方的优势来满足的。</p><h2 id="mysql-事务四大特性" tabindex="-1"><a class="header-anchor" href="#mysql-事务四大特性" aria-hidden="true">#</a> MySQL 事务四大特性</h2><p>一说到 MySQL 事务，你肯定能想起来四大特性：<code>原子性</code>、<code>一致性</code>、<code>隔离性</code>、<code>持久性</code>，下面再对这事务的四大特性做一个描述</p><ul><li><code>原子性(Atomicity)</code>: 原子性指的就是 MySQL 中的包含事务的操作要么<code>全部成功</code>、要么全部<code>失败回滚</code>，因此事务的操作如果成功就必须要全部应用到数据库，如果操作失败则不能对数据库有任何影响。</li></ul><blockquote><p>这里涉及到一个概念，什么是 MySQL 中的事务？</p><p>事务是一组操作，组成这组操作的各个单元，要不全都成功要不全都失败，这个特性就是事务。</p><p>在 MySQL 中，事务是在引擎层实现的，只有使用 <code>innodb</code> 引擎的数据库或表才支持事务。</p></blockquote><ul><li><p><code>一致性(Consistency)</code>：一致性指的是一个事务在执行前后其状态一致。比如 A 和 B 加起来的钱一共是 1000 元，那么不管 A 和 B 之间如何转账，转多少次，事务结束后两个用户的钱加起来还得是 1000，这就是事务的一致性。</p></li><li><p><code>持久性(Durability)</code>: 持久性指的是一旦事务提交，那么发生的改变就是永久性的，即使数据库遇到特殊情况比如故障的时候也不会产生干扰。</p></li><li><p><code>隔离性(Isolation)</code>：隔离性需要重点说一下，当多个事务同时进行时，就有可能出现<code>脏读(dirty read)</code>、<code>不可重复读(non-repeatable read)</code>、<code>幻读(phantom read)</code> 的情况，为了解决这些并发问题，提出了隔离性的概念。</p></li></ul><blockquote><p>脏读：事务 A 读取了事务 B 更新后的数据，但是事务 B 没有提交，然后事务 B 执行回滚操作，那么事务 A 读到的数据就是脏数据</p><p>不可重复读：事务 A 进行多次读取操作，事务 B 在事务 A 多次读取的过程中执行更新操作并提交，提交后事务 A 读到的数据不一致。</p><p>幻读：事务 A 将数据库中所有学生的成绩由 A -&gt; B，此时事务 B 手动插入了一条成绩为 A 的记录，在事务 A 更改完毕后，发现还有一条记录没有修改，那么这种情况就叫做出现了幻读。</p></blockquote><p>SQL的隔离级别有四种，它们分别是<code>读未提交(read uncommitted)</code>、<code>读已提交(read committed)</code>、<code>可重复读(repetable read)</code> 和 <code>串行化(serializable)</code>。下面分别来解释一下。</p><p>读未提交：读未提交指的是一个事务在提交之前，它所做的修改就能够被其他事务所看到。</p><p>读已提交：读已提交指的是一个事务在提交之后，它所做的变更才能够让其他事务看到。</p><p>可重复读：可重复读指的是一个事务在执行的过程中，看到的数据是和启动时看到的数据是一致的。未提交的变更对其他事务不可见。</p><p>串行化：顾名思义是对于同一行记录，<code>写</code>会加<code>写锁</code>，<code>读</code>会加<code>读锁</code>。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p><p>这四个隔离级别可以解决脏读、不可重复读、幻象读这三类问题。总结如下</p><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>允许</td><td>允许</td><td>允许</td></tr><tr><td>读已提交</td><td>不允许</td><td>允许</td><td>允许</td></tr><tr><td>可重复读</td><td>不允许</td><td>不允许</td><td>允许</td></tr><tr><td>串行化</td><td>不允许</td><td>不允许</td><td>不允许</td></tr></tbody></table><p>其中隔离级别由低到高是：读未提交 &lt; 读已提交 &lt; 可重复读 &lt; 串行化</p><p>隔离级别越高，越能够保证数据的完整性和一致性，但是对并发的性能影响越大。大多数数据库的默认级别是<code>读已提交(Read committed)</code>，比如 Sql Server、Oracle ，但是 MySQL 的默认隔离级别是 <code>可重复读(repeatable-read)</code>。</p><h2 id="mysql-常见存储引擎的区别" tabindex="-1"><a class="header-anchor" href="#mysql-常见存储引擎的区别" aria-hidden="true">#</a> MySQL 常见存储引擎的区别</h2><p>MySQL 常见的存储引擎，可以使用</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW ENGINES
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令，来列出所有的存储引擎</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418093907206-1208856997.png" alt=""></p><p>可以看到，InnoDB 是 MySQL 默认支持的存储引擎，支持<strong>事务、行级锁定和外键</strong>。</p><h3 id="myisam-存储引擎的特点" tabindex="-1"><a class="header-anchor" href="#myisam-存储引擎的特点" aria-hidden="true">#</a> MyISAM 存储引擎的特点</h3><p>在 5.1 版本之前，MyISAM 是 MySQL 的默认存储引擎，MyISAM 并发性比较差，使用的场景比较少，主要特点是</p><ul><li><p>不支持<code>事务</code>操作，ACID 的特性也就不存在了，这一设计是为了性能和效率考虑的。</p></li><li><p>不支持<code>外键</code>操作，如果强行增加外键，MySQL 不会报错，只不过外键不起作用。</p></li><li><p>MyISAM 默认的锁粒度是<code>表级锁</code>，所以并发性能比较差，加锁比较快，锁冲突比较少，不太容易发生死锁的情况。</p></li><li><p>MyISAM 会在磁盘上存储三个文件，文件名和表名相同，扩展名分别是 <code>.frm(存储表定义)</code>、<code>.MYD(MYData,存储数据)</code>、<code>MYI(MyIndex,存储索引)</code>。这里需要特别注意的是 MyISAM 只缓存<code>索引文件</code>，并不缓存数据文件。</p></li><li><p>MyISAM 支持的索引类型有 <code>全局索引(Full-Text)</code>、<code>B-Tree 索引</code>、<code>R-Tree 索引</code></p><p>Full-Text 索引：它的出现是为了解决针对文本的模糊查询效率较低的问题。</p><p>B-Tree 索引：所有的索引节点都按照平衡树的数据结构来存储，所有的索引数据节点都在叶节点</p><p>R-Tree索引：它的存储方式和 B-Tree 索引有一些区别，主要设计用于存储空间和多维数据的字段做索引,目前的 MySQL 版本仅支持 geometry 类型的字段作索引，相对于 BTREE，RTREE 的优势在于范围查找。</p></li><li><p>数据库所在主机如果宕机，MyISAM 的数据文件容易损坏，而且难以恢复。</p></li><li><p>增删改查性能方面：SELECT 性能较高，适用于查询较多的情况</p></li></ul><h3 id="innodb-存储引擎的特点" tabindex="-1"><a class="header-anchor" href="#innodb-存储引擎的特点" aria-hidden="true">#</a> InnoDB 存储引擎的特点</h3><p>自从 MySQL 5.1 之后，默认的存储引擎变成了 InnoDB 存储引擎，相对于 MyISAM，InnoDB 存储引擎有了较大的改变，它的主要特点是</p><ul><li>支持事务操作，具有事务 ACID 隔离特性，默认的隔离级别是<code>可重复读(repetable-read)</code>、通过MVCC（并发版本控制）来实现的。能够解决<code>脏读</code>和<code>不可重复读</code>的问题。</li><li>InnoDB 支持外键操作。</li><li>InnoDB 默认的锁粒度<code>行级锁</code>，并发性能比较好，会发生死锁的情况。</li><li>和 MyISAM 一样的是，InnoDB 存储引擎也有 <code>.frm文件存储表结构</code> 定义，但是不同的是，InnoDB 的表数据与索引数据是存储在一起的，都位于 B+ 数的叶子节点上，而 MyISAM 的表数据和索引数据是分开的。</li><li>InnoDB 有安全的日志文件，这个日志文件用于恢复因数据库崩溃或其他情况导致的数据丢失问题，保证数据的一致性。</li><li>InnoDB 和 MyISAM 支持的索引类型相同，但具体实现因为文件结构的不同有很大差异。</li><li>增删改查性能方面，果执行大量的增删改操作，推荐使用 InnoDB 存储引擎，它在删除操作时是对行删除，不会重建表。</li></ul><h3 id="myisam-和-innodb-存储引擎的对比" tabindex="-1"><a class="header-anchor" href="#myisam-和-innodb-存储引擎的对比" aria-hidden="true">#</a> MyISAM 和 InnoDB 存储引擎的对比</h3><ul><li><code>锁粒度方面</code>：由于锁粒度不同，InnoDB 比 MyISAM 支持更高的并发；InnoDB 的锁粒度为行锁、MyISAM 的锁粒度为表锁、行锁需要对每一行进行加锁，所以锁的开销更大，但是能解决脏读和不可重复读的问题，相对来说也更容易发生死锁</li><li><code>可恢复性上</code>：由于 InnoDB 是有事务日志的，所以在产生由于数据库崩溃等条件后，可以根据日志文件进行恢复。而 MyISAM 则没有事务日志。</li><li><code>查询性能上</code>：MyISAM 要优于 InnoDB，因为 InnoDB 在查询过程中，是需要维护数据缓存，而且查询过程是先定位到行所在的数据块，然后在从数据块中定位到要查找的行；而 MyISAM 可以直接定位到数据所在的内存地址，可以直接找到数据。</li><li><code>表结构文件上</code>： MyISAM 的表结构文件包括：.frm(表结构定义),.MYI(索引),.MYD(数据)；而 InnoDB 的表数据文件为:.ibd和.frm(表结构定义)；</li></ul><h2 id="mysql-基础架构" tabindex="-1"><a class="header-anchor" href="#mysql-基础架构" aria-hidden="true">#</a> MySQL 基础架构</h2><p>这道题应该从 MySQL 架构来理解，我们可以把 MySQL 拆解成几个零件，如下图所示</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418094420487-1729894942.png" alt=""></p><p>大致上来说，MySQL 可以分为 <code>Server</code>层和 <code>存储引擎</code>层。</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器，包括大多数 MySQL 中的核心功能，所有跨存储引擎的功能也在这一层实现，包括 <strong>存储过程、触发器、视图等</strong>。</p><p>存储引擎层包括 MySQL 常见的存储引擎，包括 <strong>MyISAM、InnoDB 和 Memory</strong> 等，最常用的是 InnoDB，也是现在 MySQL 的默认存储引擎。存储引擎也可以在创建表的时候手动指定，比如下面</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE t (i INT) ENGINE = &lt;Storage Engine&gt;; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们就可以探讨 MySQL 的执行过程了</p><h3 id="连接器" tabindex="-1"><a class="header-anchor" href="#连接器" aria-hidden="true">#</a> 连接器</h3><p>首先需要在 MySQL 客户端登陆才能使用，所以需要一个<code>连接器</code>来连接用户和 MySQL 数据库，我们一般是使用</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql -u 用户名 -p 密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来进行 MySQL 登陆，和服务端建立连接。在完成 <code>TCP 握手</code> 后，连接器会根据你输入的用户名和密码验证你的登录身份。如果用户名或者密码错误，MySQL 就会提示 <strong>Access denied for user</strong>，来结束执行。如果登录成功后，MySQL 会根据权限表中的记录来判定你的权限。</p><h3 id="查询缓存" tabindex="-1"><a class="header-anchor" href="#查询缓存" aria-hidden="true">#</a> 查询缓存</h3><p>连接完成后，你就可以执行 SQL 语句了，这行逻辑就会来到第二步：查询缓存。</p><p>MySQL 在得到一个执行请求后，会首先去 <code>查询缓存</code> 中查找，是否执行过这条 SQL 语句，之前执行过的语句以及结果会以 <code>key-value</code> 对的形式，被直接放在内存中。key 是查询语句，value 是查询的结果。如果通过 key 能够查找到这条 SQL 语句，就直接返回 SQL 的执行结果。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果就会被放入查询缓存中。可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，效率会很高。</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418094152940-2083092895.png" alt=""></p><p><strong>但是查询缓存不建议使用</strong></p><p>为什么呢？因为只要在 MySQL 中对某一张表执行了更新操作，那么所有的查询缓存就会失效，对于更新频繁的数据库来说，查询缓存的命中率很低。</p><h3 id="分析器" tabindex="-1"><a class="header-anchor" href="#分析器" aria-hidden="true">#</a> 分析器</h3><p>如果没有命中查询，就开始执行真正的 SQL 语句。</p><ul><li>首先，MySQL 会根据你写的 SQL 语句进行解析，分析器会先做 <code>词法分析</code>，你写的 SQL 就是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串是什么，代表什么。</li><li>然后进行 <code>语法分析</code>，根据词法分析的结果， 语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。如果 SQL 语句不正确，就会提示 <strong>You have an error in your SQL syntax</strong></li></ul><h3 id="优化器" tabindex="-1"><a class="header-anchor" href="#优化器" aria-hidden="true">#</a> 优化器</h3><p>经过分析器的词法分析和语法分析后，你这条 SQL 就<code>合法</code>了，MySQL 就知道你要做什么了。但是在执行前，还需要进行优化器的处理，优化器会判断你使用了哪种索引，使用了何种连接，优化器的作用就是确定效率最高的执行方案。</p><h3 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器" aria-hidden="true">#</a> 执行器</h3><p>MySQL 通过分析器知道了你的 SQL 语句是否合法，你想要做什么操作，通过优化器知道了该怎么做效率最高，然后就进入了执行阶段，开始执行这条 SQL 语句</p><p>在执行阶段，MySQL 首先会判断你有没有执行这条语句的权限，没有权限的话，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。对于有索引的表，执行的逻辑也差不多。</p><p>至此，MySQL 对于一条语句的执行过程也就完成了。</p><h2 id="sql-的执行顺序" tabindex="-1"><a class="header-anchor" href="#sql-的执行顺序" aria-hidden="true">#</a> SQL 的执行顺序</h2><p>我们在编写一个查询语句的时候</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT DISTINCT
    &lt; select_list &gt;
FROM
    &lt; left_table &gt; &lt; join_type &gt;
JOIN &lt; right_table &gt; ON &lt; join_condition &gt;
WHERE
    &lt; where_condition &gt;
GROUP BY
    &lt; group_by_list &gt;
HAVING
    &lt; having_condition &gt;
ORDER BY
    &lt; order_by_condition &gt;
LIMIT &lt; limit_number &gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的执行顺序你知道吗？这道题就给你一个回答。</p><h3 id="from-连接" tabindex="-1"><a class="header-anchor" href="#from-连接" aria-hidden="true">#</a> FROM 连接</h3><p>首先，对 SELECT 语句执行查询时，对<code>FROM</code> 关键字两边的表执行连接，会形成<code>笛卡尔积</code>，这时候会产生一个<code>虚表VT1(virtual table)</code></p><blockquote><p>首先先来解释一下什么是<code>笛卡尔积</code></p><p>现在我们有两个集合 A = {0,1} , B = {2,3,4}</p><p>那么，集合 A * B 得到的结果就是</p><p>A * B = {(0,2)、(1,2)、(0,3)、(1,3)、(0,4)、(1,4)};</p><p>B * A = {(2,0)、{2,1}、{3,0}、{3,1}、{4,0}、(4,1)};</p><p>上面 A * B 和 B * A 的结果就可以称为两个集合相乘的 <code>笛卡尔积</code></p><p>我们可以得出结论，A 集合和 B 集合相乘，包含了集合 A 中的元素和集合 B 中元素之和，也就是 A 元素的个数 * B 元素的个数</p></blockquote><p>再来解释一下什么是虚表</p><blockquote><p>在 MySQL 中，有三种类型的表</p><p>一种是<code>永久表</code>，永久表就是创建以后用来长期保存数据的表</p><p>一种是<code>临时表</code>，临时表也有两类，一种是和永久表一样，只保存临时数据，但是能够长久存在的；还有一种是临时创建的，SQL 语句执行完成就会删除。</p><p>一种是<code>虚表</code>，虚表其实就是<code>视图</code>，数据可能会来自多张表的执行结果。</p></blockquote><h3 id="on-过滤" tabindex="-1"><a class="header-anchor" href="#on-过滤" aria-hidden="true">#</a> ON 过滤</h3><p>然后对 FROM 连接的结果进行 ON 筛选，创建 VT2，把符合记录的条件存在 VT2 中。</p><h3 id="join-连接" tabindex="-1"><a class="header-anchor" href="#join-连接" aria-hidden="true">#</a> JOIN 连接</h3><p>第三步，如果是 <code>OUTER JOIN(left join、right join)</code> ，那么这一步就将添加外部行，如果是 left join 就把 ON 过滤条件的左表添加进来，如果是 right join ，就把右表添加进来，从而生成新的虚拟表 VT3。</p><h3 id="where-过滤" tabindex="-1"><a class="header-anchor" href="#where-过滤" aria-hidden="true">#</a> WHERE 过滤</h3><p>第四步，是执行 WHERE 过滤器，对上一步生产的虚拟表引用 WHERE 筛选，生成虚拟表 VT4。</p><p>WHERE 和 ON 的区别</p><ul><li>如果有外部列，ON 针对过滤的是关联表，主表(保留表)会返回所有的列;</li><li>如果没有添加外部列，两者的效果是一样的;</li></ul><p>应用</p><ul><li>对主表的过滤应该使用 WHERE;</li><li>对于关联表，先条件查询后连接则用 ON，先连接后条件查询则用 WHERE;</li></ul><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> GROUP BY</h3><p>根据 group by 字句中的列，会对 VT4 中的记录进行分组操作，产生虚拟机表 VT5。果应用了group by，那么后面的所有步骤都只能得到的 VT5 的列或者是聚合函数（count、sum、avg等）。</p><h3 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> HAVING</h3><p>紧跟着 GROUP BY 字句后面的是 HAVING，使用 HAVING 过滤，会把符合条件的放在 VT6</p><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> SELECT</h3><p>第七步才会执行 SELECT 语句，将 VT6 中的结果按照 SELECT 进行刷选，生成 VT7</p><h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct" aria-hidden="true">#</a> DISTINCT</h3><p>在第八步中，会对 TV7 生成的记录进行去重操作，生成 VT8。事实上如果应用了 group by 子句那么 distinct 是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所以的记录都将是不相同的。</p><h3 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> ORDER BY</h3><p>应用 order by 子句。按照 order_by_condition 排序 VT8，此时返回的一个游标，而不是虚拟表。sql 是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。</p><p>SQL 语句执行的过程如下</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418094224259-589618994.png" alt=""></p><h2 id="什么是临时表-何时删除临时表" tabindex="-1"><a class="header-anchor" href="#什么是临时表-何时删除临时表" aria-hidden="true">#</a> 什么是临时表，何时删除临时表</h2><p>什么是临时表？MySQL 在执行 SQL 语句的过程中，通常会临时创建一些<code>存储中间结果集</code>的表，临时表只对当前连接可见，在连接关闭时，临时表会被删除并释放所有表空间。</p><p>临时表分为两种：一种是<code>内存临时表</code>，一种是<code>磁盘临时表</code>，什么区别呢？内存临时表使用的是 MEMORY 存储引擎，而临时表采用的是 MyISAM 存储引擎。</p><blockquote><p>MEMORY 存储引擎：<code>memory</code> 是 MySQL 中一类特殊的存储引擎，它使用存储在内容中的内容来创建表，而且<strong>数据全部放在内存中</strong>。每个基于 MEMORY 存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为 <code>frm</code> 类型。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于 MEMORY 的表的生命周期很短，一般是一次性的。</p></blockquote><p>MySQL 会在下面这几种情况产生临时表</p><ul><li><p>使用 UNION 查询：UNION 有两种，一种是<code> UNION</code> ，一种是 <code>UNION ALL</code> ，它们都用于联合查询；区别是 使用 UNION 会去掉两个表中的重复数据，相当于对结果集做了一下<code>去重(distinct)</code>。使用 UNION ALL，则不会排重，返回所有的行。使用 UNION 查询会产生临时表。</p></li><li><p>使用 <code>TEMPTABLE 算法</code>或者是 UNION 查询中的视图。TEMPTABLE 算法是一种创建临时表的算法，它是将结果放置到临时表中，意味这要 MySQL 要先创建好一个临时表，然后将结果放到临时表中去，然后再使用这个临时表进行相应的查询。</p></li><li><p>ORDER BY 和 GROUP BY 的子句不一样时也会产生临时表。</p></li><li><p>DISTINCT 查询并且加上 ORDER BY 时；</p></li><li><p>SQL中用到 SQL_SMALL_RESULT 选项时；如果查询结果比较小的时候，可以加上 SQL_SMALL_RESULT 来优化，产生临时表</p></li><li><p>FROM 中的子查询；</p></li><li><p>EXPLAIN 查看执行计划结果的 Extra 列中，如果使用 <code>Using Temporary</code> 就表示会用到临时表。</p></li></ul><h2 id="mysql-常见索引类型" tabindex="-1"><a class="header-anchor" href="#mysql-常见索引类型" aria-hidden="true">#</a> MySQL 常见索引类型</h2><p>索引是存储在一张表中特定列上的<code>数据结构</code>，索引是在列上创建的。并且，索引是一种数据结构。</p><p>在 MySQL 中，主要有下面这几种索引</p><ul><li><code>全局索引(FULLTEXT)</code>：全局索引，目前只有 MyISAM 引擎支持全局索引，它的出现是为了解决针对文本的模糊查询效率较低的问题。</li><li><code>哈希索引(HASH)</code>：哈希索引是 MySQL 中用到的唯一 key-value 键值对的数据结构，很适合作为索引。HASH 索引具有一次定位的好处，不需要像树那样逐个节点查找，但是这种查找适合应用于查找单个键的情况，对于范围查找，HASH 索引的性能就会很低。</li><li><code>B-Tree 索引</code>：B 就是 Balance 的意思，BTree 是一种平衡树，它有很多变种，最常见的就是 B+ Tree，它被 MySQL 广泛使用。</li><li><code>R-Tree 索引</code>：R-Tree 在 MySQL 很少使用，仅支持 geometry 数据类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种，相对于 B-Tree 来说，R-Tree 的优势在于范围查找。</li></ul><h2 id="varchar-和-char-的区别和使用场景" tabindex="-1"><a class="header-anchor" href="#varchar-和-char-的区别和使用场景" aria-hidden="true">#</a> varchar 和 char 的区别和使用场景</h2><p>MySQL 中没有 nvarchar 数据类型，所以直接比较的是 varchar 和 char 的区别</p><p><code>char</code> ：表示的是<code>定长</code>的字符串，当你输入小于指定的数目，比如你指定的数目是 <code>char(6)</code>，当你输入小于 6 个字符的时候，char 会在你最后一个字符后面补空值。当你输入超过指定允许最大长度后，MySQL 会报错</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418094235379-896711239.png" alt=""></p><p><code>varchar</code>： varchar 指的是长度为 n 个字节的可变长度，并且是<code>非Unicode</code>的字符数据。n 的值是介于 1 - 8000 之间的数值。存储大小为实际大小。</p><blockquote><p>Unicode 是一种字符编码方案，它为每种语言中的每个字符都设定了统一唯一的二进制编码，以实现跨语言、跨平台进行文本转换、处理的要求</p></blockquote><p>使用 char 存储定长的数据非常方便、char 检索效率高，无论你存储的数据是否到了 10 个字节，都要去占用 10 字节的空间</p><p>使用 varchar 可以存储变长的数据，但存储效率没有 char 高。</p><h2 id="什么是-内连接、外连接、交叉连接、笛卡尔积" tabindex="-1"><a class="header-anchor" href="#什么是-内连接、外连接、交叉连接、笛卡尔积" aria-hidden="true">#</a> 什么是 内连接、外连接、交叉连接、笛卡尔积</h2><p>连接的方式主要有三种：<strong>外连接、内链接、交叉连接</strong></p><ul><li><p><code>外连接(OUTER JOIN)</code>：外连接分为三种，分别是<code>左外连接(LEFT OUTER JOIN 或 LEFT JOIN)</code> 、<code>右外连接(RIGHT OUTER JOIN 或 RIGHT JOIN)</code> 、<code>全外连接(FULL OUTER JOIN 或 FULL JOIN)</code></p><p>左外连接：又称为左连接，这种连接方式会显示左表不符合条件的数据行，右边不符合条件的数据行直接显示 NULL</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418094244624-830113551.png" alt=""></p><p>右外连接：也被称为右连接，他与左连接相对，这种连接方式会显示右表不符合条件的数据行，左表不符合条件的数据行直接显示 NULL</p><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418094252172-1863363819.png" alt=""></p><p><strong>MySQL 暂不支持全外连接</strong></p><ul><li><code>内连接(INNER JOIN)</code>：结合两个表中相同的字段，返回关联字段相符的记录。</li></ul><p><img src="https://img2020.cnblogs.com/blog/1515111/202004/1515111-20200418094300257-1134296081.png" alt=""></p><ul><li><code>笛卡尔积(Cartesian product)</code>： 我在上面提到了笛卡尔积，为了方便，下面再列出来一下。</li></ul><blockquote><p>现在我们有两个集合 A = {0,1} , B = {2,3,4}</p><p>那么，集合 A * B 得到的结果就是</p><p>A * B = {(0,2)、(1,2)、(0,3)、(1,3)、(0,4)、(1,4)};</p><p>B * A = {(2,0)、{2,1}、{3,0}、{3,1}、{4,0}、(4,1)};</p><p>上面 A * B 和 B * A 的结果就可以称为两个集合相乘的 <code>笛卡尔积</code></p><p>我们可以得出结论，A 集合和 B 集合相乘，包含了集合 A 中的元素和集合 B 中元素之和，也就是 A 元素的个数 * B 元素的个数</p></blockquote><ul><li><p>交叉连接的原文是<code>Cross join</code> ，就是笛卡尔积在 SQL 中的实现，SQL中使用关键字<code>CROSS JOIN</code>来表示交叉连接，在交叉连接中，随便增加一个表的字段，都会对结果造成很大的影响。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM t_Class a CROSS JOIN t_Student b WHERE a.classid=b.classid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者不用 CROSS JOIN，直接用 FROM 也能表示交叉连接的效果</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM t_Class a ,t_Student b WHERE a.classid=b.classid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果表中字段比较多，不适宜用交叉连接，交叉连接的效率比较差。</p></li><li><p>全连接：全连接也就是 <code>full join</code>，MySQL 中不支持全连接，但是可以使用其他连接查询来模拟全连接，可以使用 <code>UNION</code> 和 <code>UNION ALL</code> 进行模拟。例如</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>(select colum1,colum2...columN from tableA ) union (select colum1,colum2...columN from tableB )


或 
(select colum1,colum2...columN from tableA ) union all (select colum1,colum2...columN from tableB )；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 UNION 和 UNION ALL 的注意事项</p><blockquote><p>通过 union 连接的 SQL 分别单独取出的列数必须相同</p><p>使用 union 时，多个相等的行将会被合并，由于合并比较耗时，一般不直接使用 union 进行合并，而是通常采用 union all 进行合并</p></blockquote></li></ul><h2 id="谈谈-sql-优化的经验" tabindex="-1"><a class="header-anchor" href="#谈谈-sql-优化的经验" aria-hidden="true">#</a> 谈谈 SQL 优化的经验</h2><ul><li>查询语句无论是使用哪种判断条件 <strong>等于、小于、大于</strong>， <code>WHERE</code> 左侧的条件查询字段不要使用函数或者表达式</li><li>使用 <code>EXPLAIN</code> 命令优化你的 SELECT 查询，对于复杂、效率低的 sql 语句，我们通常是使用 explain sql 来分析这条 sql 语句，这样方便我们分析，进行优化。</li><li>当你的 SELECT 查询语句只需要使用一条记录时，要使用 <code>LIMIT 1</code></li><li>不要直接使用 <code>SELECT *</code>，而应该使用具体需要查询的表字段，因为使用 EXPLAIN 进行分析时，SELECT * 使用的是全表扫描，也就是 <code>type = all</code>。</li><li>为每一张表设置一个 ID 属性</li><li>避免在 <code>WHERE</code> 字句中对字段进行 <code>NULL</code> 判断</li><li>避免在 <code>WHERE</code> 中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符</li><li>使用 <code>BETWEEN AND</code> 替代 <code>IN</code></li><li>为搜索字段创建索引</li><li>选择正确的存储引擎，InnoDB 、MyISAM 、MEMORY 等</li><li>使用 <code>LIKE %abc%</code> 不会走索引，而使用 <code>LIKE abc%</code> 会走索引</li><li>对于枚举类型的字段(即有固定罗列值的字段)，建议使用<code>ENUM</code>而不是<code>VARCHAR</code>，如性别、星期、类型、类别等</li><li>拆分大的 DELETE 或 INSERT 语句</li><li>选择合适的字段类型，选择标准是 <strong>尽可能小、尽可能定长、尽可能使用整数</strong>。</li><li>字段设计尽可能使用 <code>NOT NULL</code></li><li>进行水平切割或者垂直分割</li></ul><blockquote><p>水平分割：通过建立结构相同的几张表分别存储数据</p><p>垂直分割：将经常一起使用的字段放在一个单独的表中，分割后的表记录之间是一一对应关系。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivkbczxoj31l20t8al5.jpg" alt="image-20210716163352584"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivl4khz9j31d60h8mze.jpg" alt="image-20210716163433337"></p>`,133),c=[o];function r(n,t){return d(),i("div",null,c)}const p=e(a,[["render",r],["__file","mysql-interview.html.vue"]]);export{p as default};
