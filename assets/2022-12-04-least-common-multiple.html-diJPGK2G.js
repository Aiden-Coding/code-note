import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"《程序员数学-最小公倍数》——-你能用几种代码实现出计算公倍数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-最小公倍数》——-你能用几种代码实现出计算公倍数","aria-hidden":"true"},"#"),s(" 《程序员数学：最小公倍数》—— 你能用几种代码实现出计算公倍数？")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("h2",{id:"一、前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言","aria-hidden":"true"},"#"),s(" 一、前言")],-1),h={href:"https://stackoverflow.com/questions/3154454/what-is-the-most-efficient-way-to-calculate-the-least-common-multiple-of-two-int",target:"_blank",rel:"noopener noreferrer"},g=n("strong",null,"计算两个整数的最小公倍数的最有效方法是什么？",-1),f=n("div",{align:"center"},[n("img",{src:"https://bugstack.cn/images/article/algorithm/logic/least-common-multiple-01.png?raw=true",width:"700px"})],-1),y={href:"https://zh.wikipedia.org/wiki/%E7%9F%AD%E9%99%A4%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"lcm(a, b) = |a * b| / gcd(a, b)",-1),_={href:"https://bugstack.cn/md/algorithm/logic/math/2022-11-28-euclidean.html",target:"_blank",rel:"noopener noreferrer"},x=l(`<p>那么这样的计算方法是不是最有效的方法，另外如果是同时计算多个整数的最小公倍数，要怎么处理？</p><p>其实编程的学习往往就是这样，留心处处都是学问，你总是需要从各种细小的点中，积累自己的技术思维广度和纵向探索深度。好啦，接下来小傅哥就给大家介绍几种用于计算最小公倍数的算法。</p><h2 id="二、用公约数实现" tabindex="-1"><a class="header-anchor" href="#二、用公约数实现" aria-hidden="true">#</a> 二、用公约数实现</h2><p>公式：<code>lcm(a, b) = |a * b| / gcd(a, b)</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lcm01</span><span class="token punctuation">(</span><span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>m <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从一个数字中减去另一个数字，直到两个数字变得相同。</span>
    <span class="token comment">// 这将是 GCD。如果其中一个数字为零，也退出循环。</span>
    <span class="token comment">// https://en.wikipedia.org/wiki/Euclidean_algorithm</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m <span class="token operator">=</span> m <span class="token operator">-</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            n <span class="token operator">=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> n <span class="token operator">:</span> m<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先这里是一个比较简单的方式，基于两数乘积除以最大公约数，得到的结果就是最小公倍数。</li></ul><h2 id="三、简单累加计算" tabindex="-1"><a class="header-anchor" href="#三、简单累加计算" aria-hidden="true">#</a> 三、简单累加计算</h2><p>此计算方式为，在一组正整数数列中，通过找到最小的数字进行自身累加循环，直至所有数字相同时，则这个数字为最小公倍数。—— 你能代码实现一下吗？</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/least-common-multiple-02.png?raw=true" width="400px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lcm02</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 以所有数字都相等作为条件</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEquals</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> min <span class="token operator">=</span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                min <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                idx <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        n<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在代码实现中，首先要把n个整数数列进行克隆保存。因为每次相加的都是最初的这个数列里的数字值。接下来就是以所有数字都相等作为条件循环判断，不断地的累加最小的数值即可。最终返回的就是最小公倍数。</li></ul><h2 id="四、表格推演计算" tabindex="-1"><a class="header-anchor" href="#四、表格推演计算" aria-hidden="true">#</a> 四、表格推演计算</h2><p>表格计算方式为将一组数字以最小的质数2开始整除，直到不能被2整除后，用下一个质数3继续整除（剩余的数字中比大的最小的质数）直至所有数字都为1的时候结束。最终所有有效的质数乘积就是最小公倍数。—— 想想如果这让你用代码实现，你能肝出来吗？</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/least-common-multiple-03.png?raw=true" width="400px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lcm03</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> key <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        keys<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;执行表格计算：\\r\\nx &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> primality <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> cachePrimality <span class="token operator">=</span> primality<span class="token punctuation">,</span> filterCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lcm <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 以所有元素最后一位为1作为条件</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>filterCount <span class="token operator">!=</span> keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> refresh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        filterCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> keys<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                filterCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 整除处理</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> primality <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value <span class="token operator">/</span> primality<span class="token punctuation">)</span><span class="token punctuation">;</span>
                refresh<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 刷新除数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> keys<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 找到下一个符合的素数</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> primality <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> cachePrimality <span class="token operator">&amp;&amp;</span> value <span class="token operator">&gt;</span> primality<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cachePrimality <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            primality <span class="token operator">=</span> cachePrimality<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 累计乘积</span>
            lcm <span class="token operator">*=</span> cachePrimality<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cachePrimality <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> v <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> lcm<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在代码实现中我们通过 Map 作为表的key，Map 中的 List 作为表每一行数据。通过这样一个结构构建出一张表。</li><li>接下来以所有元素最后一位为1作为条件循环处理数据，用最开始的2作为素数整除列表中的数据，并保存到下一组数列中。当2不能整除时，则刷新素数，选取另外一个列表中最小的素数作为除数继续。</li><li>这个过程中会累计有效素数的乘积，这个乘积的最终结果就是最小公倍数。</li></ul><h2 id="五、测试验证" tabindex="-1"><a class="header-anchor" href="#五、测试验证" aria-hidden="true">#</a> 五、测试验证</h2><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_euclidean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LastCommonMultiple</span> lastCommonMultiple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LastCommonMultiple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// System.out.println(&quot;最小公倍数：&quot; + lastCommonMultiple.lcm01(2, 7));</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最小公倍数：&quot;</span> <span class="token operator">+</span> lastCommonMultiple<span class="token punctuation">.</span><span class="token function">lcm02</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// System.out.println(&quot;最小公倍数：&quot; + lastCommonMultiple.lcm03(3, 4, 6));</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最小公倍数：&quot;</span> <span class="token operator">+</span> lastCommonMultiple<span class="token punctuation">.</span><span class="token function">lcm03</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//System.out.println(&quot;最小公倍数：&quot; + lastCommonMultiple.lcm03(4, 7, 12, 21, 42));</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>执行累加计算：
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>
最小公倍数：<span class="token number">12</span>

执行表格计算：
x <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span> 
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">1</span> 
<span class="token number">4</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> 
<span class="token number">6</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">1</span> 
<span class="token number">8</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> 

最小公倍数：<span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>到这里测试就结束了，本章一共介绍了三种计算最小公倍数的方法。那如果只让你看到逻辑，你能写出最终的代码吗？</li></ul><h2 id="六、常见面试" tabindex="-1"><a class="header-anchor" href="#六、常见面试" aria-hidden="true">#</a> 六、常见面试</h2><ul><li>如何计算两数的最小公倍数？</li><li>如果计算多个整数的最小公倍数？</li><li>你能说一下具体如何实现这种X的计算流程吗？</li><li>你知道最小公倍数计算的用途吗？</li></ul><hr>`,25),q={href:"https://stackoverflow.com/questions/3154454/what-is-the-most-efficient-way-to-calculate-the-least-common-multiple-of-two-int/3154503#3154503",target:"_blank",rel:"noopener noreferrer"},L={href:"https://en.wikipedia.org/wiki/Least_common_multiple",target:"_blank",rel:"noopener noreferrer"},C={href:"https://en.wikipedia.org/wiki/Chebyshev_function",target:"_blank",rel:"noopener noreferrer"};function M(j,S){const a=e("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)]),d,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),v,b,n("p",null,[s("在 "),n("a",h,[s("stackoverflow.com"),t(a)]),s(" 看到一道问题："),g]),f,n("p",null,[s("乍一看，🤨 这能有啥。不就是计算下最小公倍数吗？但一想我脑袋中计算最小公倍数的方法；一种是在本子上通过"),n("a",y,[s("短除法"),t(a)]),s("计算，另外一种是基于计算出的最大公约数，再使用公式："),w,s(" 求得最小公倍数。—— 计算最大公约数是基于"),n("a",_,[s("欧几里德算法(辗转相除法)"),t(a)])]),x,n("ul",null,[n("li",null,[s("What is the most efficient way to calculate the least common multiple of two integers?："),n("a",q,[s("https://stackoverflow.com/questions/3154454/what-is-the-most-efficient-way-to-calculate-the-least-common-multiple-of-two-int/3154503#3154503"),t(a)])]),n("li",null,[s("Least common multiple："),n("a",L,[s("https://en.wikipedia.org/wiki/Least_common_multiple"),t(a)])]),n("li",null,[s("Chebyshev function："),n("a",C,[s("https://en.wikipedia.org/wiki/Chebyshev_function"),t(a)])])])])}const E=p(u,[["render",M],["__file","2022-12-04-least-common-multiple.html.vue"]]);export{E as default};
