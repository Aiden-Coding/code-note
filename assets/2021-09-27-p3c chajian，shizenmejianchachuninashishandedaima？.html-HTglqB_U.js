import{_ as p,r as o,o as l,c,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"p3c-插件-是怎么检查出你那屎山的代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#p3c-插件-是怎么检查出你那屎山的代码","aria-hidden":"true"},"#"),s(" p3c 插件，是怎么检查出你那屎山的代码？")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),v={href:"https://mp.weixin.qq.com/s/RwzprbY2AhdgslY8tbVL-A",target:"_blank",rel:"noopener noreferrer"},m=t('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>你会对你用到都技术，好奇吗？</code></p><p>虽然我们都被称为码农，也都是写着代码，但因为所处场景需求的不同，所以各类码农也都做着不一样都事情。</p><p>有些人统一规范、有些人开发组件、有些人编写业务、有些人倒腾验证，但越是工作内容简单如CRUD一样的码农，用到别人提供好的东西却是越多。一会安装个插件、一会引入个Jar包、一会调别人个接口，而自己的工作就像是装配工，东拼拼西凑凑，就把产品需求写完了。</p><p>坏了，这么干可能几年下来，也不会有什么技术上都突破。因为你对那些使用都技术不好奇，不想知道它们是怎么实现的。就像阿里的P3C插件，是怎么检查代码分析出来我写的拉胯的呢？</p><h2 id="二、p3c-插件是什么" tabindex="-1"><a class="header-anchor" href="#二、p3c-插件是什么" aria-hidden="true">#</a> 二、P3C 插件是什么</h2>',7),b={href:"https://github.com/alibaba/p3c/blob/master/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E5%B5%A9%E5%B1%B1%E7%89%88%EF%BC%89.pdf",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[n("img",{src:"https://bugstack.cn/assets/images/guide/guide-2-01.png",alt:""})],-1),h={href:"https://github.com/alibaba/p3c",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"插件安装完成后，就可以按照编程规约，静态分析代码中出现的代码：命名风格、常量定义、集合处理、并发处理、OOP、控制语句、注释、异常等各项潜在风险，同时会给出一些优化操作和实例。",-1),f=n("p",null,[n("img",{src:"https://bugstack.cn/assets/images/guide/guide-2-02.png",alt:""})],-1),q=n("ul",null,[n("li",null,"在遵守开发手册标准并按照插件检查都情况下，还是可以非常好的统一编码标准和风格都，也能剔除掉一些潜在都风险。"),n("li",null,"如果你是新手编程用户或者想写出标准都代码，那么非常建议你按照这样都插件来辅助自己做代码开发。当然如果你所在的公司也有相应都标准手册和插件，也可以按照后遵守它都约定的。")],-1),j=n("h2",{id:"三、p3c-插件源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、p3c-插件源码","aria-hidden":"true"},"#"),s(" 三、P3C 插件源码")],-1),y=n("p",null,"在最开始使用这类代码检查都插件的时候，就非常好奇它是怎么发现我的屎山代码的，用了什么样都技术原理呢，如果我能分析下是不是也可以把这样都技术手段用到其他地方。",-1),C=n("p",null,"在分析这样一个代码检查插件前，先思考要从 IDEA 插件都源码查起，看看它是什么个逻辑，之后分析具体是如何使用都。其实这与一些其他的框架性源码学习都是类似的，拿到官网都文档、GitHub 对应的源码，按照步骤进行构建、部署、测试、调试、分析，进而找到核心原理。",-1),x=n("p",null,"P3C 以 IDEA 插件开发为例，主要涉及到插件部分和规约部分，因为是把规约检查的能力与插件技术结合，所以会涉及到一些 IDEA 开发的技术。另外 P3C 插件涉及到都技术语言不只是 Java 还有一部分 kotlin 它是一种在 Java 虚拟机上运行的静态类型编程语言。",-1),w={href:"https://github.com/alibaba/p3c/blob/master/idea-plugin",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/alibaba/p3c/tree/master/p3c-pmd",target:"_blank",rel:"noopener noreferrer"},D=t(`<h3 id="_1-插件配置-p3c-xml" tabindex="-1"><a class="header-anchor" href="#_1-插件配置-p3c-xml" aria-hidden="true">#</a> 1. 插件配置 p3c.xml</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>action <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.alibaba.p3c.idea.action.AliInspectionAction&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;AliP3CInspectionAction&quot;</span>
        popup<span class="token operator">=</span><span class="token string">&quot;true&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;编码规约扫描&quot;</span> icon<span class="token operator">=</span><span class="token string">&quot;P3cIcons.ANALYSIS_ACTION&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>keyboard<span class="token operator">-</span>shortcut keymap<span class="token operator">=</span><span class="token string">&quot;$default&quot;</span>
                       first<span class="token operator">-</span>keystroke<span class="token operator">=</span><span class="token string">&quot;shift ctrl alt J&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>add<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>group group<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">&quot;MainToolBar&quot;</span> anchor<span class="token operator">=</span><span class="token string">&quot;last&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>add<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>group group<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">&quot;ProjectViewPopupMenu&quot;</span> anchor<span class="token operator">=</span><span class="token string">&quot;last&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>add<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>group group<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">&quot;ChangesViewPopupMenu&quot;</span> anchor<span class="token operator">=</span><span class="token string">&quot;last&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>add<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>group group<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">&quot;EditorPopupMenu&quot;</span> anchor<span class="token operator">=</span><span class="token string">&quot;last&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>action<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>翻看源码最重要是要找到入口，这个入口通常也是你在使用插件、程序、接口等时候，最直接进入都那部分。</li><li>那么我们在使用 P3C 插件的时候，最明显的就是 <code>编码规约扫描</code> 通过源码中找到这个关键字，看它都涉及了哪个类都配置。</li><li>action 是 IDEA 插件中用于配置窗体事件入口都地方，以及把这个操作配置到哪个按钮下和对应都快捷键。</li></ul><h3 id="_2-编码规约扫描-aliinspectionaction" tabindex="-1"><a class="header-anchor" href="#_2-编码规约扫描-aliinspectionaction" aria-hidden="true">#</a> 2. 编码规约扫描( AliInspectionAction)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AliInspectionAction</span> <span class="token operator">:</span> <span class="token class-name">AnAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    override fun <span class="token function">actionPerformed</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token class-name">AnActionEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        val project <span class="token operator">=</span> e<span class="token punctuation">.</span>project <span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">return</span>
        val analysisUIOptions <span class="token operator">=</span> <span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> <span class="token class-name">AnalysisUIOptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">!</span>
        analysisUIOptions<span class="token punctuation">.</span><span class="token constant">GROUP_BY_SEVERITY</span> <span class="token operator">=</span> <span class="token boolean">true</span>

        val managerEx <span class="token operator">=</span> <span class="token class-name">InspectionManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span> as <span class="token class-name">InspectionManagerEx</span>
        val toolWrappers <span class="token operator">=</span> <span class="token class-name">Inspections</span><span class="token punctuation">.</span><span class="token function">aliInspections</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            it<span class="token punctuation">.</span>tool is <span class="token class-name">AliBaseInspection</span>
        <span class="token punctuation">}</span>
        val psiElement <span class="token operator">=</span> e<span class="token punctuation">.</span>getData<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PsiElement</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">CommonDataKeys</span><span class="token punctuation">.</span><span class="token constant">PSI_ELEMENT</span><span class="token punctuation">)</span>
        val psiFile <span class="token operator">=</span> e<span class="token punctuation">.</span>getData<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PsiFile</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">CommonDataKeys</span><span class="token punctuation">.</span><span class="token constant">PSI_FILE</span><span class="token punctuation">)</span>
        val virtualFile <span class="token operator">=</span> e<span class="token punctuation">.</span>getData<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VirtualFile</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">CommonDataKeys</span><span class="token punctuation">.</span><span class="token constant">VIRTUAL_FILE</span><span class="token punctuation">)</span>
        
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
		
		<span class="token function">createContext</span><span class="token punctuation">(</span>
    	toolWrappers<span class="token punctuation">,</span> managerEx<span class="token punctuation">,</span> element<span class="token punctuation">,</span>
    	projectDir<span class="token punctuation">,</span> analysisScope
		<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doInspections</span><span class="token punctuation">(</span>analysisScope<span class="token punctuation">)</span>
<span class="token punctuation">}</span>		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是一个基于 kotlin 语言开发的插件代码逻辑，它通过 actionPerformed 方法获取到工程信息、类信息等，接下来就可以执行代码检查了 doInspections</li></ul><h3 id="_3-规约-p3c-pmd" tabindex="-1"><a class="header-anchor" href="#_3-规约-p3c-pmd" aria-hidden="true">#</a> 3. 规约 p3c-pmd</h3><p>当我们再往下翻看阅读的时候，就看到了一个关于 pmd 的东西。PMD 是一款采用 BSD 协议发布的Java 程序静态代码检查工具，当使用PMD规则分析Java源码时，PMD首先利用JavaCC和EBNF文法产生了一个语法分析器，用来分析普通文本形式的Java代码，产生符合特定语法结构的语法，同时又在JavaCC的基础上添加了语义的概念即JJTree，通过JJTree的一次转换，这样就将Java代码转换成了一个AST，AST是Java符号流之上的语义层，PMD把AST处理成一个符号表。然后编写PMD规则，一个PMD规则可以看成是一个Visitor，通过遍历AST找出多个对象之间的一种特定模式，即代码所存在的问题。该软件功能强大，扫描效率高，是 Java 程序员 debug 的好帮手。</p><p>那么 p3c-pmd 是什么呢？</p><p><img src="https://bugstack.cn/assets/images/guide/guide-2-03.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ViolationUtils</span><span class="token punctuation">.</span><span class="token function">addViolationWithPrecisePosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> data<span class="token punctuation">,</span>
    <span class="token class-name">I18nResources</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;java.naming.ClassNamingShouldBeCamelRule.violation.msg&quot;</span><span class="token punctuation">,</span>
        node<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p3c-pmd 插件是基于 PMD 实现的，更具体的来说是基于 pmd-java 的，因为 PMD 不仅支持 Java 代码分析，还支持其他多种语言。</li><li>具体自定义规则的方式，通过自定义Java类和XPATH规则实现。</li></ul><h2 id="四、规约监测案例" tabindex="-1"><a class="header-anchor" href="#四、规约监测案例" aria-hidden="true">#</a> 四、规约监测案例</h2><p>讲道理，说一千道一万，还得是拿出代码跑一下，才知道 PMD 具体是什么个样子。</p><h3 id="_1-测试工程" tabindex="-1"><a class="header-anchor" href="#_1-测试工程" aria-hidden="true">#</a> 1. 测试工程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>guide<span class="token operator">-</span>pmd
└── src
    ├── main
    │   ├── java
    │   │   └── cn<span class="token punctuation">.</span>itedus<span class="token punctuation">.</span>guide<span class="token punctuation">.</span>pmd<span class="token punctuation">.</span>rule
    │   │       ├── naming
    │   │       │   ├── <span class="token class-name">ClassNamingShouldBeCamelRule</span><span class="token punctuation">.</span>java
    │   │       │   ├── <span class="token class-name">ConstantFieldShouldBeUpperCaseRule</span><span class="token punctuation">.</span>java
    │   │       │   └── <span class="token class-name">LowerCamelCaseVariableNamingRule</span><span class="token punctuation">.</span>java
    │   │       ├── utils
    │   │       │   ├── <span class="token class-name">StringAndCharConstants</span><span class="token punctuation">.</span>java
    │   │       │   └── <span class="token class-name">ViolationUtils</span><span class="token punctuation">.</span>java    
    │   │       └── <span class="token class-name">I18nResources</span>
    │   └── resources
    │       ├── rule 
    │       │   └── ali<span class="token operator">-</span>naming<span class="token punctuation">.</span>xml  
    │       ├── messages<span class="token punctuation">.</span>xml   
    │       └── namelist<span class="token punctuation">.</span>properties  
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>itedus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                ├── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">TErrDto</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),E=n("strong",null,"源码",-1),P={href:"https://github.com/fuzhengwei/guide-pmd",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>这是一个类似 p3c-pmd 的测试工程，通过自行扩展重写代码监测规约的方式，来处理自己关于代码的审核标准处理。</p><ul><li>naming 下的类是用于处理一些和名称相关的规则，类名、属性名、方法名等</li><li>resources 下 ali-naming.xml 是规约的配置文件</li></ul><h3 id="_2-驼峰命名规约" tabindex="-1"><a class="header-anchor" href="#_2-驼峰命名规约" aria-hidden="true">#</a> 2. 驼峰命名规约</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassNamingShouldBeCamelRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractJavaRule</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">PATTERN</span>
            <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;^I?([A-Z][a-z0-9]+)+(([A-Z])|(DO|DTO|VO|DAO|BO|DAOImpl|YunOS|AO|PO))?$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ASTClassOrInterfaceDeclaration</span> node<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">PATTERN</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token class-name">ViolationUtils</span><span class="token punctuation">.</span><span class="token function">addViolationWithPrecisePosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> data<span class="token punctuation">,</span>
                <span class="token class-name">I18nResources</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;java.naming.ClassNamingShouldBeCamelRule.violation.msg&quot;</span><span class="token punctuation">,</span>
                        node<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过继承 PMD 提供的 AbstractJavaRule 抽象类，重写 visit 方法，使用正则的方式进行验证。</li><li>visit 方法都入参类型非常多，分别用于处理类、接口、方法、代码等各项内容的监测处理，只要重写需要的方法，在里面进行自己都处理就可以。</li><li>ClassNamingShouldBeCamelRule、ConstantFieldShouldBeUpperCaseRule、LowerCamelCaseVariableNamingRule 三个类都功能类似，这里就不一一展示了，可以直接参考源码。</li></ul><h3 id="_3-ali-naming-xml-配置" tabindex="-1"><a class="header-anchor" href="#_3-ali-naming-xml-配置" aria-hidden="true">#</a> 3. ali-naming.xml 配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>rule name<span class="token operator">=</span><span class="token string">&quot;ClassNamingShouldBeCamelRule&quot;</span>
      language<span class="token operator">=</span><span class="token string">&quot;java&quot;</span>
      since<span class="token operator">=</span><span class="token string">&quot;1.6&quot;</span>
      message<span class="token operator">=</span><span class="token string">&quot;java.naming.ClassNamingShouldBeCamelRule.rule.msg&quot;</span>
      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;cn.itedus.guide.pmd.rule.naming.ClassNamingShouldBeCamelRule&quot;</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>priority<span class="token punctuation">&gt;</span></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>priority<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>rule<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 ali-naming.xml 用于配置规约处理类、priority 级别、message 提醒文字。</li><li>同时还可以配置代码示例，使用 <code>&lt;example&gt;</code> 标签，在里面写好标准代码即可。</li></ul><h3 id="_4-测试验证规约" tabindex="-1"><a class="header-anchor" href="#_4-测试验证规约" aria-hidden="true">#</a> 4. 测试验证规约</h3><p><strong>问题类示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TErrDto</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> max <span class="token operator">=</span> <span class="token number">50000L</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QueryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> baz <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>baz<span class="token punctuation">)</span>
            baz <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_naming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;-d&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;E:\\\\itstack\\\\git\\\\github.com\\\\guide-pmd\\\\src\\\\test\\\\java\\\\cn\\\\itedus\\\\demo\\\\test\\\\TErrDto.java&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;-R&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;E:\\\\itstack\\\\git\\\\github.com\\\\guide-pmd\\\\src\\\\main\\\\resources\\\\rule\\\\ali-naming.xml&quot;</span>
            <span class="token comment">// &quot;category/java/codestyle.xml&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token constant">PMD</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>规约的测试验证可以直接使用 PMD.main 方法，在方法中提供字符串数组入参，这里的代码监测地址和规约配置需要是绝对路径。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TErrDto</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span>	【<span class="token class-name">TErrDto</span>】不符合<span class="token class-name">UpperCamelCase</span>命名风格
<span class="token class-name">TErrDto</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span>	常量【max】命名应全部大写并以下划线分隔
<span class="token class-name">TErrDto</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token operator">:</span>	方法名【<span class="token class-name">QueryUserInfo</span>】不符合lowerCamelCase命名风格

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果可以看到，我们写的三个代码规约分别监测出了代码的命名风格、常量大写、方法名不符合驼峰标识。</li><li>同时你还可以测试 <code>category/java/codestyle.xml</code> 这个是 PMD 自身提供好的规约监测。</li></ul><h2 id="五、扩展了解-sonar" tabindex="-1"><a class="header-anchor" href="#五、扩展了解-sonar" aria-hidden="true">#</a> 五、扩展了解 Sonar</h2><p>其实有了 PMD 静态代码检查规约，能做都事情就很多，不是只对正在写的代码进行检查，还可以对不同阶段的代码进行分析和风险提醒，比如：准备提测阶段、已经上线完成，都可以做相应的监测处理。</p>`,19),S={href:"https://www.sonarqube.org/",target:"_blank",rel:"noopener noreferrer"},M=t('<p><img src="https://bugstack.cn/assets/images/guide/guide-2-04.png" alt=""></p><ul><li>不遵循代码标准：sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写。</li><li>潜在的缺陷：sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检 测出潜在的缺陷。</li><li>糟糕的复杂度分布：文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员 难以理解它们, 且如果没有自动化的单元测试，对于程序中的任何组件的改变都将可能导致需要全面的回归测试。</li><li>重复：显然程序中包含大量复制粘贴的代码是质量低下的，sonar可以展示 源码中重复严重的地方。</li><li>注释不足或者过多：没有注释将使代码可读性变差，特别是当不可避免地出现人员变动 时，程序的可读性将大幅下降 而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷。</li><li>缺乏单元测试：sonar可以很方便地统计并展示单元测试覆盖率。</li><li>糟糕的设计：通过sonar可以找出循环，展示包与包、类与类之间的相互依赖关系，可以检测自定义的架构规则 通过sonar可以管理第三方的jar包，可以利用LCOM4检测单个任务规则的应用情况， 检测耦合。</li><li>提高代码质量：了解自己在编码过程中犯过的错误，让自己的代码更具有可读性和维护性。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2>',3),T=n("li",null,"PMD 是一款采用 BSD 协议的代码检查工具，你可以扩展实现为自己的标准和规范以及完善个性的提醒和修复操作。",-1),B={href:"https://github.com/momosecurity/momo-code-sec-inspector-java",target:"_blank",rel:"noopener noreferrer"},R=n("li",null,"这里补充一点，kotlin 语言可以在 IDEA 中转换为 Java 语言，这样你在阅读类似这样的代码时候，如果不好看懂也可以转换一下在阅读。此外 IDEA 插件开发需要基于 Gradle 或者本身提供都模版进行创建，如果感兴趣也可以阅读我写的 IDEA 插件开发文章。",-1);function J(O,N){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)]),k,s("原文："),n("a",v,[s("https://mp.weixin.qq.com/s/RwzprbY2AhdgslY8tbVL-A"),e(a)])]),m,n("p",null,[s("P3C 是阿里开源代码库的插件工程名称，它以"),n("a",b,[s("阿里巴巴Java开发手册"),e(a)]),s("为标准，用于监测代码质量的 IDEA/Eclipse 插件。")]),g,n("ul",null,[n("li",null,[s("源码："),n("a",h,[s("https://github.com/alibaba/p3c"),e(a)])])]),_,f,q,j,y,C,x,n("ul",null,[n("li",null,[s("插件源码："),n("a",w,[s("https://github.com/alibaba/p3c/blob/master/idea-plugin"),e(a)])]),n("li",null,[s("规约源码："),n("a",A,[s("https://github.com/alibaba/p3c/tree/master/p3c-pmd"),e(a)])])]),D,n("ul",null,[n("li",null,[E,s("："),n("a",P,[s("https://github.com/fuzhengwei/guide-pmd"),e(a)])])]),I,n("p",null,[s("而 Sonar 就是一个这样都工具，它是一个Web系统，可以展现静态代码扫描的结果，结果是可以自定义的，支持多种语言的原理是它的扩展性。"),n("a",S,[s("https://www.sonarqube.org/"),e(a)])]),M,n("ul",null,[T,n("li",null,[s("另外基于 IDEA 插件实现的代码检查或者有审计要求的处理，也可以基于 IDEA 插件做更多的扩展，比如提醒修复、提供修复操作、自身业务逻辑的检查。例如momo开源库下的一款IDEA静态代码安全审计及漏洞一键修复插件 "),n("a",B,[s("https://github.com/momosecurity/momo-code-sec-inspector-java"),e(a)])]),R])])}const F=p(i,[["render",J],["__file","2021-09-27-p3c chajian，shizenmejianchachuninashishandedaima？.html.vue"]]);export{F as default};
