import{_ as a,r,o as l,c as s,a as e,b as n,d as o}from"./app-3RcBQnkC.js";const c={},i=e("h1",{id:"《api网关》第2章-代理rpc泛化调用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#《api网关》第2章-代理rpc泛化调用","aria-hidden":"true"},"#"),n(" 《API网关》第2章：代理RPC泛化调用")],-1),d=e("br",null,null,-1),h={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},_=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),u=e("li",null,[e("strong",null,"本章难度"),n("：★★★☆☆")],-1),p=e("li",null,[e("strong",null,"本章重点"),n("：给网关接口绑定对应的RPC服务，建立代理关系封装RPC泛化调用。这样调用网关接口就会调用到对应的RPC服务接口上并返回对应的数据。")],-1),g=e("strong",null,"课程视频",-1),P={href:"https://t.zsxq.com/05NbuJaYZ",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"一、学习指引",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、学习指引","aria-hidden":"true"},"#"),n(" 一、学习指引")],-1),f=e("p",null,[e("code",null,"你不能总是硬编码解决所有问题！")],-1),C=e("p",null,"对于中间件框架的实现，往往都离不开代理的操作，因为需要使用代理用逻辑封装行为。例如你原本是通过硬编码调用一个接口，那么现在因为所有的行为都被提炼到中间件中控制，那么对于接口的调用就不在一个而是一堆。而对于这样一堆接口的调用，它们是有共性的，比如可以统一使用Java反射获取到方法名、入参、出参等等信息，再根据这些信息做代理逻辑包装，让每一个接口的调用都被中间件处理。",-1),R={href:"https://dubbo.apache.org/zh/docs/advanced/generic-reference/",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"二、绑定设计",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二、绑定设计","aria-hidden":"true"},"#"),n(" 二、绑定设计")],-1),T=e("p",null,"这里需要思考🤔，为了把 HTTP 与 RPC 建立连接，就像你把 DAO 与 SQL 执行建立连接一样，两个服务的中间需要被绑定。也就是把 HTTP 地址中的接口方法与 RPC 对应的服务建立起一种关联关系，这样才能满足在调用 HTTP 网关接口时，调用到对应的 RPC 服务上。",-1),k=e("div",{align:"center"},[e("img",{src:"https://bugstack.cn/images/article/algorithm/api-gateway/api-gateway-2-01.png?raw=true",width:"500px"})],-1),x=e("li",null,"就像如图所示 HTTP 经过网关调用到 RPC 中间的执行逻辑就是把两个模块用绑定的方式建立起连接，生成一个代理对象。代理对象中包装的就是执行网关接口泛化调用的参数准备和执行以及返回结果的操作。",-1),v={href:"https://dubbo.apache.org/zh/docs/advanced/generic-reference/",target:"_blank",rel:"noopener noreferrer"},z=e("li",null,"这里的第二个知识点是代理包装，虽然 RPC 框架提供了泛化调用，也就是说这里可以拿到网络协议转换的 HTTP 请求信息以后，就能直接调用到 RPC 接口。但这样的操作方式不太方便使用，存在硬编码的风险，后续不好迭代升级，也不好扩展其他的接口。因为每一个 RPC 的实现，泛化调用的方法名称还是有所不同的，另外是扩展非 RPC 框架的逻辑，也不方便处理。所以这里需要单独提供一个代理包装逻辑。",-1),H=e("li",null,[n("这里的第三个知识点是Cglib，因为有第二个知识点中代理操作的存在，我们就需要选择一种方式来做代理处理，而Cglib 可以满足我们自定义创建接口的方式进行代理，同时又可以在让一个代理类有多个接口。注意：多个接口的意思是，一个接口是用于标准的描述，在于使用上。另外一个接口是自主生成的，生成的是我们的 RPC 描述性接口，相当于自主生成了class字节码。"),e("em",null,"这部分我会在视频中再加以介绍")],-1);function N(w,y){const t=r("ExternalLinkIcon");return l(),s("div",null,[i,e("p",null,[n("作者：小傅哥 "),d,n("博客："),e("a",h,[n("https://bugstack.cn"),o(t)])]),_,e("ul",null,[u,p,e("li",null,[g,n("："),e("a",P,[n("https://t.zsxq.com/05NbuJaYZ"),o(t)])])]),b,f,C,e("p",null,[n("那么我们本章要实现的就是把来自网关的HTTP请求，转换到RPC调用上，这里就涉及到了RPC所提供的泛化调用，按照对应的泛化调用的逻辑，提供对应的接口和方法以及入参信息就可以拿到最终的结果。文档："),e("a",R,[n("https://dubbo.apache.org/zh/docs/advanced/generic-reference/"),o(t)])]),m,T,k,e("ul",null,[x,e("li",null,[n("这里的第一个知识点是泛化调用，它是 RPC 接口设计中提供的一种反射调用机制，你不需要硬编码调用接口，只需要提供接口的方法名称、入参信息，即可调用到对应的 RPC 接口服务。可以参考官网文档："),e("a",v,[n("https://dubbo.apache.org/zh/docs/advanced/generic-reference/"),o(t)])]),z,H])])}const B=a(c,[["render",N],["__file","2022-08-20-di2zhang：dailiRPCfanhuadiaoyong.html.vue"]]);export{B as default};
