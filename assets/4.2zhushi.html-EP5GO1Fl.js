import{_ as n,o as s,c as a,e as t}from"./app-3RcBQnkC.js";const p={},o=t(`<h1 id="_4-2-注释" tabindex="-1"><a class="header-anchor" href="#_4-2-注释" aria-hidden="true">#</a> 4.2 注释</h1><p>类、字段、方法和方法参数注释，比如 <strong>@Deprecated</strong> 或 <strong>@Override</strong>，只要它们的保留策略不是 <strong>RetentionPolicy.SOURCE</strong>，它们就会被存储在编译后的类中。这一信息不是在运行时供字节代码指令使用，但是，如果保留策略是 <strong>RetentionPolicy.RUNTIME</strong>，则可以通过反射 API 访问它。它还可以供编译器使用。</p><h2 id="_4-2-1-结构" tabindex="-1"><a class="header-anchor" href="#_4-2-1-结构" aria-hidden="true">#</a> 4.2.1 结构</h2><p>源代码中的注释可以具有各种不同形式， 比如 <strong>@Deprecated</strong> 、 <strong>@Retention(RetentionPolicy.CLASS)</strong> 或 <strong>@Task(desc=&quot;refactor&quot;, id=1)</strong>。但在内部，所有注释的形式都是相同的，由一种注释类型和一组名称/值对规定，其中的取值仅限于如下几种：</p><ul><li>基元，String 或 Class 值</li><li>枚举值</li><li>注释值</li><li>上述值的数组</li></ul><p>注意，一个注释中可以包含其他注释，甚至可以包含注释数组。因此，注释可能非常复杂。</p><h2 id="_4-2-2-接口和组件" tabindex="-1"><a class="header-anchor" href="#_4-2-2-接口和组件" aria-hidden="true">#</a> 4.2.2 接口和组件</h2><p>用于生成和转换注释的 <strong>ASM API</strong> 是基于 <strong>AnnotationVisitor</strong> 抽象类的（见图 4.3）。</p><blockquote><p>图 4.3 AnnotationVisitor 类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> <span class="token class-name">AnnotationVisitor</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类的方法用于访问一个注释的名称/值对（注释类型在访问这一类型的方法中访问，即 visitAnnotation 方法）。第一个方法用于基元、String 和 Class 值（后者用 Type 对象表示），其他方法用于枚举、注释和数组值。可以按任意顺序调用它们，visitEnd 除外：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span> visit <span class="token operator">|</span> visitEnum <span class="token operator">|</span> visitAnnotation <span class="token operator">|</span> visitArray <span class="token punctuation">)</span><span class="token operator">*</span> visitEnd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，两个方法返回 AnnotationVisitor：这是因为注释可以包含其他注释。另外，与 ClassVisitor 返回的 MethodVisitor 不同，这两个方法返回的 AnnotationVisitors 必须顺序使用：事实上，在完全访问一个嵌套注释之前，不能调用父访问器的任何方法。</p><p>还要注意，visitArray 方法返回一个 AnnotationVisitor，以访问数组的元素。但是， 由于数组的元素未被命名，因此，name 参数被 visitArray 返回的访问器的方法忽略，可以设定为 null。</p><ol><li>添加、删除和检测注释</li></ol><p>与字段和方法的情景一样，可以通过在 visitAnnotation 方法中返回 null 来删除注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveAnnotationAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> annDesc<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveAnnotationAdapter</span><span class="token punctuation">(</span><span class="token class-name">ClassVisitor</span> cv<span class="token punctuation">,</span> <span class="token class-name">String</span> annDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>annDesc <span class="token operator">=</span> annDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> vis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>annDesc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> vis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类注释的添加要更难一些，因为存在一些限制条件：必须调用 ClassVisitor 类的方法。事实上，所有可以跟在 visitAnnotation 之后的方法都必须重写，以检测什么时候已经访问了所有注释（因为 visitCode 方法的原因，方法注释的添加更容易一些）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddAnnotationAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> annotationDesc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isAnnotationPresent<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddAnnotationAdapter</span><span class="token punctuation">(</span><span class="token class-name">ClassVisitor</span> cv<span class="token punctuation">,</span> <span class="token class-name">String</span> annotationDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>annotationDesc <span class="token operator">=</span> annotationDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">int</span> version<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span> superName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> superName<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visible <span class="token operator">&amp;&amp;</span> desc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>annotationDesc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isAnnotationPresent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInnerClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> outerName<span class="token punctuation">,</span> <span class="token class-name">String</span> innerName<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cv<span class="token punctuation">.</span><span class="token function">visitInnerClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> outerName<span class="token punctuation">,</span> innerName<span class="token punctuation">,</span> access<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">FieldVisitor</span> <span class="token function">visitField</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitField</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAnnotationPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">AnnotationVisitor</span> av <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>annotationDesc<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                av<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            isAnnotationPresent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果类版本低于 1.5，这个适配器将其更新至该版本。这是必要地，因为对于版本低于 1.5 的类，JVM 会忽略其中的注释。</p><p>注释在类和方法适配器中的最后一种应用情景，也可能是最常见的应用情景，就是以注释实现转换的参数化。例如，你可能仅对于那些具有@Persistent 注释的字段来转换字段的访问， 仅对于那些拥有@Log 注释的方法添加记录代码，如此等等。所有这些应用情景都可以很轻松地实现，因为注释是必须首先访问的：必须在字段和方法之前访问类注释，必须在代码之前访问方法和参数注释。因此，只需在检测到所需注释时设定一个标志，然后在后面的转换中使用，就像上面的例子用 isAnnotationPresent 标志所做的事情。</p><h2 id="_4-2-3-工具" tabindex="-1"><a class="header-anchor" href="#_4-2-3-工具" aria-hidden="true">#</a> 4.2.3 工具</h2><p>2.3 节介绍的 TraceClassVisitor, CheckClassAdapter 和 ASMifier 类也支持注释 （ 就 像 对 于 方 法 一 样 ， 还 可 能 使 用 TraceAnnotationVisitor 或 CheckAnnotationAdapter，在各个注释的级别工作，而不是在类级别工作）。它们可用于查看如何生成某个特定注释。例如，使用以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span>classpath asm<span class="token punctuation">.</span>jar<span class="token operator">:</span>asm<span class="token operator">-</span>util<span class="token punctuation">.</span>jar \\<span class="token number">1</span> 
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ASMifier</span> \\ 
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Deprecated</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将输出如下代码（经过微小的重构）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">asm<span class="token punctuation">.</span>java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeprecatedDump</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AnnotationVisitor</span> av<span class="token punctuation">;</span>
        cw<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token constant">V1_5</span><span class="token punctuation">,</span> <span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_ANNOTATION</span> <span class="token operator">+</span> <span class="token constant">ACC_ABSTRACT</span>
                        <span class="token operator">+</span> <span class="token constant">ACC_INTERFACE</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Deprecated&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;java/lang/annotation/Annotation&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span>
            av <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;Ljava/lang/annotation/Documented;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            av<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            av <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;Ljava/lang/annotation/Retention;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            av<span class="token punctuation">.</span><span class="token function">visitEnum</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ljava/lang/annotation/RetentionPolicy;&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;RUNTIME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            av<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cw<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码说明如何用 <strong>ACC_ANNOTATION</strong> 标志创建一个注释类，并说明如何创建两个类注释， 一个没有值，一个具有枚举值。方法注释和参数注释可以采用 <strong>MethodVisitor</strong> 类中定义的 <strong>visitAnnotation</strong> 和 <strong>visitParameterAnnotation</strong> 方法以类似方式创建。</p>`,27),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","4.2zhushi.html.vue"]]);export{k as default};
