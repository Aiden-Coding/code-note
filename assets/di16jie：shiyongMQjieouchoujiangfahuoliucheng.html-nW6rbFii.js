import{_ as o,r as t,o as r,c,a as e,b as a,d as s,e as p}from"./app-3RcBQnkC.js";const l={},i=e("h1",{id:"第16节-使用mq解耦抽奖发货流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第16节-使用mq解耦抽奖发货流程","aria-hidden":"true"},"#"),a(" 第16节：使用MQ解耦抽奖发货流程")],-1),d=e("br",null,null,-1),h={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},u=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！")],-1),_={href:"https://gitcode.net/KnowledgePlanet/Lottery/-/tree/211030_xfg_AsyncDistributionAward",target:"_blank",rel:"noopener noreferrer"},k=e("li",null,"描述：使用MQ消息的特性，把用户抽奖到发货到流程进行解耦。这个过程中包括了消息的发送、库表中状态的更新、消息的接收消费、发奖状态的处理等。",-1),f=e("h2",{id:"零、优秀作业",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#零、优秀作业","aria-hidden":"true"},"#"),a(" 零、优秀作业")],-1),m={href:"https://t.zsxq.com/06AAqNr3F",target:"_blank",rel:"noopener noreferrer"},b={href:"https://t.zsxq.com/06I6uVjMN",target:"_blank",rel:"noopener noreferrer"},g={href:"https://t.zsxq.com/0cAi0mcLa",target:"_blank",rel:"noopener noreferrer"},v={href:"https://t.zsxq.com/0ecTVUp53",target:"_blank",rel:"noopener noreferrer"},x=p(`<h2 id="一、开发日志" tabindex="-1"><a class="header-anchor" href="#一、开发日志" aria-hidden="true">#</a> 一、开发日志</h2><ul><li>在数据库表 <code>user_strategy_export</code> 添加字段 <code>mq_state</code> 这个字段用于发送 MQ 成功更新库表状态，如果 MQ 消息发送失败则需要通过定时任务补偿 MQ 消息。PS：你可以使用本章节分支下的 sql 更新自己的库表。</li><li>启动 kafka 新增 topic：lottery_invoice 用于发货单消息，当抽奖完成后则发送一个发货单，再异步处理发货流程，这个部分就是MQ的解耦流程使用。</li><li>在 <code>ActivityProcessImpl#doDrawProcess</code> 活动抽奖流程编排中补全用户抽奖后，发送MQ触达异步奖品发送的流程。</li></ul><h2 id="二、创建主题-topic" tabindex="-1"><a class="header-anchor" href="#二、创建主题-topic" aria-hidden="true">#</a> 二、创建主题（Topic）</h2><p>在开发前我们先启动 Kafka 并新增加一个 MQ 的 Topic，命令语句如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>启动zk：bin<span class="token operator">/</span>zookeeper<span class="token operator">-</span>server<span class="token operator">-</span>start<span class="token punctuation">.</span>sh <span class="token operator">-</span>daemon config<span class="token operator">/</span>zookeeper<span class="token punctuation">.</span>properties
启动kafka：bin<span class="token operator">/</span>kafka<span class="token operator">-</span>server<span class="token operator">-</span>start<span class="token punctuation">.</span>sh <span class="token operator">-</span>daemon config<span class="token operator">/</span>server<span class="token punctuation">.</span>properties
创建topic：bin<span class="token operator">/</span>kafka<span class="token operator">-</span>topics<span class="token punctuation">.</span>sh <span class="token operator">--</span>create <span class="token operator">--</span>zookeeper localhost<span class="token operator">:</span><span class="token number">2181</span> <span class="token operator">--</span>replication<span class="token operator">-</span>factor <span class="token number">1</span> <span class="token operator">--</span>partitions <span class="token number">1</span> <span class="token operator">--</span>topic lottery_invoice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function M(Q,q){const n=t("ExternalLinkIcon");return r(),c("div",null,[i,e("p",null,[a("作者：小傅哥 "),d,a("博客："),e("a",h,[a("https://bugstack.cn"),s(n)])]),u,e("ul",null,[e("li",null,[a("分支："),e("a",_,[a("211030_xfg_AsyncDistributionAward"),s(n)])]),k]),f,e("ul",null,[e("li",null,[e("a",m,[a("在抽奖之后完成用mq发送和接受发奖信息 @Chin"),s(n)])]),e("li",null,[e("a",b,[a("使用MQ解耦抽奖发货流程 @Geroge Liu"),s(n)])]),e("li",null,[e("a",g,[a("使用MQ解耦抽奖发货的流程 @咖啡苦涩"),s(n)])]),e("li",null,[e("a",v,[a("基于整个DDD架构，对应用层与接口层进行了数据对象的隔离，增加一个DTO对象，利用 MapStruct 来实现对象转换 @错否"),s(n)])])]),x])}const y=o(l,[["render",M],["__file","di16jie：shiyongMQjieouchoujiangfahuoliucheng.html.vue"]]);export{y as default};
