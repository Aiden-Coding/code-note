import{_ as t,r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"第12节-加载文件生成链表单词树-输入属性时英文校准提醒",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第12节-加载文件生成链表单词树-输入属性时英文校准提醒","aria-hidden":"true"},"#"),s(" 第12节：加载文件生成链表单词树，输入属性时英文校准提醒")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>你不知道这个已经有人做了吗？</code></p><p>哈哈哈，是不是你在做一些尝试、创新、落地的时候，都可能会被有些人问这样的话，好像这一句话还挺有力量的。<code>你不知道说明你调研不够、有人做了你还搞证明浪费时间</code>，那你问他你知道那个已经做了的怎么设计的、用了什么技术、我们可以借鉴哪些能力呢，他又有7788的一堆理由，总之一张嘴，都是进口饮料。</p><p>但其实我们很多时候在学习补充自己的能力，是要通过大量实践验证的，在实践的过程中完善X产品的a功能，补充Y产品的b功能，而这些一个个小的点就像我们积累下来的乐高玩具，我们有实践支撑理论，那么在以后真的要开发产品所需能力的时候，就是把这些一个个的乐高技术技能，组合起来，搭建出我们的目标结果。<code>但如果你没折腾过，那么手里的乐高肯定不多！</code></p><h2 id="二、需求目的" tabindex="-1"><a class="header-anchor" href="#二、需求目的" aria-hidden="true">#</a> 二、需求目的</h2><p>首先我想问问，你在编程开发中，有把类名称、属性名、方法名，写错的时候吗，比如；把<code>data</code>写成<code>date</code>、把<code>main</code>写成<code>mian</code>、把<code>queryBatch</code>写成<code>queryBitch</code>，闹了大笑话了，上线对外还没发修改了。</p><p>那能有什么办法在我写这样的单词属性名称的时候，给我来个提示，把那些关联到的正确的提醒出来，不要让我还得一个个敲，主要是还不受控制的敲错呢？</p><p>办法是有的，本章节我们就结合 IDEA Plugin 开发的能力，在启动插件后加载常用单词文件，生成一个单词树的结构。那么用户在 IDEA 开发时输入属性名称的时候，按照输入信息获取单词树中的匹配信息，并提醒成列表反馈到用户输入界面。</p><h2 id="三、案例开发" tabindex="-1"><a class="header-anchor" href="#三、案例开发" aria-hidden="true">#</a> 三、案例开发</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>guide<span class="token operator">-</span>idea<span class="token operator">-</span>plugin<span class="token operator">-</span>remind
├── <span class="token punctuation">.</span>gradle
└── src
    ├── main
    │   └── java
    │   	└── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>guide<span class="token punctuation">.</span>idea<span class="token punctuation">.</span>plugin 
    │       	├── action
    │       	│	└── <span class="token class-name">RemindCompletionContributor</span><span class="token punctuation">.</span>java
    │       	├── application
    │       	│	└── <span class="token class-name">IWordManageService</span><span class="token punctuation">.</span>java
    │       	├── domain
    │       	│	├── model
    │       	│	│   └── <span class="token class-name">Node</span><span class="token punctuation">.</span>java
    │       	│	└── service
    │       	│	    ├── <span class="token class-name">AbstractWordManage</span><span class="token punctuation">.</span>java
    │       	│	    └── <span class="token class-name">WordManageServiceImpl</span><span class="token punctuation">.</span>java
    │       	└── infrastructure
    │       	 	└── <span class="token class-name">Utils</span><span class="token punctuation">.</span>java
    ├── resources
    │   ├── dictionary
    │   │   ├── word01<span class="token punctuation">.</span>txt
    │   │   ├── word02<span class="token punctuation">.</span>txt
    │   │   └── word03<span class="token punctuation">.</span>txt
    │   └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span>
    │       └── plugin<span class="token punctuation">.</span>xml
    ├── build<span class="token punctuation">.</span>gradle
    └── gradle<span class="token punctuation">.</span>properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源码获取</strong>：#公众号：<code>bugstack虫洞栈</code> 回复：<code>idea</code> 即可下载全部 IDEA 插件开发源码</p><p>在此 IDEA 插件工程中，主要分为2块核心功能：</p><ul><li>以接口 <code>IWordManageService</code> 为主的用于实现对 <code>dictionary</code> 处理，生成单词树链表结构。</li><li>以服务 <code>RemindCompletionContributor</code> 检测用户输入的熟悉单词信息，从单词树中索引到匹配的内容返回给用户。</li></ul><h3 id="_2-单词树处理" tabindex="-1"><a class="header-anchor" href="#_2-单词树处理" aria-hidden="true">#</a> 2. 单词树处理</h3><h4 id="_2-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-1-数据结构" aria-hidden="true">#</a> 2.1 数据结构</h4><p>处理单词树，其实就是处理的一种数据结构，怎么让在用户一个个的输入字母的时候，找到对应匹配的单词。那么这里就需要把文件中的单词按照字母一个个存放到链表结构中，例如把 fustack 存放到单词树中，如下：</p><p><strong>word.txt</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fustack#adj<span class="token punctuation">.</span>小傅哥的微信
batch#adj<span class="token punctuation">.</span>批量
bitch#adj<span class="token punctuation">.</span>彪子 <span class="token constant">PS</span>：你是要输入 batch 吧？
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>word tree</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>f<span class="token operator">-&gt;</span>u
f<span class="token operator">-&gt;</span>u<span class="token operator">-&gt;</span>s
f<span class="token operator">-&gt;</span>u<span class="token operator">-&gt;</span>s<span class="token operator">-&gt;</span>t
f<span class="token operator">-&gt;</span>u<span class="token operator">-&gt;</span>s<span class="token operator">-&gt;</span>t<span class="token operator">-&gt;</span>a
f<span class="token operator">-&gt;</span>u<span class="token operator">-&gt;</span>s<span class="token operator">-&gt;</span>t<span class="token operator">-&gt;</span>a<span class="token operator">-&gt;</span>c
f<span class="token operator">-&gt;</span>u<span class="token operator">-&gt;</span>s<span class="token operator">-&gt;</span>t<span class="token operator">-&gt;</span>a<span class="token operator">-&gt;</span>k
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户输入f、u，那么就开始索引这棵单词树，找到匹配的字母以及当前字母位置后续链路上的整个内容，并记录到可以反馈给用户的单词列表中。</p><h4 id="_2-2-单词存放" tabindex="-1"><a class="header-anchor" href="#_2-2-单词存放" aria-hidden="true">#</a> 2.2 单词存放</h4><p><strong>cn.bugstack.guide.idea.plugin.domain.service.AbstractWordManage</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wordInfo <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>wordInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            wordInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> wordInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>wordInfo<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> explainPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>wordInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> hasMatch <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> singleExplain <span class="token operator">=</span> wordInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">do</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        singleExplain <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>singleExplain<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;[；;,，]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    wordInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>hasMatch <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>wordsTree<span class="token punctuation">,</span> wordInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wordInfo<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> wordInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">,</span> <span class="token class-name">String</span> words<span class="token punctuation">,</span> <span class="token class-name">String</span> explain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> charIndex <span class="token operator">=</span> aChar <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>charIndex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>charIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        root <span class="token operator">=</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>charIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>c <span class="token operator">=</span> aChar<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>prefix<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    root<span class="token punctuation">.</span>explain <span class="token operator">=</span> explain<span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>loadFile 加载和解析文件中的单词，之后使用正则表达式获取单词和描述信息。</li><li>insert 是形成单词树的一个操作，把对应匹配的单词字母，生成node节点，因为一组node集合最多是26个字母，node节点拉出来的链路依旧是最多26个字母，以此类推形成链表树结构。</li></ul><h3 id="_3-单词使用" tabindex="-1"><a class="header-anchor" href="#_3-单词使用" aria-hidden="true">#</a> 3. 单词使用</h3><p>接下来我们使用到继承 <code>CompletionContributor</code> 的实现类，来监听用户输入的属性字母信息，每一个输入都会调用到这个实现类中，之后在实现类里索引到匹配的单词列表反馈给用户。</p><h4 id="_3-1-启动监听" tabindex="-1"><a class="header-anchor" href="#_3-1-启动监听" aria-hidden="true">#</a> 3.1 启动监听</h4><p><strong>cn.bugstack.guide.idea.plugin.action.RemindCompletionContributor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RemindCompletionContributor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">IWordManageService</span> wordManageService <span class="token operator">=</span> <span class="token class-name">ApplicationManager</span><span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token class-name">WordManageServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">CompletionProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletionParameters</span><span class="token punctuation">&gt;</span></span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultCompletionProvider</span><span class="token punctuation">(</span>wordManageService<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token class-name">CompletionType</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">,</span> <span class="token function">psiElement</span><span class="token punctuation">(</span><span class="token class-name">PsiIdentifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withParent</span><span class="token punctuation">(</span><span class="token class-name">PsiLocalVariable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token class-name">CompletionType</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">,</span> <span class="token function">psiElement</span><span class="token punctuation">(</span><span class="token class-name">PsiIdentifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withParent</span><span class="token punctuation">(</span><span class="token class-name">PsiMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token class-name">CompletionType</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">,</span> <span class="token function">psiElement</span><span class="token punctuation">(</span><span class="token class-name">PsiIdentifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withParent</span><span class="token punctuation">(</span><span class="token class-name">PsiField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token class-name">CompletionType</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">,</span> <span class="token function">psiElement</span><span class="token punctuation">(</span><span class="token class-name">PsiIdentifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withParent</span><span class="token punctuation">(</span><span class="token class-name">PsiParameter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先这里需要把处理单词提供辅助输入提醒的操作，注入到 extend 中，目前这个支持 Java 输入，也可以扩展成其他语言的输入辅助提醒。</li></ul><h4 id="_3-2-单词索引" tabindex="-1"><a class="header-anchor" href="#_3-2-单词索引" aria-hidden="true">#</a> 3.2 单词索引</h4><p>这里的索引是一个继承 <code>CompletionProvider</code> 的实现类，通过对 <code>addCompletions</code> 的扩展，完成对单词的索引操作。</p><p><strong>索引单词</strong></p><p><strong>cn.bugstack.guide.idea.plugin.domain.service.WordManageServiceImpl</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> root <span class="token operator">=</span> wordsTree<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> charIndex <span class="token operator">=</span> aChar <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>charIndex <span class="token operator">&gt;</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">.</span>length <span class="token operator">||</span> charIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>charIndex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>charIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>prefix <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>slot<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">collect</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>slot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">,</span> list<span class="token punctuation">,</span> <span class="token constant">RESULT_LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token constant">RESULT_LIMIT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>入参 <code>prefix</code> 是用于输入的单词，在 searchPrefix 中提取单词中中的字母，例如：fus，则陆续提取三个字母，一直到最后一个字母 <code>root = root.slot[charIndex];</code></li><li>在索引到匹配的字母后，按照当前字母的对应 <code>s开头</code> 的列表，循环获取后续的字母并返回最终的结果列表。</li></ul><h3 id="_4-plugin-配置" tabindex="-1"><a class="header-anchor" href="#_4-plugin-配置" aria-hidden="true">#</a> 4. plugin 配置</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span> <span class="token attr-name">defaultExtensionNs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.intellij<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Add your extensions here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>applicationService</span> <span class="token attr-name">serviceImplementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.guide.idea.plugin.domain.service.WordManageServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>completion.contributor</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JAVA<span class="token punctuation">&quot;</span></span>
                            <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>first<span class="token punctuation">&quot;</span></span>
                            <span class="token attr-name">implementationClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.guide.idea.plugin.action.RemindCompletionContributor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们需要把单词文件树处理实现类和监听用户的单词输入，配置到 extensions 中，这样就可以使用我们的单词输入提醒操作了。</li></ul><h2 id="四、测试验证" tabindex="-1"><a class="header-anchor" href="#四、测试验证" aria-hidden="true">#</a> 四、测试验证</h2><p><strong>启动插件</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-220122-9-01.png" alt=""></p><ul><li>在 Grandle -&gt; Tasks -&gt; intellj -&gt; runIde 进行启动</li><li>启动后打开一个你的工程进行输入测试属性信息进行测试</li></ul><p><strong>测试插件</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-220122-9-02.png" alt=""></p><ul><li>现在当你输入一个单词的时候，就可以把我们存放好在文件里的单词提醒给用户了。<em>很好玩吧</em></li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>在本章节我们学习到了如何去处理树结构的单词列表的存放和读取，对于这样的数据结构使用其实不只是在这里，也可以放到一些其他文字类的辅助输入提醒中。</li><li>接下来又是一个有关 IDEA 插件开发的知识点，就是把一些提醒信息自定义单词和描述，反馈给用户输入界面中。</li><li>这些内容的知识点使用，都可以被我们赋能于其他场景开发中，远远不只是这样一个场景。而这些内容虽然不是多有难度，但如果没见过、没想过、没用过，就一定不会想得到可以用。</li></ul>`,52);function v(m,b){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),c(a)])]),d])}const h=t(i,[["render",v],["__file","2022-01-22-《IntelliJ IDEA chajiankaifa》di9jie：jiazaiwenjianshengchenglianbiaodancishu，shurushuxingshiyingwenxiaozhuntixing.html.vue"]]);export{h as default};
