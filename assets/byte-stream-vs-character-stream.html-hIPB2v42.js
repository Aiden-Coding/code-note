import{_ as e,o as a,c as r,e as t}from"./app-3RcBQnkC.js";const h={},d=t('<h3 id="字节与字符" tabindex="-1"><a class="header-anchor" href="#字节与字符" aria-hidden="true">#</a> 字节与字符</h3><p>Bit最小的二进制单位 ，是计算机的操作部分。取值0或者1</p><p>Byte（字节）是计算机操作数据的最小单位由8位bit组成 取值（-128-127）</p><p>Char（字符）是用户的可读写的最小单位，在Java里面由16位bit组成 取值（0-65535）</p><h3 id="字节流" tabindex="-1"><a class="header-anchor" href="#字节流" aria-hidden="true">#</a> 字节流</h3><p>操作byte类型数据，主要操作类是OutputStream、InputStream的子类；不用缓冲区，直接对文件本身操作。</p><h3 id="字符流" tabindex="-1"><a class="header-anchor" href="#字符流" aria-hidden="true">#</a> 字符流</h3><p>操作字符类型数据，主要操作类是Reader、Writer的子类；使用缓冲区缓冲字符，不关闭流就不会输出任何内容。</p><h3 id="互相转换" tabindex="-1"><a class="header-anchor" href="#互相转换" aria-hidden="true">#</a> 互相转换</h3><p>整个IO包实际上分为字节流和字符流，但是除了这两个流之外，还存在一组字节流-字符流的转换类。</p><p>OutputStreamWriter：是Writer的子类，将输出的字符流变为字节流，即将一个字符流的输出对象变为字节流输出对象。</p><p>InputStreamReader：是Reader的子类，将输入的字节流变为字符流，即将一个字节流的输入对象变为字符流的输入对象。</p>',12),i=[d];function c(n,s){return a(),r("div",null,i)}const o=e(h,[["render",c],["__file","byte-stream-vs-character-stream.html.vue"]]);export{o as default};
