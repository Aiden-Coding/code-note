import{_ as t,r as p,o,c,a as n,b as s,d as e,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"方案设计-基于库表分段扫描和数据redis预热-优化分布式延迟任务触达时效性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#方案设计-基于库表分段扫描和数据redis预热-优化分布式延迟任务触达时效性","aria-hidden":"true"},"#"),s(" 方案设计：基于库表分段扫描和数据Redis预热，优化分布式延迟任务触达时效性")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),h={href:"https://mp.weixin.qq.com/s/jJ0vxdeKXHiYZLrwDEBOcQ",target:"_blank",rel:"noopener noreferrer"},m=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>不卷了，能用就行！</code></p><p>哈哈哈，说好的不卷了，能凑活用就行了。但每次接到新需求时都手痒，想结合着上一次的架构设计和落地经验，在这一次需求上在迭代更新，或者找到完全颠覆之前的更优方案。<em>卷完代码的那一刻总是神清气爽</em></p><p>其实大部分喜欢写代码的一类纯粹码农，都是比较卷的，就比如一个需求在实现上是能用大概<code>是P5</code>、如果这个做出来的功能不只是能用还非常好用<code>是P6</code>、除了好用还凝练共性需求开发成通用的组件服务<code>是P7</code>。每一个成长过来的码农，都是在造轮子的路上一次次验证自己的想法和加以实践，绝对不是一篇篇的八股文就能累出来一个高级的技术大牛。</p><h2 id="二、延迟任务场景" tabindex="-1"><a class="header-anchor" href="#二、延迟任务场景" aria-hidden="true">#</a> 二、延迟任务场景</h2><p><code>什么是延迟任务？</code></p><p>当我们的实际业务需求场景中，有一些活动开始前的状态变更、订单结算后的T+1对账、贷款单息费的产生，都是需要使用到延迟任务来进行触达。实际的操作一般会有 Quartz、Schedule 来对你的库表数据进行定时扫描和处理，当条件满足后做数据状态的变更或者产生新的数据插入到表中。</p><p>这样一个简单的需求就是延迟任务最初需求，如果需求前期内容较少、使用方不多，可能在实际开发中就只是一个单台机器直接对着表一顿轮训就完事了。但随着业务需求的发展和功能的复杂度提升，往往反馈到研发设计和实现，就不那么简单了，比如：你需要保障尽可能低延迟完成较大规模的数据量扫描处理，否则就像贷款单息费的产生，已经到了第二天用户还没看到自己的息费信息或者是还款后的重新对账，可能就这个时候就要产生客诉了。</p><p>那么，类似这样的场景该如何设计呢？</p><h2 id="三、延迟任务设计" tabindex="-1"><a class="header-anchor" href="#三、延迟任务设计" aria-hidden="true">#</a> 三、延迟任务设计</h2><p>通常的任务中心处理流程主要，主要是由定时任务扫描任务库表，把即将达到超时时间的任务信息扫描到处理队列(<code>内存/MQ消息</code>)，再由业务系统进行处理任务，处理完成后更新库表中的任务状态。</p><p><img src="https://bugstack.cn/images/article/develop/framework_220214_01.png" alt="高延时任务调度"></p><p><strong>问题</strong>：</p><ol><li>海量数据规模较大的任务列表数据，在分库分表下该需要快速扫描。</li><li>任务扫描服务与业务逻辑处理，耦合在一起，不具有通用性和复用性。</li><li>细分任务体系有些是需要低延迟处理的，不能等待过长时间。</li></ol><h3 id="_1-任务表方式" tabindex="-1"><a class="header-anchor" href="#_1-任务表方式" aria-hidden="true">#</a> 1. 任务表方式</h3><p>除了一些较小的状态变更场景，例如在各自业务的库表中，就包含了一个状态字段，这个字段一方面有程序逻辑处理变更的状态，也有到达<code>指定到期</code>时间后由任务服务自动变更处理的操作，一般这类功能，直接设计到自己的库表中即可。</p><p>那么还有一些较大也较为频繁使用的场景，如果都是在每个系统的各自所需的N多个表中，都添加这样的字段进行维护，就显得非常冗余了，也不那么易于维护。所以针对这样的场景就很适合做一个通用的任务延时系统，各业务系统把需要被延时执行的动作提交到延时系统中，再有延时系统在指定时间下进行回调，回调的动作可以是接口或者MQ消息进行触达。例如可以设计这样一个任务调度表：</p><p><img src="https://bugstack.cn/images/article/develop/framework_220214_02.png" alt="任务调度库表设计"></p><ol><li>抽取的任务调度表，主要是拿到什么任务，在什么时间发起动作，具体的动作处理仍交给业务工程处理。</li><li>大批量的各自业务的任务进行集中处理，则需要设计一个分库分表，满足于后续业务体量的增长。</li><li>门牌号设计，针对一张表的扫描，如果数据量较大，又不希望只是一个任务扫描一个表，可以多个任务扫描一个表，加到扫描的体量。这个时候就需要一个门牌号来隔离不同任务扫描的范围，避免扫描出重复的任务数据。</li></ol><h3 id="_2-低延迟方式" tabindex="-1"><a class="header-anchor" href="#_2-低延迟方式" aria-hidden="true">#</a> 2. 低延迟方式</h3><p>低延迟处理方案，是在任务表方式的基础上，新增加的时间把控处理。它可以把即将到期的前一段时间的任务，放置到 Redis 集群队里中，在消费的时候再从队列中 pop 出来，这样可以更快的接近任务的处理时效，避免因为扫库间隔较大延迟任务执行。</p><p><img src="https://bugstack.cn/images/article/develop/framework_220214_03.png" alt="任务处理流程"></p><ul><li>在接收业务系统提交进来的延迟任务时，按照执行时间的长短放置到任务库或者也同步到 Redis 集群中，一些执行时间较晚的任务则可以先放到任务库，再通过扫描的方式添加到超时任务执行队列中。</li><li>那么关于这块的设计核心在于 Redis 队列的使用，以及为了保证消费的可靠性需要引入二阶段消费、注册 ZK 注册中心至少保证一次消费的处理。<em>本文重点主要放在 Redis 队列的设计，其他更多的逻辑处理，可以按照业务需求进行扩展和完善</em></li></ul><p><strong>Redis 消费队列</strong></p><p><img src="https://bugstack.cn/images/article/develop/framework_220214_04.png" alt="Redis 消费队列"></p><ul><li>按照消息体计算对应数据所属的槽位 <code>index = CRC32 &amp; 7</code></li><li>StoreQueue 采用 Slot 按照 SlotKey = <code>#{topic}_#{index} </code> 和 Sorted Set 的数据结构按执行任务分数排序，存放任务执行信息。<em>定时消息将时间戳作为分数，消费时每次弹出分数小于当前时间戳的一个消息</em></li><li>为了保障每条消息至少可消费一次，消费者不是直接 pop 有序集合中的元素，而是将元素从 StoreQueue 移动到 PrepareQueue 并返回消息给消费者。消费成功后再从 PrepareQueue 从删除，如果消费失败则从PreapreQueue 重新移动到 StoreQueue，这样二阶段消费的方式进行处理。</li><li>参考文档：2021 阿里技术人的百宝黑皮书PDF文，<code>低延迟的超时中心实现方式</code></li></ul><p><strong>简单案例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_delay_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">RBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> blockingQueue <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getBlockingQueue</span><span class="token punctuation">(</span><span class="token string">&quot;TASK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RDelayedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> delayedQueue <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getDelayedQueue</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Object</span> take <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>take<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        delayedQueue<span class="token punctuation">.</span><span class="token function">offerAsync</span><span class="token punctuation">(</span><span class="token string">&quot;测试&quot;</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token number">100L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试数据</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">13</span>  <span class="token constant">WARN</span> <span class="token number">204760</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>      <span class="token class-name">Finalizer</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">i<span class="token punctuation">.</span>l<span class="token punctuation">.</span>c<span class="token punctuation">.</span>resource<span class="token punctuation">.</span></span>DefaultClientResources</span>    <span class="token operator">:</span> <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>core<span class="token punctuation">.</span>resource<span class="token punctuation">.</span></span>DefaultClientResources</span> was not shut down properly<span class="token punctuation">,</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> was not called before it&#39;s garbage<span class="token operator">-</span><span class="token class-name"><span class="token namespace">collected<span class="token punctuation">.</span></span> Call</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> or <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">long</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">)</span> 
测试<span class="token number">1</span>
测试<span class="token number">2</span>
测试<span class="token number">3</span>
测试<span class="token number">4</span>
测试<span class="token number">5</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),E={href:"https://github.com/fuzhengwei/TimeOutCenter",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,"描述：使用 redisson 中的 DelayedQueue 作为消息队列，写入后等待消费时间进行 POP 消费。",-1),v=n("h2",{id:"四、总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、总结","aria-hidden":"true"},"#"),s(" 四、总结")],-1),B=n("li",null,"调度任务的使用在实际的场景中非常频繁，例如我们经常使用 xxl-job，也有一些大厂自研的分布式任务调度组件，这些可能原本都是很小很简单的功能，但经过抽象、整合、提炼，变成了一个个核心通用的中间件服务。",-1),_=n("li",null,[s("当我们在考虑使用任务调度的时候，无论哪种方式的设计和实现，都需要考虑这个功能使用时候的以为迭代和维护性，如果仅仅是一个非常小的场景，又没多少人使用的话，那么在自己机器上折腾就可以。"),n("em",null,"过渡的设计和使用有时候也会把研发资源代入泥潭")],-1),g={href:"https://bugstack.cn/md/project/lottery/introduce/Lottery%E6%8A%BD%E5%A5%96%E7%B3%BB%E7%BB%9F.html",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"五、系列推荐",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、系列推荐","aria-hidden":"true"},"#"),s(" 五、系列推荐")],-1),A={href:"https://bugstack.cn/md/about/study/2022-02-07-%E4%BD%A0%E4%B8%8A%E8%BD%A6%EF%BC%8C%E6%88%91%E5%B0%B1%E6%8A%8A%E4%BD%A0%E5%B8%A6%E6%88%90%E5%8D%B7%E7%8E%8B%EF%BC%81.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://bugstack.cn/md/develop/framework/scheme/2021-02-04-%E5%9F%BA%E4%BA%8EIDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%A0%94%E5%8F%91%E4%BA%A4%E4%BB%98%E8%B4%A8%E9%87%8F%E8%87%AA%E5%8A%A8%E5%88%86%E6%9E%90.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://bugstack.cn/md/develop/framework/scheme/2021-02-28-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E4%B8%89%E5%B9%B4%EF%BC%8C%E6%95%B4%E4%B8%8D%E6%98%8E%E7%99%BD%E6%9E%B6%E6%9E%84%E5%9B%BE%E9%83%BD%E7%94%BB%E5%95%A5%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://bugstack.cn/md/about/job/2020-04-11-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E7%AE%80%E5%8E%86%E5%86%99%E6%88%90%E8%BF%99%E6%A0%B7%EF%BC%8C%E8%B0%81%E8%A6%81%E4%BD%A0%E5%91%80%EF%BC%81.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://bugstack.cn/md/about/job/2020-11-15-BATJTMD%EF%BC%8C%E5%A4%A7%E5%8E%82%E6%8B%9B%E8%81%98%EF%BC%8C%E9%83%BD%E6%8B%9B%E4%BB%80%E4%B9%88%E6%A0%B7Java%E7%A8%8B%E5%BA%8F%E5%91%98%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"};function D(F,Q){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)]),k,s("原文："),n("a",h,[s("https://mp.weixin.qq.com/s/jJ0vxdeKXHiYZLrwDEBOcQ"),e(a)])]),m,n("ul",null,[n("li",null,[s("源码："),n("a",E,[s("https://github.com/fuzhengwei/TimeOutCenter"),e(a)])]),b]),v,n("ul",null,[B,_,n("li",null,[s("其实各项技术的知识点，都像是一个个工具，刀枪棍棒斧钺钩，那能怎么结合各自的特点，把这些兵器用起来，才是一个程序员不断成长的过程。如果你希望了解更多此类有深度的技术内容，可以加入 "),n("a",g,[s("Lottery 分布式抽奖秒杀系统"),e(a)]),s(" 学习更有价值的更抗用的实战手段。")])]),f,n("ul",null,[n("li",null,[n("a",A,[s("金三银四面试前，把自己弄成卷王！"),e(a)])]),n("li",null,[n("a",w,[s("方案设计：基于IDEA插件开发和字节码插桩技术，实现研发交付质量自动分析"),e(a)])]),n("li",null,[n("a",y,[s("工作两三年了，整不明白架构图都画啥？"),e(a)])]),n("li",null,[n("a",C,[s("工作两年简历写成这样，谁要你呀！"),e(a)])]),n("li",null,[n("a",x,[s("BATJTMD，大厂招聘，都招什么样Java程序员？"),e(a)])])])])}const T=t(i,[["render",D],["__file","2022-02-14-jiyukubiaofenduansaomiaoheshujuRedisyure，youhuafenbushiyanchirenwuchudashixiaoxing.html.vue"]]);export{T as default};
