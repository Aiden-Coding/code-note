import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"面经手册-·-第19篇《thread-start-它是怎么让线程启动的呢-》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第19篇《thread-start-它是怎么让线程启动的呢-》","aria-hidden":"true"},"#"),s(" 面经手册 · 第19篇《Thread.start() ，它是怎么让线程启动的呢？》")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=e(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>有句话：正因为你优秀，所以难以卓越！</code></p><p>刚开始听这句话还在上学，既不卓越、也不优秀，甚至可能还有点笨！但突然从某次爬到班级的前几名后，开始喜欢上了这种感觉，原来前面的风景是如此灿烂😜！</p><p>优秀和卓越差的不是一个等级，当你感觉自己优秀后，还能保持空瓶的心态开始，才能逐步的像卓越迈进，并漫漫长！</p><p>是不小时候更容易学会更多的知识，但越大越笨了！人可能很容易被自己的年纪大了，当成长者。却很少能保持一个低姿态谦卑的心态，不断的学习。<code>所以最后</code>，放不下自己，也拾不起能力。</p><p>喜欢一句话，<code>蓝是天的颜色、红是火的象征，我不学大海抄袭天的蓝、也不学晚霞模拟火的红。我就是我，生命是我的、命运是我的</code>。<strong>健身也是你的、学习也是你的</strong>，只要你有一个好心态，自然会走到前面卓越那里！</p><h2 id="二、面试题" tabindex="-1"><a class="header-anchor" href="#二、面试题" aria-hidden="true">#</a> 二、面试题</h2><p><code>谢飞机，小记！</code> <em>码德</em>，年轻人写代码好猖狂，不遵守规范还喷我，你要<code>耗子尾汁</code>！谢飞机骂骂咧咧的下班后，找面试官聊心得。</p><p><strong>谢飞机</strong>：我感觉天天就像活在粪堆，代码都是乱糟糟，我有心无力！</p><p><strong>面试官</strong>：怎么，想跳槽了？</p><p><strong>谢飞机</strong>：想去写代码有规范的公司，想提升！</p><p><strong>面试官</strong>：嗯！确实，有些大公司的代码质量要好一些。但是你也要自身能力强的。</p><p><strong>谢飞机</strong>：是的，我一直在努力学习！准备跑路！</p><p><strong>面试官</strong>：那我顺便考你个题，看看你进大厂的几率大不。<code>嗯... Java 线程如何启动的？</code></p><p><strong>谢飞机</strong>：如何启动的？<code>start</code> 启动的！</p><p><strong>面试官</strong>：还有吗？</p><p><strong>谢飞机</strong>：嗯...，没了！</p><p><strong>面试官</strong>：嗯，可能<code>会与不会</code>这一个题并不会让你代码有多牛、有多好，但是你的技术栈深度和广度，决定你的编程职业生涯是否有一条康庄大道。还是要多努力！</p><h2 id="三、线程启动分析" tabindex="-1"><a class="header-anchor" href="#三、线程启动分析" aria-hidden="true">#</a> 三、线程启动分析</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// todo</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>咳咳</strong>，Java 的线程创建和启动非常简单，但如果问<code>一个线程是怎么启动起来的</code>往往并不清楚，甚至不知道为什么启动时是<code>调用start()</code>，而不是<code>调用run()</code>方法呢？</p><p><strong>那么</strong>，为了让大家有一个更直观的认知，我们先站在上帝视角。把这段 Java 的线程代码，到 JDK 方法使用，以及 JVM 的相应处理过程，展示给大家，以方便我们后续逐步分析。</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-19-1.png" alt="图 19-1 线程启动分析"></p><p><strong>以上</strong>，就是一个线程启动的整体过程分析，会涉及到如下知识点：</p><ul><li>线程的启动会涉及到本地方法（JNI）的调用，也就是那部分 C++ 编写的代码。</li><li>JVM 的实现中会有不同操作系统对线程的统一处理，比如：Win、Linux、Unix。</li><li>线程的启动会涉及到线程的生命周期状态（RUNNABLE），以及唤醒操作，所以最终会有回调操作。<em>也就是调用我们的 run() 方法</em></li></ul><p>接下来，我们就开始逐步分析每一步源码的执行内容，从而了解线程启动过程。</p><h2 id="四、线程启动过程" tabindex="-1"><a class="header-anchor" href="#四、线程启动过程" aria-hidden="true">#</a> 四、线程启动过程</h2><h3 id="_1-thread-start-uml-图" tabindex="-1"><a class="header-anchor" href="#_1-thread-start-uml-图" aria-hidden="true">#</a> 1. Thread start UML 图</h3><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-19-2.png" alt="图 19-2 Thread start UML 图"></p><p>如图 19-2 是线程的启动过程时序图，整体的链路较长，会涉及到 JVM 的操作。核心源码如下：</p>`,31),v=n("code",null,"Thread.c",-1),h={href:"https://github.com/unofficial-openjdk/openjdk/blob/jdk/jdk/src/java.base/share/native/libjava/Thread.c",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"jvm.cpp",-1),_={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/prims/jvm.cpp",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"thread.cpp",-1),g={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"os.cpp",-1),j={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/os.hpp",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"os_linux.cpp",-1),w={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"os_windows.cpp",-1),T={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/windows/vm/os_windows.cpp",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"vmSymbols.hpp",-1),x={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/classfile/vmSymbols.hpp",target:"_blank",rel:"noopener noreferrer"},M=e(`<h3 id="_2-java-层面-thread-启动" tabindex="-1"><a class="header-anchor" href="#_2-java-层面-thread-启动" aria-hidden="true">#</a> 2. Java 层面 Thread 启动</h3><h4 id="_2-1-start-方法" tabindex="-1"><a class="header-anchor" href="#_2-1-start-方法" aria-hidden="true">#</a> 2.1 start() 方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// todo</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JDK 源码</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>线程启动方法 <code>start()</code>，在它的方法英文注释中已经把核心内容描述出来。<code>Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.</code> 这段话的意思是：由 JVM 调用此线程的 run 方法，使线程开始执行。<em>其实这就是一个 JVM 的回调过程，下文源码分析中会讲到</em></li><li>另外 <code>start()</code> 是一个 <code>synchronized</code> 方法，但为了避免多次调用，在方法中会由线程状态判断。<code>threadStatus != 0</code>。</li><li><code>group.add(this)</code>，是把当前线程加入到线程组，ThreadGroup。</li><li><code>start0()</code>，是一个本地方法，通过 JNI 方式调用执行。这一步的操作才是启动线程的核心步骤。</li></ul><h4 id="_2-2-start0-本地方法" tabindex="-1"><a class="header-anchor" href="#_2-2-start0-本地方法" aria-hidden="true">#</a> 2.2 start0() 本地方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 本地方法 start0</span>
<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册本地方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Make sure registerNatives is the first thing &lt;clinit&gt; does. */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>start0()</code>，是一个本地方法，用于启动线程。</li><li><code>registerNatives()</code>，这个方法是用于注册线程执行过程中需要的一些本地方法，比如：<code>start0</code>、<code>isAlive</code>、<code>yield</code>、<code>sleep</code>、<code>interrupt0</code>等。</li></ul><p><strong>registerNatives</strong>，本地方法定义在 <code>Thread.c</code> 中，以下是定义的核心源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">JNINativeMethod</span> methods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;start0&quot;</span><span class="token punctuation">,</span>           <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_StartThread</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;stop0&quot;</span><span class="token punctuation">,</span>            <span class="token string">&quot;(&quot;</span> <span class="token constant">OBJ</span> <span class="token string">&quot;)V&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_StopThread</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;isAlive&quot;</span><span class="token punctuation">,</span>          <span class="token string">&quot;()Z&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_IsThreadAlive</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;suspend0&quot;</span><span class="token punctuation">,</span>         <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_SuspendThread</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;resume0&quot;</span><span class="token punctuation">,</span>          <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_ResumeThread</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;setPriority0&quot;</span><span class="token punctuation">,</span>     <span class="token string">&quot;(I)V&quot;</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_SetThreadPriority</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;yield&quot;</span><span class="token punctuation">,</span>            <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_Yield</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;sleep&quot;</span><span class="token punctuation">,</span>            <span class="token string">&quot;(J)V&quot;</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_Sleep</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;currentThread&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;()&quot;</span> <span class="token constant">THD</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_CurrentThread</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;interrupt0&quot;</span><span class="token punctuation">,</span>       <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_Interrupt</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;holdsLock&quot;</span><span class="token punctuation">,</span>        <span class="token string">&quot;(&quot;</span> <span class="token constant">OBJ</span> <span class="token string">&quot;)Z&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_HoldsLock</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;getThreads&quot;</span><span class="token punctuation">,</span>        <span class="token string">&quot;()[&quot;</span> <span class="token constant">THD</span><span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_GetAllThreads</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;dumpThreads&quot;</span><span class="token punctuation">,</span>      <span class="token string">&quot;([&quot;</span> <span class="token constant">THD</span> <span class="token string">&quot;)[[&quot;</span> <span class="token constant">STE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_DumpThreads</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;setNativeName&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;(&quot;</span> <span class="token constant">STR</span> <span class="token string">&quot;)V&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">JVM_SetNativeThreadName</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),V=n("strong",null,"源码",-1),L={href:"https://github.com/unofficial-openjdk/openjdk/blob/jdk/jdk/src/java.base/share/native/libjava/Thread.c",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,[s("从定义中可以看到，"),n("code",null,"start0"),s(" 方法会执行 "),n("code",null,"&JVM_StartThread"),s(" 方法，最终由 JVM 层面启动线程。")],-1),N=n("h3",{id:"_3-jvm-创建线程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-jvm-创建线程","aria-hidden":"true"},"#"),s(" 3. JVM 创建线程")],-1),B=n("h4",{id:"_3-1-jvm-startthread",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-1-jvm-startthread","aria-hidden":"true"},"#"),s(" 3.1 JVM_StartThread")],-1),I=n("strong",null,"源码",-1),E={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/prims/jvm.cpp",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">JVM_StartThread</span><span class="token punctuation">(</span><span class="token class-name">JNIEnv</span><span class="token operator">*</span> env<span class="token punctuation">,</span> jobject jthread<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token class-name">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">&quot;JVM_StartThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">JavaThread</span> <span class="token operator">*</span>native_thread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 创建线程</span>
  native_thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaThread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_entry<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 启动线程</span>
  <span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span>native_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">JVM_END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分代码比较多，但核心内容主要是<code>创建线程</code>和<code>启动线程</code>，另外 <code>&amp;thread_entry</code> 也是一个方法，如下：</li></ul><p><strong>thread_entry，线程入口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">thread_entry</span><span class="token punctuation">(</span><span class="token class-name">JavaThread</span><span class="token operator">*</span> thread<span class="token punctuation">,</span> <span class="token constant">TRAPS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">HandleMark</span> <span class="token function">hm</span><span class="token punctuation">(</span><span class="token constant">THREAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Handle</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token constant">THREAD</span><span class="token punctuation">,</span> thread<span class="token operator">-&gt;</span><span class="token function">threadObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">JavaValue</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token constant">T_VOID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">JavaCalls</span><span class="token operator">::</span><span class="token function">call_virtual</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">,</span>
                          obj<span class="token punctuation">,</span>
                          <span class="token class-name">KlassHandle</span><span class="token punctuation">(</span><span class="token constant">THREAD</span><span class="token punctuation">,</span> <span class="token class-name">SystemDictionary</span><span class="token operator">::</span><span class="token class-name">Thread_klass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          vmSymbols<span class="token operator">::</span><span class="token function">run_method_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          vmSymbols<span class="token operator">::</span><span class="token function">void_method_signature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          <span class="token constant">THREAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重点</strong>，在创建线程引入这个线程入口的方法时，<code>thread_entry</code> 中包括了 Java 的回调函数 <code>JavaCalls::call_virtual</code>。这个回调函数会由 JVM 调用。</p><p><strong>vmSymbols::run_method_name()</strong>，就是那个被回调的方法，源码如下：</p>`,6),D=n("strong",null,"源码",-1),O={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/classfile/vmSymbols.hpp",target:"_blank",rel:"noopener noreferrer"},R=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#define <span class="token function">VM_SYMBOLS_DO</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> do_alias<span class="token punctuation">)</span>
<span class="token function">template</span><span class="token punctuation">(</span>run_method_name<span class="token punctuation">,</span> <span class="token string">&quot;run&quot;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个 <code>run</code> 就是我们的 Java 程序中会被调用的 run 方法。接下来我们继续按照代码执行链路，寻找到这个被回调的方法在什么时候调用的。</li></ul><h4 id="_3-2-javathread" tabindex="-1"><a class="header-anchor" href="#_3-2-javathread" aria-hidden="true">#</a> 3.2 JavaThread</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>native_thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaThread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_entry<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，我们继续看 <code>JavaThread</code> 的源码执行内容。</p>`,5),U=n("strong",null,"源码",-1),C={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp",target:"_blank",rel:"noopener noreferrer"},z=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JavaThread</span><span class="token operator">::</span><span class="token class-name">JavaThread</span><span class="token punctuation">(</span><span class="token class-name">ThreadFunction</span> entry_point<span class="token punctuation">,</span> size_t stack_sz<span class="token punctuation">)</span> <span class="token operator">:</span>
  <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
#<span class="token keyword">if</span> <span class="token constant">INCLUDE_ALL_GCS</span>
  <span class="token punctuation">,</span> <span class="token function">_satb_mark_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_satb_mark_queue_set<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">_dirty_card_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_dirty_card_queue_set<span class="token punctuation">)</span>
#endif <span class="token comment">// INCLUDE_ALL_GCS</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TraceThreadEvents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tty<span class="token operator">-&gt;</span><span class="token function">print_cr</span><span class="token punctuation">(</span><span class="token string">&quot;creating thread %p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _jni_attach_state <span class="token operator">=</span> _not_attaching_via_jni<span class="token punctuation">;</span>
  <span class="token function">set_entry_point</span><span class="token punctuation">(</span>entry_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Create the native thread itself.</span>
  <span class="token comment">// %note runtime_23</span>
  os<span class="token operator">::</span><span class="token class-name">ThreadType</span> thr_type <span class="token operator">=</span> os<span class="token operator">::</span><span class="token function">java_thread</span><span class="token punctuation">;</span>
  thr_type <span class="token operator">=</span> entry_point <span class="token operator">==</span> <span class="token operator">&amp;</span>compiler_thread_entry <span class="token operator">?</span> os<span class="token operator">::</span><span class="token function">compiler_thread</span> <span class="token operator">:</span>os<span class="token operator">::</span><span class="token function">java_thread</span><span class="token punctuation">;</span>
  os<span class="token operator">::</span><span class="token function">create_thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> thr_type<span class="token punctuation">,</span> stack_sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ThreadFunction entry_point</code>，就是我们上面的 <code>thread_entry</code> 方法。</li><li><code>size_t stack_sz</code>，表示进程中已有的线程个数。</li><li><strong>这两个参数</strong>，都会传递给 <code>os::create_thread</code> 方法，用于创建线程使用。</li></ul><h4 id="_3-3-os-create-thread" tabindex="-1"><a class="header-anchor" href="#_3-3-os-create-thread" aria-hidden="true">#</a> 3.3 os::create_thread</h4><p><strong>源码</strong>：</p>`,4),H=n("code",null,"os_linux.cpp",-1),Z={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"os_windows.cpp",-1),P={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/windows/vm/os_windows.cpp",target:"_blank",rel:"noopener noreferrer"},W=e(`<p><code>众所周知，JVM 是个啥！</code>，所以它的 OS 服务实现，Liunx 还有 Windows 等，都会实现线程的创建逻辑。<em>这有点像适配器模式</em></p><p><strong>os_linux -&gt; os::create_thread</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>bool os<span class="token operator">::</span><span class="token function">create_thread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token operator">*</span> thread<span class="token punctuation">,</span> <span class="token class-name">ThreadType</span> thr_type<span class="token punctuation">,</span> size_t stack_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span><span class="token function">osthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;caller responsible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Allocate the OSThread object</span>
  <span class="token class-name">OSThread</span><span class="token operator">*</span> osthread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSThread</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Initial state is ALLOCATED but not INITIALIZED</span>
  osthread<span class="token operator">-&gt;</span><span class="token function">set_state</span><span class="token punctuation">(</span><span class="token constant">ALLOCATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  pthread_t tid<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> java_start<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>osthread-&gt;set_state(ALLOCATED)</code>，初始化已分配的状态，但此时并没有初始化。</li><li><code>pthread_create</code>，是类Unix操作系统（Unix、Linux、Mac OS X等）的创建线程的函数。</li><li><code>java_start</code>，重点关注类，是实际创建线程的方法。</li></ul><h4 id="_3-4-java-start" tabindex="-1"><a class="header-anchor" href="#_3-4-java-start" aria-hidden="true">#</a> 3.4 java_start</h4>`,5),Y=n("strong",null,"源码",-1),F={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp",target:"_blank",rel:"noopener noreferrer"},K=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">java_start</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> <span class="token operator">*</span>thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// 线程ID</span>
  <span class="token keyword">int</span> pid <span class="token operator">=</span> os<span class="token operator">::</span><span class="token function">current_process_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置线程</span>
  <span class="token class-name">ThreadLocalStorage</span><span class="token operator">::</span><span class="token function">set_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置线程状态：INITIALIZED 初始化完成</span>
  osthread<span class="token operator">-&gt;</span><span class="token function">set_state</span><span class="token punctuation">(</span><span class="token constant">INITIALIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 唤醒所有线程</span>
  sync<span class="token operator">-&gt;</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// 循环，初始化状态，则一致等待 wait</span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>osthread<span class="token operator">-&gt;</span><span class="token function">get_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">INITIALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sync<span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token operator">::</span><span class="token function">_no_safepoint_check_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

  <span class="token comment">// 等待唤醒后，执行 run 方法</span>
  thread<span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JVM 设置线程状态，INITIALIZED 初始化完成。</li><li><code>sync-&gt;notify_all()</code>，唤醒所有线程。</li><li><code>osthread-&gt;get_state() == INITIALIZED</code>，while 循环等待</li><li><code>thread-&gt;run()</code>，是等待线程唤醒后，也就是状态变更后，才能执行到。<em>这在我们的线程执行UML图中，也有所体现</em></li></ul><h3 id="_4-jvm-启动线程" tabindex="-1"><a class="header-anchor" href="#_4-jvm-启动线程" aria-hidden="true">#</a> 4. JVM 启动线程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">JVM_StartThread</span><span class="token punctuation">(</span><span class="token class-name">JNIEnv</span><span class="token operator">*</span> env<span class="token punctuation">,</span> jobject jthread<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token class-name">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">&quot;JVM_StartThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">JavaThread</span> <span class="token operator">*</span>native_thread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 创建线程</span>
  native_thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaThread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_entry<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 启动线程</span>
  <span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span>native_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">JVM_END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>JVM_StartThread</code> 中有两步，创建（<code>new JavaThread</code>）、启动（<code>Thread::start</code>）。创建的过程聊完了，接下来我们聊启动。</li></ul><h4 id="_4-1-thread-start" tabindex="-1"><a class="header-anchor" href="#_4-1-thread-start" aria-hidden="true">#</a> 4.1 Thread::start</h4>`,6),X=n("strong",null,"源码",-1),Q={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp",target:"_blank",rel:"noopener noreferrer"},$=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token operator">*</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">DisableStartThread</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span><span class="token function">is_Java_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      java_lang_Thread<span class="token operator">::</span><span class="token function">set_thread_status</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JavaThread</span><span class="token operator">*</span><span class="token punctuation">)</span>thread<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">threadObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                          java_lang_Thread<span class="token operator">::</span><span class="token constant">RUNNABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不同的 OS 会有不同的启动代码逻辑</span>
    os<span class="token operator">::</span><span class="token function">start_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果没有禁用线程 <code>DisableStartThread</code> 并且是 Java 线程 <code>thread-&gt;is_Java_thread()</code>，那么设置线程状态为 <code>RUNNABLE</code>。</li><li><code>os::start_thread(thread)</code>，调用线程启动方法。<em>不同的 OS 会有不同的启动代码逻辑</em></li></ul><h4 id="_4-2-os-start-thread-thread" tabindex="-1"><a class="header-anchor" href="#_4-2-os-start-thread-thread" aria-hidden="true">#</a> 4.2 os::start_thread(thread)</h4>`,3),nn=n("strong",null,"源码",-1),sn={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/os.hpp",target:"_blank",rel:"noopener noreferrer"},an=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> os<span class="token operator">::</span><span class="token function">start_thread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token operator">*</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// guard suspend/resume</span>
  <span class="token class-name">MutexLockerEx</span> <span class="token function">ml</span><span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span><span class="token class-name">SR_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token operator">::</span><span class="token function">_no_safepoint_check_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">OSThread</span><span class="token operator">*</span> osthread <span class="token operator">=</span> thread<span class="token operator">-&gt;</span><span class="token function">osthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  osthread<span class="token operator">-&gt;</span><span class="token function">set_state</span><span class="token punctuation">(</span><span class="token constant">RUNNABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pd_start_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>osthread-&gt;set_state(RUNNABLE)</code>，设置线程状态 <code>RUNNABLE</code></li><li><code>pd_start_thread(thread)</code>，启动线程，这个就由各个 OS 实现类，实现各自系统的启动方法了。<em>比如，windows系统和Linux系统的代码是完全不同的。</em></li></ul><h4 id="_4-3-pd-start-thread-thread" tabindex="-1"><a class="header-anchor" href="#_4-3-pd-start-thread-thread" aria-hidden="true">#</a> 4.3 pd_start_thread(thread)</h4>`,3),tn=n("strong",null,"源码",-1),en={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp",target:"_blank",rel:"noopener noreferrer"},pn=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> os<span class="token operator">::</span><span class="token function">pd_start_thread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token operator">*</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">OSThread</span> <span class="token operator">*</span> osthread <span class="token operator">=</span> thread<span class="token operator">-&gt;</span><span class="token function">osthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>osthread<span class="token operator">-&gt;</span><span class="token function">get_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">INITIALIZED</span><span class="token punctuation">,</span> <span class="token string">&quot;just checking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Monitor</span><span class="token operator">*</span> sync_with_child <span class="token operator">=</span> osthread<span class="token operator">-&gt;</span><span class="token function">startThread_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">MutexLockerEx</span> <span class="token function">ml</span><span class="token punctuation">(</span>sync_with_child<span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token operator">::</span><span class="token function">_no_safepoint_check_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sync_with_child<span class="token operator">-&gt;</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分代码 <code>notify()</code> 最关键，它可以唤醒线程。</li><li>线程唤醒后，<code>3.4 中的 thread-&gt;run();</code> 就可以继续执行了。</li></ul><h3 id="_5-jvm-线程回调" tabindex="-1"><a class="header-anchor" href="#_5-jvm-线程回调" aria-hidden="true">#</a> 5. JVM 线程回调</h3><h4 id="_5-1-thread-run-javathread-run" tabindex="-1"><a class="header-anchor" href="#_5-1-thread-run-javathread-run" aria-hidden="true">#</a> 5.1 thread-&gt;run()[JavaThread::run()]</h4>`,4),on=n("strong",null,"源码",-1),cn={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp",target:"_blank",rel:"noopener noreferrer"},ln=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// The first routine called by a new Java thread</span>
<span class="token keyword">void</span> <span class="token class-name">JavaThread</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 初始化线程操作</span>
  
  <span class="token function">thread_main_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>os_linux.cpp 类中的 java_start 里的 thread-&gt;run()，最终调用的就是 thread.cpp 的 JavaThread::run() 方法。</li><li>这部分还需要继续往下看，<code>thread_main_inner();</code> 方法。</li></ul><h4 id="_5-2-thread-main-inner" tabindex="-1"><a class="header-anchor" href="#_5-2-thread-main-inner" aria-hidden="true">#</a> 5.2 thread_main_inner</h4>`,3),un=n("strong",null,"源码",-1),rn={href:"https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp",target:"_blank",rel:"noopener noreferrer"},dn=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token class-name">JavaThread</span><span class="token operator">::</span><span class="token function">thread_main_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">has_pending_exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span>java_lang_Thread<span class="token operator">::</span><span class="token function">is_stillborn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">threadObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token class-name">ResourceMark</span> <span class="token function">rm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">set_native_thread_name</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">get_thread_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">HandleMark</span> <span class="token function">hm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">DTRACE_THREAD_PROBE</span><span class="token punctuation">(</span>stop<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  delete <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里有你熟悉的设置的线程名称，<code>this-&gt;set_native_thread_name(this-&gt;get_thread_name())</code>。</li><li><code>this-&gt;entry_point()</code>，实际调用的就是 3.1 中的 thread_entry 方法。</li><li><code>thread_entry</code>，方法最终会调用到 <code>JavaCalls::call_virtual</code> 里的<code>vmSymbols::run_method_name()</code>。也就是 run() 方法，至此线程启动完成。<em>终于串回来了！</em></li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>线程的启动过程涉及到了 JVM 的参与，所以如果没有认真了解过，确实很难从一个本地方法了解的如此透彻。</li><li>整个源码分析可以结合着代码调用UML时序图进行学习，基本核心过程包括：<code>Java 创建线程和启动</code>、<code>调用本地方法 start0()</code>、<code>JVM 中 JVM_StartThread 的创建和启动</code>、<code>设置线程状态等待被唤醒</code>、<code>根据不同的OS启动线程并唤醒</code>、<code>最后回调 run() 方法启动 Java 线程</code>。</li><li>有时候可能只是一步很简单的方法，也会有它的深入之处，当真的懂了以后，就不用死记硬背。<em>如果需要获得以上高清大图，可以添加小傅哥微信(<code>fustack</code>)，备注：Thread大图</em></li></ul>`,4);function kn(vn,hn){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),t(a)])]),k,n("ol",null,[n("li",null,[v,s("："),n("a",h,[s("https://github.com/unofficial-openjdk/openjdk/blob/jdk/jdk/src/java.base/share/native/libjava/Thread.c"),t(a)])]),n("li",null,[m,s("："),n("a",_,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/prims/jvm.cpp"),t(a)])]),n("li",null,[b,s("："),n("a",g,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp"),t(a)])]),n("li",null,[f,s("："),n("a",j,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/os.hpp"),t(a)])]),n("li",null,[y,s("："),n("a",w,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp"),t(a)])]),n("li",null,[J,s("："),n("a",T,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/windows/vm/os_windows.cpp"),t(a)])]),n("li",null,[q,s("："),n("a",x,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/classfile/vmSymbols.hpp"),t(a)])])]),M,n("ul",null,[n("li",null,[V,s("："),n("a",L,[s("https://github.com/unofficial-openjdk/openjdk/blob/jdk/jdk/src/java.base/share/native/libjava/Thread.c"),t(a)])]),S]),N,B,n("p",null,[I,s("："),n("a",E,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/prims/jvm.cpp"),t(a)])]),A,n("p",null,[D,s("："),n("a",O,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/classfile/vmSymbols.hpp"),t(a)])]),R,n("p",null,[U,s("："),n("a",C,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp"),t(a)])]),z,n("ul",null,[n("li",null,[H,s("："),n("a",Z,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp"),t(a)])]),n("li",null,[G,s("："),n("a",P,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/windows/vm/os_windows.cpp"),t(a)])])]),W,n("p",null,[Y,s("："),n("a",F,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp"),t(a)])]),K,n("p",null,[X,s("："),n("a",Q,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp"),t(a)])]),$,n("p",null,[nn,s("："),n("a",sn,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/os.hpp"),t(a)])]),an,n("p",null,[tn,s("："),n("a",en,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/os/linux/vm/os_linux.cpp"),t(a)])]),pn,n("p",null,[on,s("："),n("a",cn,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp"),t(a)])]),ln,n("p",null,[un,s("："),n("a",rn,[s("https://github.com/JetBrains/jdk8u_hotspot/blob/master/src/share/vm/runtime/thread.cpp"),t(a)])]),dn])}const _n=p(i,[["render",kn],["__file","2020-11-25-mianjingshouce · di19pian《Thread.start() ，tashizenmerangxianchengqidongdene？》.html.vue"]]);export{_n as default};
