import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"面经手册-·-第3篇《hashmap核心知识-扰动函数、负载因子、扩容链表拆分-深度学习》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第3篇《hashmap核心知识-扰动函数、负载因子、扩容链表拆分-深度学习》","aria-hidden":"true"},"#"),s(" 面经手册 · 第3篇《HashMap核心知识，扰动函数、负载因子、扩容链表拆分，深度学习》")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=t('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>得益于<code>Doug Lea</code>老爷子的操刀，让<code>HashMap</code>成为使用和面试最频繁的API，没办法设计的太优秀了！</p><p>HashMap 最早出现在 JDK 1.2中，底层基于散列算法实现。HashMap 允许 null 键和 null 值，在计算哈键的哈希值时，null 键哈希值为 0。HashMap 并不保证键值对的顺序，这意味着在进行某些操作后，键值对的顺序可能会发生变化。另外，需要注意的是，HashMap 是非线程安全类，在多线程环境下可能会存在问题。</p><p>HashMap 最早在JDK 1.2中就出现了，底层是基于散列算法实现，随着几代的优化更新到目前为止它的源码部分已经比较复杂，涉及的知识点也非常多，在JDK 1.8中包括；<code>1、散列表实现</code>、<code>2、扰动函数</code>、<code>3、初始化容量</code>、<code>4、负载因子</code>、<code>5、扩容元素拆分</code>、<code>6、链表树化</code>、<code>7、红黑树</code>、<code>8、插入</code>、<code>9、查找</code>、<code>10、删除</code>、<code>11、遍历</code>、<code>12、分段锁</code>等等，因涉及的知识点较多所以需要分开讲解，本章节我们会先把目光放在前五项上，也就是关于数据结构的使用上。</p><p>数据结构相关往往与数学离不开，学习过程中建议下载相应源码进行实验验证，可能这个过程有点烧脑，但学会后不用死记硬背就可以理解这部分知识。</p><h2 id="二、资源下载" tabindex="-1"><a class="header-anchor" href="#二、资源下载" aria-hidden="true">#</a> 二、资源下载</h2><p>本章节涉及的源码和资源在工程，<strong>interview-04</strong>中，包括；</p><ol><li>10万单词测试数据，在doc文件夹</li><li>扰动函数excel展现，在doc文件夹</li><li>测试源码部分在<code>interview-04</code>工程中</li></ol>',9),m={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"bugstack虫洞栈",-1),v=n("em",null,"回复下载后打开获得的链接，找到编号ID：19",-1),h=t(`<h2 id="三、源码分析" tabindex="-1"><a class="header-anchor" href="#三、源码分析" aria-hidden="true">#</a> 三、源码分析</h2><h3 id="_1-写一个最简单的hashmap" tabindex="-1"><a class="header-anchor" href="#_1-写一个最简单的hashmap" aria-hidden="true">#</a> 1. 写一个最简单的HashMap</h3><p>学习HashMap前，最好的方式是先了解这是一种怎么样的数据结构来存放数据。而HashMap经过多个版本的迭代后，乍一看代码还是很复杂的。就像你原来只穿个裤衩，现在还有秋裤和风衣。所以我们先来看看最根本的HashMap是什么样，也就是只穿裤衩是什么效果，之后再去分析它的源码。</p><p><strong>问题：</strong> 假设我们有一组7个字符串，需要存放到数组中，但要求在获取每个元素的时候时间复杂度是O(1)。也就是说你不能通过循环遍历的方式进行获取，而是要定位到数组ID直接获取相应的元素。</p><p><strong>方案：</strong> 如果说我们需要通过ID从数组中获取元素，那么就需要把每个字符串都计算出一个在数组中的位置ID。<em>字符串获取ID你能想到什么方式？</em> 一个字符串最直接的获取跟数字相关的信息就是HashCode，可HashCode的取值范围太大了<code>[-2147483648, 2147483647]</code>，不可能直接使用。那么就需要使用HashCode与数组长度做与运算，得到一个可以在数组中出现的位置。如果说有两个元素得到同样的ID，那么这个数组ID下就存放两个字符串。</p><p>以上呢其实就是我们要把字符串散列到数组中的一个基本思路，接下来我们就把这个思路用代码实现出来。</p><h4 id="_1-1-代码实现" tabindex="-1"><a class="header-anchor" href="#_1-1-代码实现" aria-hidden="true">#</a> 1.1 代码实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 初始化一组字符串</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jlkk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;lopi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;e4we&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;alpo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;yhjk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;plop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义要存放的数组</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 循环存放</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 计算索引位置</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;key值=%s Idx=%d&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> tab<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tab<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    tab<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tab<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;-&gt;&quot;</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出测试结果</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码整体看起来也是非常简单，并没有什么复杂度，主要包括以下内容；</p><ol><li>初始化一组字符串集合，这里初始化了7个。</li><li>定义一个数组用于存放字符串，注意这里的长度是8，也就是2的3次幂。这样的数组长度才会出现一个 <code>0111</code> 除高位以外都是1的特征，也是为了散列。</li><li>接下来就是循环存放数据，计算出每个字符串在数组中的位置。<code>key.hashCode() &amp; (tab.length - 1)</code>。</li><li>在字符串存放到数组的过程，如果遇到相同的元素，进行连接操作<code>模拟链表的过程</code>。</li><li>最后输出存放结果。</li></ol><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>key值<span class="token operator">=</span>jlkk <span class="token class-name">Idx</span><span class="token operator">=</span><span class="token number">2</span>
key值<span class="token operator">=</span>lopi <span class="token class-name">Idx</span><span class="token operator">=</span><span class="token number">4</span>
key值<span class="token operator">=</span>小傅哥 <span class="token class-name">Idx</span><span class="token operator">=</span><span class="token number">7</span>
key值<span class="token operator">=</span>e4we <span class="token class-name">Idx</span><span class="token operator">=</span><span class="token number">5</span>
key值<span class="token operator">=</span>alpo <span class="token class-name">Idx</span><span class="token operator">=</span><span class="token number">2</span>
key值<span class="token operator">=</span>yhjk <span class="token class-name">Idx</span><span class="token operator">=</span><span class="token number">0</span>
key值<span class="token operator">=</span>plop <span class="token class-name">Idx</span><span class="token operator">=</span><span class="token number">5</span>
测试结果：<span class="token punctuation">[</span><span class="token string">&quot;yhjk&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;jlkk-&gt;alpo&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;lopi&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;e4we-&gt;plop&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在测试结果首先是计算出每个元素在数组的Idx，也有出现重复的位置。</li><li>最后是测试结果的输出，1、3、6，位置是空的，2、5，位置有两个元素被链接起来<code>e4we-&gt;plop</code>。</li><li>这就达到了我们一个最基本的要求，将串元素散列存放到数组中，最后通过字符串元素的索引ID进行获取对应字符串。这样是HashMap的一个最基本原理，有了这个基础后面就会更容易理解HashMap的源码实现。</li></ul><h4 id="_1-2-hash散列示意图" tabindex="-1"><a class="header-anchor" href="#_1-2-hash散列示意图" aria-hidden="true">#</a> 1.2 Hash散列示意图</h4><p>如果上面的测试结果不能在你的头脑中很好的建立出一个数据结构，那么可以看以下这张散列示意图，方便理解；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-4-01.png" alt="bugstack.cn Hash散列示意图"></p><ul><li>这张图就是上面代码实现的全过程，将每一个字符串元素通过Hash计算索引位置，存放到数组中。</li><li>黄色的索引ID是没有元素存放、绿色的索引ID存放了一个元素、红色的索引ID存放了两个元素。</li></ul><h4 id="_1-3-这个简单的hashmap有哪些问题" tabindex="-1"><a class="header-anchor" href="#_1-3-这个简单的hashmap有哪些问题" aria-hidden="true">#</a> 1.3 这个简单的HashMap有哪些问题</h4><p>以上我们实现了一个简单的HashMap，或者说还算不上HashMap，只能算做一个散列数据存放的雏形。但这样的一个数据结构放在实际使用中，会有哪些问题呢？</p><ol><li>这里所有的元素存放都需要获取一个索引位置，而如果元素的位置不够散列碰撞严重，那么就失去了散列表存放的意义，没有达到预期的性能。</li><li>在获取索引ID的计算公式中，需要数组长度是2的幂次方，那么怎么进行初始化这个数组大小。</li><li>数组越小碰撞的越大，数组越大碰撞的越小，时间与空间如何取舍。</li><li>目前存放7个元素，已经有两个位置都存放了2个字符串，那么链表越来越长怎么优化。</li><li>随着元素的不断添加，数组长度不足扩容时，怎么把原有的元素，拆分到新的位置上去。</li></ol><p>以上这些问题可以归纳为；<code>扰动函数</code>、<code>初始化容量</code>、<code>负载因子</code>、<code>扩容方法</code>以及<code>链表和红黑树</code>转换的使用等。接下来我们会逐个问题进行分析。</p><h3 id="_2-扰动函数" tabindex="-1"><a class="header-anchor" href="#_2-扰动函数" aria-hidden="true">#</a> 2. 扰动函数</h3><p>在HashMap存放元素时候有这样一段代码来处理哈希值，这是<code>java 8</code>的散列值扰动函数，用于优化散列效果；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-为什么使用扰动函数" tabindex="-1"><a class="header-anchor" href="#_2-1-为什么使用扰动函数" aria-hidden="true">#</a> 2.1 为什么使用扰动函数</h4><p>理论上来说字符串的<code>hashCode</code>是一个int类型值，那可以直接作为数组下标了，且不会出现碰撞。但是这个<code>hashCode</code>的取值范围是[-2147483648, 2147483647]，有将近40亿的长度，谁也不能把数组初始化的这么大，内存也是放不下的。</p><p>我们默认初始化的Map大小是16个长度 <code>DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4</code>，所以获取的Hash值并不能直接作为下标使用，需要与数组长度进行取模运算得到一个下标值，也就是我们上面做的散列列子。</p><p>那么，hashMap源码这里不只是直接获取哈希值，还进行了一次扰动计算，<code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。把哈希值右移16位，也就正好是自己长度的一半，之后与原哈希值做异或运算，这样就混合了原哈希值中的高位和低位，增大了<strong>随机性</strong>。计算方式如下图；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-4-02.png" alt="bugstack.cn 扰动函数"></p><ul><li>说白了，使用扰动函数就是为了增加随机性，让数据元素更加均衡的散列，减少碰撞。</li></ul><h4 id="_2-2-实验验证扰动函数" tabindex="-1"><a class="header-anchor" href="#_2-2-实验验证扰动函数" aria-hidden="true">#</a> 2.2 实验验证扰动函数</h4><p>从上面的分析可以看出，扰动函数使用了哈希值的高半区和低半区做异或，混合原始哈希码的高位和低位，以此来加大低位区的随机性。</p><p>但看不到实验数据的话，这终究是一段理论，具体这段哈希值真的被增加了随机性没有，并不知道。所以这里我们要做一个实验，这个实验是这样做；</p><ol><li>选取10万个单词词库</li><li>定义128位长度的数组格子</li><li>分别计算在扰动和不扰动下，10万单词的下标分配到128个格子的数量</li><li>统计各个格子数量，生成波动曲线。如果扰动函数下的波动曲线相对更平稳，那么证明扰动函数有效果。</li></ol><h5 id="_2-2-1-扰动代码测试" tabindex="-1"><a class="header-anchor" href="#_2-2-1-扰动代码测试" aria-hidden="true">#</a> 2.2.1 扰动代码测试</h5><p><strong>扰动函数对比方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Disturb</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">disturbHashIdx</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashIdx</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>disturbHashIdx</code> 扰动函数下，下标值计算</li><li><code>hashIdx</code> 非扰动函数下，下标值计算</li></ul><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 10万单词已经初始化到words中</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_disturb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用扰动函数</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token class-name">Disturb</span><span class="token punctuation">.</span><span class="token function">disturbHashIdx</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不使用扰动函数</span>
        <span class="token comment">// int idx = Disturb.hashIdx(word, 128);</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> integer <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token operator">++</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上分别统计两种函数下的下标值分配，最终将统计结果放到excel中生成图表。</p><h5 id="_2-2-2-扰动函数散列图表" tabindex="-1"><a class="header-anchor" href="#_2-2-2-扰动函数散列图表" aria-hidden="true">#</a> 2.2.2 扰动函数散列图表</h5><p>以上的两张图，分别是没有使用扰动函数和使用扰动函数的，下标分配。实验数据；</p><ol><li>10万个不重复的单词</li><li>128个格子，相当于128长度的数组</li></ol><p><strong>未使用扰动函数</strong></p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-4-03.png" alt="bugstack.cn 未使用扰动函数"></p><p><strong>使用扰动函数</strong></p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-4-04.png" alt="bugstack.cn 使用扰动函数"></p><ul><li>从这两种的对比图可以看出来，在使用了扰动函数后，数据分配的更加均匀了。</li><li>数据分配均匀，也就是散列的效果更好，减少了hash的碰撞，让数据存放和获取的效率更佳。</li></ul><h3 id="_3-初始化容量和负载因子" tabindex="-1"><a class="header-anchor" href="#_3-初始化容量和负载因子" aria-hidden="true">#</a> 3. 初始化容量和负载因子</h3><p>接下来我们讨论下一个问题，从我们模仿HashMap的例子中以及HashMap默认的初始化大小里，都可以知道，散列数组需要一个2的幂次方的长度，因为只有2的幂次方在减1的时候，才会出现<code>01111</code>这样的值。</p><p>那么这里就有一个问题，我们在初始化HashMap的时候，如果传一个17个的值<code>new HashMap&lt;&gt;(17);</code>，它会怎么处理呢？</p><h4 id="_3-1-寻找2的幂次方最小值" tabindex="-1"><a class="header-anchor" href="#_3-1-寻找2的幂次方最小值" aria-hidden="true">#</a> 3.1 寻找2的幂次方最小值</h4><p>在HashMap的初始化中，有这样一段方法；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>阈值<code>threshold</code>，通过方法<code>tableSizeFor</code>进行计算，是根据初始化来计算的。</li><li>这个方法也就是要寻找比初始值大的，最小的那个2进制数值。比如传了17，我应该找到的是32（2的4次幂是16&lt;17,所以找到2的5次幂32）。</li></ul><p>计算阈值大小的方法；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MAXIMUM_CAPACITY = 1 &lt;&lt; 30，这个是临界范围，也就是最大的Map集合。</li><li>乍一看可能有点晕😵怎么都在向右移位1、2、4、8、16，这主要是为了把二进制的各个位置都填上1，当二进制的各个位置都是1以后，就是一个标准的2的幂次方减1了，最后把结果加1再返回即可。</li></ul><p>那这里我们把17这样一个初始化计算阈值的过程，用图展示出来，方便理解；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-4-05.png" alt="bugstack.cn 计算阈值"></p><h4 id="_3-2-负载因子" tabindex="-1"><a class="header-anchor" href="#_3-2-负载因子" aria-hidden="true">#</a> 3.2 负载因子</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>负载因子是做什么的？</strong></p><p>负载因子，可以理解成一辆车可承重重量超过某个阈值时，把货放到新的车上。</p><p>那么在HashMap中，负载因子决定了数据量多少了以后进行扩容。<em>这里要提到上面做的HashMap例子，我们准备了7个元素，但是最后还有3个位置空余，2个位置存放了2个元素。</em> 所以可能即使你数据比数组容量大时也是不一定能正正好好的把数组占满的，而是在某些小标位置出现了大量的碰撞，只能在同一个位置用链表存放，那么这样就失去了Map数组的性能。</p><p>所以，要选择一个合理的大小下进行扩容，默认值0.75就是说当阈值容量占了3/4时赶紧扩容，减少Hash碰撞。</p><p>同时0.75是一个默认构造值，在创建HashMap也可以调整，比如你希望用更多的空间换取时间，可以把负载因子调的更小一些，减少碰撞。</p><h3 id="_4-扩容元素拆分" tabindex="-1"><a class="header-anchor" href="#_4-扩容元素拆分" aria-hidden="true">#</a> 4. 扩容元素拆分</h3><p>为什么扩容，因为数组长度不足了。那扩容最直接的问题，就是需要把元素拆分到新的数组中。拆分元素的过程中，原jdk1.7中会需要重新计算哈希值，但是到jdk1.8中已经进行优化，不再需要重新计算，提升了拆分的性能，设计的还是非常巧妙的。</p><h4 id="_4-1-测试数据" tabindex="-1"><a class="header-anchor" href="#_4-1-测试数据" aria-hidden="true">#</a> 4.1 测试数据</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_hashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jlkk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;lopi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jmdw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;e4we&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;io98&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;nmhg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;vfg6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;gfrt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;alpo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;vfbh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bnhj&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;zuio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;iu8e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;yhjk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;plop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;dd0p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符串：&quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot; \\tIdx(16)：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; \\tBit值：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; \\t\\tIdx(32)：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>字符串：jlkk 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">3</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1100011101001000010011</span> <span class="token operator">-</span> <span class="token number">10000</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">19</span>
<span class="token number">1100011101001000100010</span> <span class="token number">1100011101001000010011</span> <span class="token number">10011</span>
字符串：lopi 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">14</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1100101100011010001110</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">14</span>
<span class="token number">1100101100011010111100</span> <span class="token number">1100101100011010001110</span> <span class="token number">1110</span>
字符串：jmdw 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">7</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1100011101010100100111</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">7</span>
<span class="token number">1100011101010100010110</span> <span class="token number">1100011101010100100111</span> <span class="token number">111</span>
字符串：e4we 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">3</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1011101011101101010011</span> <span class="token operator">-</span> <span class="token number">10000</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">19</span>
<span class="token number">1011101011101101111101</span> <span class="token number">1011101011101101010011</span> <span class="token number">10011</span>
字符串：io98 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">4</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1100010110001011110100</span> <span class="token operator">-</span> <span class="token number">10000</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">20</span>
<span class="token number">1100010110001011000101</span> <span class="token number">1100010110001011110100</span> <span class="token number">10100</span>
字符串：nmhg 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">13</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1100111010011011001101</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">13</span>
<span class="token number">1100111010011011111110</span> <span class="token number">1100111010011011001101</span> <span class="token number">1101</span>
字符串：vfg6 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">8</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1101110010111101101000</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">8</span>
<span class="token number">1101110010111101011111</span> <span class="token number">1101110010111101101000</span> <span class="token number">1000</span>
字符串：gfrt 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">1</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1100000101111101010001</span> <span class="token operator">-</span> <span class="token number">10000</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">17</span>
<span class="token number">1100000101111101100001</span> <span class="token number">1100000101111101010001</span> <span class="token number">10001</span>
字符串：alpo 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">7</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1011011011101101000111</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">7</span>
<span class="token number">1011011011101101101010</span> <span class="token number">1011011011101101000111</span> <span class="token number">111</span>
字符串：vfbh 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">1</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1101110010111011000001</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">1</span>
<span class="token number">1101110010111011110110</span> <span class="token number">1101110010111011000001</span> <span class="token number">1</span>
字符串：bnhj 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">0</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1011100011011001100000</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">0</span>
<span class="token number">1011100011011001001110</span> <span class="token number">1011100011011001100000</span> <span class="token number">0</span>
字符串：zuio 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">8</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1110010011100110011000</span> <span class="token operator">-</span> <span class="token number">10000</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">24</span>
<span class="token number">1110010011100110100001</span> <span class="token number">1110010011100110011000</span> <span class="token number">11000</span>
字符串：iu8e 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">8</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1100010111100101101000</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">8</span>
<span class="token number">1100010111100101011001</span> <span class="token number">1100010111100101101000</span> <span class="token number">1000</span>
字符串：yhjk 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">8</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1110001001010010101000</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">8</span>
<span class="token number">1110001001010010010000</span> <span class="token number">1110001001010010101000</span> <span class="token number">1000</span>
字符串：plop 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">9</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1101001000110011101001</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">9</span>
<span class="token number">1101001000110011011101</span> <span class="token number">1101001000110011101001</span> <span class="token number">1001</span>
字符串：dd0p 	<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>：<span class="token number">14</span> 	<span class="token class-name">Bit</span>值：<span class="token number">1011101111001011101110</span> <span class="token operator">-</span> <span class="token number">0</span> 		<span class="token class-name">Idx</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>：<span class="token number">14</span>
<span class="token number">1011101111001011000000</span> <span class="token number">1011101111001011101110</span> <span class="token number">1110</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们随机使用一些字符串计算他们分别在16位长度和32位长度数组下的索引分配情况，看哪些数据被重新路由到了新的地址。</li><li>同时，这里还可以观察🕵出一个非常重要的信息，原哈希值与扩容新增出来的长度16，进行&amp;运算，如果值等于0，则下标位置不变。如果不为0，那么新的位置则是原来位置上加16。｛这个地方需要好好理解下，并看实验数据｝</li><li>这样一来，就不需要在重新计算每一个数组中元素的哈希值了。</li></ul><h4 id="_4-2-数据迁移" tabindex="-1"><a class="header-anchor" href="#_4-2-数据迁移" aria-hidden="true">#</a> 4.2 数据迁移</h4><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-4-06.png" alt="bugstack.cn 数据迁移"></p><ul><li>这张图就是原16位长度数组元素，向32位扩容后数组转移的过程。</li><li>对31取模保留低5位，对15取模保留低4位，两者的差异就在于第5位是否为1，是的话则需要加上增量，为0的话则不需要改变</li><li>其中黄色区域元素<code>zuio</code>因计算结果 <code>hash &amp; oldCap</code> 低位第5位为1，则被迁移到下标位置24。</li><li>同时还是用重新计算哈希值的方式验证了，确实分配到24的位置，因为这是在二进制计算中补1的过程，所以可以通过上面简化的方式确定哈希值的位置。</li></ul><p>那么为什么 e.hash &amp; oldCap == 0 为什么可以判断当前节点是否需要移位, 而不是再次计算hash;</p><p>仍然是原始长度为16举例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> old<span class="token operator">:</span>
 <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1010</span>
 <span class="token number">15</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1111</span>
 <span class="token operator">&amp;</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1010</span> 
 
 <span class="token keyword">new</span><span class="token operator">:</span>
 <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1010</span>
 <span class="token number">31</span><span class="token operator">:</span> <span class="token number">0001</span> <span class="token number">1111</span>
 <span class="token operator">&amp;</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1010</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的示例可以很轻易的看出, 两次indexFor()的差别只是第二次参与位于比第一次左边有一位从0变为1, 而这个变化的1刚好是oldCap, 那么只需要判断原key的hash这个位上是否为1: 若是1, 则需要移动至oldCap + i的槽位, 若为0, 则不需要移动;</p><p>这也是HashMap的长度必须保证是2的幂次方的原因, 正因为这种环环相扣的设计, HashMap.loadFactor的选值是3/4就能理解了, table.length * 3/4可以被优化为((table.length &gt;&gt; 2) &lt;&lt; 2) - (table.length &gt;&gt; 2) == table.length - (table.length &gt;&gt; 2), JAVA的位运算比乘除的效率更高, 所以取3/4在保证hash冲突小的情况下兼顾了效率;</p><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h2><ul><li>如果你能坚持看完这部分内容，并按照文中的例子进行相应的实验验证，那么一定可以学会本章节涉及这五项知识点；<code>1、散列表实现</code>、<code>2、扰动函数</code>、<code>3、初始化容量</code>、<code>4、负载因子</code>、<code>5、扩容元素拆分</code>。</li><li>对我个人来说以前也知道这部分知识，但是没有验证过，只知道概念如此，正好借着写面试手册专栏，加深学习，用数据验证理论，让知识点可以更加深入的理解。</li><li>这一章节完事，下一章节继续进行HashMap的其他知识点挖掘，让懂了就是真的懂了。好了，写到这里了，感谢大家的阅读。如果某处没有描述清楚，或者有不理解的点，欢迎与我讨论交流。</li></ul>`,85);function g(f,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),p(a)])]),d,n("p",null,[s("可以通过关注公众号："),n("a",m,[b,p(a)]),s("，回复下载进行获取{"),v,s("}")]),h])}const w=e(u,[["render",g],["__file","2020-08-07-mianjingshouce · di3pian《HashMaphexinzhishi，raodonghanshu、fuzaiyinzi、kuoronglianbiaochaifen，shenduxuexi》.html.vue"]]);export{w as default};
