const l=JSON.parse('{"key":"v-3763e9e0","path":"/bestJavaer/design-pattern/designpattern-singlaton.html","title":"我向面试官讲解了单例模式，他对我竖起了大拇指","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"什么是单例模式","slug":"什么是单例模式","link":"#什么是单例模式","children":[]},{"level":2,"title":"单例模式的类型","slug":"单例模式的类型","link":"#单例模式的类型","children":[{"level":3,"title":"懒汉式创建单例对象","slug":"懒汉式创建单例对象","link":"#懒汉式创建单例对象","children":[]},{"level":3,"title":"饿汉式创建单例对象","slug":"饿汉式创建单例对象","link":"#饿汉式创建单例对象","children":[]}]},{"level":2,"title":"懒汉式如何保证只创建一个对象","slug":"懒汉式如何保证只创建一个对象","link":"#懒汉式如何保证只创建一个对象","children":[]},{"level":2,"title":"使用 volatile 防止指令重排","slug":"使用-volatile-防止指令重排","link":"#使用-volatile-防止指令重排","children":[]},{"level":2,"title":"破坏懒汉式单例与饿汉式单例","slug":"破坏懒汉式单例与饿汉式单例","link":"#破坏懒汉式单例与饿汉式单例","children":[{"level":3,"title":"利用反射破坏单例模式","slug":"利用反射破坏单例模式","link":"#利用反射破坏单例模式","children":[]},{"level":3,"title":"利用序列化与反序列化破坏单例模式","slug":"利用序列化与反序列化破坏单例模式","link":"#利用序列化与反序列化破坏单例模式","children":[]}]},{"level":2,"title":"让面试官鼓掌的枚举实现","slug":"让面试官鼓掌的枚举实现","link":"#让面试官鼓掌的枚举实现","children":[{"level":3,"title":"优势 1 ：一目了然的代码","slug":"优势-1-一目了然的代码","link":"#优势-1-一目了然的代码","children":[]},{"level":3,"title":"优势 2：天然的线程安全与单一实例","slug":"优势-2-天然的线程安全与单一实例","link":"#优势-2-天然的线程安全与单一实例","children":[]},{"level":3,"title":"优势 3：枚举保护单例模式不被破坏","slug":"优势-3-枚举保护单例模式不被破坏","link":"#优势-3-枚举保护单例模式不被破坏","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1704300175000,"updatedTime":1704300175000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"bestJavaer/design-pattern/designpattern-singlaton.md"}');export{l as data};
