import{_ as t,r as p,o,c,a as n,b as s,d as e,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"第4节-配置窗体和侧边栏窗体的使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第4节-配置窗体和侧边栏窗体的使用","aria-hidden":"true"},"#"),s(" 第4节：配置窗体和侧边栏窗体的使用")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),v={href:"https://mp.weixin.qq.com/s/R8qvoSNyedVM95Ty8sbhgg",target:"_blank",rel:"noopener noreferrer"},m=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、说明" tabindex="-1"><a class="header-anchor" href="#一、说明" aria-hidden="true">#</a> 一、说明</h2><p><code>方向不对，努力白费！</code></p><p>总有人拿到产品的需求，就着急开干，反正也懒的想开发中会发生啥，上线后多少人使用，管它三七二十一先堆起来代码看一看，反正能跑就行，无论代码还是你！</p><p>其实很多时候在编写代码前，所需要做的技术调研、架构设计、模块分层、数据结构、详细分析、方案评审等，与<code>三七二十一那家伙</code>对比起来，好像都会显得有点慢。但这个看上去慢的过程，却能解决以后很多常见和麻烦的问题，比如产品需求迭代、业务流程变更、代码逻辑更改、线上异常排查。虽然看着慢，但这个积基树本的过程就像打地基一样，总得有一个稳定的根基，才能盖好整栋大楼。<strong>万丈高楼平地起，勿在浮沙筑高台</strong></p><h2 id="二、需求目的" tabindex="-1"><a class="header-anchor" href="#二、需求目的" aria-hidden="true">#</a> 二、需求目的</h2><p>如果你需要开发一个自定义功能的插件，无论是处理代码、辅助ORM生成、日志信息记录等，都会需要进行一个插件的功能配置进行初始化操作以及把对应功能展示到整个 IDEA 窗体中的右边栏或者下边栏中，这样才能满足一个插件的基本需求。</p><p>那么这样就需要在 IDEA 窗体 <code>File -&gt; Settings</code> 中扩展自己的配置窗体，以及开发自己需要的 ToolWindow 嵌入到 IDEA 中(左侧、右侧、下侧)，这里窗体的开发需要用到 Swing 但目前在 IDEA 中开发这样的功能只需要拖拽窗体就可以，还是蛮容易的。</p><p>那么接下来我们以一个在 IDEA 中摸鱼看书的场景为案例，学习配置窗体和阅读窗体的功能实现。</p><h2 id="三、案例开发" tabindex="-1"><a class="header-anchor" href="#三、案例开发" aria-hidden="true">#</a> 三、案例开发</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>guide<span class="token operator">-</span>idea<span class="token operator">-</span>plugin<span class="token operator">-</span>tool<span class="token operator">-</span>window
├── <span class="token punctuation">.</span>gradle
└── src
    ├── main
    │   └── java
    │   	└── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>guide<span class="token punctuation">.</span>idea<span class="token punctuation">.</span>plugin 
    │       	└── factory
    │       	│	├── <span class="token class-name">ReadFactory</span><span class="token punctuation">.</span>java 
    │       	│	└── <span class="token class-name">SettingFactory</span><span class="token punctuation">.</span>java
    │       	└── ui
    │       	│	├── <span class="token class-name">ReadUI</span><span class="token punctuation">.</span>java 
    │       	│	├── <span class="token class-name">ReadUI</span><span class="token punctuation">.</span>form
    │       	│	├── <span class="token class-name">SettingUI</span><span class="token punctuation">.</span>java  
    │       	│	└── <span class="token class-name">SettingUI</span><span class="token punctuation">.</span>form
    │       	└── <span class="token class-name">Config</span>    
    ├── resources
    │   └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span>
    │       └── plugin<span class="token punctuation">.</span>xml 
    ├── build<span class="token punctuation">.</span>gradle  
    └── gradle<span class="token punctuation">.</span>properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>源码获取</strong>：#公众号：<code>bugstack虫洞栈</code> 回复：<code>idea</code> 即可下载全部 IDEA 插件开发源码</li></ul><p>此工程主要涉及两部分，在factory中一个是配置窗体、一个是阅读窗体，与之对应的两组UI的实现。最后 factory 类的实现都会配置到 plugin.xml 中进行使用，同时也是在 plugin.xml 中控制窗体位置和图标。</p><h3 id="_2-创建-ui-窗体" tabindex="-1"><a class="header-anchor" href="#_2-创建-ui-窗体" aria-hidden="true">#</a> 2. 创建 UI 窗体</h3><h4 id="_2-1-创建方式" tabindex="-1"><a class="header-anchor" href="#_2-1-创建方式" aria-hidden="true">#</a> 2.1 创建方式</h4><p><strong>New -&gt; Swing UI Designer -&gt; GUI Form</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211103-01.png" alt=""></p><ul><li>在 Java 中创建窗体的方式主要有 AWT、Swing、JavaFx，由于 IDEA 使用 Swing 开发，所以这里创建 Swing 窗体的兼容性会更好。</li><li>那么这里 Swing 窗体的创建可以是自己手写窗体结构，也可以使用可视化拖拽的 GUI Form 如果你的窗体不复杂，其实拖拽的方式就可以满足使用。</li></ul><h4 id="_2-2-配置页窗体" tabindex="-1"><a class="header-anchor" href="#_2-2-配置页窗体" aria-hidden="true">#</a> 2.2 配置页窗体</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SettingUI</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">JPanel</span> mainPanel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">JPanel</span> settingPanel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">JLabel</span> urlLabel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">JTextField</span> urlTextField<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">JButton</span> urlBtn<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SettingUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 给按钮添加一个选择文件的事件</span>
        urlBtn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">JFileChooser</span> fileChooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fileChooser<span class="token punctuation">.</span><span class="token function">setFileSelectionMode</span><span class="token punctuation">(</span><span class="token class-name">JFileChooser</span><span class="token punctuation">.</span><span class="token constant">FILES_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fileChooser<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span>settingPanel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">File</span> file <span class="token operator">=</span> fileChooser<span class="token punctuation">.</span><span class="token function">getSelectedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            urlTextField<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">JComponent</span> <span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mainPanel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">JTextField</span> <span class="token function">getUrlTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> urlTextField<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/images/article/assembly/assembly-211103-02.png" alt=""></p><ul><li>配置页窗体主要提供文章路径的选择，这里需要用到的标签包括：JLabel、JTextField、JButton</li><li>在使用 GUI Form 创建完窗体后，就会出现这样一个可视化的页面，右侧可以把各类标签拖到中间的面板中，左侧进行设置展示名称和属性名称。</li><li>最终这里的代码标签代码会展示到 <code>SettingUI.java</code> 中，而渲染内容会被隐藏，这样的方式也比较方便控制一些自定义内容的添加，例如事件和新窗体等</li><li>另外在 <code>SettingUI.java</code> 中，还需要在构造函数添加一个按钮事件，用于打开文件选择器，把我们需要打开的文件，设置到 <code>urlTextField</code> 中。</li></ul><h4 id="_2-3-阅读页窗体" tabindex="-1"><a class="header-anchor" href="#_2-3-阅读页窗体" aria-hidden="true">#</a> 2.3 阅读页窗体</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadUI</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">JPanel</span> mainPanel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">JTextPane</span> textContent<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">JComponent</span> <span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mainPanel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">JTextPane</span> <span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> textContent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/images/article/assembly/assembly-211103-03.png" alt=""></p><ul><li>在窗体创建和配置页窗体是一样的，也是通过拖拽到面板中，用于展示路径文件内容。</li><li>你可以适当的添加一些其他按钮进去，比如翻页阅读、滚动条、字数展示等。</li></ul><h3 id="_3-toolwindow-工具框" tabindex="-1"><a class="header-anchor" href="#_3-toolwindow-工具框" aria-hidden="true">#</a> 3. ToolWindow 工具框</h3><p>为了把我们自己实现的<code>阅读窗体</code>放到整个 IDEA 右侧侧边栏中，我们需要创建一个实现了 <code>ToolWindowFactory</code> 的接口，并把实现类配置到 plugin.xml 中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ToolWindowFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ReadUI</span> readUI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createToolWindowContent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Project</span> project<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ToolWindow</span> toolWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取内容工厂的实例</span>
        <span class="token class-name">ContentFactory</span> contentFactory <span class="token operator">=</span> <span class="token class-name">ContentFactory</span><span class="token punctuation">.</span><span class="token constant">SERVICE</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 ToolWindow 显示的内容</span>
        <span class="token class-name">Content</span> content <span class="token operator">=</span> contentFactory<span class="token punctuation">.</span><span class="token function">createContent</span><span class="token punctuation">(</span>readUI<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置 ToolWindow 显示的内容</span>
        toolWindow<span class="token punctuation">.</span><span class="token function">getContentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addContent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 全局使用</span>
        <span class="token class-name">Config</span><span class="token punctuation">.</span>readUI <span class="token operator">=</span> readUI<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接口方法 <code>ToolWindowFactory#createToolWindowContent</code> 是需要自己工具框类实现的方法，在这个 <code>createToolWindowContent</code> 方法中把自己的窗体 <code>ReadUI</code> 实例化后填充进去即可。</li><li>添加窗体的补助主要依赖于 <code>ContentFactory.SERVICE.getInstance()</code> 创建出 ContentFactory 并最终使用 toolWindow 添加窗体显示 UI 即可。</li><li>这里我们额外的还添加了一个全局属性 <code>Config.readUI</code> 这是为了后续可以在配置窗体中使用这个 UI 进行设置文件内容。</li></ul><h3 id="_4-configurable-配置框" tabindex="-1"><a class="header-anchor" href="#_4-configurable-配置框" aria-hidden="true">#</a> 4. Configurable 配置框</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SettingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">SearchableConfigurable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">SettingUI</span> settingUI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SettingUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test.id&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token annotation punctuation">@Nls</span><span class="token punctuation">(</span>capitalization <span class="token operator">=</span> <span class="token class-name">Nls<span class="token punctuation">.</span>Capitalization<span class="token punctuation">.</span>Title</span><span class="token punctuation">)</span> <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test-config&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">JComponent</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> settingUI<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ConfigurationException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> settingUI<span class="token punctuation">.</span><span class="token function">getUrlTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置文本信息</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RandomAccessFile</span> randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            randomAccessFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> readSize <span class="token operator">=</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>readSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>copy<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 设置内容</span>
            <span class="token class-name">Config</span><span class="token punctuation">.</span>readUI<span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现自 SearchableConfigurable 接口的方法比较多，包括：getId、getDisplayName、<code>createComponent</code>、isModified、<code>apply</code> 这些里面用于写逻辑实现的主要是 <code>createComponent</code> 和 <code>apply</code></li><li>createComponent 方法主要是把我们自己创建的 UI 面板提供给 JComponent</li><li>apply 是一个事件，当我们点击完成配置的 OK、完成，时候就会触发到这个方法。在这个方法中我们拿到文件的 URL 地址使用 <code>RandomAccessFile</code> 进行读取解析文件，并最终把文件内容展示到阅读窗体中 <code>Config.readUI.getTextContent().setText(str);</code></li></ul><h3 id="_5-配置-plugin-xml" tabindex="-1"><a class="header-anchor" href="#_5-配置-plugin-xml" aria-hidden="true">#</a> 5. 配置 plugin.xml</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>extensions defaultExtensionNs<span class="token operator">=</span><span class="token string">&quot;com.intellij&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token class-name">Add</span> your extensions here <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置 <span class="token class-name">File</span> <span class="token operator">-&gt;</span> <span class="token class-name">Settings</span> <span class="token operator">-&gt;</span> <span class="token class-name">Tools</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>projectConfigurable groupId<span class="token operator">=</span><span class="token string">&quot;tools&quot;</span> displayName<span class="token operator">=</span><span class="token string">&quot;My Test Config&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;test.id&quot;</span>
                         instance<span class="token operator">=</span><span class="token string">&quot;cn.bugstack.guide.idea.plugin.factory.SettingFactory&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
                         
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 窗体 <span class="token punctuation">(</span><span class="token constant">IDEA</span> 界面右侧<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>toolWindow id<span class="token operator">=</span><span class="token string">&quot;Read-Book&quot;</span> secondary<span class="token operator">=</span><span class="token string">&quot;false&quot;</span> anchor<span class="token operator">=</span><span class="token string">&quot;right&quot;</span> icon<span class="token operator">=</span><span class="token string">&quot;/icons/logo.png&quot;</span>
                factoryClass<span class="token operator">=</span><span class="token string">&quot;cn.bugstack.guide.idea.plugin.factory.ReadFactory&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>extensions<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>本次在 plugin.xml 中的主要配置内容就是 projectConfigurable 和 toolWindow，另外在 toolWindow 中还添加了一个 icon 的 logo，配置完成后就可以在 IDEA 页面展示出我们的自己添加的窗体了。</li></ul><h2 id="四、插件测试" tabindex="-1"><a class="header-anchor" href="#四、插件测试" aria-hidden="true">#</a> 四、插件测试</h2><ul><li>通过 Plugin 启动插件，这个时候会打开一个新的 IDEA 窗体，在这个新窗体中就可以看到我们添加的功能了。</li></ul><p><strong>配置文件路径</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211103-04.png" alt=""></p><ul><li>点击选择按钮，选择你的文件位置，选择后点击 OK</li></ul><p><strong>查看展示文件</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211103-05.png" alt=""></p><ul><li>确认好文件路径后，就可以再右侧栏看到自己的文件展示内容了。<em>是不是在扩展些，就适合你摸鱼了！？</em></li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>学习自定义开发UI，把UI填充到需要放置的 IDEA 窗体位置，并在窗体中添加功能的流程步骤，其实主要包括三方面：Swing UI、Factory 实现类、plugin 配置。</li><li>在 plugin 配置中，主要包括如窗体ID、位置、icon图标、对应的实现类，如果不添加这些是不能正常展示窗体信息的。</li><li>另外可以以这个案例为基础，添加自己想完成的功能，比如让这个摸鱼看书的功能更加完善，可以支持不同类型的文件，甚至可以是 PDF 的阅读，以及你想看的书籍。</li></ul>`,47);function b(g,h){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)]),k,s("原文："),n("a",v,[s("https://mp.weixin.qq.com/s/R8qvoSNyedVM95Ty8sbhgg"),e(a)])]),m])}const w=t(i,[["render",b],["__file","2021-11-03-《IntelliJ IDEA chajiankaifa》dierjie：peizhichuangtihecebianlanchuangtideshiyong.html.vue"]]);export{w as default};
