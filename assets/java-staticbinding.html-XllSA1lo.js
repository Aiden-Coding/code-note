import{_ as n,o as s,c as a,e}from"./app-3RcBQnkC.js";const p={},t=e(`<h1 id="理解静态绑定与动态绑定" tabindex="-1"><a class="header-anchor" href="#理解静态绑定与动态绑定" aria-hidden="true">#</a> 理解静态绑定与动态绑定</h1><ul><li><a href="#%E7%90%86%E8%A7%A3%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A">理解静态绑定与动态绑定</a> * <a href="#java%E7%A8%8B%E5%BA%8F%E4%BB%8E%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E5%88%B0%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%A6%81%E7%BB%8F%E8%BF%87%E4%B8%A4%E5%A4%A7%E6%AD%A5%E9%AA%A4">Java程序从源文件创建到程序运行要经过两大步骤：</a> * <a href="#%E7%BB%91%E5%AE%9A">绑定</a> * <a href="#%E7%BB%91%E5%AE%9A%E5%88%86%E7%B1%BB">绑定分类</a> * <a href="#%E7%BB%91%E5%AE%9A%E7%9A%84%E5%85%B6%E4%BB%96%E5%8F%AB%E6%B3%95">绑定的其他叫法</a> * <a href="#%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A">静态绑定</a> * <a href="#%E8%AF%86%E5%88%AB%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E7%9A%84%E4%B8%89%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%90%84%E8%87%AA%E7%9A%84%E7%90%86%E8%A7%A3">识别静态绑定的三个关键字以及各自的理解</a> * <a href="#%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A">动态绑定</a> * <a href="#%E6%A6%82%E5%BF%B5">概念</a> * <a href="#%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3">代码理解</a> * <a href="#%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E7%9A%84%E8%BF%87%E7%A8%8B">动态绑定的过程</a><ul><li><a href="#%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%92%8C%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E7%9A%84%E7%89%B9%E7%82%B9">动态绑定和静态绑定的特点</a> * <a href="#%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A-1">静态绑定</a> * <a href="#%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A-1">动态绑定</a></li></ul></li></ul><p>一个Java 程序要经过编写、编译、运行三个步骤，其中编写代码不在我们讨论的范围之内，那么我们的重点自然就放在了编译 和 运行这两个阶段，由于编译和运行阶段过程相当繁琐，下面就我的理解来进行解释：</p><h3 id="java程序从源文件创建到程序运行要经过两大步骤" tabindex="-1"><a class="header-anchor" href="#java程序从源文件创建到程序运行要经过两大步骤" aria-hidden="true">#</a> Java程序从源文件创建到程序运行要经过两大步骤：</h3><p>1、编译时期是由编译器将源文件编译成字节码的过程</p><p>2、字节码文件由Java虚拟机解释执行</p><h3 id="绑定" tabindex="-1"><a class="header-anchor" href="#绑定" aria-hidden="true">#</a> 绑定</h3><p><strong>绑定就是一个方法的调用与调用这个方法的类连接在一起的过程被称为绑定。</strong></p><h4 id="绑定分类" tabindex="-1"><a class="header-anchor" href="#绑定分类" aria-hidden="true">#</a> 绑定分类</h4><p>绑定主要分为两种：</p><p>静态绑定 和 动态绑定</p><h4 id="绑定的其他叫法" tabindex="-1"><a class="header-anchor" href="#绑定的其他叫法" aria-hidden="true">#</a> 绑定的其他叫法</h4><p>静态绑定 == 前期绑定 == 编译时绑定</p><p>动态绑定 == 后期绑定 == 运行时绑定</p><p>为了方便区分： 下面统一称呼为静态绑定和动态绑定</p><h3 id="静态绑定" tabindex="-1"><a class="header-anchor" href="#静态绑定" aria-hidden="true">#</a> 静态绑定</h3><p><strong>在程序运行前，也就是编译时期JVM就能够确定方法由谁调用，这种机制称为静态绑定</strong></p><h4 id="识别静态绑定的三个关键字以及各自的理解" tabindex="-1"><a class="header-anchor" href="#识别静态绑定的三个关键字以及各自的理解" aria-hidden="true">#</a> 识别静态绑定的三个关键字以及各自的理解</h4><p>如果一个方法由private、Static、final任意一个关键字所修饰，那么这个方法是前期绑定的</p><p>构造方法也是前期绑定</p><p>private：private关键字是私有的意思，如果被private修饰的方法是无法由本类之外的其他类所调用的，也就是本类所特有的方法，所以也就由编译器识别此方法是属于哪个类的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> talk<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">canTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> talk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// private 修饰的方法是Person类独有的，所以Animal类无法访问(动物本来就不能说话)</span>
<span class="token comment">//        p.canTalk();</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>final：final修饰的方法不能被重写，但是可以由子类进行调用，如果将方法声明为final可以有效的关闭动态绑定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> fruitName<span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">eatingFruit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;eating &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> fruitName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">{</span>

      <span class="token comment">// 不能重写final方法，eatingFruit方法只属于Fruit类，Apple类无法调用</span>
<span class="token comment">//    String eatingFruit(String name){</span>
<span class="token comment">//        super.eatingFruit(name);</span>
<span class="token comment">//    }</span>

    <span class="token class-name">String</span> <span class="token function">eatingApple</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eatingFruit</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>static： static修饰的方法比较特殊，不用通过new出某个类来调用，由类名.变量名直接调用该方法，这个就很关键了，new 很关键，也可以认为是开启多态的导火索，而由类名.变量名直接调用的话，此时的类名是确定的，并不会产生多态，如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;由 superClass 说你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;由 SubClass 说你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SuperClass</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SubClass</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><p>SubClass 继承SuperClass 后，在<img src="https://img2018.cnblogs.com/blog/1515111/201905/1515111-20190524093834719-902392159.png" alt=""> 是无法重写sayHello方法的，也就是说sayHello()方法是对子类隐藏的，但是你可以编写&quot;自己的&quot;sayHello()方法，也就是子类SubClass 的sayHello()方法，由此可见，方法由static 关键词所修饰，也是编译时绑定</p><h3 id="动态绑定" tabindex="-1"><a class="header-anchor" href="#动态绑定" aria-hidden="true">#</a> 动态绑定</h3><h4 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h4><p><strong>在运行时根据具体对象的类型进行绑定</strong></p><p><strong>除了由private、final、static 所修饰的方法和构造方法外，JVM在运行期间决定方法由哪个对象调用的过程称为动态绑定</strong></p><p>如果把编译、运行看成一条时间线的话，在运行前必须要进行程序的编译过程，那么在编译期进行的绑定是前期绑定，在程序运行了，发生的绑定就是后期绑定</p><h4 id="代码理解" tabindex="-1"><a class="header-anchor" href="#代码理解" aria-hidden="true">#</a> 代码理解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">drinkMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;父亲喜欢喝牛奶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">drinkMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;儿子喜欢喝牛奶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Father</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        son<span class="token punctuation">.</span><span class="token function">drinkMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Son类继承Father类，并重写了父类的dringMilk()方法，在输出结果得出的是儿子喜欢喝牛奶。那么上面的绑定方式是什么呢？</p><p>上面的绑定方式称之为动态绑定，因为在你编写 Father son = new Son()的时候，编译器并不知道son对象真正引用的是谁，在程序运行时期才知道，这个son是一个Father类的对象，但是却指向了Son的引用，这种概念称之为多态，那么我们就能够整理出来多态的三个原则：</p><p>**1. 继承 **</p><p><strong>2.重写</strong></p><p><strong>3.父类对象指向子类引用</strong></p><p>也就是说，在Father son = new Son() ，触发了动态绑定机制。</p><h4 id="动态绑定的过程" tabindex="-1"><a class="header-anchor" href="#动态绑定的过程" aria-hidden="true">#</a> 动态绑定的过程</h4><ol><li>虚拟机提取对象的实际类型的方法表；</li><li>虚拟机搜索方法签名；</li><li>调用方法。</li></ol><h2 id="动态绑定和静态绑定的特点" tabindex="-1"><a class="header-anchor" href="#动态绑定和静态绑定的特点" aria-hidden="true">#</a> 动态绑定和静态绑定的特点</h2><h4 id="静态绑定-1" tabindex="-1"><a class="header-anchor" href="#静态绑定-1" aria-hidden="true">#</a> 静态绑定</h4><p>静态绑定在编译时期触发，那么它的主要特点是</p><p>1、编译期触发，能够提早知道代码错误</p><p>2、提高程序运行效率</p><h4 id="动态绑定-1" tabindex="-1"><a class="header-anchor" href="#动态绑定-1" aria-hidden="true">#</a> 动态绑定</h4><p>1、使用动态绑定的前提条件能够提高代码的可用性，使代码更加灵活。</p><p>2、多态是设计模式的基础，能够降低耦合性。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivkbczxoj31l20t8al5.jpg" alt="image-20210716163352584"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivl4khz9j31d60h8mze.jpg" alt="image-20210716163433337"></p>`,53),i=[t];function c(l,o){return s(),a("div",null,i)}const r=n(p,[["render",c],["__file","java-staticbinding.html.vue"]]);export{r as default};
