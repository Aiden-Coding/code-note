import{_ as h,r as n,o as d,c as o,a as i,b as l,d as a,e as r}from"./app-3RcBQnkC.js";const t={},s=i("h1",{id:"面经手册-·-开篇《面试官都问我啥》",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#面经手册-·-开篇《面试官都问我啥》","aria-hidden":"true"},"#"),l(" 面经手册 · 开篇《面试官都问我啥》")],-1),c=i("p",null,[i("img",{src:"https://bugstack.cn/assets/images/2020/interview/interview-0-00.jpg",alt:""})],-1),p=i("br",null,null,-1),u={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},_=i("br",null,null,-1),b={href:"https://mp.weixin.qq.com/s/yXVc6pdu28YAixBjs-bmOg",target:"_blank",rel:"noopener noreferrer"},E=r('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>一直以来都有小伙伴问我什么时候出一些面试系列的文章，脑袋一热一口答应下来，《重学Java设计模式》写完就安排。但是怎么写，要写成什么样才对读者有帮助成了难点。</p><p>再三思考，面试只是一时的，工作、学习，才是长久坚持的。很多人面试不理想多半也是来自于自我学习能力的不足和工作内容的单一以及业务体量小导致。所以我想从全局培养人才的角度出发，也算是技术成长的经历中提取学习框架，帮助小伙伴们提升技术能力的同时也可以应对面试。</p><p><code>好像面试越来越难？</code></p><p>招聘一个合格的研发有多难？近半年我差不多收了400份简历，筛选简历到初面通过的不足10%。这里面很多人连简历都写不好，面试时也经常回答不到点上，技术栈广度不够深度不足，项目经验缺乏，没有解决复杂场景的经验等等。但也同样有很多优秀的，手里有多个offer最后流失。对于企业是损失，但对于个人来说，我佩服这样的人，他们技术好有更多的选择。</p><p><code>30岁要有30岁的能力，35岁要有35的经历</code></p><p>有时候不是面试难，而是年龄与能力不匹配，对企业招聘来说，同样能力下你价格还高，为什么不招聘个年轻有活力的呢？(<code>什么？找对象</code>) 有时候你会说这是贩卖焦虑，这是洗脑，但这条路上终究有人前进，有人被动回退。</p><p><code>学习是你这个职业一辈子的事</code></p><p>手里有个 <code>1 2 3</code>，不要想着去怼别人的 <code>4 5 6</code>，因为还有你不知道的 <code>7 8 9</code>。保持空瓶心态从<code>0</code>开始才能学到<code>10全</code>。</p><p><strong>这一篇我会从简历的视角出发，简要概况出研发人员应该具备的能力</strong> 有了这篇的基础上，后续再逐步扩展系列的面试场景，以及对应的面试题细节讲解和从哪学习这些知识的一个引导。</p><h2 id="二、程序员的愿望" tabindex="-1"><a class="header-anchor" href="#二、程序员的愿望" aria-hidden="true">#</a> 二、程序员的愿望</h2><p><strong>5年</strong>，时间不长不短，有人结婚生娃、有人回家开店、也有人继续在大城市打拼。</p><p>头两天在研发群里做了一次愿望留言，期待下5年后的自己。如图；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-0-01.png" alt=""></p><p>留言心愿集中的点，在于；</p><ol><li>身体健康</li><li>头发还在</li><li>加薪升职</li></ol><p><strong>努力！也照顾好自己。奋斗！也爱惜好身体。</strong></p>',18),f={href:"https://github.com/fuzhengwei/CodeGuide/issues/111",target:"_blank",rel:"noopener noreferrer"},g=r('<h2 id="三、谢飞机简历" tabindex="-1"><a class="header-anchor" href="#三、谢飞机简历" aria-hidden="true">#</a> 三、谢飞机简历</h2><p>这是一份工作4年的谢飞机简历，如下；</p><ul><li>先看看简历，与自己的对比下，有什么可取之处</li><li>如果你是求职者，还希望在这份简历里补充什么</li><li>如果你是面试官，你举得这份简历还差了什么</li></ul><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-0-02.png" alt=""></p><ul><li>这一份开篇的简历，可以阅读完下面的面试框架进行比对，看看你应该做些什么 。</li><li>后续的系列面经文章，将围绕简历开始，提问和讲解面试题。</li></ul><h2 id="四、面试框架" tabindex="-1"><a class="header-anchor" href="#四、面试框架" aria-hidden="true">#</a> 四、面试框架</h2><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-0-03.png" alt=""></p><h3 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> 1. 自我介绍</h3><ol><li>1分钟左右的自我介绍，简要的描述出；姓名、毕业时间、工作年限、工作经历、技术影响力[博客、Github、开源贡献、专利]等。</li><li>如果有较大型项目或者大家有一致性认知的项目和技术难点攻克，可以简单说出项目名称等。</li><li>方法论沉淀相关；架构设计能力、带过小组或者团队、跨部门协调、流程规范制定和执行等。</li></ol><p><em>你要透露出的核心点就是个人的一个基本信息，以及项目和技术上的沉淀，给面试官留出和你聊下去的话题</em></p><p><strong>例如：</strong></p><p>面试官好，我叫谢飞机，16年毕业于天津工业大学，软件工程专业，目前已工作4年。我从毕业后就职于途乐数字科技，负责营销和订单系统开发。在系统搭建、代码优化、问题处理上有较丰富的经验和处理能力。同时也喜欢写一些技术博客和看一些技术书籍，另外在Spring、Dubbo等源码学习上有过一些研究以及复用到业务开发中。感谢！</p><h3 id="_2-面试类型" tabindex="-1"><a class="header-anchor" href="#_2-面试类型" aria-hidden="true">#</a> 2. 面试类型</h3><p>依赖于面试官的不同，与你一起进入面试的方式也不同，比如；</p><ol><li>直接提问型；直接提问一些技术栈问题或者有些公司会考算法。</li><li>场景引导型；通过让你介绍的一些项目经历，用过什么技术栈，在场景下提问。</li><li>连环追问型；从一个点出发，你的每一个回答都在为下一个深入的问题做开始。</li><li>压力逼问型；压力面一般不多，但抗的住并能抓住重点，offer基本稳了。</li></ol><p><strong>直接提问型</strong> 需要你有一定的技术栈广度和深度，问题往往也比较有跳跃性。但大部分题目会是热点问题，但可能不是日常开发中频率最高的技术点。</p><p><strong>场景引导型</strong> 需要你有一定的开发架构经验和项目落地能力，这部分问题基本都会结合实际的业务场景进行提问，每一个场景就是一个复杂问题问题的解决能力。这里问到的场景会与你简历中的工作经历和项目相关，但复杂程度可能会超过你目前简历中的项目内容。比如；你写了一个订单类的，那么会问你秒杀的实际解决方案。这样的问题很难背题应付，需要真的经历过，研究过。</p><p><strong>连环追问型</strong> 从一个小的技术点开始，一层层往下剥，每一次的回答也几乎都是下一个问题的深入点的来源。这种问题不仅考察面试者，也是对面试官的考验。往往在招聘高级别开发时会进行定向深入挖掘提问，找到匹配的行业专家级技术人员。</p><p><strong>压力逼问型</strong> 这种面试方式一般不多，但可能有的高级面试官会让你感受到这种气场。一方面是确实人家有这样的技术气势，另外一个是来自自己的紧张。如果会不是问题，还会在面试官那留下很高的打分。如果不会，那么会感觉到你越不会什么，面试官越问你什么。</p><p><em>以上就是基本这四类面试官的风格，求职除了技术能力外还有一部分是眼缘，不一定一个问题不会就是你不优秀，而是在寻找这个职位最适合匹配度的人员。</em></p><h3 id="_3-算法" tabindex="-1"><a class="header-anchor" href="#_3-算法" aria-hidden="true">#</a> 3. 算法</h3><p>算法一整块内容来考的互联网公司目前有一些，比如；头条、谷歌、百度，但不一定所有职位都需要去考算法。热频考点大部分可以分如下几块：</p><ol><li>动态规划</li><li>数据结构</li><li>算法思维</li></ol><p>在题目上一般会有排序、二分查找、回文链表、反链链表，和数据结构设计方面。这些题目可以通过 leetcode-cn.com 刷题进行练习。</p><h3 id="_4-技术栈" tabindex="-1"><a class="header-anchor" href="#_4-技术栈" aria-hidden="true">#</a> 4. 技术栈</h3><p>技术栈考查的是程序员在编程开发领域学习的广度和深度，日常的业务开发往往提升都是对API使用的熟练程度，如果再缺少一些系统设计和技术难点攻克，或者说没有大流量的冲击。那么确实很难回答一些技术深度问题。如下汇总了基本会再技术栈面试中涉及的考题，可以参考提升个人技术能力。</p><h4 id="_4-1-技能" tabindex="-1"><a class="header-anchor" href="#_4-1-技能" aria-hidden="true">#</a> 4.1 技能</h4><h5 id="_4-1-1-java" tabindex="-1"><a class="header-anchor" href="#_4-1-1-java" aria-hidden="true">#</a> 4.1.1 Java</h5><h6 id="jdk源码" tabindex="-1"><a class="header-anchor" href="#jdk源码" aria-hidden="true">#</a> JDK源码</h6><ol><li><p>HashMap</p><ol><li>HashMap的数据结构(1.7、1.8的区别)</li><li>HashMap的实现原理</li><li>HashMap扩容为什么是2^n-1</li><li>HashMap是线程安全的吗</li><li>HashMap、HashTable是什么关系？</li></ol></li><li><p>ThreadLocal</p><ol><li>讲讲你对ThreadLocal的一些理解</li><li>ThreadLocal有哪些应用场景</li><li>了解过FastThreadLocal吗</li></ol></li><li><p>ArrayList、LinkList</p><ol><li>是否保证线程安全</li><li>底层数据结构</li><li>插入和删除是否受元素位置的影响</li><li>是否支持快速随机访问</li><li>内存空间占用</li><li>如何进行扩容的，默认初始化空间是多少</li></ol></li><li><p>String StringBuffer StringBuilder</p><ol><li>有什么区别</li><li>是线程安全的吗</li></ol></li><li><p>jdk1.8的新特性</p><ol><li>lambda表达式</li><li>Functional Interfaces</li><li>Optionals</li><li>Stream 流</li><li>Parallel-Streams 并行流</li></ol></li></ol><h6 id="并发编程-j-u-c" tabindex="-1"><a class="header-anchor" href="#并发编程-j-u-c" aria-hidden="true">#</a> 并发编程(j.u.c)</h6><ol><li><p>volatile</p><ol><li>volatile 的作用和使用场景</li><li>volatile 如何保证指令重排</li><li>什么情况下会发生指令重排</li></ol></li><li><p>synchronized</p><ol><li>一般用在什么场景</li><li>实现原理</li><li>锁升级过程(偏向锁、轻量级锁、重量级锁)</li><li>这是JVM层面锁，还是JDK层面锁｛JVM层面｝</li><li>这是一种悲观锁还是乐观锁｛悲观锁是独占锁｝</li></ol></li><li><p>lock</p><ol><li>这是JVM层面锁，还是JDK层面锁｛JDK层面｝</li><li>这是一种悲观锁还是乐观锁</li><li>是可重入锁吗</li></ol></li><li><p>ReentrantLock</p><ol><li>与synchronized相比较有什么不同</li><li>ReentrantLock 与 Lock 的关系</li><li>锁过程中是否可中断，与之对应的synchronized可中断吗</li></ol></li><li><p>CAS</p><ol><li>Unsafe 类的作用</li><li>CAS 的理解(compareAndSet)</li><li>什么是ABA问题</li><li>CAS的实现有什么(AtomicInteger)</li></ol></li><li><p>AQS</p><ol><li>实现类有哪些 ReentrantLock、Semaphore、CountDownLatch、CyclicBarrier</li><li>实现了AQS的锁有哪些 自旋锁、互斥锁、读锁写锁、条件产量、信号量、栅栏都是AQS的衍生物 内存屏障，几乎所有的处理器至少支持一种粗粒度的屏障指令，通常被称为“栅栏（Fence）”</li></ol></li></ol><h6 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h6><ol><li><p>线程池的种类</p><ol><li>newCachedThreadPool</li><li>newFixedThreadPool</li><li>newScheduledThreadPool</li><li>newSingleThreadExecutor</li></ol></li><li><p>线程的生命周期</p><ol><li>新建、就绪、运行、阻塞(等待阻塞、同步阻塞、其他阻塞)、死亡</li></ol></li></ol><h6 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h6><ol><li>GC 优化</li><li>JVM 逃逸分析</li><li>类的对象头都包括什么</li><li>new Object() 初始化都做了什么</li><li>运行时数据区</li><li>Java的内存模型以及GC算法</li></ol><h6 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h6><ol start="0"><li>设计模式6大原则 单一职责(一个类和方法只做一件事)、里氏替换(多态，子类可扩展父类)、依赖倒置(细节依赖抽象，下层依赖上层)、接口隔离(建立单一接口)、迪米特原则(最少知道，降低耦合)、开闭原则(抽象架构，扩展实现)</li><li>创建型模式 这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复用性。</li><li>结构型模式 这类模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。</li><li>行为模式 这类模式负责对象间的高效沟通和职责委派。</li></ol><h6 id="反射、代理" tabindex="-1"><a class="header-anchor" href="#反射、代理" aria-hidden="true">#</a> 反射、代理</h6><ol><li>怎么实现反射调用方法</li><li>怎么代理一个类，有什么场景使用</li><li>类代理的原理是什么</li><li>有什么框架可以做类代理</li></ol><h5 id="_4-1-2-redis" tabindex="-1"><a class="header-anchor" href="#_4-1-2-redis" aria-hidden="true">#</a> 4.1.2 Redis</h5><h6 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h6><ol><li>计数命令</li><li>排序命令</li><li>加锁命令</li></ol><h6 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h6><ol><li>常用的数据类型</li><li>数据淘汰策略</li><li>单线程的为什么那么快</li><li>RDB和AOF的优缺点</li><li>持久化策略选择</li></ol><h6 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h6><ol><li>缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级</li><li>Pipeline有什么好处，为什么要用pipeline</li><li>是否使用过Redis集群，集群的原理是什么</li><li>Redis的同步机制了解么</li></ol><h5 id="_4-1-3-mysql" tabindex="-1"><a class="header-anchor" href="#_4-1-3-mysql" aria-hidden="true">#</a> 4.1.3 Mysql</h5><h6 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h6><ol><li>全局锁</li><li>表锁</li><li>行锁</li><li>乐观锁、悲观锁</li><li>排他锁</li><li>锁优化</li></ol><h6 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h6><ol><li>事物特征</li><li>脏读</li><li>幻读</li><li>不可重复读</li><li>事物隔离</li><li>并发事物</li><li>事物实现原理</li></ol><h6 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h6><ol><li>慢查询日志</li><li>错误日志</li><li>redo log(重做日志)</li><li>binlog(归档日志)</li><li>undo log(回滚日志)</li></ol><h6 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h6><ol><li>聚集索引 VS 非聚集索引</li><li>最左匹配原则</li><li>前缀索引</li></ol><h6 id="引擎" tabindex="-1"><a class="header-anchor" href="#引擎" aria-hidden="true">#</a> 引擎</h6><ol><li>InnoDB</li><li>MyISAM</li></ol><h4 id="_4-2-框架" tabindex="-1"><a class="header-anchor" href="#_4-2-框架" aria-hidden="true">#</a> 4.2 框架</h4><h5 id="_4-2-1-spring" tabindex="-1"><a class="header-anchor" href="#_4-2-1-spring" aria-hidden="true">#</a> 4.2.1 Spring</h5>',60),B={href:"https://bugstack.cn/md/spring/develop-spring/2021-05-16-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Spring%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},x=i("ol",null,[i("li",null,"Bean的注册过程"),i("li",null,"Bean的定义都包括什么信息"),i("li",null,"Spring 事务中的隔离级别有哪几种"),i("li",null,"schedule 使用")],-1),m=i("h5",{id:"_4-2-2-mybatis",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_4-2-2-mybatis","aria-hidden":"true"},"#"),l(" 4.2.2 Mybatis")],-1),A={href:"https://bugstack.cn/md/spring/develop-spring/2021-05-16-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Spring%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},k=i("ol",null,[i("li",null,"mybatis在spring的使用中，只需要定义接口，就可以和xml中的配置的sql语句，进行关联，执行数据库增删改查操作。怎么实现的"),i("li",null,"session是怎么管理的")],-1),C=i("h5",{id:"_4-3-3-springboot",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_4-3-3-springboot","aria-hidden":"true"},"#"),l(" 4.3.3 SpringBoot")],-1),S={href:"https://bugstack.cn/md/project/springboot-middleware/2021-03-31-%E3%80%8ASpringBoot%20%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BC%80%E5%8F%91%E3%80%8B%E4%B8%93%E6%A0%8F%E5%B0%8F%E5%86%8C%E4%B8%8A%E7%BA%BF%E5%95%A6%EF%BC%81.html",target:"_blank",rel:"noopener noreferrer"},F=r('<ol><li>SpringBoot 怎么开发一个自己的Stater</li></ol><h5 id="_4-2-4-springcloud" tabindex="-1"><a class="header-anchor" href="#_4-2-4-springcloud" aria-hidden="true">#</a> 4.2.4 SpringCloud</h5><ol><li>spring cloud 断路器的作用是什么</li><li>spring cloud 的核心组件有哪些 Eureka：服务注册于发现。 Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。 Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。 Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。 Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。</li></ol><h4 id="_4-3-组件" tabindex="-1"><a class="header-anchor" href="#_4-3-组件" aria-hidden="true">#</a> 4.3 组件</h4><h5 id="_4-3-1-dubbo" tabindex="-1"><a class="header-anchor" href="#_4-3-1-dubbo" aria-hidden="true">#</a> 4.3.1 Dubbo</h5><ol><li>通信模型是什么样的</li><li>Dubbo 和 Spring Cloud 有什么区别</li><li>dubbo都支持什么协议，推荐用哪种 dubbo://（推荐） rmi:// hessian:// http:// webservice:// thrift:// memcached:// redis:// rest://</li><li>Dubbo里面有哪几种节点角色</li><li>Dubbo中怎么处理的超时断开</li></ol><h5 id="_4-3-2-mq" tabindex="-1"><a class="header-anchor" href="#_4-3-2-mq" aria-hidden="true">#</a> 4.3.2 Mq</h5><ol><li>RabbitMq</li><li>Kafka</li></ol><h5 id="_4-3-3-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_4-3-3-elasticsearch" aria-hidden="true">#</a> 4.3.3 elasticsearch</h5><ol><li>elasticsearch 了解多少，说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。</li><li>elasticsearch 的倒排索引是什么</li><li>elasticsearch 是如何实现 master 选举的</li><li>详细描述一下 Elasticsearch 搜索的过程</li></ol><h5 id="_4-3-4-hbase" tabindex="-1"><a class="header-anchor" href="#_4-3-4-hbase" aria-hidden="true">#</a> 4.3.4 Hbase</h5><ol><li>拓展类问题</li></ol><h5 id="_4-3-5-otter" tabindex="-1"><a class="header-anchor" href="#_4-3-5-otter" aria-hidden="true">#</a> 4.3.5 otter</h5><ol><li>拓展类问题</li></ol><h4 id="_4-4-工具" tabindex="-1"><a class="header-anchor" href="#_4-4-工具" aria-hidden="true">#</a> 4.4 工具</h4><ol><li>Idea</li><li>Maven</li><li>Jenkins</li><li>JMeter</li></ol><h4 id="_4-5-架构" tabindex="-1"><a class="header-anchor" href="#_4-5-架构" aria-hidden="true">#</a> 4.5 架构</h4><h5 id="_4-5-1-系统搭建" tabindex="-1"><a class="header-anchor" href="#_4-5-1-系统搭建" aria-hidden="true">#</a> 4.5.1 系统搭建</h5><ol><li>MVC</li><li>DDD 领域驱动设计</li></ol><h5 id="_4-5-2-数据库设计" tabindex="-1"><a class="header-anchor" href="#_4-5-2-数据库设计" aria-hidden="true">#</a> 4.5.2 数据库设计</h5><ol><li>分库分表(水平拆分、垂直拆分)</li><li>业务场景</li><li>基础配置优化相关</li></ol><h5 id="_4-5-3-服务治理" tabindex="-1"><a class="header-anchor" href="#_4-5-3-服务治理" aria-hidden="true">#</a> 4.5.3 服务治理</h5><ol><li>负载均衡</li><li>熔断</li><li>降级</li><li>限流</li><li>黑白名单</li></ol><h5 id="_4-5-4-分布式任务" tabindex="-1"><a class="header-anchor" href="#_4-5-4-分布式任务" aria-hidden="true">#</a> 4.5.4 分布式任务</h5><ol><li>xxl-job</li></ol><h5 id="_4-5-5-监控" tabindex="-1"><a class="header-anchor" href="#_4-5-5-监控" aria-hidden="true">#</a> 4.5.5 监控</h5><ol><li>系统非入侵全链路监控</li><li>TP99、TP999、QPS、TPS的熟悉程度</li></ol><h5 id="_4-5-6-压测" tabindex="-1"><a class="header-anchor" href="#_4-5-6-压测" aria-hidden="true">#</a> 4.5.6 压测</h5><ol><li>是否压测过，有无经验</li><li>对系统健壮性的把控</li><li>JVM参数</li><li>GC调优</li><li>代码优化</li></ol><h4 id="_4-6-环境" tabindex="-1"><a class="header-anchor" href="#_4-6-环境" aria-hidden="true">#</a> 4.6 环境</h4><ol><li>Linux</li><li>Tomcat</li><li>docker</li><li>k8s</li></ol><h3 id="_5-项目" tabindex="-1"><a class="header-anchor" href="#_5-项目" aria-hidden="true">#</a> 5. 项目</h3>',32),D={href:"https://bugstack.cn/md/project/lottery/introduce/Lottery%E6%8A%BD%E5%A5%96%E7%B3%BB%E7%BB%9F.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://bugstack.cn/md/project/im/2020-03-04-%E3%80%8ANetty+JavaFx%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%BF%E6%A1%8C%E9%9D%A2%E7%89%88%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E3%80%8B.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://bugstack.cn/md/assembly/api-gateway/2022-08-12-%E5%BC%80%E7%AF%87%EF%BC%9A%E5%A6%82%E6%9E%9C%E8%AE%A9%E6%88%91%E8%AE%BE%E8%AE%A1%E4%B8%80%E5%A5%97%EF%BC%8CTPS%E7%99%BE%E4%B8%87%E7%BA%A7API%E7%BD%91%E5%85%B3.html",target:"_blank",rel:"noopener noreferrer"},y=r('<h4 id="_5-1-项目经验" tabindex="-1"><a class="header-anchor" href="#_5-1-项目经验" aria-hidden="true">#</a> 5.1 项目经验</h4><ol><li>开发了哪些项目</li><li>重点项目是什么</li><li>你主要负责哪些</li><li>有过什么优化</li></ol><h4 id="_5-2-工作业绩" tabindex="-1"><a class="header-anchor" href="#_5-2-工作业绩" aria-hidden="true">#</a> 5.2 工作业绩</h4><ol><li>中大型项目架构能力</li><li>复杂项目落地能力</li><li>重点项目执行落地</li><li>交付能力&amp;质量</li></ol><h4 id="_5-3-技术沉淀" tabindex="-1"><a class="header-anchor" href="#_5-3-技术沉淀" aria-hidden="true">#</a> 5.3 技术沉淀</h4><ol><li>方法论</li><li>流程规范制定</li><li>交付质量</li><li>公用组件建设</li><li>开源项目</li><li>复杂架构设计经验</li><li>团队技术分享</li></ol><h4 id="_5-4-工程师品质" tabindex="-1"><a class="header-anchor" href="#_5-4-工程师品质" aria-hidden="true">#</a> 5.4 工程师品质</h4><ol><li>认知范围，技术、业务、运营</li><li>学习能力，接受能力</li><li>创新技术，迁移能力</li></ol><h4 id="_5-5-疑难问题处理" tabindex="-1"><a class="header-anchor" href="#_5-5-疑难问题处理" aria-hidden="true">#</a> 5.5 疑难问题处理</h4><ol><li>复杂问题推进解决能力</li><li>紧急事故解决能力</li></ol><h4 id="_5-6-项目推进" tabindex="-1"><a class="header-anchor" href="#_5-6-项目推进" aria-hidden="true">#</a> 5.6 项目推进</h4><ol><li>中大型项目推进落地</li><li>资源协调安排</li><li>流程规范实施</li></ol><h4 id="_5-7-专业影响力" tabindex="-1"><a class="header-anchor" href="#_5-7-专业影响力" aria-hidden="true">#</a> 5.7 专业影响力</h4><ol><li>项目推进过程中方案执行落地</li><li>带动他人共同完成，并赋予能力提升</li><li>技术价值创造</li><li>开源项目和专利</li></ol><h3 id="_6-个人-面试官" tabindex="-1"><a class="header-anchor" href="#_6-个人-面试官" aria-hidden="true">#</a> 6. 个人&amp;面试官</h3><h4 id="_6-1-个人" tabindex="-1"><a class="header-anchor" href="#_6-1-个人" aria-hidden="true">#</a> 6.1 个人</h4><ol><li>可能会有一个人性的问题</li><li>介绍自己部门是什么的</li><li>其他你早点入职</li></ol><h4 id="_6-2-面试官" tabindex="-1"><a class="header-anchor" href="#_6-2-面试官" aria-hidden="true">#</a> 6.2 面试官</h4><ol><li>部门主要做什么业务</li><li>入职后承担哪块</li><li>有什么技术挑战需要提前学习了解的</li></ol><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>结合以上框架内容看自己是否是一个能抗住打的求职者，综合素质是否全面，技术栈广度、深度是否在瓶颈里徘徊，思考下怎么突破。</li><li>面试只是一份求职的开始，面试题也只是学习过程的知识点总结，只流于背题很容易被问倒。不同的面试官风格、水平、关注点也都不同，只有自己学扎实了才能随心所面。</li><li>以上的技术框架总结有一个xmind思维导图，以及面试简历，都可以通过在公众号：<code>bugstack虫洞栈</code>，回复资源下载进行获取。<code>获取链接打开，找到ID：19</code></li></ul>',21);function M(j,J){const e=n("ExternalLinkIcon");return d(),o("div",null,[s,c,i("p",null,[l("作者：小傅哥 "),p,l("博客："),i("a",u,[l("https://bugstack.cn"),a(e)]),_,l("原文："),i("a",b,[l("https://mp.weixin.qq.com/s/yXVc6pdu28YAixBjs-bmOg"),a(e)])]),E,i("p",null,[l("愿望地址："),i("a",f,[l("https://github.com/fuzhengwei/CodeGuide/issues/111"),a(e)])]),g,i("ul",null,[i("li",null,[i("a",B,[l("手写Spring：渐进式源码实践"),a(e)])])]),x,m,i("ul",null,[i("li",null,[i("a",A,[l("手写Mybatis：渐进式源码实践"),a(e)])])]),k,C,i("ul",null,[i("li",null,[i("a",S,[l("SpringBoot 中间件设计和开发"),a(e)])])]),F,i("ul",null,[i("li",null,[i("a",D,[l("Lottery 抽奖系统 - 基于领域驱动设计的四层架构实践"),a(e)])]),i("li",null,[i("a",v,[l("Netty+JavaFx实战：仿桌面版微信聊天"),a(e)])]),i("li",null,[i("a",w,[l("API网关：中间件设计和实践"),a(e)])])]),y])}const T=h(t,[["render",M],["__file","2020-07-28-mianjingshouce·kaipian《mianshiguanduwenwosha》.html.vue"]]);export{T as default};
