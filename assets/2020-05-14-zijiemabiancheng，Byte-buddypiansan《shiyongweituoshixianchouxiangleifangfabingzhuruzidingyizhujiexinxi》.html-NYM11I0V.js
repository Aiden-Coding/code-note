import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"字节码编程-byte-buddy篇三《使用委托实现抽象类方法并注入自定义注解信息》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字节码编程-byte-buddy篇三《使用委托实现抽象类方法并注入自定义注解信息》","aria-hidden":"true"},"#"),s(" 字节码编程，Byte-buddy篇三《使用委托实现抽象类方法并注入自定义注解信息》")],-1),k=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=p('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>截至到本章节关于字节码框架 <code>Byte-buddy</code> 的大部分常用 API 的使用已经通过案例介绍比较全面了，接下来介绍关于如何去实现一个抽象类以及创建出相应注解(包括类的注解和方法的注解)的知识点。而注解的这部分内容在一些监控或者拦截处理的场景下还是比较常用的，所以在这章节我们会通过一个例子来创建出含有自定义注解的类和方法。</p><p>如果你已经阅读了之前的系列文章，这部分学习的内容并不会有太多的陌生，主要是关于<code>委托(MethodDelegation)</code>方法的使用以及补充自定义注解。</p><p><strong>那么</strong>，接下来我们就使用委托和注解方式来创建这样的案例进行学习。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',6),m=n("li",null,"JDK 1.8.0",-1),v=n("li",null,"byte-buddy 1.10.9",-1),b=n("li",null,"byte-buddy-agent 1.10.9",-1),h=n("code",null,"itstack-demo-bytecode-2-03",-1),y=n("strong",null,"公众号",-1),g={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"bugstack虫洞栈",-1),w=n("code",null,"你会获得一个下载链接列表，打开后里面的第17个「因为我有好多开源代码」",-1),q=n("code",null,"Star",-1),_=p(`<h2 id="三、案例目标" tabindex="-1"><a class="header-anchor" href="#三、案例目标" aria-hidden="true">#</a> 三、案例目标</h2><p>在这里我们定义了一个抽象并且含有泛型的接口类，如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">T</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么接下来的案例会使用到委托的方式进行实现抽象类方法并加入自定义注解，也就相当于我们使用代码进行编程实现的效果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RpcGatewayClazz</span><span class="token punctuation">(</span> clazzDesc <span class="token operator">=</span> <span class="token string">&quot;查询数据信息&quot;</span><span class="token punctuation">,</span> alias <span class="token operator">=</span> <span class="token string">&quot;dataApi&quot;</span><span class="token punctuation">,</span> timeOut <span class="token operator">=</span> <span class="token number">350L</span> <span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      

    <span class="token annotation punctuation">@RpcGatewayMethod</span><span class="token punctuation">(</span> methodName <span class="token operator">=</span> <span class="token string">&quot;queryData&quot;</span><span class="token punctuation">,</span> methodDesc <span class="token operator">=</span> <span class="token string">&quot;查询数据&quot;</span> <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里就是最终效果，我们模拟是一种网关接口的实现和定义注解暴漏接口信息（如果你是在互联网中做开发，类似这样的需求还是蛮多的，接口统一走网关服务）。</li></ul><h2 id="四、技术实现" tabindex="-1"><a class="header-anchor" href="#四、技术实现" aria-hidden="true">#</a> 四、技术实现</h2><p>在技术实现的过程中会逐步的去实现我们需要的功能，将需要的用到知识点信息拆开讲解，以达到最终的案例目标。</p><h3 id="_1-创建自定义注解" tabindex="-1"><a class="header-anchor" href="#_1-创建自定义注解" aria-hidden="true">#</a> 1. 创建自定义注解</h3><p><strong>模拟网关类注解</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RpcGatewayClazz</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">clazzDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">alias</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token function">timeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">350</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>模拟网关方法注解</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RpcGatewayMethod</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">methodDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分你可以创建任何类型的注解，主要是用于模拟类和方法上分别添加注解并获取最终属性值的效果。</li></ul><h3 id="_2-创建委托函数" tabindex="-1"><a class="header-anchor" href="#_2-创建委托函数" aria-hidden="true">#</a> 2. 创建委托函数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryInterceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Origin</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@AllArguments</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;小傅哥博客，查询文章数据：https://bugstack.cn/?id=&quot;</span> <span class="token operator">+</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最终我们的字节码操作会通过委托的方式来实现抽象类的功能。</li><li>在委托函数中的用到注解已经在上一章节中完整的介绍了，可以回顾参考。</li><li><code>@Origin</code> 可以绑定到以下类型的参数：Method 被调用的原始方法 Constructor 被调用的原始构造器 Class 当前动态创建的类 MethodHandle MethodType String 动态类的toString()的返回值 int 动态方法的修饰符.</li><li><code>@AllArguments</code> 绑定所有参数的数组。</li></ul><h3 id="_3-创建方法主体信息" tabindex="-1"><a class="header-anchor" href="#_3-创建方法主体信息" aria-hidden="true">#</a> 3. 创建方法主体信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 生成含有注解的泛型实现字类</span>
<span class="token class-name">DynamicType<span class="token punctuation">.</span>Unloaded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> dynamicType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBuddy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subclass</span><span class="token punctuation">(</span><span class="token class-name">TypeDescription<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>Builder</span><span class="token punctuation">.</span><span class="token function">parameterizedType</span><span class="token punctuation">(</span><span class="token class-name">Repository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 创建复杂类型的泛型注解</span>
        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">Repository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;UserRepository&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">// 添加类信息包括地址</span>
        <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">ElementMatchers</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string">&quot;queryData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                          <span class="token comment">// 匹配处理的方法</span>
        <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">MethodDelegation</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">UserRepositoryInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                     <span class="token comment">// 交给委托函数</span>
        <span class="token punctuation">.</span><span class="token function">annotateMethod</span><span class="token punctuation">(</span><span class="token class-name">AnnotationDescription<span class="token punctuation">.</span>Builder</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span><span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;methodName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queryData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;methodDesc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;查询数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">annotateType</span><span class="token punctuation">(</span><span class="token class-name">AnnotationDescription<span class="token punctuation">.</span>Builder</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span><span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;alias&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dataApi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;clazzDesc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;查询数据信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;timeOut&quot;</span><span class="token punctuation">,</span> <span class="token number">350L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分基本是<code>Byte-buddy</code>的模板方法，通过核心API；<code>subclass</code>、<code>name</code>、<code>method</code>、<code>intercept</code>、<code>annotateMethod</code>、<code>annotateType</code> 的使用构建方法。</li><li>首先是定义复杂类型的自定义注解，设定为本方法的父类，这部分内容也就是抽象类。<code>Repository&lt;T&gt;</code>，通过 <code>TypeDescription.Generic.Builder.parameterizedType(Repository.class, String.class).build()</code> 来构建。</li><li>设定类名称在我们之前就已经使用过，这里多加类的路径信息。<code>concat</code> 函数是字符串的连接符，替换 <code>+</code> 号。</li><li><code>method</code>，设定匹配处理方法名称。</li><li><code>MethodDelegation.to(UserRepositoryInterceptor.class)</code>，最终的核心是关于委托函数的使用。这里的使用也就可以调用到我们上面定义的委托函数，等最终我们通过字节码生成的 <code>class</code> 类进行查看。</li><li><code>annotateMethod</code>、<code>annotateType</code>，定义类和方法的注解，通过 <code>define</code> 设定值（可以多次使用）。</li></ul><h3 id="_4-将创建的类写入目录" tabindex="-1"><a class="header-anchor" href="#_4-将创建的类写入目录" aria-hidden="true">#</a> 4. 将创建的类写入目录</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 输出类信息到目标文件夹下</span>
dynamicType<span class="token punctuation">.</span><span class="token function">saveIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">ApiTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分内容是 <code>Byte-buddy</code> 提供的 API 方法；<code>saveIn</code>，把字节码信息写成 <code>class</code> 到执行的文件夹下。这样就可以非常方便的验证通过字节码框架创建的方法内容。</li></ul><p><strong>字节码方法内容</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>bytebuddy</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RpcGatewayClazz</span><span class="token punctuation">(</span>
    clazzDesc <span class="token operator">=</span> <span class="token string">&quot;查询数据信息&quot;</span><span class="token punctuation">,</span>
    alias <span class="token operator">=</span> <span class="token string">&quot;dataApi&quot;</span><span class="token punctuation">,</span>
    timeOut <span class="token operator">=</span> <span class="token number">350L</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RpcGatewayMethod</span><span class="token punctuation">(</span>
        methodName <span class="token operator">=</span> <span class="token string">&quot;queryData&quot;</span><span class="token punctuation">,</span>
        methodDesc <span class="token operator">=</span> <span class="token string">&quot;查询数据&quot;</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FindOneInterceptor</span><span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>cachedValue$aGmAjHXh$iha1qv0<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">UserRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        cachedValue$aGmAjHXh$iha1qv0 <span class="token operator">=</span> <span class="token class-name">Repository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;queryData&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从上可以看出来我们的自定义类已经实现了抽象类，同时也添加了类和方法的注解信息。</li><li>而在实现的类中有一步是使用委托函数进行处理方法的内容。</li></ul><h3 id="_5-输出自定义注解信息" tabindex="-1"><a class="header-anchor" href="#_5-输出自定义注解信息" aria-hidden="true">#</a> 5. 输出自定义注解信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从目标文件夹下加载类信息</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Repository</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> repositoryClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Repository</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.bytebuddy.UserRepository&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取类注解</span>
<span class="token class-name">RpcGatewayClazz</span> rpcGatewayClazz <span class="token operator">=</span> repositoryClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayClazz.clazzDesc：&quot;</span> <span class="token operator">+</span> rpcGatewayClazz<span class="token punctuation">.</span><span class="token function">clazzDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayClazz.alias：&quot;</span> <span class="token operator">+</span> rpcGatewayClazz<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayClazz.timeOut：&quot;</span> <span class="token operator">+</span> rpcGatewayClazz<span class="token punctuation">.</span><span class="token function">timeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 获取方法注解</span>
<span class="token class-name">RpcGatewayMethod</span> rpcGatewayMethod <span class="token operator">=</span> repositoryClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;queryData&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayMethod.methodName：&quot;</span> <span class="token operator">+</span> rpcGatewayMethod<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RpcGatewayMethod.methodDesc：&quot;</span> <span class="token operator">+</span> rpcGatewayMethod<span class="token punctuation">.</span><span class="token function">methodDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这里我们使用的是 <code>Class.forName</code>，进行加载类信息。也可以像以前的章节一样使用；<code>unloadedType.load(XXX.class.getClassLoader())</code> 的方式进行直接处理字节码。</li><li>最后是读取自定义注解的信息内容，包括类和方法。</li></ul><h3 id="_6-测试验证运行" tabindex="-1"><a class="header-anchor" href="#_6-测试验证运行" aria-hidden="true">#</a> 6. 测试验证运行</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实例化对象</span>
<span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> repository <span class="token operator">=</span> repositoryClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 测试输出</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">queryData</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <code>Class.forName</code> 的方式就可以直接调用方法，如果加载字节码的方式就需要通过反射进行处理（<em>以往章节有案例可以对照学习</em>）。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span>clazzDesc：查询数据信息
<span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span>alias：dataApi
<span class="token class-name">RpcGatewayClazz</span><span class="token punctuation">.</span>timeOut：<span class="token number">350</span>
<span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">.</span>methodName：queryData
<span class="token class-name">RpcGatewayMethod</span><span class="token punctuation">.</span>methodDesc：查询数据
小傅哥博客，查询文章数据：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>bugstack<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">10001</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不出意外你会看到以上的结果信息，通过我们使用字节码创建的方法已经可以按照我们的需求进行内容输出。</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2>`,36),z=n("li",null,[s("在本章节的学习中需要注意几个知识点的使用，包括；"),n("code",null,"委托方法使用"),s("、"),n("code",null,"复杂类型的泛型创建"),s("、"),n("code",null,"类和方法自定义注解的添加"),s("以及"),n("code",null,"写入字节码信息到文件中"),s("。")],-1),R={href:"https://bytebuddy.net/",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,"每一段知识都是只有进行系统化的学习才能有完整的收获，只言片语带来的碎片化体验总是不能对一个技术进行全方面的了解。在技术的这条路上，多加油！",-1);function x(D,G){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",d,[s("https://bugstack.cn"),t(a)])]),r,n("ol",null,[m,v,b,n("li",null,[s("本章涉及源码在："),h,s("，可以关注"),y,s("："),n("a",g,[f,t(a)]),s("，回复源码下载获取。"),w,s("，记得给个"),q,s("！")])]),_,n("ul",null,[z,n("li",null,[s("截至到目前基本我们已经对常用的字节码框架自我学习和分享的基本完成了，另外一些其他的API的使用可以参考官方文档；"),n("a",R,[s("https://bytebuddy.net"),t(a)])]),j])])}const M=e(i,[["render",x],["__file","2020-05-14-zijiemabiancheng，Byte-buddypiansan《shiyongweituoshixianchouxiangleifangfabingzhuruzidingyizhujiexinxi》.html.vue"]]);export{M as default};
