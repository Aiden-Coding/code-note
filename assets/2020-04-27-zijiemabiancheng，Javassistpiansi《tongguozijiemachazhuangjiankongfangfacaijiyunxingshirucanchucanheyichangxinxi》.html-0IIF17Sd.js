import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"字节码编程-javassist篇四《通过字节码插桩监控方法采集运行时入参出参和异常信息》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字节码编程-javassist篇四《通过字节码插桩监控方法采集运行时入参出参和异常信息》","aria-hidden":"true"},"#"),s(" 字节码编程，Javassist篇四《通过字节码插桩监控方法采集运行时入参出参和异常信息》")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=p(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>字节码编程插桩这种技术常与 <code>Javaagent</code> 技术结合用在系统的非入侵监控中，这样就可以替代在方法中进行硬编码操作。比如，你需要监控一个方法，包括；方法信息、执行耗时、出入参数、执行链路以及异常等。那么就非常适合使用这样的技术手段进行处理。</p><p>为了能让这部分最核心的内容体现出来，本文会只使用 <code>Javassist</code> 技术对一段方法字节码进行插桩操作，最终输出这段方法的执行信息，如下；</p><p><strong>方法</strong> - 测试方法用于后续进行字节码增强操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> str01<span class="token punctuation">,</span> <span class="token class-name">String</span> str02<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>监控</strong> - 对一段方法进行字节码增强后，输出监控信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>监控 <span class="token operator">-</span> <span class="token class-name">Begin</span>
方法：<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span>ApiTest</span><span class="token punctuation">.</span>strToInt
入参：<span class="token punctuation">[</span><span class="token string">&quot;str01&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;str02&quot;</span><span class="token punctuation">]</span> 入参<span class="token punctuation">[</span>类型<span class="token punctuation">]</span>：<span class="token punctuation">[</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">]</span> 入数<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span>
出参：<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> 出参<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token number">1</span>
耗时：<span class="token function">59</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
监控 <span class="token operator">-</span> <span class="token class-name">End</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这样的监控方案，基本我们可以输出方法执行过程中的全部信息。再通过后期的完善将监控信息展示到界面，实时报警。既提升了系统的监控质量，也方便了研发排查并定位问题。</p><p>好！那么接下来我们开始一步步使用 <code>javassist</code> 进行字节码插桩，已达到我们的监控效果。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>`,11),m=n("li",null,"JDK 1.8.0",-1),v=n("li",null,"javassist 3.12.1.GA",-1),g=n("code",null,"itstack-demo-bytecode-1-04",-1),b=n("strong",null,"公众号",-1),h={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"bugstack虫洞栈",-1),y=n("em",null,"源码下载",-1),j=n("code",null,"你会获得一个下载链接列表，打开后里面的第17个「因为我有好多开源代码」",-1),q=n("code",null,"Star",-1),_=p(`<h2 id="三、技术实现" tabindex="-1"><a class="header-anchor" href="#三、技术实现" aria-hidden="true">#</a> 三、技术实现</h2><h3 id="_1-获取方法基础信息" tabindex="-1"><a class="header-anchor" href="#_1-获取方法基础信息" aria-hidden="true">#</a> 1. 获取方法基础信息</h3><h4 id="_1-1-获取类" tabindex="-1"><a class="header-anchor" href="#_1-1-获取类" aria-hidden="true">#</a> 1.1 获取类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取类</span>
<span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span>ApiTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctClass<span class="token punctuation">.</span><span class="token function">replaceClassName</span><span class="token punctuation">(</span><span class="token string">&quot;ApiTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ApiTest02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> clazzName <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>通过类名获取类的信息</em>，同时这里可以把类名进行替换。它也包括类里面一些其他获取属性的操作，比如；<code>ctClass.getSimpleName()</code>、<code>ctClass.getAnnotations()</code> 等。</p><h4 id="_1-2-获取方法" tabindex="-1"><a class="header-anchor" href="#_1-2-获取方法" aria-hidden="true">#</a> 1.2 获取方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;strToInt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> methodName <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <em>getDeclaredMethod</em> 获取方法的 <code>CtMethod</code> 的内容。之后就可以获取方法的名称等信息。</p><h4 id="_1-3-方法信息" tabindex="-1"><a class="header-anchor" href="#_1-3-方法信息" aria-hidden="true">#</a> 1.3 方法信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>MethodInfo</em> 中包括了方法的信息；名称、类型等内容。</p><h4 id="_1-4-方法类型" tabindex="-1"><a class="header-anchor" href="#_1-4-方法类型" aria-hidden="true">#</a> 1.4 方法类型</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> isStatic <span class="token operator">=</span> <span class="token punctuation">(</span>methodInfo<span class="token punctuation">.</span><span class="token function">getAccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">AccessFlag</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 <code>methodInfo.getAccessFlags()</code> 获取方法的标识，之后通过 <em>与运算</em>，<code>AccessFlag.STATIC</code>，判断方法是否为静态方法。因为静态方法会<em>影响</em>后续的参数名称获取，静态方法第一个参数是 <code>this</code> ，需要排除。</p><h4 id="_1-5-方法-入参信息-名称和类型" tabindex="-1"><a class="header-anchor" href="#_1-5-方法-入参信息-名称和类型" aria-hidden="true">#</a> 1.5 方法：入参信息{名称和类型}</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CodeAttribute</span> codeAttribute <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span><span class="token function">getCodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LocalVariableAttribute</span> attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LocalVariableAttribute</span><span class="token punctuation">)</span> codeAttribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">LocalVariableAttribute</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LocalVariableAttribute，获取方法的入参的名称。</li><li>parameterTypes，获取方法入参的类型。</li></ul><h4 id="_1-6-方法-出参信息" tabindex="-1"><a class="header-anchor" href="#_1-6-方法-出参信息" aria-hidden="true">#</a> 1.6 方法；出参信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CtClass</span> returnType <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> returnTypeName <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>对于方法的出参信息，只需要获取出参类型。</em></p><h4 id="_1-7-输出所有获取的信息" tabindex="-1"><a class="header-anchor" href="#_1-7-输出所有获取的信息" aria-hidden="true">#</a> 1.7 输出所有获取的信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;类名：&quot;</span> <span class="token operator">+</span> clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法：&quot;</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;类型：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isStatic <span class="token operator">?</span> <span class="token string">&quot;静态方法&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;非静态方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;描述：&quot;</span> <span class="token operator">+</span> methodInfo<span class="token punctuation">.</span><span class="token function">getDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参[名称]：&quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">variableName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，&quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">variableName</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参[类型]：&quot;</span> <span class="token operator">+</span> parameterTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，&quot;</span> <span class="token operator">+</span> parameterTypes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参[类型]：&quot;</span> <span class="token operator">+</span> returnTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>类名：<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span>ApiTest</span>
方法：strToInt
类型：非静态方法
描述：<span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Integer</span><span class="token punctuation">;</span>
入参<span class="token punctuation">[</span>名称<span class="token punctuation">]</span>：str01，str02
入参<span class="token punctuation">[</span>类型<span class="token punctuation">]</span>：<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span>，<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span>
出参<span class="token punctuation">[</span>类型<span class="token punctuation">]</span>：<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以上</strong>，所输出信息，都在为监控方法在做准备。从上面可以记录方法的基本描述以及入参个数等。尤其是入参个数，因为在后续还需要使用 <code>$1</code>，来获取没有给入参的值。</p><h3 id="_2-方法字节码插桩" tabindex="-1"><a class="header-anchor" href="#_2-方法字节码插桩" aria-hidden="true">#</a> 2. 方法字节码插桩</h3><p>一段需会被字节码插桩改变的原始方法；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> str01<span class="token punctuation">,</span> <span class="token class-name">String</span> str02<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-先给基础属性打标" tabindex="-1"><a class="header-anchor" href="#_2-1-先给基础属性打标" aria-hidden="true">#</a> 2.1 先给基础属性打标</h4><p><strong>在监控的适合</strong>，不可能每一次调用都把所有方法信息汇总输出出来。这样做不只是性能问题，而是这些都是固定不变的信息，没有必要让每一次方法执行都输出。</p><p>好！那么在方法编译时候，给每一个方法都生成一个唯一<code>ID</code>，用<code>ID</code>关联上方法的固定信息。也就可以把监控数据通过<code>ID</code>传递到外面。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方法：生成方法唯一标识ID</span>
<span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token class-name">Monitor</span><span class="token punctuation">.</span><span class="token function">generateMethodId</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> parameterNameList<span class="token punctuation">,</span> parameterTypeList<span class="token punctuation">,</span> returnTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成ID的过程</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_NUM</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicReferenceArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodDescription</span><span class="token punctuation">&gt;</span></span> methodTagArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReferenceArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">MAX_NUM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">generateMethodId</span><span class="token punctuation">(</span><span class="token class-name">String</span> clazzName<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterNameList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterTypeList<span class="token punctuation">,</span> <span class="token class-name">String</span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MethodDescription</span> methodDescription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    methodDescription<span class="token punctuation">.</span><span class="token function">setClazzName</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    methodDescription<span class="token punctuation">.</span><span class="token function">setMethodName</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    methodDescription<span class="token punctuation">.</span><span class="token function">setParameterNameList</span><span class="token punctuation">(</span>parameterNameList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    methodDescription<span class="token punctuation">.</span><span class="token function">setParameterTypeList</span><span class="token punctuation">(</span>parameterTypeList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    methodDescription<span class="token punctuation">.</span><span class="token function">setReturnType</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token keyword">int</span> methodId <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodId <span class="token operator">&gt;</span> <span class="token constant">MAX_NUM</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    methodTagArr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>methodId<span class="token punctuation">,</span> methodDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> methodId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-字节码插桩添加进入方法时间" tabindex="-1"><a class="header-anchor" href="#_2-2-字节码插桩添加进入方法时间" aria-hidden="true">#</a> 2.2 字节码插桩添加进入方法时间</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义属性</span>
ctMethod<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">&quot;startNanos&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>longType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方法前加强</span>
ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">&quot;{ startNanos = System.nanoTime(); }&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义一个 <code>long</code> 类型的属性，<code>startNanos</code>。并通过 <code>insertBefore</code> 插入到方法内容的开始处。</li></ul><p><strong>最终 <code>class</code> 类方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>     

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> str01<span class="token punctuation">,</span> <span class="token class-name">String</span> str02<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> startNanos <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时已经有了一个方法的开始时间，有了开始时间在加上后续的结尾时间。就可以很方便的统计一个方法的执行耗时。</li></ul><h4 id="_2-3-字节码插桩添加入参输出" tabindex="-1"><a class="header-anchor" href="#_2-3-字节码插桩添加入参输出" aria-hidden="true">#</a> 2.3 字节码插桩添加入参输出</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义属性</span>
ctMethod<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">&quot;parameterValues&quot;</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方法前加强</span>
ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">&quot;{ parameterValues = new Object[]{&quot;</span> <span class="token operator">+</span> parameters<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}; }&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里定义一个数组类型的属性，<code>Object[]</code>，用于记录入参信息。</li></ul><p><strong>最终 <code>class</code> 类方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> str01<span class="token punctuation">,</span> <span class="token class-name">String</span> str02<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var10000 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>str01<span class="token punctuation">,</span> str02<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> startNanos <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两个参数可以通过一条 <code>insertBefore</code> 进行插入，这里是为了更加清晰的向你展示字节码插桩的过程。现在我们就有了进入方法的时间和参数集合，方便后续输出。</li></ul><h4 id="_2-4-定义监控方法" tabindex="-1"><a class="header-anchor" href="#_2-4-定义监控方法" aria-hidden="true">#</a> 2.4 定义监控方法</h4><p><strong>因为我们需要将监控信息</strong>，输出给外部。那么我们这里会定义一个静态方法，让字节码增强后的方法去调用，输出监控信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> methodId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> startNanos<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterValues<span class="token punctuation">,</span> <span class="token class-name">Object</span> returnValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MethodDescription</span> method <span class="token operator">=</span> methodTagArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>methodId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - Begin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getClazzName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterNameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 入参[类型]：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 入数[值]：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>parameterValues<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 出参[值]：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>returnValues<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;耗时：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startNanos<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token string">&quot;(s)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - End\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>     

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> methodId<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MethodDescription</span> method <span class="token operator">=</span> methodTagArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>methodId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - Begin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getClazzName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常：&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - End\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里一共有两个方法，一个用于记录正常情况下的监控信息。另外一个用于记录异常时候的信息。如果是实际的业务场景中，就可以通过这样的方法使用 <code>MQ</code> 将监控信息发送给服务端记录起来并做展示。</li></ul><h4 id="_2-5-字节码插桩调用监控方法" tabindex="-1"><a class="header-anchor" href="#_2-5-字节码插桩调用监控方法" aria-hidden="true">#</a> 2.5 字节码插桩调用监控方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方法后加强</span>
ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">&quot;{ org.itstack.demo.javassist.Monitor.point(&quot;</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">&quot;, startNanos, parameterValues, $_);}&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果返回类型非对象类型，$_ 需要进行类型转换</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里通过静态方法将监控参数传递给外部；<code>idx</code>、<code>startNanos</code>、<code>parameterValues</code>、<code>$_</code><em>出参值</em></li></ul><p><strong>最终 <code>class</code> 类方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> str01<span class="token punctuation">,</span> <span class="token class-name">String</span> str02<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>str01<span class="token punctuation">,</span> str02<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> startNanos <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> var7 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Monitor</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> startNanos<span class="token punctuation">,</span> parameterValues<span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> var7<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>现在已经可以将基本的监控信息传递给外部。对于一个普通的监控，如果不需要追踪链路，基本已经可以满足需求了。</li></ul><h4 id="_2-6-字节码插桩给方法添加trycatch" tabindex="-1"><a class="header-anchor" href="#_2-6-字节码插桩给方法添加trycatch" aria-hidden="true">#</a> 2.6 字节码插桩给方法添加TryCatch</h4><p>以上插桩内容，如果只是正常调用还是没问题的。但是如果方法抛出异常，那么这个时候就不能做到收集监控信息了。所以还需要给方法添加上 <code>TryCatch</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方法；添加TryCatch</span>
ctMethod<span class="token punctuation">.</span><span class="token function">addCatch</span><span class="token punctuation">(</span><span class="token string">&quot;{ org.itstack.demo.javassist.Monitor.point(&quot;</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">&quot;, $e); throw $e; }&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 添加异常捕获</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里通过 <code>addCatch</code> 将方法包装在 <code>TryCatch</code> 里面。</li><li>再通过在 <code>catch</code> 中调用外部方法，将异常信息输出。</li><li>同时有一个点需要注意，<code>$e</code>，用于获取抛出异常的内容。</li></ul><p><strong>最终 <code>class</code> 类方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> str01<span class="token punctuation">,</span> <span class="token class-name">String</span> str02<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>str01<span class="token punctuation">,</span> str02<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> startNanos <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> var7 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Monitor</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> startNanos<span class="token punctuation">,</span> parameterValues<span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> var7<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Monitor</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> var9<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>那么现在就可以非常完整的<code>收录方法执行的信息</code>，包括它的正常执行以及<em>异常</em>情况。</li></ul><h2 id="四、测试结果" tabindex="-1"><a class="header-anchor" href="#四、测试结果" aria-hidden="true">#</a> 四、测试结果</h2><p>接下来就是执行我们的调用测试被修改后的方法字节码。通过不同的入参，来验证监控结果；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试调用</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazzNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenerateClazzMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.javassist.ApiTest&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          

<span class="token comment">// 反射获取 main 方法</span>
<span class="token class-name">Method</span> method <span class="token operator">=</span> clazzNew<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;strToInt&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj_01 <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazzNew<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正确入参：&quot;</span> <span class="token operator">+</span> obj_01<span class="token punctuation">)</span><span class="token punctuation">;</span>             

<span class="token class-name">Object</span> obj_02 <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazzNew<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常入参：&quot;</span> <span class="token operator">+</span> obj_02<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里首先会使用 <code>ClassLoader</code> 加载字节码，之后生成新的类。</li><li>接下来通过获取方法并传入正确和错误的入参。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>监控 <span class="token operator">-</span> <span class="token class-name">Begin</span>
方法：<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span>ApiTest</span><span class="token punctuation">.</span>strToInt
入参：<span class="token punctuation">[</span><span class="token string">&quot;str01&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;str02&quot;</span><span class="token punctuation">]</span> 入参<span class="token punctuation">[</span>类型<span class="token punctuation">]</span>：<span class="token punctuation">[</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">]</span> 入数<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span>
出参：<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> 出参<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token number">1</span>
耗时：<span class="token function">63</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
监控 <span class="token operator">-</span> <span class="token class-name">End</span>

正确入参：<span class="token number">1</span>   

监控 <span class="token operator">-</span> <span class="token class-name">Begin</span>
方法：<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span>ApiTest</span><span class="token punctuation">.</span>strToInt
异常：<span class="token class-name">For</span> input string<span class="token operator">:</span> <span class="token string">&quot;a&quot;</span>
监控 <span class="token operator">-</span> <span class="token class-name">End</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>截至到这我们已经将监控中最核心之一展示出来了，也就是监控方法的全部信息。后续就是需要将这样的监控信息填充到统一监控中心，进行做展示相关的计算操作。</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li><p>基于 <code>Javassist</code> 字节码操作框架可以非常方便的去进行字节码增强，也不需要考虑纯字节码编程下的指令码控制。但如果考虑性能以及更加细致的改变，还是需要使用到 <code>ASM</code> 。</p></li><li><p>这里包括一些字节码操作的知识点，如下；</p><ul><li><code>methodInfo.getDescriptor()</code>，可以输出方法描述信息。<code>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Integer;</code>，其实就是方法的出入参和返回值。</li><li><code>$1 $2 ...</code> 用于获取不同位置的参数。<code>$$</code> 可以获取全部入参，但是不太适合用在数值传递中。</li><li>获取方法的入参需要判断方法的类型，静态类型的方法还包含了 <code>this</code> 参数。<em>AccessFlag.STATIC</em>。</li><li><code>addCatch</code> 最开始执行就包裹原有方法内的内容，最后执行就包括所有内容。它依赖于顺序操作，其他的方法也是这样；<code>insertBefore</code>、<code>insertAfter</code>。</li></ul></li></ul>`,72);function w(S,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),d,n("ol",null,[m,v,n("li",null,[s("本章涉及源码在："),g,s("，可以关注"),b,s("："),n("a",h,[f,t(a)]),s("，回复"),y,s("获取。"),j,s("，记得给个"),q,s("！")])]),_])}const x=e(u,[["render",w],["__file","2020-04-27-zijiemabiancheng，Javassistpiansi《tongguozijiemachazhuangjiankongfangfacaijiyunxingshirucanchucanheyichangxinxi》.html.vue"]]);export{x as default};
