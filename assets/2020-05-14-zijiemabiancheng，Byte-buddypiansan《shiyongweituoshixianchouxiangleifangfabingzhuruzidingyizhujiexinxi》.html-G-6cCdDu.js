const e=JSON.parse('{"key":"v-e2f2de7a","path":"/CodeGuide/md/bytecode/byte-buddy/2020-05-14-zijiemabiancheng，Byte-buddypiansan《shiyongweituoshixianchouxiangleifangfabingzhuruzidingyizhujiexinxi》.html","title":"三、使用委托实现抽象类方法并注入自定义注解信息","lang":"zh-CN","frontmatter":{"category":"itstack-demo-agent","title":"三、使用委托实现抽象类方法并注入自定义注解信息","tagline":"by 付政委","tag":["itstack-demo-bytecode"],"excerpt":"通过委托(MethodDelegation)方式实现抽象类方法并加入自定义注解信息到类和方法上。这部分学习中需要注意几个知识点的使用，包括；`委托方法使用`、`复杂类型的泛型创建`、`类和方法自定义注解的添加`以及`写入字节码信息到文件中`。","lock":"need"},"headers":[{"level":2,"title":"一、前言","slug":"一、前言","link":"#一、前言","children":[]},{"level":2,"title":"二、开发环境","slug":"二、开发环境","link":"#二、开发环境","children":[]},{"level":2,"title":"三、案例目标","slug":"三、案例目标","link":"#三、案例目标","children":[]},{"level":2,"title":"四、技术实现","slug":"四、技术实现","link":"#四、技术实现","children":[{"level":3,"title":"1. 创建自定义注解","slug":"_1-创建自定义注解","link":"#_1-创建自定义注解","children":[]},{"level":3,"title":"2. 创建委托函数","slug":"_2-创建委托函数","link":"#_2-创建委托函数","children":[]},{"level":3,"title":"3. 创建方法主体信息","slug":"_3-创建方法主体信息","link":"#_3-创建方法主体信息","children":[]},{"level":3,"title":"4. 将创建的类写入目录","slug":"_4-将创建的类写入目录","link":"#_4-将创建的类写入目录","children":[]},{"level":3,"title":"5. 输出自定义注解信息","slug":"_5-输出自定义注解信息","link":"#_5-输出自定义注解信息","children":[]},{"level":3,"title":"6. 测试验证运行","slug":"_6-测试验证运行","link":"#_6-测试验证运行","children":[]}]},{"level":2,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"createdTime":1704301416000,"updatedTime":1704373598000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":2}]},"filePathRelative":"CodeGuide/md/bytecode/byte-buddy/2020-05-14-字节码编程，Byte-buddy篇三《使用委托实现抽象类方法并注入自定义注解信息》.md"}');export{e as data};
