import{_ as o,r as e,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},r=n("h1",{id:"数据结构-并查集-disjoint-set",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-并查集-disjoint-set","aria-hidden":"true"},"#"),s(" 数据结构：并查集 Disjoint-Set")],-1),u=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("h2",{id:"一、前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言","aria-hidden":"true"},"#"),s(" 一、前言")],-1),v=n("p",null,[n("code",null,"并查集的历史")],-1),b={href:"https://en.wikipedia.org/wiki/Ackermann_function#Inverse",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"2007 年，Sylvain Conchon 和 Jean-Christophe Filliâtre 开发并查集数据结构的半持久版本，并使用证明助手 Coq 将其正确性形式化。 “半持久”意味着结构的先前版本被有效地保留，但访问数据结构的先前版本会使以后的版本无效。它们最快的实现了几乎与非持久算法一样高效的性能且不执行复杂性分析。",-1),g=n("h2",{id:"二、并查集数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、并查集数据结构","aria-hidden":"true"},"#"),s(" 二、并查集数据结构")],-1),w=n("p",null,"并查集数据结构（也称为联合-查找数据结构或合并-查找集）基于数组实现的一种跟踪元素的数据结构，这些元素被划分为多个不相交（非重叠）的子集。",-1),y={href:"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>并查集的定义乍一看有些抽象，也不知道到底在什么场景使用。所以小傅哥给大家举个例子；在以前江湖上有很多门派，各门派见的徒子徒孙碰面难免切磋。为了不让大家打乱套，都要喊一句：”报上名来“ —— 在下叶问，佛山咏春派，师承陈华顺。那么对于这样的场景，我们可以使用并查集给各门派成员合并，方便汇总查询。如图；</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-01.png?raw=true" width="550px"></div><ul><li>张无忌：既然你不是明教，也不是武当的，我就不客气了。</li><li>赵敏：不客气你还能咋！我学过咏春！</li><li>张无忌：看招！</li><li>赵敏：张无忌放开啊，我讨厌你！😒</li></ul><hr><p>🤔 但各门派徒子徒孙众多，如果下回遇到赵敏的A丫鬟的Aa丫鬟，没等Aa报家门找族谱完事，也被抠脚了咋办？所以基于这样的情况，要对并查集的各级元素进行优化合并，减少排查路径。</p><table><thead><tr><th style="text-align:center;">01：粗暴合并</th><th style="text-align:center;">02：数量合并</th><th style="text-align:center;">03：排序合并</th><th style="text-align:center;">04：压缩路径</th></tr></thead><tbody><tr><td style="text-align:center;"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-02.png" alt=""></td><td style="text-align:center;"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-03.png" alt=""></td><td style="text-align:center;"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-04.png" alt=""></td><td style="text-align:center;"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-05.png" alt=""></td></tr><tr><td style="text-align:center;">0→6、6→0 不控制合并</td><td style="text-align:center;">数量少合并到数量多</td><td style="text-align:center;">排序小合并到排序大</td><td style="text-align:center;">排序合并时压缩路径</td></tr></tbody></table><p>为了尽可能少的检索次数到根元素，在01：粗暴合并的基础上，有了基于数量、排序的合并方式，同时还包括可以压缩路径。这样再索引到根节点的时间复杂度就又降低了。接下来小傅哥就带着大家看看各个场景的在代码中的操作过程。</p><h2 id="三、并查集结构实现" tabindex="-1"><a class="header-anchor" href="#三、并查集结构实现" aria-hidden="true">#</a> 三、并查集结构实现</h2><p>并查集的实现非常巧妙，只基于数组就可以实现出一个树的效果（基于数组实现的还有二叉堆也是树的结构）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisjointSet</span> <span class="token punctuation">{</span>
	  <span class="token comment">// 元素</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>
    <span class="token comment">// 数量【可选】</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">;</span>
	<span class="token comment">// 排序【可选】</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并查集的元素存放在数组中，通过对数组元素的下标索引指向其他元素，构成一棵树。count 数量、rank 排序，是用于对并查集合并元素时的优化处理。</p>`,11),x={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/disjoint_set",target:"_blank",rel:"noopener noreferrer"},j={href:"https://visualgo.net/zh/ufds?slide=2",target:"_blank",rel:"noopener noreferrer"},I=p(`<h3 id="_1-默认合并-union-1-8" tabindex="-1"><a class="header-anchor" href="#_1-默认合并-union-1-8" aria-hidden="true">#</a> 1. 默认合并 - union(1, 8)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-06.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Index out of range.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> parentVal <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> childVal <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentVal <span class="token operator">==</span> childVal<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 所有值等于原孩子节点对应值的都替换为新的父节点值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> childVal<span class="token punctuation">)</span><span class="token punctuation">{</span>
            items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> parentVal<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目标</strong>：union(1, 8) 将8的根节点合并到1的根节点</p><ul><li>union 是合并元素的方法，两个入参意思是把 child 指向的根节点，指向 parent 指向的根节点。后面所有案例中 union 方法属性字段意思相同。</li><li>find 找到元素对应的根节点值，之后使用 union 方法对 items 数组内的元素全部遍历，把所有值等于 child 的节点，都替换为 parent 节点值。</li><li>每次合并都for循环比较耗时，所以后续做了一些列的优化。</li></ul><h3 id="_2-粗暴合并-union-1-8" tabindex="-1"><a class="header-anchor" href="#_2-粗暴合并-union-1-8" aria-hidden="true">#</a> 2. 粗暴合并 - union(1, 8)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-07.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Index out of range.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 找到元素的根节点，当i == item[i]，就是自己指向自己，这个节点就是根节点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 父亲节点的根节点下标值</span>
    <span class="token keyword">int</span> parentRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 孩子节点的根节点下标值</span>
    <span class="token keyword">int</span> childRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentRootIdx <span class="token operator">==</span> childRootIdx<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 孩子节点值替换为父节点值</span>
    items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目标</strong>：union(1, 8) 将8的根节点合并到1的根节点</p><ul><li>find 循环找到置顶节点的最终根节点，例如；8 → 6、6 → 6，那么说明8的根节点是6，因为6自己指向自己了，它就是根节点。</li><li>union 将 8 指向的根节点 6，更换为 1 指向的根节点 0。最终替换完就是 6 → 0，那么8的根节点有也是0了。</li><li>这样虽然减少了每次 for 循环更新，但粗暴的合并会对节点的索引带来一定的复杂度。所以还需要继续优化。</li></ul><h3 id="_3-数量合并-union-1-8" tabindex="-1"><a class="header-anchor" href="#_3-数量合并-union-1-8" aria-hidden="true">#</a> 3. 数量合并 - union(1, 8)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-08.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Index out of range.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 找到元素的根节点，当i == item[i]，就是自己指向自己，这个节点就是根节点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 父亲节点的根节点下标值</span>
    <span class="token keyword">int</span> parentRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 孩子节点的根节点下标值</span>
    <span class="token keyword">int</span> childRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentRootIdx <span class="token operator">==</span> childRootIdx<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> count<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        count<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        count<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目标</strong>：union(1, 8) 将8的根节点合并到1的根节点 &amp; 基于节点的 count 值合并</p><ul><li>find 循环找到置顶节点的最终根节点，例如；8 → 6、6 → 6，那么说明8的根节点是6，因为6自己指向自己了，它就是根节点。</li><li>union 在进行元素的根节点合并时，会判断哪个根下的元素少，用少的元素合并到多的元素下。因为这样可以减少多的元素因为处于更低位置所带来的索引耗时。<em>树越深，子叶节点越多，越耗时。</em></li></ul><h3 id="_4-排序合并-union-8-1" tabindex="-1"><a class="header-anchor" href="#_4-排序合并-union-8-1" aria-hidden="true">#</a> 4. 排序合并 - union(8, 1)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-09.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Index out of range.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 找到元素的根节点，当i == item[i]，就是自己指向自己，这个节点就是根节点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 父亲节点的根节点下标值</span>
    <span class="token keyword">int</span> parentRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 孩子节点的根节点下标值</span>
    <span class="token keyword">int</span> childRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentRootIdx <span class="token operator">==</span> childRootIdx<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> rank<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        rank<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目标</strong>：union(8, 1) 将1的根节点合并到8的根节点（其实效果和union(1,8)是一样的，之所以用union(8, 1)主要体现基于 rank 排序后的合并）&amp; 基于节点的 rank 值合并</p><ul><li>find 循环找到置顶节点的最终根节点，例如；8 → 6、6 → 6，那么说明8的根节点是6，因为6自己指向自己了，它就是根节点。</li><li>union 在进行元素的根节点合并时，会判断哪个根的排序小，用少的元素合并到大的根元素下。因为这样可以减少树深大的元素因为处于更低位置所带来的索引耗时。<em>树越深，子叶节点越多，越耗时。</em></li><li>那么此时基于 count、rank 都可以进行优化，不过优化过程中 1→0、0→2 还有2个树高，也可以优化。这就是压缩路径的作用</li></ul><h3 id="_5-压缩路径-union-8-1" tabindex="-1"><a class="header-anchor" href="#_5-压缩路径-union-8-1" aria-hidden="true">#</a> 5. 压缩路径 - union(8, 1)</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-10.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Index out of range.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 路径压缩</span>
        items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        i <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 父亲节点的根节点下标值</span>
    <span class="token keyword">int</span> parentRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 孩子节点的根节点下标值</span>
    <span class="token keyword">int</span> childRootIdx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentRootIdx <span class="token operator">==</span> childRootIdx<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> rank<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">[</span>childRootIdx<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        rank<span class="token punctuation">[</span>parentRootIdx<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目标</strong>：union(8, 1) 在rank合并下，压缩路径长度。</p><ul><li>这里的 union 方法与<code>4. 排序合并</code>相比并没有变化，变化的地方主要在 find 过程中压缩路径。</li><li>find 基于查找根元素时，对当前元素值对应的父节点值，替换给当前元素。减少一级路径，做到压缩路径的目的。</li></ul><h2 id="四、并查集实现测试" tabindex="-1"><a class="header-anchor" href="#四、并查集实现测试" aria-hidden="true">#</a> 四、并查集实现测试</h2><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">IDisjointSet</span> disjointSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisjointSet04</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>disjointSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n合并元素：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>disjointSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    disjointSet<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>disjointSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于并查集的测试共有6个案例，文中测试举例测试第4个，基于 Rank 优化合并。</li></ul><p><strong>测试结果</strong></p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/disjoint-set-11.png?raw=true" width="500px"></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>坐标 <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token operator">|</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
排序 <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
指向 <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token operator">|</span> 


合并元素：

坐标 <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token operator">|</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
排序 <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
指向 <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> 

坐标 <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token operator">|</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
排序 <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
指向 <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>经过测试对比图例和控制台输出结果可以看到，(4、5、6、7)→6，6→2，1→0，(0、3)→2，这也是最终树的体现结果。</li><li>其他案例源码读者可以测试验证调试，这也可以更好的学习掌握。</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2><ul><li>并查集叙述？</li><li>并查集的使用场景？</li><li>并查集怎么合并元素？</li><li>并查集合并元素的优化策略？</li><li>如何压缩路径？</li></ul>`,35);function R(S,q){const a=e("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("作者：小傅哥 "),u,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,m,v,n("p",null,[s("1964年， Bernard A. Galler 和 Michael J. Fischer 首次描述了不相交的并查集，1975 年，Robert Tarjan 是第一个证明O(ma(n))（"),n("a",b,[s("逆阿克曼函数"),t(a)]),s("）算法时间复杂度的上限，并且在 1979 年表明这是受限情况的下限。")]),h,g,w,n("p",null,[s("它提供了近乎恒定的时间操作（以逆阿克曼函数为界）来添加新集合、合并现有集合以及确定元素是否在同一个集合中。除了推荐算法、好友关系链、族谱等，并查集在 "),n("a",y,[s("Kruskal"),t(a)]),s(" 的算法中扮演着关键角色，用于寻找无向边加权图的最小生成树。")]),f,n("ul",null,[n("li",null,[s("源码地址："),n("a",x,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),n("li",null,[s("本章源码："),n("a",_,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/disjoint_set"),t(a)])]),n("li",null,[s("动画演示："),n("a",j,[s("https://visualgo.net/zh/ufds?slide=2"),t(a)]),s("—— 并查集结构初次理解还是比较困难的，可以结合学习内容的同时做一些动画演示。")])]),I])}const A=o(i,[["render",R],["__file","2022-10-04-disjoint-set.html.vue"]]);export{A as default};
