import{_ as t,r as o,o as c,c as l,a as n,b as s,d as e,e as p}from"./app-3RcBQnkC.js";const i={},r=n("h1",{id:"数据结构-二分搜索树-binary-search-tree",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-二分搜索树-binary-search-tree","aria-hidden":"true"},"#"),s(" 数据结构：二分搜索树 Binary Search Tree")],-1),u=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=p('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>Binary Search Tree历史</code></p><p>二叉搜索树算法是由包括 PF Windley、Andrew Donald Booth、Andrew Colin、Thomas N. Hibbard 在内的几位研究人员独立发现的。该算法归功于 Conway Berners-Lee 和 David Wheeler ，他们在 1960 年使用它在磁带中存储标记数据。 最早和流行的二叉搜索树算法之一是 Hibbard 算法。</p><h2 id="二、二叉搜索树数据结构" tabindex="-1"><a class="header-anchor" href="#二、二叉搜索树数据结构" aria-hidden="true">#</a> 二、二叉搜索树数据结构</h2><p>二叉搜索树（Binary Search Tree），也称二叉查找树。如果你看见有序二叉树（Ordered Binary tree）、排序二叉树（Sorted Binary Tree）那么说的都是一个东西。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-bst-01.png?raw=true" width="400px"></div><ul><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li></ul><hr><p>二叉搜索树在日常开发中使用的场景还是比较多的，例如基于组合模式实现的规则引擎，它就是一颗二叉搜索树。但类似这样的开发中用到的二叉树场景，都是基于配置生成，所以组合出来的节点也更加方便控制树高和平衡性。这与 Java API HashMap 中的红黑树这样为了解决插入节点后仍保持树的平衡性是有所不同的。</p><p>所以二叉搜索树也是一颗没有经过调衡的基础性数据结构，在一定概率上它完成有可能退化成链表，也就是从近似O(logn)的时间复杂度退化到O(n)。关于二叉搜索树的平衡解决方案，包括；AVL树、2-3树、红黑树等，小傅哥会在后续的章节继续实现。</p><h2 id="三、二叉搜索树结构实现" tabindex="-1"><a class="header-anchor" href="#三、二叉搜索树结构实现" aria-hidden="true">#</a> 三、二叉搜索树结构实现</h2><p>二叉搜索树是整个树结构中最基本的树，同时也是树这个体系中实现起来最容易的数据结构。但之所以要使用基于二叉搜索树之上的其他树结构，主要是因为使用数据结构就是对数据的存放和读取。那么为了提高吞吐效率，则需要尽可能的平衡元素的排序，体现在树上则需要进行一些列操作，所以会有不同的结构树实现。</p><p>而实现二叉搜索树是最好的基础学习，了解基本的数据结构后才更容易扩展学习其他树结构。</p>',14),v={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree",target:"_blank",rel:"noopener noreferrer"},b=p(`<h3 id="_1-树枝定义" tabindex="-1"><a class="header-anchor" href="#_1-树枝定义" aria-hidden="true">#</a> 1. 树枝定义</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">Node</span> parent<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用于组成一颗树的节点，则需要包括；值和与之关联的三角结构，一个父节点、两个孩子节点。如果是AVL树还需要树高，红黑树还需要染色标记。</li></ul><h3 id="_2-插入节点" tabindex="-1"><a class="header-anchor" href="#_2-插入节点" aria-hidden="true">#</a> 2. 插入节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 索引出待插入元素位置，也就是插入到哪个父元素下</span>
    <span class="token class-name">Node</span> parent <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> search <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>search <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> search<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent <span class="token operator">=</span> search<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&lt;</span> search<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            search <span class="token operator">=</span> search<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            search <span class="token operator">=</span> search<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 插入元素</span>
    <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> newNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先判断插入元素时候是否有树根，没有则会把当前节点创建出一颗树根来。</li><li>如果当前树是有树根的，则对插入元素与当前树进行一个节点遍历操作，找到元素可以插入的索引位置 parent（挂到这个父节点下）。也就是 search 搜索过程。</li><li>最后就是插入元素，通过给插入值创建一个 Node 节点，并绑定它的父元素，以及把新元素挂到索引到的 parent 节点下。</li></ul><h3 id="_3-索引节点" tabindex="-1"><a class="header-anchor" href="#_3-索引节点" aria-hidden="true">#</a> 3. 索引节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>value <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>值查找的过程，就是对二叉搜索树的遍历，不断的循环节点，按照节点值的左右匹配，找出最终相当的值节点。</li></ul><h3 id="_4-删除节点" tabindex="-1"><a class="header-anchor" href="#_4-删除节点" aria-hidden="true">#</a> 4. 删除节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> delNode <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> delNode<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">delete</span><span class="token punctuation">(</span>delNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Node</span> delNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>delNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>delNode<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token function">transplant</span><span class="token punctuation">(</span>delNode<span class="token punctuation">,</span> delNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delNode<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token function">transplant</span><span class="token punctuation">(</span>delNode<span class="token punctuation">,</span> delNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 因为删除的节点，有2个孩子节点，这个时候找到这条分支下，最左侧做小的节点。用它来替换删除的节点</span>
        <span class="token class-name">Node</span> miniNode <span class="token operator">=</span> <span class="token function">getMiniNode</span><span class="token punctuation">(</span>delNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>miniNode<span class="token punctuation">.</span>parent <span class="token operator">!=</span> delNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 交换位置，用miniNode右节点，替换miniNode</span>
            <span class="token function">transplant</span><span class="token punctuation">(</span>miniNode<span class="token punctuation">,</span> miniNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 把miniNode 提升父节点，设置右子树并进行挂链。替代待删节点</span>
            miniNode<span class="token punctuation">.</span>right <span class="token operator">=</span> delNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            miniNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> miniNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 交换位置，删除节点和miniNode 可打印测试观察；System.out.println(this);</span>
        <span class="token function">transplant</span><span class="token punctuation">(</span>delNode<span class="token punctuation">,</span> miniNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 把miniNode 提升到父节点，设置左子树并挂链</span>
        miniNode<span class="token punctuation">.</span>left <span class="token operator">=</span> delNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        miniNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> miniNode<span class="token punctuation">;</span>
        result <span class="token operator">=</span> miniNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">getMinimum</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">transplant</span><span class="token punctuation">(</span><span class="token class-name">Node</span> delNode<span class="token punctuation">,</span> <span class="token class-name">Node</span> addNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>delNode<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> addNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断删除元素是左/右节点</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">==</span> delNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        delNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> addNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        delNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> addNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设置父节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> addNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        addNode<span class="token punctuation">.</span>parent <span class="token operator">=</span> delNode<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> addNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-删除单节点" tabindex="-1"><a class="header-anchor" href="#_4-1-删除单节点" aria-hidden="true">#</a> 4.1 删除单节点</h4><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-bst-02.png?raw=true" width="400px"></div><ul><li>待删除节点14，判断此节点的父节点的孩子节点，哪个等于14，找出左右</li><li>把待删节点的右孩子节点，挂到删除节点的右节点</li><li>给待删节点的右孩子节点，设置上父节点</li></ul><h4 id="_4-2-删除双节点" tabindex="-1"><a class="header-anchor" href="#_4-2-删除双节点" aria-hidden="true">#</a> 4.2 删除双节点</h4><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-bst-03.png?raw=true" width="400px"></div><ul><li>待删除节点64，含有双子节点，则需要根据第一个右子节点查找最小左子节点。从89到72，如果有比72还小的左子节点，继续排查。</li><li>排查到节点72，将72这个准备替换待删元素的节点，与右子节点73进行位置交换，过程与 4.1 相同。使用交换函数 transplant</li><li>最后是进行节点72与待删节点64的交换过程，更换三角关系，父节点、左子节点、右子节点。</li></ul><h2 id="四、二叉搜索树功能测试" tabindex="-1"><a class="header-anchor" href="#四、二叉搜索树功能测试" aria-hidden="true">#</a> 四、二叉搜索树功能测试</h2>`,18),h={href:"https://visualgo.net/zh/bst?slide=1",target:"_blank",rel:"noopener noreferrer"},w=p(`<h3 id="_1-随机插入元素" tabindex="-1"><a class="header-anchor" href="#_1-随机插入元素" aria-hidden="true">#</a> 1. 随机插入元素</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_binary_search_tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BinarySearchTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">91</span>
         <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">78</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">74</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">67</span>
<span class="token number">61</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">51</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">40</span>
         <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">28</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">14</span>
                 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">7</span>
                 
<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因为你测试时的随机数不同，可能会出现很多不同结构的二叉搜索树，也可能是一个类似链表结构的退化树。</li></ul><h3 id="_2-插入并且删除" tabindex="-1"><a class="header-anchor" href="#_2-插入并且删除" aria-hidden="true">#</a> 2. 插入并且删除</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_insert_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">BinarySearchTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">94</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 删除单节点，只有一个孩子的父节点</span>
    <span class="token comment">// tree.delete(14);</span>
    
    <span class="token comment">// 删除双节点，拥有二个孩子的父节点</span>
    tree<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">94</span>
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">89</span>
         <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">73</span>
         <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">72</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">64</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">63</span>
<span class="token number">32</span>
 <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">18</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">14</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">7</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">6</span>

                 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">94</span>
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">89</span>
         <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">73</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">72</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">63</span>
<span class="token number">32</span>
 <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">18</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">14</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">7</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token number">6</span>


<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个案例就是 <a href="#">4.2 删除双节点</a> 的案例，删除了节点64以后，节点72被提取上来使用。<em>读者伙伴也可以尝试删除其他节点测试验证</em></li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2><ul><li>二叉搜索树结构简述&amp;变T的可能也让手写</li><li>二叉搜索树的插入、删除、索引的时间复杂度</li><li>二叉搜索树删除含有双子节点的元素过程叙述</li><li>二叉搜索树的节点都包括了哪些信息</li><li>为什么Java HashMap 中说过红黑树而不使用二叉搜索树</li></ul>`,12);function y(f,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("作者：小傅哥 "),u,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)])]),d,n("ul",null,[n("li",null,[s("源码地址："),n("a",v,[s("https://github.com/fuzhengwei/java-algorithms"),e(a)])]),n("li",null,[s("本章源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree"),e(a)])])]),b,n("p",null,[s("为了方便观察树结构的变化，这里小傅哥找了一些资料资料，一种是我们可以通过程序来打印（类似大家之前打印99乘法表，另外是使用线上的可视化图："),n("a",h,[s("https://visualgo.net/zh/bst?slide=1"),e(a)]),s("）")]),w])}const _=t(i,[["render",y],["__file","2022-09-18-tree.html.vue"]]);export{_ as default};
