import{_ as e,r as p,o as t,c,a as n,b as o,d as i,e as a}from"./app-3RcBQnkC.js";const l={},u=a('<h1 id="atomicreference-用法和源码分析" tabindex="-1"><a class="header-anchor" href="#atomicreference-用法和源码分析" aria-hidden="true">#</a> AtomicReference 用法和源码分析</h1><ul><li><a href="#atomicreference-%E7%94%A8%E6%B3%95%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">AtomicReference 用法和源码分析</a><ul><li><a href="#atomicreference-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">AtomicReference 基本使用</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-synchronized-%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7">使用 synchronized 保证线程安全性</a></li></ul></li><li><a href="#%E4%BA%86%E8%A7%A3-atomicreference">了解 AtomicReference</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-atomicreference-%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7">使用 AtomicReference 保证线程安全性</a></li><li><a href="#atomicreference-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">AtomicReference 源码解析</a></li><li><a href="#get-and-set">get and set</a></li><li><a href="#lazyset-%E6%96%B9%E6%B3%95">lazySet 方法</a></li><li><a href="#getandset-%E6%96%B9%E6%B3%95">getAndSet 方法</a></li><li><a href="#compareandset-%E6%96%B9%E6%B3%95">compareAndSet 方法</a></li><li><a href="#weakcompareandset-%E6%96%B9%E6%B3%95">weakCompareAndSet 方法</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><p>我们之前了解过了 AtomicInteger、AtomicLong、AtomicBoolean 等原子性工具类，下面我们继续了解一下位于 <code>java.util.concurrent.atomic</code> 包下的工具类。</p><p>关于 AtomicInteger、AtomicLong、AtomicBoolean 相关的内容请查阅</p>',4),r={href:"https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&mid=2247494526&idx=1&sn=071de13dff98d3daae7b189c4fa322a1&chksm=fc46168dcb319f9b7108770ac8fbb3dad9c130432f5ad5697c5e2f30aed8dbb939c65669fe0e&token=1842524500&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},k=a(`<blockquote><p>关于 AtomicReference 这种 JDK 工具类的了解的文章比较枯燥，并不是代表着文章质量的下降，因为我想搞出一整套 bestJavaer 的全方位解析，那就势必离不开对 JDK 工具类的了解。</p><p><strong>记住：技术要做长线</strong>。</p></blockquote><h2 id="atomicreference-基本使用" tabindex="-1"><a class="header-anchor" href="#atomicreference-基本使用" aria-hidden="true">#</a> AtomicReference 基本使用</h2><p>我们这里再聊起老生常谈的账户问题，通过个人银行账户问题，来逐渐引入 AtomicReference 的使用，我们首先来看一下基本的个人账户类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankCard</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> accountName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数初始化 accountName 和 money</span>
    <span class="token keyword">public</span> <span class="token class-name">BankCard</span><span class="token punctuation">(</span><span class="token class-name">String</span> accountName<span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>accountName <span class="token operator">=</span> accountName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不提供任何修改个人账户的 set 方法，只提供 get 方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重写 toString() 方法， 方便打印 BankCard</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;BankCard{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;accountName=&#39;&quot;</span> <span class="token operator">+</span> accountName <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, money=&#39;&quot;</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个人账户类只包含两个字段：accountName 和 money，这两个字段代表账户名和账户金额，账户名和账户金额一旦设置后就不能再被修改。</p><p>现在假设有多个人分别向这个账户打款，每次存入一定数量的金额，那么理想状态下每个人在每次打款后，该账户的金额都是在不断增加的，下面我们就来验证一下这个过程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankCardTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">BankCard</span> bankCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankCard</span><span class="token punctuation">(</span><span class="token string">&quot;cxuan&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 先读取全局的引用</span>
                <span class="token keyword">final</span> <span class="token class-name">BankCard</span> card <span class="token operator">=</span> bankCard<span class="token punctuation">;</span>
                <span class="token comment">// 构造一个新的账户，存入一定数量的钱</span>
                <span class="token class-name">BankCard</span> newCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankCard</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span><span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>card<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newCard<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 最后把新的账户的引用赋给原账户</span>
                bankCard <span class="token operator">=</span> newCard<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们首先声明了一个全局变量 BankCard，这个 BankCard 由 <code>volatile</code>进行修饰，目的就是在对其引用进行变化后对其他线程可见，在每个打款人都存入一定数量的款项后，输出账户的金额变化，我们可以观察一下这个输出结果。</p><p><img src="http://www.cxuan.vip/image-20230207140709078.png" alt=""></p><p>可以看到，我们预想最后的结果应该是 1100 元，但是最后却只存入了 900 元，那 200 元去哪了呢？我们可以断定上面的代码不是一个线程安全的操作。</p><blockquote><p>问题出现在哪里？</p></blockquote><p>虽然每次 volatile 都能保证每个账户的金额都是最新的，但是由于上面的步骤中出现了组合操作，即<code>获取账户引用</code>和<code>更改账户引用</code>，每个单独的操作虽然都是原子性的，但是组合在一起就不是原子性的了。所以最后的结果会出现偏差。</p><p>我们可以用如下线程切换图来表示一下这个过程的变化。</p><p><img src="http://www.cxuan.vip/image-20230207140720489.png" alt=""></p><p>可以看到，最后的结果可能是因为在线程 t1 获取最新账户变化后，线程切换到 t2，t2 也获取了最新账户情况，然后再切换到 t1，t1 修改引用，线程切换到 t2，t2 修改引用，所以账户引用的值被修改了<code>两次</code>。</p><blockquote><p>那么该如何确保获取引用和修改引用之间的线程安全性呢？</p></blockquote><p>最简单粗暴的方式就是直接使用 <code>synchronized</code> 关键字进行加锁了。</p><h3 id="使用-synchronized-保证线程安全性" tabindex="-1"><a class="header-anchor" href="#使用-synchronized-保证线程安全性" aria-hidden="true">#</a> 使用 synchronized 保证线程安全性</h3><p>使用 synchronized 可以保证共享数据的安全性，代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankCardSyncTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">BankCard</span> bankCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankCard</span><span class="token punctuation">(</span><span class="token string">&quot;cxuan&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">BankCardSyncTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 先读取全局的引用</span>
                    <span class="token keyword">final</span> <span class="token class-name">BankCard</span> card <span class="token operator">=</span> bankCard<span class="token punctuation">;</span>
                    <span class="token comment">// 构造一个新的账户，存入一定数量的钱</span>
                    <span class="token class-name">BankCard</span> newCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankCard</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span><span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> card<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newCard<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 最后把新的账户的引用赋给原账户</span>
                    bankCard <span class="token operator">=</span> newCard<span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相较于 BankCardTest ，BankCardSyncTest 增加了 synchronized 锁，运行 BankCardSyncTest 后我们发现能够得到正确的结果。</p><p>修改 BankCardSyncTest.class 为 bankCard 对象，我们发现同样能够确保线程安全性，这是因为在这段程序中，只有 bankCard 会进行变化，不会再有其他共享数据。</p><p>如果有其他共享数据的话，我们需要使用 BankCardSyncTest.clas 确保线程安全性。</p><p>除此之外，<code>java.util.concurrent.atomic</code> 包下的 AtomicReference 也可以保证线程安全性。</p><p>我们先来认识一下 AtomicReference ，然后再使用 AtomicReference 改写上面的代码。</p><h2 id="了解-atomicreference" tabindex="-1"><a class="header-anchor" href="#了解-atomicreference" aria-hidden="true">#</a> 了解 AtomicReference</h2><h3 id="使用-atomicreference-保证线程安全性" tabindex="-1"><a class="header-anchor" href="#使用-atomicreference-保证线程安全性" aria-hidden="true">#</a> 使用 AtomicReference 保证线程安全性</h3><p>下面我们改写一下上面的那个示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankCardARTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BankCard</span><span class="token punctuation">&gt;</span></span> bankCardRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BankCard</span><span class="token punctuation">(</span><span class="token string">&quot;cxuan&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">// 使用 AtomicReference.get 获取</span>
                    <span class="token keyword">final</span> <span class="token class-name">BankCard</span> card <span class="token operator">=</span> bankCardRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">BankCard</span> newCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankCard</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span><span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> card<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 使用 CAS 乐观锁进行非阻塞更新</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>bankCardRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>card<span class="token punctuation">,</span>newCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newCard<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例代码中，我们使用了 AtomicReference 封装了 BankCard 的引用，然后使用 <code>get()</code> 方法获得原子性的引用，接着使用 CAS 乐观锁进行非阻塞更新，更新的标准是如果使用 bankCardRef.get() 获取的值等于内存值的话，就会把银行卡账户的资金 + 100，我们观察一下输出结果。</p><p><img src="http://www.cxuan.vip/image-20230207140735564.png" alt=""></p><p>可以看到，有一些输出是乱序执行的，出现这个原因很简单，有可能在输出结果之前，进行线程切换，然后打印了后面线程的值，然后线程切换回来再进行输出，但是可以看到，没有出现银行卡金额相同的情况。</p><h3 id="atomicreference-源码解析" tabindex="-1"><a class="header-anchor" href="#atomicreference-源码解析" aria-hidden="true">#</a> AtomicReference 源码解析</h3><p>在了解上面这个例子之后，我们来看一下 AtomicReference 的使用方法</p><p>AtomicReference 和 AtomicInteger 非常相似，它们内部都是用了下面三个属性</p><p><img src="http://www.cxuan.vip/image-20230207140750170.png" alt=""></p><p><code>Unsafe</code> 是 <code>sun.misc</code> 包下面的类，AtomicReference 主要是依赖于 sun.misc.Unsafe 提供的一些 native 方法保证操作的<code>原子性</code>。</p><p>Unsafe 的 <code>objectFieldOffset</code> 方法可以获取成员属性在内存中的地址相对于对象内存地址的偏移量。这个偏移量也就是 <code>valueOffset</code> ，说得简单点就是找到这个变量在内存中的地址，便于后续通过内存地址直接进行操作。</p><p><code>value</code> 就是 AtomicReference 中的实际值，因为有 volatile ，这个值实际上就是内存值。</p><p>不同之处就在于 AtomicInteger 是对整数的封装，而 AtomicReference 则对应普通的<code>对象引用</code>。也就是它可以保证你在修改对象引用时的线程安全性。</p><h3 id="get-and-set" tabindex="-1"><a class="header-anchor" href="#get-and-set" aria-hidden="true">#</a> get and set</h3><p>我们首先来看一下最简单的 get 、set 方法：</p><p><code>get()</code> : 获取当前 AtomicReference 的值</p><p><code>set()</code> : 设置当前 AtomicReference 的值</p><p>get() 可以原子性的读取 AtomicReference 中的数据，set() 可以原子性的设置当前的值，因为 get() 和 set() 最终都是作用于 value 变量，而 value 是由 <code>volatile</code> 修饰的，所以 get 、set 相当于都是对内存进行读取和设置。如下图所示</p><p><img src="http://www.cxuan.vip/image-20230207140805339.png" alt=""></p><h3 id="lazyset-方法" tabindex="-1"><a class="header-anchor" href="#lazyset-方法" aria-hidden="true">#</a> lazySet 方法</h3><p>volatile 有内存屏障你知道吗？</p><p>内存屏障是啥啊？</p><blockquote><p>内存屏障，也称<code>内存栅栏</code>，内存栅障，屏障指令等， 是一类同步屏障指令，是 CPU 或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作。也是一个让CPU 处理单元中的内存状态对其它处理单元可见的一项技术。</p></blockquote><p><strong>CPU 使用了很多优化，使用缓存、指令重排等，其最终的目的都是为了性能</strong>，也就是说，当一个程序执行时，只要最终的结果是一样的，指令是否被重排并不重要。所以指令的执行时序并不是顺序执行的，而是乱序执行的，这就会带来很多问题，这也促使着内存屏障的出现。</p><p>语义上，内存屏障之前的所有写操作都要写入内存；内存屏障之后的读操作都可以获得同步屏障之前的写操作的结果。因此，对于敏感的程序块，写操作之后、读操作之前可以插入内存屏障。</p><p>内存屏障的开销非常轻量级，但是再小也是有开销的，LazySet 的作用正是如此，它会以普通变量的形式来读写变量。</p><p>也可以说是：<strong>懒得设置屏障了</strong></p><h3 id="getandset-方法" tabindex="-1"><a class="header-anchor" href="#getandset-方法" aria-hidden="true">#</a> getAndSet 方法</h3><p>以原子方式设置为给定值并返回旧值。它的源码如下</p><p><img src="http://www.cxuan.vip/image-20230207140818249.png" alt=""></p><p>它会调用 <code>unsafe</code> 中的 getAndSetObject 方法，源码如下</p><p><img src="http://www.cxuan.vip/image-20230207140830118.png" alt=""></p><p>可以看到这个 getAndSet 方法涉及两个 cpp 实现的方法，一个是 <code>getObjectVolatile</code> ，一个是 <code>compareAndSwapObject</code> 方法，他们用在 do...while 循环中，也就是说，每次都会先获取最新对象引用的值，如果使用 CAS 成功交换两个对象的话，就会直接返回 <code>var5</code> 的值，var5 此时应该就是更新前的内存值，也就是旧值。</p><h3 id="compareandset-方法" tabindex="-1"><a class="header-anchor" href="#compareandset-方法" aria-hidden="true">#</a> compareAndSet 方法</h3><p>这就是 AtomicReference 非常关键的 CAS 方法了，与 AtomicInteger 不同的是，AtomicReference 是调用的 <code>compareAndSwapObject</code> ，而 AtomicInteger 调用的是 <code>compareAndSwapInt</code> 方法。这两个方法的实现如下</p><p><img src="http://www.cxuan.vip/image-20230207140853849.png" alt=""></p><p>路径在 <code>hotspot/src/share/vm/prims/unsafe.cpp</code> 中。</p><p>我们之前解析过 AtomicInteger 的源码，所以我们接下来解析一下 AtomicReference 源码。</p><p>因为对象存在于堆中，所以方法 <code>index_oop_from_field_offset_long</code> 应该是获取对象的内存地址，然后使用 <code>atomic_compare_exchange_oop</code> 方法进行对象的 CAS 交换。</p><p><img src="http://www.cxuan.vip/image-20230207140907104.png" alt=""></p><p>这段代码会首先判断是否使用了 <code>UseCompressedOops</code>，也就是<code>指针压缩</code>。</p><p>这里简单解释一下指针压缩的概念：JVM 最初的时候是 32 位的，但是随着 64 位 JVM 的兴起，也带来一个问题，内存占用空间更大了 ，但是 JVM 内存最好不要超过 32 G，为了节省空间，在 JDK 1.6 的版本后，我们在 64位中的 JVM 中可以开启<code>指针压缩（UseCompressedOops）</code>来压缩我们对象指针的大小，来帮助我们节省内存空间，在 JDK 8来说，这个指令是默认开启的。</p><p>如果不开启指针压缩的话，64 位 JVM 会采用 8 字节（64位）存储真实内存地址，比之前采用4字节（32位）压缩存储地址带来的问题：</p><ol><li>增加了 GC 开销：64 位对象引用需要占用更多的堆空间，留给其他数据的空间将会减少， 从而加快了 GC 的发生，更频繁的进行 GC。</li><li>降低 CPU 缓存命中率：64 位对象引用增大了，CPU 能缓存的 oop 将会更少，从而降低了 CPU 缓存的效率。</li></ol><p>由于 64 位存储内存地址会带来这么多问题，程序员发明了指针压缩技术，可以让我们既能够使用之前 4 字节存储指针地址，又能够扩大内存存储。</p><p>可以看到，atomic_compare_exchange_oop 方法底层也是使用了 <code>Atomic:cmpxchg</code> 方法进行 CAS 交换，然后把旧值进行 decode 返回 (我这局限的 C++ 知识，只能解析到这里了，如果大家懂这段代码一定告诉我，让我请教一波)</p><h3 id="weakcompareandset-方法" tabindex="-1"><a class="header-anchor" href="#weakcompareandset-方法" aria-hidden="true">#</a> weakCompareAndSet 方法</h3><p><code>weakCompareAndSet</code>: 非常认真看了好几遍，发现 JDK1.8 的这个方法和 compareAndSet 方法完全一摸一样啊，坑我。。。</p><p>但是真的是这样么？并不是，JDK 源码很博大精深，才不会设计一个重复的方法，你想想 JDK 团队也不是会犯这种低级团队，但是原因是什么呢？</p><p>《Java 高并发详解》这本书给出了我们一个答案</p><p><img src="http://www.cxuan.vip/image-20230207140921241.png" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>此篇文章主要介绍了 AtomicReference 的出现背景，AtomicReference 的使用场景，以及介绍了 AtomicReference 的源码，重点方法的源码分析。此篇 AtomicReference 的文章基本上涵盖了网络上所有关于 AtomicReference 的内容了，遗憾的是就是 cpp 源码可能分析的不是很到位，这需要充足的 C/C++ 编程知识，如果有读者朋友们有最新的研究成果，请及时告诉我。</p>`,80);function d(m,v){const s=p("ExternalLinkIcon");return t(),c("div",null,[u,n("p",null,[n("a",r,[o("一场 Atomic XXX 的魔幻之旅"),i(s)])]),k])}const f=e(l,[["render",d],["__file","java-atomicReference.html.vue"]]);export{f as default};
