import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"开发基于springboot的分布式任务中间件dcsschedule-为开源贡献力量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开发基于springboot的分布式任务中间件dcsschedule-为开源贡献力量","aria-hidden":"true"},"#"),s(" 开发基于SpringBoot的分布式任务中间件DcsSchedule(为开源贡献力量)")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v={href:"https://github.com/fuzhengwei/schedule-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/fuzhengwei/itstack-middleware-control",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,"欢迎⭐Star和使用，你用剑🗡、我用刀🔪，好的代码都很烧😏，望你不吝出招💨！",-1),h=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><hr><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
	<span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0/3 * * * * *&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>咔咔，上面这段代码很熟悉吧，他就是SpringBoot的Schedule定时任务，简单易用。在我们开发中如果需要做一些定时或指定时刻循环执行逻辑时候，基本都会使用到Schedule。</p><p>但是，如果我们的任务是比较大型的，比如；定时跑批T+1结算、商品秒杀前状态变更、刷新数据预热到缓存等等，这些定时任务都相同的特点；作业量大、实时性强、可用率高。而这时候如果只是单纯使用Schedule就显得不足以控制。</p><p>那么，我们产品需求就出来了，分布式DcsSchedule任务；</p><ol><li>多机器部署任务</li><li>统一控制中心启停</li><li>宕机灾备，自动启动执行</li><li>实时检测任务执行信息：部署数量、任务总量、成功次数、失败次数、执行耗时等</li></ol><p>嗯？有人憋半天了想说可以用<s>Quertz</s>，嗯可以的，但这不是本篇文章的重点。难道你不想看看一个自言开源中间件是怎么诞生的吗，怎么推到中心Maven仓的吗？比如下图；<strong>真香不！</strong></p><blockquote><p><strong>首页监控</strong><img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-middleware-schedule-release-00.png" alt="微信公众号：bugstack虫洞栈 &amp; 首页监控"></p></blockquote><blockquote><p><strong>任务列表</strong><img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-middleware-schedule-release-01.png" alt="微信公众号：bugstack虫洞栈 &amp; 任务列表"></p></blockquote><p>😀好了，接下来开始介绍这个中间件如何使用和怎么开发的了！</p><h2 id="中间件使用" tabindex="-1"><a class="header-anchor" href="#中间件使用" aria-hidden="true">#</a> 中间件使用</h2><hr><h3 id="_1-版本记录" tabindex="-1"><a class="header-anchor" href="#_1-版本记录" aria-hidden="true">#</a> 1. 版本记录</h3><table><thead><tr><th style="text-align:center;"></th><th style="text-align:left;">版本</th><th style="text-align:left;">发布日期</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">1.0.0-RELEASE</td><td style="text-align:left;">2019-12-07</td><td style="text-align:left;">基本功能实现；任务接入、分布式启停</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;"><s>1.0.1-RELEASE</s></td><td style="text-align:left;">2019-12-07</td><td style="text-align:left;">上传测试版本</td></tr></tbody></table><h3 id="_2-环境准备" tabindex="-1"><a class="header-anchor" href="#_2-环境准备" aria-hidden="true">#</a> 2. 环境准备</h3><ol><li><p>jdk1.8</p></li><li><p>StringBoot 2.x</p></li><li><p>配置中心zookeeper 3.4.14 {准备好zookeeper服务，如果windows调试可以从这里下载：https://www-eu.apache.org/dist/zookeeper}</p></li><li><p>下载后解压，在bin同级路径创建文件夹data、logs</p></li><li><p>修改conf/zoo.cfg，修改配置如下；</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>dataDir=D:\\\\Program Files\\\\apache-zookeeper-3.4.14\\\\data
dataLogDir=D:\\\\Program Files\\\\apache-zookeeper-3.4.14\\\\logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打包部署控制平台</p></li><li><p>下载地址：https://github.com/fuzhengwei/itstack-middleware-control.git</p></li><li><p>部署访问：http://localhost:7397</p></li></ol><h3 id="_3-配置pom" tabindex="-1"><a class="header-anchor" href="#_3-配置pom" aria-hidden="true">#</a> 3. 配置POM</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.itstack.middleware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>schedule-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-引入分布式任务dcsschedule-enabledcsscheduling" tabindex="-1"><a class="header-anchor" href="#_4-引入分布式任务dcsschedule-enabledcsscheduling" aria-hidden="true">#</a> 4. 引入分布式任务DcsSchedule @EnableDcsScheduling</h3><ol><li>与SpringBoot的Sceduling非常像，他的注解是；@EnableScheduling，尽可能降低使用难度</li><li>这个注解主要方便给我们自己的中间件一个入口，也是😏扒拉源码发现的可以这么干{我一直说好的代码都很骚气}</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDcsScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloWorldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-在任务方法上添加注解" tabindex="-1"><a class="header-anchor" href="#_5-在任务方法上添加注解" aria-hidden="true">#</a> 5. 在任务方法上添加注解</h3><ol><li>这个注解也和SpringBoot的Schedule很像，但是多了desc描述和启停初始化控制</li><li>cron：执行计划</li><li>desc：任务描述</li><li>autoStartup：默认启动状态</li><li>如果你的任务需要参数可以通过引入service去调用获取等方式都可以</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;demoTaskThree&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTaskThree</span> <span class="token punctuation">{</span>
	
    <span class="token annotation punctuation">@DcsScheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 9,13 * * *&quot;</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">&quot;03定时任务执行测试：taskMethod01&quot;</span><span class="token punctuation">,</span> autoStartup <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">taskMethod01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;03定时任务执行测试：taskMethod01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@DcsScheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0/30 8-10 * * *&quot;</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">&quot;03定时任务执行测试：taskMethod02&quot;</span><span class="token punctuation">,</span> autoStartup <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">taskMethod02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;03定时任务执行测试：taskMethod02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-启动验证" tabindex="-1"><a class="header-anchor" href="#_6-启动验证" aria-hidden="true">#</a> 6. 启动验证</h3><ol><li>启动SpringBoot工程即可，autoStartup = true的会自动启动任务(任务是多线程并行执行的)</li><li>启动控制平台：itstack-middleware-control，访问：http://localhost:7397/ 成功界面如下；<em>可以开启/关闭验证了！{功能还在完善}</em><img src="https://bugstack.cn/assets/images/pic-content/2019/11/itstack-middleware-schedule-release-01.png" alt="微信公众号：bugstack虫洞栈 &amp; 任务列表"></li></ol><h2 id="中间件开发" tabindex="-1"><a class="header-anchor" href="#中间件开发" aria-hidden="true">#</a> 中间件开发</h2><hr><p>以SpringBoot为基础开发一款中间件我也是第一次，因为接触SpringBoot也刚刚1个月左右。虽然SpringBoot已经出来挺久的了，但由于我们项目开发并不使用SpringBoot的一套东西，所以一直依赖没有接触。直到上个月开始考虑领域驱动设计才接触，嗯！真的不错，那么就开始了夯实技能、学习思想用到项目里。</p><p>按照我的产品需求，开发这么一款分布式任务的中间件，我脑袋中的模型已经存在了。另外就是需要开发过程中去探索我需要的知识工具，简单包括；</p><ol><li>读取Yml自定义配置</li><li>使用zookeeper作为配置中心，这样如果有机器宕机了就可以通过临时节点监听知道</li><li>通过Spring类；ApplicationContextAware, BeanPostProcessor, ApplicationListener，执行服务启动、注解扫描、节点挂在</li><li>分布式任务统一控制台，来管理任务</li></ol><h3 id="_1-工程模型" tabindex="-1"><a class="header-anchor" href="#_1-工程模型" aria-hidden="true">#</a> 1. 工程模型</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>schedule<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter
└── src
    ├── main
    │   ├── java
    │   │   └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>schedule
    │   │       ├── annotation
    │   │       │	├── <span class="token class-name">DcsScheduled</span><span class="token punctuation">.</span>java	
    │   │       │	└── <span class="token class-name">EnableDcsScheduling</span><span class="token punctuation">.</span>java
    │   │       ├── annotation	
    │   │       │	└── <span class="token class-name">InstructStatus</span><span class="token punctuation">.</span>java	
    │   │       ├── config
    │   │       │	├── <span class="token class-name">DcsSchedulingConfiguration</span><span class="token punctuation">.</span>java	
    │   │       │	├── <span class="token class-name">StarterAutoConfig</span><span class="token punctuation">.</span>java	
    │   │       │	└── <span class="token class-name">StarterServiceProperties</span><span class="token punctuation">.</span>java	
    │   │       ├── domain
    │   │       │	├── <span class="token class-name">DataCollect</span><span class="token punctuation">.</span>java	
    │   │       │	├── <span class="token class-name">DcsScheduleInfo</span><span class="token punctuation">.</span>java	
    │   │       │	├── <span class="token class-name">DcsServerNode</span><span class="token punctuation">.</span>java	
    │   │       │	├── <span class="token class-name">ExecOrder</span><span class="token punctuation">.</span>java	
    │   │       │	└── <span class="token class-name">Instruct</span><span class="token punctuation">.</span>java
    │   │       ├── export	
    │   │       │	└── <span class="token class-name">DcsScheduleResource</span><span class="token punctuation">.</span>java
    │   │       ├── service
    │   │       │	├── <span class="token class-name">HeartbeatService</span><span class="token punctuation">.</span>java	
    │   │       │	└── <span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span>java
    │   │       ├── task
    │   │       │	├── <span class="token class-name">TaskScheduler</span><span class="token punctuation">.</span>java	
    │   │       │	├── <span class="token class-name">ScheduledTask</span><span class="token punctuation">.</span>java	
    │   │       │	├── <span class="token class-name">SchedulingConfig</span><span class="token punctuation">.</span>java	
    │   │       │	└── <span class="token class-name">SchedulingRunnable</span><span class="token punctuation">.</span>java	
    │   │       ├── util
    │   │       │	└── <span class="token class-name">StrUtil</span><span class="token punctuation">.</span>java	
    │   │       └── <span class="token class-name">DoJoinPoint</span><span class="token punctuation">.</span>java
    │   └── resources	
    │       └── <span class="token constant">META_INF</span>
    │           └── spring<span class="token punctuation">.</span>factories	
    └── test
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-代码讲解" tabindex="-1"><a class="header-anchor" href="#_2-代码讲解" aria-hidden="true">#</a> 2. 代码讲解</h3><ol><li>篇幅较长，只讲解部分重点代码块，如果你愿意参与到开源编写，可以和我申请</li><li>我说过好的代码都很骚气，那么就从这部分入手吧</li></ol><h4 id="_2-1-自定义注解" tabindex="-1"><a class="header-anchor" href="#_2-1-自定义注解" aria-hidden="true">#</a> 2.1 自定义注解</h4><blockquote><p>annotation/EnableDcsScheduling.java &amp; 自定义注解</p></blockquote><p>这个注解一堆的圈A，这些配置都是为了开始启动执行我们的中间件；</p><ul><li>Target 标识需要放到类上执行</li><li>Retention 注释将由编译器记录在类文件中，并且在运行时由VM保留，因此可以反射地读取它们</li><li>Import 引入入口资源，在程序启动时会执行到自己定义的类中，以方便我们；初始化配置/服务、启动任务、挂在节点</li><li>ComponentScan 告诉程序扫描位置</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DcsSchedulingConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ImportAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">SchedulingConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CronTaskRegister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DoJoinPoint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.middleware.*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableDcsScheduling</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-扫描自定义注解、初始化配置-服务、启动任务、挂在节点" tabindex="-1"><a class="header-anchor" href="#_2-2-扫描自定义注解、初始化配置-服务、启动任务、挂在节点" aria-hidden="true">#</a> 2.2 扫描自定义注解、初始化配置/服务、启动任务、挂在节点</h4><blockquote><p>config/DcsSchedulingConfiguration.java &amp; 初始化配置/服务、启动任务、挂在节点</p></blockquote><ul><li>写到这的时候，我们的自定义注解有了，已经写到方法上了，那么我们怎么拿到呢？</li><li>需要通过实现BeanPostProcessor.postProcessAfterInitialization，在每个bean实例化的时候进行扫描</li><li>这里遇到一个有趣的问题，一个方法会得到两次，因为有一个CGLIB给代理的，像真假美猴王一样，几乎一毛一样。😏扒了源码才看到，生命注解批注没有。好那就可以判断了！method.getDeclaredAnnotations()</li><li>我们将扫描下来的任务信息汇总到Map中，当Spring初始化完成后，在执行我们中间件内容。{太早执行有点喧宾夺主了！主要人家也不让呀，给你抛异常😭。}</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
	<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getAllDeclaredMethods</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">DcsScheduled</span> dcsScheduled <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">DcsScheduled</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> dcsScheduled <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">==</span> method<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecOrder</span><span class="token punctuation">&gt;</span></span> execOrderList <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>execOrderMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">ExecOrder</span> execOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		execOrder<span class="token punctuation">.</span><span class="token function">setBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
		execOrder<span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		execOrder<span class="token punctuation">.</span><span class="token function">setMethodName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		execOrder<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span>dcsScheduled<span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		execOrder<span class="token punctuation">.</span><span class="token function">setCron</span><span class="token punctuation">(</span>dcsScheduled<span class="token punctuation">.</span><span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		execOrder<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span>dcsScheduled<span class="token punctuation">.</span><span class="token function">autoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		execOrderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>execOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>初始化服务连接zookeeper配置中心</li><li>连接后将创建我们的节点以及添加监听，这个监听主要负责分布式消息通知，收到通知负责控制任务启停</li><li>这里包括了循环创建节点以及批量节点删除，似乎！面试题会问😏</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init_server</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取zk连接</span>
        <span class="token class-name">CuratorFramework</span> client <span class="token operator">=</span> <span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token class-name">Constants<span class="token punctuation">.</span>Global</span><span class="token punctuation">.</span>zkAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//节点组装</span>
        path_root_server <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">joinStr</span><span class="token punctuation">(</span>path_root<span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> <span class="token string">&quot;server&quot;</span><span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> schedulerServerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        path_root_server_ip <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">joinStr</span><span class="token punctuation">(</span>path_root_server<span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> <span class="token string">&quot;ip&quot;</span><span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> <span class="token class-name">Constants<span class="token punctuation">.</span>Global</span><span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建节点&amp;递归删除本服务IP下的旧内容</span>
        <span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">deletingChildrenIfNeeded</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">createNode</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server<span class="token punctuation">,</span> schedulerServerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加节点&amp;监听</span>
        <span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">createNodeSimple</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token class-name">Constants<span class="token punctuation">.</span>Global</span><span class="token punctuation">.</span>path_root_exec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">addTreeCacheListener</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">,</span> client<span class="token punctuation">,</span> <span class="token class-name">Constants<span class="token punctuation">.</span>Global</span><span class="token punctuation">.</span>path_root_exec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;itstack middleware schedule init server error！&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动标记了True的Schedule任务</li><li>Scheduled默认是单线程执行的，这里扩展为多线程并行执行</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init_task</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CronTaskRegister</span> cronTaskRegistrar <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;itstack-middlware-schedule-cronTaskRegister&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CronTaskRegister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> beanNames <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>execOrderMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecOrder</span><span class="token punctuation">&gt;</span></span> execOrderList <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>execOrderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExecOrder</span> execOrder <span class="token operator">:</span> execOrderList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>execOrder<span class="token punctuation">.</span><span class="token function">getAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token class-name">SchedulingRunnable</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulingRunnable</span><span class="token punctuation">(</span>execOrder<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> execOrder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> execOrder<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cronTaskRegistrar<span class="token punctuation">.</span><span class="token function">addCronTask</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> execOrder<span class="token punctuation">.</span><span class="token function">getCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>挂在任务节点到zookeeper挂在</li><li>按照不同的场景，有些内容是挂在到虚拟机节点。{😏又来个面试题，虚拟节点数据怎么挂在，创建的是永久节点，那么虚拟值怎么加？}</li><li>path_root_server_ip_clazz_method；这个结构是：根目录、服务、IP、类、方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> beanNames <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>execOrderMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecOrder</span><span class="token punctuation">&gt;</span></span> execOrderList <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>execOrderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExecOrder</span> execOrder <span class="token operator">:</span> execOrderList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">String</span> path_root_server_ip_clazz <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">joinStr</span><span class="token punctuation">(</span>path_root_server_ip<span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> <span class="token string">&quot;clazz&quot;</span><span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> execOrder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">String</span> path_root_server_ip_clazz_method <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">joinStr</span><span class="token punctuation">(</span>path_root_server_ip_clazz<span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> execOrder<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">String</span> path_root_server_ip_clazz_method_status <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">joinStr</span><span class="token punctuation">(</span>path_root_server_ip_clazz<span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token constant">LINE</span><span class="token punctuation">,</span> execOrder<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//添加节点</span>
			<span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">createNodeSimple</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">createNodeSimple</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz_method<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">createNodeSimple</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz_method_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//添加节点数据[临时]</span>
			<span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">appendPersistentData</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz_method <span class="token operator">+</span> <span class="token string">&quot;/value&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>execOrder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//添加节点数据[永久]</span>
			<span class="token class-name">ZkCuratorServer</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz_method_status<span class="token punctuation">,</span> execOrder<span class="token punctuation">.</span><span class="token function">getAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-zookeeper控制服务" tabindex="-1"><a class="header-anchor" href="#_2-3-zookeeper控制服务" aria-hidden="true">#</a> 2.3 zookeeper控制服务</h4><blockquote><p>service/ZkCuratorServer.java &amp; zk服务</p></blockquote><ul><li>这里提供一个zk的方法集合，其中比较重要的方法添加监听</li><li>zookeeper有一个特性是对这个监听后，当节点内容发生变化时会收到通知，当然宕机也是收得到的，这个也就是我们后面开发灾备的核心触发点</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addTreeCacheListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">CuratorFramework</span> client<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token class-name">TreeCache</span> treeCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeCache</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
	treeCache<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	treeCache<span class="token punctuation">.</span><span class="token function">getListenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curatorFramework<span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">//...</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token constant">NODE_ADDED</span><span class="token operator">:</span>
			<span class="token keyword">case</span> <span class="token constant">NODE_UPDATED</span><span class="token operator">:</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Constants<span class="token punctuation">.</span>Global</span><span class="token punctuation">.</span>ip<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>instruct<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Constants<span class="token punctuation">.</span>Global</span><span class="token punctuation">.</span>schedulerServerId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>instruct<span class="token punctuation">.</span><span class="token function">getSchedulerServerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">//执行命令</span>
					<span class="token class-name">Integer</span> status <span class="token operator">=</span> instruct<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">//停止任务</span>
							cronTaskRegistrar<span class="token punctuation">.</span><span class="token function">removeCronTask</span><span class="token punctuation">(</span>instruct<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> instruct<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token function">setData</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz_method_status<span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;itstack middleware schedule task stop {} {}&quot;</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token keyword">break</span><span class="token punctuation">;</span>
						<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">//启动任务</span>
							cronTaskRegistrar<span class="token punctuation">.</span><span class="token function">addCronTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SchedulingRunnable</span><span class="token punctuation">(</span>scheduleBean<span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token function">setData</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz_method_status<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;itstack middleware schedule task start {} {}&quot;</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token keyword">break</span><span class="token punctuation">;</span>
						<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">//刷新任务</span>
							cronTaskRegistrar<span class="token punctuation">.</span><span class="token function">removeCronTask</span><span class="token punctuation">(</span>instruct<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> instruct<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							cronTaskRegistrar<span class="token punctuation">.</span><span class="token function">addCronTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SchedulingRunnable</span><span class="token punctuation">(</span>scheduleBean<span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token function">setData</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path_root_server_ip_clazz_method_status<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;itstack middleware schedule task refresh {} {}&quot;</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instruct<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token keyword">break</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token keyword">case</span> <span class="token constant">NODE_REMOVED</span><span class="token operator">:</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token keyword">default</span><span class="token operator">:</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-并行任务注册" tabindex="-1"><a class="header-anchor" href="#_2-4-并行任务注册" aria-hidden="true">#</a> 2.4 并行任务注册</h4><ul><li>由于默认的SpringBoot是单线程的，所以这里改造了下，可以支持多线程并行执行</li><li>包括了添加任务和删除任务，也就是执行取消future.cancel(true)</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCronTask</span><span class="token punctuation">(</span><span class="token class-name">SchedulingRunnable</span> task<span class="token punctuation">,</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">taskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">removeCronTask</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">taskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">CronTask</span> cronTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTask</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> cronExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Constants</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">taskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">scheduleCronTask</span><span class="token punctuation">(</span>cronTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeCronTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ScheduledTask</span> scheduledTask <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    scheduledTask<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-待扩展的自定义aop" tabindex="-1"><a class="header-anchor" href="#_2-5-待扩展的自定义aop" aria-hidden="true">#</a> 2.5 待扩展的自定义AOP</h4><ul><li>我们最开始配置的扫描@ComponentScan(&quot;org.itstack.middleware.*&quot;)，主要用到这里的自定义注解，否则是扫描不到的，也就是你自定义切面失效的效果</li><li>目前这里的功能并没有扩展，基本只是打印执行耗时，后续完善的任务执行耗时监听等，就需要这里来完善</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(org.itstack.middleware.schedule.annotation.DcsScheduled)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;aopPoint()&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doRouter</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
	<span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token function">getMethod</span><span class="token punctuation">(</span>jp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
		<span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;\\nitstack middleware schedule method：{}.{} take time(m)：{}&quot;</span><span class="token punctuation">,</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-jar包发布" tabindex="-1"><a class="header-anchor" href="#_3-jar包发布" aria-hidden="true">#</a> 3. Jar包发布</h3>`,62),g={href:"https://bugstack.cn/itstack-demo-any/2019/12/07/%E5%8F%91%E5%B8%83Jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93(%E4%B8%BA%E5%BC%80%E5%8F%91%E5%BC%80%E6%BA%90%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%81%9A%E5%87%86%E5%A4%87).html",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"综上总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#综上总结","aria-hidden":"true"},"#"),s(" 综上总结")],-1),_=n("ol",null,[n("li",null,"要开发要实现的还很多，一个周末也干不完所有的！而且需要有想法的小猿/媛伴一起加入！🙂 😀 😏"),n("li",null,"这里没有讲解分布式任务中间件控制平台itstack-middleware-control，因为比较简单只是使用了中间件的zk功能接口做展示和操作。"),n("li",null,"中间件开发是一件非常有意思的事情，不同于业务它更像易筋经，寺庙老僧，剑走偏锋，驰骋纵横，骚招满屏。")],-1);function w(S,y){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),d,n("ul",null,[n("li",null,[s("分布式任务DcsSchedule中间件，Github地址："),n("a",v,[s("https://github.com/fuzhengwei/schedule-spring-boot-starter"),t(a)])]),n("li",null,[s("分布式任务DcsSchedule控制台，Github地址："),n("a",m,[s("https://github.com/fuzhengwei/itstack-middleware-control"),t(a)])]),b]),h,n("p",null,[s("开发完成后还是需要将Jar包发布到manven中心仓库的，这个过程较长单独写了博客；"),n("a",g,[s("发布Jar包到Maven中央仓库(为开发开源中间件做准备)"),t(a)])]),f,_])}const C=p(i,[["render",w],["__file","2019-12-08-kaifajiyuSpringBootdefenbushirenwuzhongjianjianDcsSchedule.html.vue"]]);export{C as default};
