import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"第7节-idea工程右键菜单-自动生成orm代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第7节-idea工程右键菜单-自动生成orm代码","aria-hidden":"true"},"#"),s(" 第7节：IDEA工程右键菜单，自动生成ORM代码")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/cO7B0bdzQs3sIhePBDY06w",target:"_blank",rel:"noopener noreferrer"},v=p(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>都能用，都能凑活用！</code></p><p>一个东西好几套，为了晋升都来搞。拿了成绩就要跑，后面兄弟再重造！</p><p>几年前，大家并不是这样，那时候还有很多东西可以创新，乱世出英雄总能在一个方向深耕并做出一款款好用的产品功能、框架服务、技术组件等。但后来好像这样的情况开始减少了，取而代之的是重复、复刻、照搬，换个新的皮肤、换个新的样式、换个新的名字，就是取巧的新东西了。</p><p>有时候公司或者组织也像家，但家里的东西一般是破了补补、坏了修修，实在不行就换个，但没有谁的家里卫生间一个马桶、厨房一个马桶、客厅一个马桶、卧室一个马桶的，虽然你的新马桶可以自动喷水。</p><p>所以，在建设一个好的产品功能时，尽可能要学学那些已经非常的优秀的产品，IDEA、GitHub、Mysql等等，在IDEA提供了满足用户扩展功能的插件开发，而不是你说一个东西我没有，你就自己造。<em>共建会让这个东西变得更加优秀！</em></p><h2 id="二、需求目的" tabindex="-1"><a class="header-anchor" href="#二、需求目的" aria-hidden="true">#</a> 二、需求目的</h2><p>在上一章节中我们通过扩展创建工程向导，添加我们需要创建DDD工程脚手架的步骤，最终提供一个DDD开发框架。那么在这个DDD工程开发框架中，还缺少一部分基于数据库表信息自动生成对应PO、DAO、Mapper文件的功能。</p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-01.png" alt=""></p><ul><li>那么本章节我们就来在工程中扩展这部分内容，实际操作的效果就是我们可以在工程上通过鼠标右键的方式，唤出添加ORM代码块的窗体，通过选择库表的方式，使用 freemarker 自动生成代码。</li><li>在生成的代码块中需要完成对所需要包的引入，同时会使用到 lombok 注解的方式替代PO对象中的get、set方法，以减少代码量逻辑的创建。</li></ul><h2 id="三、案例开发" tabindex="-1"><a class="header-anchor" href="#三、案例开发" aria-hidden="true">#</a> 三、案例开发</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>guide<span class="token operator">-</span>idea<span class="token operator">-</span>plugin<span class="token operator">-</span>orm
├── <span class="token punctuation">.</span>gradle
└── src
    ├── main
    │   └── java
    │   	└── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>guide<span class="token punctuation">.</span>idea<span class="token punctuation">.</span>plugin 
    │       	├── action
    │       	│	└── <span class="token class-name">CodeGenerateAction</span><span class="token punctuation">.</span>java      
    │       	├── domain
    │       	│	├── model<span class="token punctuation">.</span>vo 
    │       	│	│	├── <span class="token class-name">CodeGenContextVO</span><span class="token punctuation">.</span>java       
    │       	│	│	└── <span class="token class-name">ORMConfigVO</span><span class="token punctuation">.</span>java       
    │       	│	└── service   
    │       	│	 	├── impl     
    │       	│	 	│	└── <span class="token class-name">ProjectGeneratorImpl</span><span class="token punctuation">.</span>java  
    │       	│	 	├── <span class="token class-name">AbstractProjectGenerator</span><span class="token punctuation">.</span>java     
    │       	│	 	├── <span class="token class-name">GeneratorConfig</span><span class="token punctuation">.</span>java      
    │       	│	 	└── <span class="token class-name">IProjectGenerator</span><span class="token punctuation">.</span>java      
    │       	├── infrastructure
    │       	│	├── data    
    │       	│	│	├── <span class="token class-name">DataSetting</span><span class="token punctuation">.</span>java       
    │       	│	│	└── <span class="token class-name">DataState</span><span class="token punctuation">.</span>java      
    │       	│	├── po    
    │       	│	│	├── <span class="token class-name">Base</span><span class="token punctuation">.</span>java    
    │       	│	│	├── <span class="token class-name">Column</span><span class="token punctuation">.</span>java 
    │       	│	│	├── <span class="token class-name">Dao</span><span class="token punctuation">.</span>java 
    │       	│	│	├── <span class="token class-name">Field</span><span class="token punctuation">.</span>java 
    │       	│	│	├── <span class="token class-name">Model</span><span class="token punctuation">.</span>java     
    │       	│	│	└── <span class="token class-name">Table</span><span class="token punctuation">.</span>java       
    │       	│	└── utils 
    │       	│		├── <span class="token class-name">DBHelper</span><span class="token punctuation">.</span>java     
    │       	│		└── <span class="token class-name">JavaType</span><span class="token punctuation">.</span>java      
    │       	├── <span class="token keyword">module</span>  
    │       	│	└── <span class="token class-name">FileChooserComponent</span><span class="token punctuation">.</span>java         
    │       	└── ui
    │       	 	├── <span class="token class-name">ORMSettingsUI</span><span class="token punctuation">.</span>java  
    │       	 	└── <span class="token class-name">ORMSettingsUI</span><span class="token punctuation">.</span>form
    ├── resources
    │   ├── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span>
    │   │   └── plugin<span class="token punctuation">.</span>xml 
    │   └── template
    │       ├── dao<span class="token punctuation">.</span>ftl
    │       ├── mapper<span class="token punctuation">.</span>ftl
    │       └── model<span class="token punctuation">.</span>ftl
    ├── build<span class="token punctuation">.</span>gradle  
    └── gradle<span class="token punctuation">.</span>properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源码获取</strong>：#公众号：<code>bugstack虫洞栈</code> 回复：<code>idea</code> 即可下载全部 IDEA 插件开发源码</p><p>在此 IDEA 插件工程中，主要分为5块区域：</p><ul><li>action：用于提供菜单栏，这个菜单的位置在 plugin.xml 中配置，我们把它配置到工程鼠标右键出现的列表上。<em>这样可以更加方便的让我们选取工程，以及在这个工程下添加生成的代码片段</em></li><li>domain：领域服务层，其实你直接写一个Service包也是可以的，只不过最近作者小傅哥更喜欢使用DDD的思想和结构来创建代码实现功能逻辑。</li><li>infrastructure：基础层，提供数据在工程下的存放，每一个工程右键都有自己的配置存储默认信息，方便下次打开的时候可以读取到这部分内容。同时这一层还提供了用于处理数据库操作的类，因为我们需要从数据库中读取出表的信息、字段、注释，用于创建PO、DAO、Mapper使用。</li><li>module：模块层，这里提供了一个用于选择文件路径的组件，可以让我们在工程上鼠标右键后出来的窗体中，点击模块选择对应的要生成代码的位置路径。</li><li>ui：提供配置面板，也就是我们在代码工程上鼠标右键弹出来的面板，这个面板配置后用于生成ORM代码。</li></ul><h3 id="_2-拖拽swing面板" tabindex="-1"><a class="header-anchor" href="#_2-拖拽swing面板" aria-hidden="true">#</a> 2. 拖拽Swing面板</h3><p><strong>ORMSettingsUI</strong>：咱们先把用于创建代码配置的面板创建出来，有了画面，就好进入了。</p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-02.png" alt=""></p><ul><li>面板包括生成 PO、DAO、XML 的代码路径，以及配置数据库和选择表的内容。</li><li>操作过程就是在你配置好了这些基本信息后，就可以选择查询表名，并选择好你要给哪几个表生成对应的ORM代码了。</li></ul><h3 id="_3-配置鼠标右键弹窗" tabindex="-1"><a class="header-anchor" href="#_3-配置鼠标右键弹窗" aria-hidden="true">#</a> 3. 配置鼠标右键弹窗</h3><p>首先我们需要创建一个 Action 实现类，通过 <code>New -&gt; Plugin DevKit -&gt; Action</code></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-03.png" alt=""></p><p><strong>cn.bugstack.guide.idea.plugin.action.CodeGenerateAction</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span>: 小傅哥，微信：fustack
 * <span class="token keyword">@github</span>: https://github.com/fuzhengwei
 * @Copyright: 公众号：bugstack虫洞栈 | 博客：https://bugstack.cn - 沉淀、分享、成长，让自己和他人都能有所收获！
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerateAction</span> <span class="token keyword">extends</span> <span class="token class-name">AnAction</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">IProjectGenerator</span> projectGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectGeneratorImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">AnActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Project</span> project <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getRequiredData</span><span class="token punctuation">(</span><span class="token class-name">CommonDataKeys</span><span class="token punctuation">.</span><span class="token constant">PROJECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ShowSettingsUtil</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">editConfigurable</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ORMSettingsUI</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> projectGenerator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是一个右键菜单的入口，通过这个入口才能去打开我们自己的UI窗体，这个UI窗体就是我们上面拖拽出来的配置面板，ORMSettingsUI</li><li>接下来我们还需要把这个 Action 配置到 plugin.xml 文件中，才能被右键菜单创建出来。<em>开发代码的时候也是这样一个流程，你总要从一个点开始，有了抓手才好抓下去</em></li></ul><p><strong>plugin.xml 配置</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>actions</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Add your actions here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CodeGenerateAction<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.guide.idea.plugin.action.CodeGenerateAction<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ORMCodeGenerate - 小傅哥<span class="token punctuation">&quot;</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Code Generate ORM<span class="token punctuation">&quot;</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/icons/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add-to-group</span> <span class="token attr-name">group-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ProjectViewPopupMenu<span class="token punctuation">&quot;</span></span> <span class="token attr-name">anchor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>last<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>actions</span><span class="token punctuation">&gt;</span></span>
ea-plugin&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),g=n("li",null,[s("把我们的 Action 实现类配置到 xml 中，同时你还要配置它应该出现的位置，比如你需要把这个菜单添加到工程创建中 "),n("code",null,"ProjectViewPopupMenu"),s(" 以及位置信息 "),n("code",null,'anchor="last"')],-1),b=n("code",null,"16*16",-1),h={href:"https://www.iconfont.cn/",target:"_blank",rel:"noopener noreferrer"},f=p(`<h3 id="_4-给窗体添加功能" tabindex="-1"><a class="header-anchor" href="#_4-给窗体添加功能" aria-hidden="true">#</a> 4. 给窗体添加功能</h3><p>这一步其实干的就是注入灵魂的事情，让窗体活起来。给输入框添加内容、给按钮添加事件、给确认按钮增加上生成创建ORM代码块的上下文。<em>文章的描述尽可能会偏向于核心代码的讲解，详情可以参考源码</em></p><p>接下来这部分内容会在 ORMSettingsUI 类中<strong>反复摩擦</strong>，直到补全所有功能。</p><h4 id="_4-1-选择框事件" tabindex="-1"><a class="header-anchor" href="#_4-1-选择框事件" aria-hidden="true">#</a> 4.1 选择框事件</h4><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-04.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 选择PO生成目录</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>poButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">FileChooserComponent</span> component <span class="token operator">=</span> <span class="token class-name">FileChooserComponent</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">VirtualFile</span> baseDir <span class="token operator">=</span> project<span class="token punctuation">.</span><span class="token function">getBaseDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">VirtualFile</span> virtualFile <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">showFolderSelectionDialog</span><span class="token punctuation">(</span><span class="token string">&quot;选择PO生成目录&quot;</span><span class="token punctuation">,</span> baseDir<span class="token punctuation">,</span> baseDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> virtualFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ORMSettingsUI</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>poPath<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>virtualFile<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>还记得我们提到的<code>拖拽Swing面板</code>吗，那么这个添加事件的步骤就是给你的 PO 目录添加一个事件，允许我们可以自己选择出要把对应PO的代码生成到哪个目录结构下。</li><li>关于dao、xml都是类似操作，这里就不在演示了。</li></ul><h4 id="_4-2-数据表事件" tabindex="-1"><a class="header-anchor" href="#_4-2-数据表事件" aria-hidden="true">#</a> 4.2 数据表事件</h4><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-05.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>selectButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">DBHelper</span> dbHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DBHelper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>host<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>database<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tableList <span class="token operator">=</span> dbHelper<span class="token punctuation">.</span><span class="token function">getAllTableName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>database<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> title <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;表名&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>tableList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tableList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tableList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        table1<span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultTableModel</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TableColumn</span> tc <span class="token operator">=</span> table1<span class="token punctuation">.</span><span class="token function">getColumnModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColumn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tc<span class="token punctuation">.</span><span class="token function">setCellEditor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultCellEditor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tc<span class="token punctuation">.</span><span class="token function">setCellEditor</span><span class="token punctuation">(</span>table1<span class="token punctuation">.</span><span class="token function">getDefaultEditor</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tc<span class="token punctuation">.</span><span class="token function">setCellRenderer</span><span class="token punctuation">(</span>table1<span class="token punctuation">.</span><span class="token function">getDefaultRenderer</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tc<span class="token punctuation">.</span><span class="token function">setMaxWidth</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Messages</span><span class="token punctuation">.</span><span class="token function">showWarningDialog</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> <span class="token string">&quot;数据库连接错误,请检查配置.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Warning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这一步操作核心流程就在于把你需要生成ORM的代码的表给拉出来，只要把表选择上，才能根据表生成PO、DAO、Mapper，其实你用的其他一些自动生成代码框架也是这么干的。</li><li>另外你的建表最好规范，比如有表注释、有字段注释、字段的设计遵守下划线和小写字母，这样会更加容易创建出好看的代码。</li></ul><h4 id="_4-3-组装生成代码上下文" tabindex="-1"><a class="header-anchor" href="#_4-3-组装生成代码上下文" aria-hidden="true">#</a> 4.3 组装生成代码上下文</h4><p>当我们点击配置窗体的 <strong>OK</strong> 按钮时候，要干啥，对喽，我们要创建出代码片段了，那么这个时候需要在重写的 <code>apply</code> 中完成此项操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 链接DB</span>
    <span class="token class-name">DBHelper</span> dbHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DBHelper</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 组装代码生产上下文</span>
    <span class="token class-name">CodeGenContextVO</span> codeGenContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeGenContextVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    codeGenContext<span class="token punctuation">.</span><span class="token function">setModelPackage</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getPoPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/po/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    codeGenContext<span class="token punctuation">.</span><span class="token function">setDaoPackage</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getDaoPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/dao/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    codeGenContext<span class="token punctuation">.</span><span class="token function">setMapperDir</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getXmlPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/mapper/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tableNames <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTableNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tableName <span class="token operator">:</span> tableNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dbHelper<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    codeGenContext<span class="token punctuation">.</span><span class="token function">setTables</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 生成代码</span>
    projectGenerator<span class="token punctuation">.</span><span class="token function">generation</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> codeGenContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 apply 中的核心代码主要就是使用 DBHelper 数据操作工具获取到对应的库下链接信息，同时把选择的号的表创建出用于生成代码类的参数，比如；类的名称、字段名称、注释名称等。</li><li>最后就是调用生成代码的服务了，<code>projectGenerator.generation(project, codeGenContext);</code> 这一部分就是在我们领域服务 domain 中实现的。</li></ul><h3 id="_5-代码生成领域服务" tabindex="-1"><a class="header-anchor" href="#_5-代码生成领域服务" aria-hidden="true">#</a> 5. 代码生成领域服务</h3><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-06.png" alt=""></p><ul><li>用于创建PO、DAO、Mapper的代码块的代码主要是这里实现的，核心在于提供了一个抽象类以及对应的实现类，因为处理代码生成需要使用到 freemarker 所以就在抽象类里包装了下，这样可以免去实现类中还需要关心这部分逻辑。</li></ul><p><strong>ProjectGeneratorImpl 生成代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">generateORM</span><span class="token punctuation">(</span><span class="token class-name">Project</span> project<span class="token punctuation">,</span> <span class="token class-name">CodeGenContextVO</span> codeGenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> codeGenContext<span class="token punctuation">.</span><span class="token function">getTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Table</span> table <span class="token operator">:</span> tables<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Column</span><span class="token punctuation">&gt;</span></span> columns <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Column</span> column <span class="token operator">:</span> columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JavaType</span><span class="token punctuation">.</span><span class="token function">convertType</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> column<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            field<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">isId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 生成PO</span>
        <span class="token class-name">Model</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> codeGenContext<span class="token punctuation">.</span><span class="token function">getModelPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">CaseFormat</span><span class="token punctuation">.</span><span class="token constant">UPPER_UNDERSCORE</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span><span class="token constant">UPPER_CAMEL</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">writeFile</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> codeGenContext<span class="token punctuation">.</span><span class="token function">getModelPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;domain/orm/model.ftl&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 生成DAO</span>
        <span class="token class-name">Dao</span> dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dao</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> codeGenContext<span class="token punctuation">.</span><span class="token function">getDaoPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;I&quot;</span> <span class="token operator">+</span> <span class="token class-name">CaseFormat</span><span class="token punctuation">.</span><span class="token constant">UPPER_UNDERSCORE</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span><span class="token constant">UPPER_CAMEL</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;Dao&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">writeFile</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> codeGenContext<span class="token punctuation">.</span><span class="token function">getDaoPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dao<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;domain/orm/dao.ftl&quot;</span><span class="token punctuation">,</span> dao<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 生成Mapper</span>
        <span class="token function">writeFile</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> codeGenContext<span class="token punctuation">.</span><span class="token function">getMapperDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dao<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;Mapper.xml&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;domain/orm/mapper.ftl&quot;</span><span class="token punctuation">,</span> dao<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建代码的过程就比较简单了，通过循环提取出来的表信息，映射成对应的类和属性以及注释，再使用 resources 下的 ftl 文件创建出对应的类和xml配置文件就可以了。</li><li>如果你还需要生成起来代码片段或者创建调用一些常用的组件，也是可以通过这样的方式进行实现的。</li></ul><h2 id="四、测试验证" tabindex="-1"><a class="header-anchor" href="#四、测试验证" aria-hidden="true">#</a> 四、测试验证</h2><ul><li>点击 <code>Plugin</code> 启动 IDEA 插件，之后在工程右键如下：</li></ul><p><strong>1. 鼠标右键，选择菜单</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-07.png" alt=""></p><p><strong>2. 配置页面，配置信息</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-08.png" alt=""></p><p><strong>3. 自动创建，生成代码</strong></p><p><img src="https://bugstack.cn/images/article/assembly/assembly-211207-5-09.png" alt=""></p><ul><li>好了，选择代码块就这么嗖的创建了出来，是不是非常方便，而且可以满足你在任何时候的把新的库表代码补充进来，减少了手敲CRUD操作。</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><ul><li>本章节小傅哥带着你又在 IDEA DDD 插件生成工程的结构下，又完善了一步生成ORM代码，当然你也可以在创建工程向导中添加生成ORM代码的步骤。而在工程下创建ORM的方式可以当做是对脚手架工程的补充，满足不同场景下的需求。</li><li>此外在 IDEA 插件开发的系列内容中我们是不断的尝试使用新的方式完善不同的功能点，如果你需要开发一个完整的插件那么可以结合这些功能一起来开发你的需求。</li><li>插件开发中还是有很多的内容需要了解和学习的，同时也要注意一些代码实现细节，例如我们本章节中的数据保存是在一个什么维度，是IDEA开发工具维度，还是在IDEA中的工程维度，这些是有区别。<em>比如你的不同工程，是不需要保存同一份配置的</em></li></ul>`,32);function w(y,j){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/cO7B0bdzQs3sIhePBDY06w"),t(a)])]),v,n("ul",null,[g,n("li",null,[s("另外为了让插件看上去更加高大上还美观适合吹牛，那么还需要配置 icon，这个位置配置一个"),b,s("的图片，图片可以从 "),n("a",h,[s("iconfont"),t(a)]),s(" 进行下载。")])]),f])}const x=e(i,[["render",w],["__file","2021-12-08-《IntelliJ IDEA chajiankaifa》diwujie：IDEAgongchengyoujiancaidan，zidongshengchengORMdaima.html.vue"]]);export{x as default};
