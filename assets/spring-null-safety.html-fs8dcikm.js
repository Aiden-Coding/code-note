import{_ as n,o as s,c as a,e as p}from"./app-3RcBQnkC.js";const e={},l=p(`<h1 id="spring-中的null-safety" tabindex="-1"><a class="header-anchor" href="#spring-中的null-safety" aria-hidden="true">#</a> Spring 中的Null-Safety</h1><p>之前一直在某些代码中看到过使用@Nullable 标注过的注释，当时也没有在意到底是什么意思，所以这篇文章来谈谈Spring中关于Null的那些事。</p><p>在Java中不允许让你使用类型表示其null的安全性，但Spring Framework 现在在org.sprinngframework.lang包提供以下注释，以便声明API和字段的可空性:</p><ul><li><code>@Nullable</code>: 用于指定<strong>参数、返回值或者字段</strong>可以作为null的注释。</li><li><code>@NonNull</code>: 与上述注释相反，表明<strong>指定参数、返回值或者字段</strong>不允许为null。(不需要@NonNullApi和@NonNullFields适用的参数/返回值和字段)</li><li><code>@NonNullApi</code>: <strong>包级别的注释</strong>声明非null作为参数和返回值。</li><li><code>@NonNullFields</code>:<strong>包级别的注释</strong>声明字段默认非空</li></ul><p>Spring Framework 本身利用了上面这几个注释，但它们也可以运用在任何基于Spring的Java 项目中，以声明空安全api 和 空安全字段。尚未支持泛型和数组元素的可空性，但应也即将发布在后来的版本。Spring Null-Safety出现在Spring5中，让我们更方便的编写空安全的代码，这叫做null-safety，null-safety不是让我们逃脱不安全的代码，而是在编译时产生警告。 此类警告可以在运行时防止灾难性空指针异常（NPE）。</p><h2 id="nonnull" tabindex="-1"><a class="header-anchor" href="#nonnull" aria-hidden="true">#</a> @NonNull</h2><p>@NonNull注释是null-safety的所有注释中最重要的一个，我们可以使用此注释在期望对象引用的任何地方声明非空约束：字段、方法参数或者方法返回值。</p><p>先来看一个例子</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码对name的校验是有效的，但是存在一个缺陷，如果name被设置为null的话，那么当我们使用name的时候，就会以NullPointerException来结尾。</p><p><strong>使用@NonNull</strong></p><p>Spring 的null-safety特性能够允许<code>idea</code>或者<code>eclipse</code>报告这个潜在的威胁，例如，如果我们用IDEA对属性加上@NonNull会出现如下的效果。</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625094303534-1898813198.png" alt=""></p><blockquote><p>奇怪，并没有什么变化啊，没看见有潜在的安全提示啊，<strong>那是因为你没有在idea进行设置</strong></p></blockquote><h3 id="设置安全检查" tabindex="-1"><a class="header-anchor" href="#设置安全检查" aria-hidden="true">#</a> 设置安全检查</h3><p>如果你也没有提示的话，可以通过如下的方式设置安全检查</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625094317448-373150679.png" alt=""></p><p>如果还不好使的话，那就在右侧 configuration annotations 添加一下 @NonNull和 @Nullable 所在的jar包，如下：</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625094336684-784638886.png" alt=""></p><p>添加上，打上 ✅ 即可看到如下效果。</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625094336680-680800037.png" alt=""></p><blockquote><p>现在fullName 已经被@NonNull 注释添加编译器检查null值的功能了！</p><p>如果你不相信的话，可以把@NonNull 注释去掉，你的鼠标再放在fullName 上，已经没有这句提示了。</p></blockquote><h2 id="nonnullfields" tabindex="-1"><a class="header-anchor" href="#nonnullfields" aria-hidden="true">#</a> @NonNullFields</h2><p>@NonNull 注解能够帮助你确保null-safety。然而，如果此注释直接装饰所有的字段的话，就会污染整个代码库。</p><p>Spring提供了另外一个不允许为null的注解 — <code>@NonNullFields</code>。这个注解适合用在包级别上，通知我们的开发工具注释包中所有的字段，默认的，不允许为null</p><p>新建一个Parent类，并在该类所属包下创建一个名为<code>package-info.java</code>的类，创建的不是Java类，而是创建的<code>file</code>，名为package-info.java，如下</p><p>package-info.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NonNullFields</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nullsafety<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">NonNullFields</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建一个<code>Parent.java</code> 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> son<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSon</span><span class="token punctuation">(</span><span class="token class-name">String</span> son<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>son <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> son<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            son <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>son <span class="token operator">=</span> son<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">String</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> age<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>package-info.java 中的<code>@NonNullFields</code>能够对Parent类中所有的属性起作用，把鼠标放在任意一个属性上，会出现编译期检查的提示</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625094352764-1346470517.png" alt=""></p><h2 id="nullable" tabindex="-1"><a class="header-anchor" href="#nullable" aria-hidden="true">#</a> @Nullable</h2><p>@NonNullFields注释通常比@NonNull更好，因为它有助于减少样板。 但是，有时我们想要从包级别指定的非null约束中免除某些字段，这时候就会使用到<code>@Nullable</code>注解</p><p>改造一下Person.java，Person.java 与pack-info.java 处于同一包下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fullName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nickName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token class-name">String</span> nickName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nickName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> nickName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fullName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFullName</span><span class="token punctuation">(</span><span class="token class-name">String</span> fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fullName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fullName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fullName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> fullName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在这种情况下，我们使用@Nullable注释来覆盖字段上@NonNullFields的语义。</p></blockquote><h2 id="nonnullapi" tabindex="-1"><a class="header-anchor" href="#nonnullapi" aria-hidden="true">#</a> @NonNullApi</h2><p><code>@NonNullFields</code>注释仅适用于其名称所示的字段。 如果我们想对方法的参数和返回值产生相同的影响，我们需要@NonNullApi。</p><p>添加 @NonNullApi和 @NonNullFields 在 configure annotations 中，并选用NonNullApi</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625094408468-804943371.png" alt=""></p><p>与@NonNullFields一样，我们需要在package-info.java 中定义<code>@NonNullApi</code></p><p>package-info.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NonNullApi</span>
<span class="token annotation punctuation">@NonNullFields</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nullsafety<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">NonNullApi</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">NonNullFields</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上如下注释后的效果如下: 可以在返回值的时候接受到编译期的提示。</p><p><img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625094410515-1701583190.png" alt=""></p><p><strong>后记</strong>：</p><p>看完文章，你至少应该了解</p><ul><li>四个注解 @NonNull， @Nullable, @NonNullFields, @NonNullApi 四个注解各自的作用范围</li><li>如何设置编译期的Null-safety检查</li></ul><p>欢迎关注 <img src="https://img2018.cnblogs.com/blog/1515111/201906/1515111-20190625112030613-2105534143.png" alt=""></p>`,50),t=[l];function o(c,i){return s(),a("div",null,t)}const d=n(e,[["render",o],["__file","spring-null-safety.html.vue"]]);export{d as default};
