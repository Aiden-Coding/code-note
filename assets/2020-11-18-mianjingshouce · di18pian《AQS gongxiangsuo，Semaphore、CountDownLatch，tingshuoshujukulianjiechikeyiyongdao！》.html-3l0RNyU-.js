import{_ as p,r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"面经手册-·-第18篇《aqs-共享锁-semaphore、countdownlatch-听说数据库连接池可以用到-》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第18篇《aqs-共享锁-semaphore、countdownlatch-听说数据库连接池可以用到-》","aria-hidden":"true"},"#"),s(" 面经手册 · 第18篇《AQS 共享锁，Semaphore、CountDownLatch，听说数据库连接池可以用到！》")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=t(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>学Java怎么能，突飞猛进的成长？</code></p><p>是不是你看见过的突飞猛进都是别人，但自己却很难！</p><p>其实并没有一天的突飞猛进，也没有一口吃出来的胖子。有得更多的时候日积月累、不断沉淀，最后才能爆发、破局！</p><p>举个简单的例子，如果你大学毕业时候已经写了40万行代码，还找不到工作吗？但40万行平均到每天并不会很多，重要的是持之以恒的坚持。</p><h2 id="二、面试题" tabindex="-1"><a class="header-anchor" href="#二、面试题" aria-hidden="true">#</a> 二、面试题</h2><p><code>谢飞机，小记！</code> 东风吹、战鼓擂，不加班、谁怕谁！哈哈哈，找我大哥去。</p><p><strong>谢飞机</strong>：喂，大哥。我女友面试卡住了，强人<code>锁</code>难，锁我也不会！</p><p><strong>面试官</strong>：你不应该不会呀，问你一个，基于 AQS 实现的锁都有哪些？</p><p><strong>谢飞机</strong>：嗯，有 ReentrantLock...</p><p><strong>面试官</strong>：还有呢？</p><p><strong>谢飞机</strong>：好像想不起来了，sync也不是！</p><p><strong>面试官</strong>：哎，学点漏点，不思考、不总结、不记录。你这样人家面试你就没法聊了，最起码你要有点深度。</p><p><strong>谢飞机</strong>：嘿嘿，记住了。来我家吃火锅吧，细聊。</p><h2 id="三、共享锁-和-aqs" tabindex="-1"><a class="header-anchor" href="#三、共享锁-和-aqs" aria-hidden="true">#</a> 三、共享锁 和 AQS</h2><h3 id="_1-基于-aqs-实现的锁有哪些" tabindex="-1"><a class="header-anchor" href="#_1-基于-aqs-实现的锁有哪些" aria-hidden="true">#</a> 1. 基于 AQS 实现的锁有哪些？</h3><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-18-1.png" alt="图 18-1 基于 AQS 实现的锁"></p><p>AQS（AbstractQueuedSynchronizer），是 Java 并发包中非常重要的一个类，大部分锁的实现也是基于 AQS 实现的，包括：</p><ul><li><code>ReentrantLock</code>，可重入锁。这个是我们最开始介绍的锁，也是最常用的锁。通常会与 synchronized 做比较使用。</li><li><code>ReentrantReadWriteLock</code>，读写锁。读锁是共享锁、写锁是独占锁。</li><li><code>Semaphore</code>，信号量锁。主要用于控制流量，比如：数据库连接池给你分配10个链接，那么让你来一个连一个，连到10个还没有人释放，那你就等等。</li><li><code>CountDownLatch</code>，闭锁。Latch 门闩的意思，比如：说四个人一个漂流艇，坐满了就推下水。</li></ul><p>这一章节我们主要来介绍 Semaphore ，信号量锁的实现，其实也就是介绍一个关于共享锁的使用和源码分析。</p><h3 id="_2-semaphore-共享锁使用" tabindex="-1"><a class="header-anchor" href="#_2-semaphore-共享锁使用" aria-hidden="true">#</a> 2. Semaphore 共享锁使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造函数入参，permits：信号量、fair：公平锁/非公平锁</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;蹲坑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;蹲坑编号：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们模拟了一个在高速服务区，厕所排队蹲坑的场景。由于坑位有限，为了避免造成拥挤和踩踏，保安人员在门口拦着，感觉差不多，一次释放两个进去，一直到都释放。<em>你也可以想成早上坐地铁上班，或者旺季去公园，都是一批一批的放行</em></p><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>蹲坑编号：<span class="token number">0</span>蹲坑
蹲坑编号：<span class="token number">1</span>蹲坑

蹲坑编号：<span class="token number">2</span>蹲坑
蹲坑编号：<span class="token number">3</span>蹲坑

蹲坑编号：<span class="token number">4</span>蹲坑
蹲坑编号：<span class="token number">5</span>蹲坑

蹲坑编号：<span class="token number">6</span>蹲坑
蹲坑编号：<span class="token number">7</span>蹲坑

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Semaphore 的构造函数可以传递是公平锁还是非公平锁，最终的测试结果也不同，可以自行尝试。</li><li>测试运行时，会先输出<code>0坑、1坑</code>，<code>之后2坑、3坑</code>...，每次都是这样两个，两个的释放。这就是 Semaphore 信号量锁的作用。</li></ul><h3 id="_3-semaphore-源码分析" tabindex="-1"><a class="header-anchor" href="#_3-semaphore-源码分析" aria-hidden="true">#</a> 3. Semaphore 源码分析</h3><h4 id="_3-1-构造函数" tabindex="-1"><a class="header-anchor" href="#_3-1-构造函数" aria-hidden="true">#</a> 3.1 构造函数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>permits：n. 许可证，特许证(尤指限期的)</em></p>`,31),v=n("em",null,"在我们前面的章节已经介绍了公平锁相关内容和实现，以及CLH、MCS",-1),m={href:"https://bugstack.cn/interview/2020/11/04/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C-%E7%AC%AC16%E7%AF%87-%E7%A0%81%E5%86%9C%E4%BC%9A%E9%94%81-ReentrantLock%E4%B9%8B%E5%85%AC%E5%B9%B3%E9%94%81%E8%AE%B2%E8%A7%A3%E5%92%8C%E5%AE%9E%E7%8E%B0.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<p><strong>初始<code>许可证</code>数量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FairSync</span><span class="token operator">/</span><span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> newState<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构造函数初始化的时候，无论是公平锁还是非公平锁，都会设置 AQS 中 state 数量值。这个值也就是为了下文中可以获取的信号量扣减和增加的值。</p><h4 id="_3-2-acquire-获取信号量" tabindex="-1"><a class="header-anchor" href="#_3-2-acquire-获取信号量" aria-hidden="true">#</a> 3.2 acquire 获取信号量</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>semaphore.acquire()</code></td><td>一次获取一个信号量，响应中断</td></tr><tr><td><code>semaphore.acquire(2)</code></td><td>一次获取n个信号量，响应中断（一次占2个坑）</td></tr><tr><td><code>semaphore.acquireUninterruptibly()</code></td><td>一次获取一个信号量，不响应中断</td></tr><tr><td><code>semaphore.acquireUninterruptibly(2)</code></td><td>一次获取n个信号量，不响应中断</td></tr></tbody></table><ul><li>其实获取信号量的这四个方法，主要就是，一次获取几个和是否响应中断的组合。</li><li><code>semaphore.acquire()</code>，源码中实际调用的方法是，<code> sync.acquireSharedInterruptibly(1)</code>。也就是相应中断，一次只占一个坑。</li><li><code>semaphore.acquire(2)</code>，同理这个就是一次要占两个名额，也就是许可证。<em>生活中的场景就是我给我朋友排的对，她来了，进来吧。</em></li></ul><h4 id="_3-3-acquire-释放信号量" tabindex="-1"><a class="header-anchor" href="#_3-3-acquire-释放信号量" aria-hidden="true">#</a> 3.3 acquire 释放信号量</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>semaphore.release()</code></td><td>一次释放一个信号量</td></tr><tr><td><code>semaphore.release(2)</code></td><td>一次获取n个信号量</td></tr></tbody></table><p>有获取就得有释放，获取了几个信号量就要释放几个信号量。<em>当然你可以尝试一下，获取信号量 semaphore.acquire(2) 两个，释放信号量 semaphore.release(1)，看看运行效果</em></p><h4 id="_3-4-公平锁实现" tabindex="-1"><a class="header-anchor" href="#_3-4-公平锁实现" aria-hidden="true">#</a> 3.4 公平锁实现</h4><p><strong>信号量获取过程</strong>，一直到公平锁实现。<code>semaphore.acquire</code> -&gt; <code>sync.acquireSharedInterruptibly(permits)</code> -&gt; <code>tryAcquireShared(arg)</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">permits</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>FairSync.tryAcquireShared</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> remaining <span class="token operator">=</span> available <span class="token operator">-</span> acquires<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>
            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>available<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> remaining<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>hasQueuedPredecessors</code>，公平锁的主要实现逻辑都在于这个方法的使用。它的目的就是判断有线程排在自己前面没，以及把线程添加到队列中的逻辑实现。<em>在前面我们介绍过CLH等实现，可以往前一章节阅读</em></li><li><code>for (;;)</code>，是一个自旋的过程，通过 CAS 来设置 state 偏移量对应值。这样就可以避免多线程下竞争获取信号量冲突。</li><li><code>getState()</code>，在构造函数中已经初始化 state 值，在这里获取信号量时就是使用 CAS 不断的扣减。</li><li>另外需要注意，共享锁和独占锁在这里是有区别的，独占锁直接返回true/false，共享锁返回的是int值。 <ul><li>如果该值小于0，则当前线程获取共享锁失败。</li><li>如果该值大于0，则当前线程获取共享锁成功，并且接下来其他线程尝试获取共享锁的行为很可能成功。</li><li>如果该值等于0，则当前线程获取共享锁成功，但是接下来其他线程尝试获取共享锁的行为会失败。</li></ul></li></ul><h4 id="_3-5-非公平锁实现" tabindex="-1"><a class="header-anchor" href="#_3-5-非公平锁实现" aria-hidden="true">#</a> 3.5 非公平锁实现</h4><p><strong>NonfairSync.nonfairTryAcquireShared</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">nonfairTryAcquireShared</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">nonfairTryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> remaining <span class="token operator">=</span> available <span class="token operator">-</span> acquires<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>
            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>available<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> remaining<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有了公平锁的实现，非公平锁的理解就比较简单了，只是拿去了 <code>if (hasQueuedPredecessors())</code> 的判断操作。</li><li>其他的逻辑实现都和公平锁一致。</li></ul><h4 id="_3-6-获取信号量失败-加入同步等待队列" tabindex="-1"><a class="header-anchor" href="#_3-6-获取信号量失败-加入同步等待队列" aria-hidden="true">#</a> 3.6 获取信号量失败，加入同步等待队列</h4><p>在公平锁和非公平锁的实现中，我们已经看到正常获取信号量的逻辑。那么如果此时不能正常获取信号量呢？其实这部分线程就需要加入到同步队列。</p><p><strong>doAcquireSharedInterruptibly</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SHARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>
                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>
            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先 <code>doAcquireSharedInterruptibly</code> 方法来自 AQS 的内部方法，与我们在学习竞争锁时有部分知识点相同，但也有一些差异。比如：<code>addWaiter(Node.SHARED)</code>，<code>tryAcquireShared</code>，我们主要介绍下这内容。</li><li><code>Node.SHARED</code>，其实没有特殊含义，它只是一个标记作用，用于判断是否共享。<code>final boolean isShared() { return nextWaiter == SHARED; }</code></li><li><code>tryAcquireShared</code>，主要是来自 <code>Semaphore</code> 共享锁中公平锁和非公平锁的实现。用来获取同步状态。</li><li><code>setHeadAndPropagate(node, r)</code>，如果r &gt; 0，同步成功后则将当前线程结点设置为头结点，同时 helpGC，p.next = null，断链操作。</li><li><code>shouldParkAfterFailedAcquire(p, node)</code>，调整同步队列中 node 结点的状态，并判断是否应该被挂起。这在我们之前关于锁的文章中已经介绍。</li><li><code>parkAndCheckInterrupt()</code>，判断是否需要被中断，如果中断直接抛出异常，当前结点请求也就结束。</li><li><code>cancelAcquire(node)</code>，取消该节点的线程请求。</li></ul><h3 id="_4-countdownlatch-共享锁使用" tabindex="-1"><a class="header-anchor" href="#_4-countdownlatch-共享锁使用" aria-hidden="true">#</a> 4. CountDownLatch 共享锁使用</h3><p>CountDownLatch 也是共享锁的一种类型，之所以在这里体现下，是因为它和 Semaphore 共享锁，既相似有不同。</p><p>CountDownLatch 更多体现的组团一波的思想，同样是控制人数，但是需要够一窝。比如：我们说过的4个人一起上皮划艇、两个人一起上跷跷板、<em>2个人一起蹲坑我没见过</em>，这样的方式就是门闩 CountDownLatch 锁的思想。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ExecutorService</span> exec <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exec<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> millis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;等待游客上船，耗时：&quot;</span> <span class="token operator">+</span> millis <span class="token operator">+</span> <span class="token string">&quot;(millis)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 完事一个扣减一个名额</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 等待游客</span>
    latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;船长急躁了，开船!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关闭线程池</span>
    exec<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这一个公园游船的场景案例，等待10个乘客上传，他们比较墨迹。</li><li>上一个扣减一个 <code>latch.countDown()</code></li><li>等待游客都上船 <code>latch.await()</code></li><li>最后船长开船！！<code>急躁了</code></li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>等待游客上船，耗时：<span class="token function">6689</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">2303</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">8208</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">435</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">9489</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">4937</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">2771</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">4823</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">1989</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
等待游客上船，耗时：<span class="token function">8506</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>
船长急躁了，开船<span class="token operator">!</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在你实际的测试中会发现，<code>船长急躁了，开船!</code>，会需要等待一段时间。</li><li>这里体现的就是门闩的思想，组队、一波带走。</li><li>CountDownLatch 的实现与 Semaphore 基本相同、细节略有差异，就不再做源码分析了。</li></ul><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h2><ul><li>在有了 AQS、CLH、MCS，等相关锁的知识了解后，在学习其他知识点也相对容易。基本以上和前几章节关于锁的介绍，也是面试中容易问到的点。<em>可能由于目前分布式开发较多，单机的多线程性能压榨一般较少，但是对这部分知识的了解非常重要</em></li><li>得益于Lee老爷子的操刀，并发包锁的设计真的非常优秀。每一处的实现都可以说是精益求精，所以在学习的时候可以把小傅哥的文章当作抛砖，之后继续深挖设计精髓，不断深入。</li><li>共享锁的使用可能平时并不多，但如果你需要设计一款类似数据库线程池的设计，那么这样的信号量锁的思想就非常重要了。所以在学习的时候也需要有技术迁移的能，不断把这些知识复用到实际的业务开发中。</li></ul>`,34);function h(y,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)])]),k,n("p",null,[s("默认情况下只需要传入 permits 许可证数量即可，也就是一次允许放行几个线程。构造函数会创建非公平锁。如果你需要使用 Semaphore 共享锁中的公平锁，那么可以传入第二个构造函数的参数 fair = false/true。true：FairSync，公平锁。"),v,s(),n("a",m,[s("《公平锁介绍》"),e(a)])]),b])}const g=p(l,[["render",h],["__file","2020-11-18-mianjingshouce · di18pian《AQS gongxiangsuo，Semaphore、CountDownLatch，tingshuoshujukulianjiechikeyiyongdao！》.html.vue"]]);export{g as default};
