import{_ as n,o as s,c as a,e}from"./app-3RcBQnkC.js";const p={},t=e(`<h1 id="c-中的数据" tabindex="-1"><a class="header-anchor" href="#c-中的数据" aria-hidden="true">#</a> C 中的数据</h1><ul><li><a href="#c-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE">C 中的数据</a><ul><li><a href="#%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F">变量和常量</a><ul><li><a href="#%E5%8F%98%E9%87%8F%E5%90%8D">变量名</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a><ul><li><a href="#%E6%95%B4%E5%9E%8B">整型</a></li><li><a href="#char-%E7%B1%BB%E5%9E%8B">char 类型</a></li><li><a href="#_bool-%E7%B1%BB%E5%9E%8B">_Bool 类型</a></li><li><a href="#floatdouble-%E5%92%8C-long-double">float、double 和 long double</a></li><li><a href="#%E5%A4%8D%E6%95%B0%E5%92%8C%E8%99%9A%E6%95%B0%E7%B1%BB%E5%9E%8B">复数和虚数类型</a></li><li><a href="#%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B">其他类型</a></li></ul></li><li><a href="#%E5%B8%B8%E9%87%8F">常量</a><ul><li><a href="#%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89">常量定义</a></li></ul></li></ul></li></ul></li></ul><p>我们在了解完上面的入门例子程序后，下面我们就要全面认识一下 C 语言程序了，首先我们先来认识一下 C 语言最基本的变量与常量。</p><h2 id="变量和常量" tabindex="-1"><a class="header-anchor" href="#变量和常量" aria-hidden="true">#</a> 变量和常量</h2><p>变量和常量是程序处理的两种基本对象。</p><p>有些数据类型在程序使用之前就已经被设定好了，在整个过程中没有变化（这段话描述不准确，但是为了通俗易懂，暂且这么描述），这种数据被称为<code>常量(constant)</code>。另外一种数据类型在程序执行期间可能会发生改变，这种数据类型被称为 <code>变量(variable)</code>。例如 <code>int number</code> 就是一个变量，而<code>3.1415</code> 就是一个常量，因为 int number 一旦声明出来，你可以对其任意赋值，而 3.1415 一旦声明出来，就不会再改变。</p><h3 id="变量名" tabindex="-1"><a class="header-anchor" href="#变量名" aria-hidden="true">#</a> 变量名</h3><p>有必要在聊数据类型之前先说一说变量名的概念。变量名是由字母和数字组成的序列，第一个字符必须是字母。在变量名的命名过程中，下划线 <code>_</code> 被看作字母，下划线一般用于名称较长的变量名，这样能够提高程序的可读性。变量名通常不会以下划线来开头。在 C 中，大小写是有区别的，也就是说，a 和 A 完全是两个不同的变量。一般变量名使用小写字母，符号常量（#define 定义的）全都使用大写。选择变量名的时候，尽量能够从字面上描述出变量的用途，切忌起这种 abc 毫无意义的变量。</p><p>还需要注意一般局部变量都会使用较短的变量名，外部变量使用较长的名字。</p><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>在了解数据类型之前，我们需要先了解一下这些概念 <strong>位、字节和字</strong>。</p><blockquote><p>位、字节和字都是对计算机<strong>存储单元</strong>的描述。在计算机世界中，最小的单元是 <code>位(bit)</code>，一个位就表示一个 0 或 1，一般当你的小伙伴问你的电脑是 xxx 位，常见的有 32 位或者 64 位，这里的位就指的是比特，比特就是 bit 的中文名称，所以这里的 32 位或者 64 位指的就是 32 bit 或者 64 bit。字节是基本的存储单元，基本存储单元说的是在计算机中都是按照字节来存储的，一个字节等于 8 位，即 1 byte = 8 bit。字是自然存储单位，在现代计算机中，一个字等于 2 字节。</p></blockquote><p>C 语言的数据类型有很多，下面我们就来依次介绍一下。</p><h4 id="整型" tabindex="-1"><a class="header-anchor" href="#整型" aria-hidden="true">#</a> 整型</h4><p>C 语言中的整型用 <code>int</code> 来表示，可以是正整数、负整数或零。在不同位数的计算机中其取值范围也不同。不过在 32 位和 64 位计算机中，int 的取值范围是都是 2^32 ，也就是 -2147483648 ~ +2147483647，无符号类型的取值范围是 0 ~ 4294967295。</p><p>整型以二进制整数存储，分为<strong>有符号数和无符号数</strong>两种形态，有符号数可以存储正整数、负整数和零；无符号只能存储正整数和零。</p><p>可以使用 printf 打印出来 int 类型的值，如下代码所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 语言还提供 3 个附属关键字修饰整数类型，即 <strong>short、long 和 unsigned</strong>。</p><ul><li>short int 类型（或者简写为 short）占用的存储空间<code>可能</code>比 int 类型少，适合用于数值较小的场景。</li><li>long int 或者 long 占用的存储空间<code>可能</code>比 int 类型多，适合用于数值较大的场景。</li><li>long long int 或者 long long（C99 加入）占用的存储空间比 long 多，适用于数值更大的场合，至少占用 64 位，与 int 类似，long long 也是有符号类型。</li><li>unsigned int 或 unsigned 只用于非负值的场景，这种类型的取值范围有所不同，比如 16 位的 unsigned int 表示的范围是 0 ~ 65535 ，而不是 -32768 ~ 32767。</li><li>在 C90 标准中，添加了 unsigned long int 或者 unsigned long 和 unsigned short int 或 unsigned short 类型，在 C99 中又添加了 unsigned long long int 或者 unsigned long long 。</li><li>在任何有符号类型前面加 signed ，可强调使用有符号类型的意图。比如 short、short int、signed short、signed short int 都表示一种类型。</li></ul><p>比如上面这些描述可以用下面这些代码来声明：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token keyword">int</span> lia<span class="token punctuation">;</span>
<span class="token keyword">long</span> la<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> lla<span class="token punctuation">;</span>
<span class="token keyword">short</span> <span class="token keyword">int</span> sib<span class="token punctuation">;</span>
<span class="token keyword">short</span> sb<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> uic<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> uc<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> uld<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> usd<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里需要注意一点，unsigned 定义的变量，按照 printf 格式化输出时，是能够显示负值的，为什么呢？不是 unsigned 修饰的值不能是负值啊，那是因为 unsigned 修饰的变量，在计算时会有用，输出没什么影响，这也是 cxuan 刚开始学习的时候踩的坑。</p></blockquote><p>我们学过 Java 的同学刚开始都对这些定义觉得莫名其妙，为什么一个 C 语言要对数据类型有这么多定义？C 语言真麻烦，我不学了！</p><p>千万不要有这种想法，如果有这种想法的同学，你一定是被 JVM 保护的像个孩子！我必须从现在开始纠正你的这个想法，因为 Java 有 JVM 的保护，很多特性都做了优化，而 C 就像个没有伞的孩子，它必须自己和这个世界打交道！</p><p>上面在说 short int 和 long int 的时候，都加了一个可能，怎么，难道 short int 和 long int 和 int 还不一样吗？</p><p>这里就是 C 语言数据类型一个独特的风格。</p><blockquote><p>为什么说可能，这是由于 C 语言为了适配不同的机器来设定的语法规则，在早起的计算机上，int 类型和 short 类型都占 16 位，long 类型占 32 位，在后来的计算机中，都采用了 16 位存储 short 类型，32 位存储 int 类型和 long 类型，现在，计算机普遍使用 64 位 CPU，为了存储 64 位整数，才引入了 long long 类型。所以，一般现在个人计算机上常见的设置是 long long 占用 64 位，long 占用 32 位，short 占用 16 位，int 占用 16 位或者 32 位。</p></blockquote><h4 id="char-类型" tabindex="-1"><a class="header-anchor" href="#char-类型" aria-hidden="true">#</a> char 类型</h4><p>char 类型一般用于存储字符，表示方法如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token char">&#39;y&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>char 被称为字符类型，只能用单引号 &#39;&#39; 来表示，而不能用双引号 “” 来表示，这和字符串的表示形式相反。</p><p>char 虽然表示字符，但是 char 实际上存储的是整数而不是字符，计算机一般使用 <code>ASCII</code> 来处理字符，标准 ASCII 码的范围是 0 - 127 ，只需 7 位二进制数表示即可。C 语言中规定 char 占用 1 字节。</p><p>其实整型和字符型是相通的，他们在内存中的存储本质是相通的，编译器发现 char ，就会自动转换为整数存储，相反的，如果给 int 类型赋值英文字符，也会转换成整数存储，如下代码</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> b<span class="token punctuation">;</span>
 b <span class="token operator">=</span> <span class="token char">&#39;y&#39;</span><span class="token punctuation">;</span>
 
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n%d\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><p>120</p><p>121</p><p>所以，int 和 char 只是存储的范围不同，整型可以是 2 字节，4 字节，8 字节，而字符型只占 1 字节。</p><p>有些 C 编译器把 char 实现为有符号类型，这意味着 char 可表示的范围是 -128 ~ 127，而有些编译器把 char 实现为无符号类型，这种情况下 char 可表示的范围是 0 - 255。signed char 表示的是有符号类型，unsigned char 表示的是无符号类型。</p><h4 id="bool-类型" tabindex="-1"><a class="header-anchor" href="#bool-类型" aria-hidden="true">#</a> _Bool 类型</h4><p>_Bool 类型是 C99 新增的数据类型，用于表示布尔值。也就是逻辑值 true 和 false。在 C99 之前，都是用 int 中的 1 和 0 来表示。所以 _Bool 在某种程度上也是一种数据类型。表示 0 和 1 的话，用 1 bit（位）表示就够了。</p><h4 id="float、double-和-long-double" tabindex="-1"><a class="header-anchor" href="#float、double-和-long-double" aria-hidden="true">#</a> float、double 和 long double</h4><p>整型对于大多数软件开发项目而言就已经够用了。然而，在金融领域和数学领域还经常使用<code>浮点数</code>。C 语言中的浮点数有 float、double 和 long double 类型。浮点数类型能够表示包括小数在内更大范围的数。浮点数能表示小数，而且表示范围比较大。浮点数的表示类似于科学技术法。下面是一些科学记数法示例:</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gweey0bmszj319c0b4mye.jpg" alt="image-20211114091811805"></p><p>C 规定 float 类型必须至少能表示 6 位有效数字，而且取值范围至少是 10^-37 ~ 10^+37。通常情况下，系统存储一个浮点数要占用 32 位。</p><p>C 提供的另一种浮点类型是 <em>double(双精度类型)</em>。一般来说，double 占用的是 64 位而不是 32 位。</p><p>C 提供的第三种类型是 long double ，用于满足比 double 类型更高的精度要求。不过，C 只保证了 long double 类型至少与 double 类型相同。</p><p>浮点数的声明方式和整型类似，下面是一些浮点数的声明方式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

 <span class="token keyword">float</span> aboat <span class="token operator">=</span> <span class="token number">2100.0</span><span class="token punctuation">;</span>
 <span class="token keyword">double</span> abet <span class="token operator">=</span> <span class="token number">2.14e9</span><span class="token punctuation">;</span>
 <span class="token keyword">long</span> <span class="token keyword">double</span> dip <span class="token operator">=</span> <span class="token number">5.32e-5</span><span class="token punctuation">;</span>
 
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> aboat<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%e\\n&quot;</span><span class="token punctuation">,</span> abet<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%Lf\\n&quot;</span><span class="token punctuation">,</span> dip<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>printf() 函数使用 %f 转换说明打印十进制计数法的 float 和 double 类型浮点数，用 %e 打印指数记数法的浮点数。打印 long double 类型要使用 %Lf 转换说明。</p><p>关于浮点数，还需要注意其<code>上溢</code>和<code>下溢</code>的问题。</p><p>上溢指的是是指由于数字过大，超过当前类型所能表示的范围，如下所示</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">float</span> toobig <span class="token operator">=</span> <span class="token number">3.4E38</span> <span class="token operator">*</span> <span class="token number">100.0f</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%e\\n&quot;</span><span class="token punctuation">,</span>toobig<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的内容是 <code>inf</code>，这表示 toobig 的结果超过了其定义的范围，C 语言就会给 toobig 赋一个表示无穷大的特定值，而且 printf 显示值为 inf 或者 infinity 。</p><p>下溢：是指由于数值太小，低于当前类型所能表示的最小的值，计算机就只好把尾数位向右移，空出第一个二进制位，但是与此同时，却损失了原来末尾有效位上面的数字，这种情况就叫做下溢。比如下面这段代码</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">float</span> toosmall <span class="token operator">=</span> <span class="token number">0.1234e-38</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%e\\n&quot;</span><span class="token punctuation">,</span> toosmall<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复数和虚数类型" tabindex="-1"><a class="header-anchor" href="#复数和虚数类型" aria-hidden="true">#</a> 复数和虚数类型</h4><p>许多科学和工程计算都需要用到复数和虚数，C99 标准支持复数类型和虚数类型，C 语言中有 3 种复数类型：<strong>float _Complex、double _Complex 和 long double _Complex</strong>。</p><p>C 语言提供的 3 种虚数类型：<strong>float _Imaginary、 double _Imaginary 和 long double _Imaginary</strong>。</p><p>如果包含 complex.h 头文件的话，便可使用 complex 替换 _Complex，用 imaginary 替代 _Imaginary。</p><h4 id="其他类型" tabindex="-1"><a class="header-anchor" href="#其他类型" aria-hidden="true">#</a> 其他类型</h4><p>除了上述我们介绍过的类型之外，C 语言中还有其他类型，比如数组、指针、结构和联合，虽然 C 语言没有字符串类型，但是 C 语言却能够很好的处理字符串。</p><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h3><p>在很多情况下我们需要常量，在整个程序的执行过程中，其值不会发生改变，比如一天有 24 个小时，最大缓冲区的大小，滑动窗口的最大值等。这些固定的值，即称为常量，又可以叫做<strong>字面量</strong>。</p><p>常量也分为很多种，整型常量，浮点型常量，字符常量，字符串常量，下面我们分别来介绍</p><p><strong>整数常量</strong></p><p>整数常量可以表示为十进制、八进制或十六进制。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">330</span>         <span class="token comment">/* 合法的 */</span>
<span class="token number">315u</span>        <span class="token comment">/* 合法的 */</span>
<span class="token number">0xFeeL</span>      <span class="token comment">/* 合法的 */</span>
<span class="token number">048</span>         <span class="token comment">/* 非法的：8 进制不能定义 8 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>浮点型常量</strong></p><p>浮点型常量由整数部分、小数点、小数部分和指数部分组成。你可以使用小数形式或者指数形式来表示浮点常量。</p><p>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">3.14159</span>       <span class="token comment">/* 合法的 */</span>
<span class="token number">314159E-5L</span>    <span class="token comment">/* 合法的 */</span>
<span class="token number">510</span>E          <span class="token comment">/* 非法的：不完整的指数 */</span>
<span class="token number">210f</span>          <span class="token comment">/* 非法的：没有小数或指数 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符常量</strong></p><p>C 语言中的字符常量使用单引号（即撇号）括起来的一个字符。如‘a’，‘x’，&#39;D&#39;，‘?’，‘$’ 等都是字符常量。注意，‘a’ 和 ‘A’ 是不同的字符常量。</p><p>除了以上形式的字符常量外，C 还允许用一种特殊形式的字符常量，就是以一个 “\\” 开头的字符序列。例如，前面已经遇到过的，在 printf 函数中的‘\\n’，它代表一个换行符。这是一种控制字符，在屏幕上是不能显示的。</p><p>常用的以 “\\” 开头的特殊字符有</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw8gudrualj30n70d2754.jpg" alt="image-20211109055031470"></p><p>表中列出的字符称为“转义字符”，意思是将反斜杠（\\）后面的字符转换成另外的意义。如 ‘\\n’ 中的 “n” 不代表字母 n 而作为“换行”符。</p><p>表中最后第 2 行是用ASCII码（八进制数）表示一个字符，例如 ‘\\101’ 代表 ASCII 码（十进制数）为 65 的字符 “A”。‘\\012’（十进制 ASCII 码为 10）代表换行。</p><p>需要注意的是 ‘\\0’ 或 ‘\\000’ 代表 ASCII 码为 0 的控制字符，它用在字符串中。</p><p><strong>字符串常量</strong></p><p>字符串常量通常用 &quot;&quot; 进行表示。字符串就是一系列字符的集合。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p><h4 id="常量定义" tabindex="-1"><a class="header-anchor" href="#常量定义" aria-hidden="true">#</a> 常量定义</h4><p>C 语言中，有两种定义常量的方式。</p><ol><li>使用 <code>#define</code> 预处理器进行预处理</li><li>使用 <code>const</code> 关键字进行处理</li></ol><p>下面是使用 #define 预处理器进行常量定义的代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENGTH</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIDTH</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 
 <span class="token keyword">int</span> area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>
 
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;area = %d\\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，我们也可以使用 const 关键字来定义常量，如下代码所示</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 
 <span class="token keyword">const</span> <span class="token keyword">int</span> LENGTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> <span class="token keyword">int</span> WIDTH <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
 
 <span class="token keyword">int</span> area<span class="token punctuation">;</span>
 area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>
 
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;area = %d\\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>那么这两种常量定义方式有什么不同呢？</p></blockquote><p><strong>编译器处理方式不同</strong></p><p>使用 #define 预处理器是在预处理阶段进行的，而 const 修饰的常量是在编译阶段进行。</p><p><strong>类型定义和检查不同</strong></p><p>使用 #define 不用声明数据类型，而且不用类型检查，仅仅是定义；而使用 const 需要声明具体的数据类型，在编译阶段会进行类型检查。</p><hr><p>强烈安利一下作者自己的公众号，干货内容非常多，并且在公众号后台回复「cxuan」和「网络」有作者自己肝的 PDF，快来领取吧。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivkbczxoj31l20t8al5.jpg" alt="image-20210716163352584"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivl4khz9j31d60h8mze.jpg" alt="image-20210716163433337"></p>`,99),o=[t];function i(l,c){return s(),a("div",null,o)}const r=n(p,[["render",i],["__file","c-data.html.vue"]]);export{r as default};
