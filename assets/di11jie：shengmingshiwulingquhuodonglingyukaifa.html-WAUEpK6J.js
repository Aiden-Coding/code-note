import{_ as a,r as s,o,c as l,a as e,b as n,d as r,e as i}from"./app-3RcBQnkC.js";const c={},d=e("h1",{id:"第11节-声明事务领取活动领域开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第11节-声明事务领取活动领域开发","aria-hidden":"true"},"#"),n(" 第11节：声明事务领取活动领域开发")],-1),u=e("br",null,null,-1),h={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},p=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！")],-1),_={href:"https://gitcode.net/KnowledgePlanet/Lottery/-/tree/211001_xfg_ActivityPartake",target:"_blank",rel:"noopener noreferrer"},f={href:"https://gitcode.net/KnowledgePlanet/db-router-spring-boot-starter/-/tree/211001_xfg_TransactionTemplate",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"新增硬编码路由，用于支撑声明式事务使用",-1),b=e("li",null,"描述：扩展自研数据库路由组件，支持声明式事务处理。用于领取活动领域功能开发中用户领取活动信息，在一个事务下记录多张表数据。",-1),k=e("h2",{id:"零、优秀作业",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#零、优秀作业","aria-hidden":"true"},"#"),n(" 零、优秀作业")],-1),m={href:"https://t.zsxq.com/063RJQBaa",target:"_blank",rel:"noopener noreferrer"},v={href:"https://t.zsxq.com/06NNRvbYB",target:"_blank",rel:"noopener noreferrer"},x={href:"https://t.zsxq.com/06Aq7MFEa",target:"_blank",rel:"noopener noreferrer"},q={href:"https://t.zsxq.com/06yBAuRzf",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/06mMrvbyz",target:"_blank",rel:"noopener noreferrer"},z={href:"https://t.zsxq.com/0aq44ZGnY",target:"_blank",rel:"noopener noreferrer"},B={href:"https://t.zsxq.com/0c74ctHdI",target:"_blank",rel:"noopener noreferrer"},D={href:"https://t.zsxq.com/0dxINxZ34",target:"_blank",rel:"noopener noreferrer"},A={href:"https://t.zsxq.com/0dQWJKBEN",target:"_blank",rel:"noopener noreferrer"},I={href:"https://t.zsxq.com/0epY0blgW",target:"_blank",rel:"noopener noreferrer"},R={href:"https://t.zsxq.com/0eI00j0Wa",target:"_blank",rel:"noopener noreferrer"},w={href:"https://t.zsxq.com/11VLJ3lZL",target:"_blank",rel:"noopener noreferrer"},N=i(`<h2 id="一、开发日志" tabindex="-1"><a class="header-anchor" href="#一、开发日志" aria-hidden="true">#</a> 一、开发日志</h2><ul><li>db-router-spring-boot-starter 扩展和完善自研简单版数据库路由组件，拆解路由策略满足声明式路由配合声明式事务一起使用。</li><li>补全库表 activity 增加字段 strategy_id 运行本章节记得更新此分支下最新 <a href="#">SQL</a> 语句。抽奖策略ID字段 strategy_id 用于关联活动与抽奖系统的关系。<em>也就是用户领取完活动后，可以通过活动表中的抽奖策略ID继续执行抽奖操作</em></li><li>基于模板模式开发领取活动领域，因为在领取活动中需要进行活动的日期、库存、状态等校验，并处理扣减库存、添加用户领取信息、封装结果等一系列流程操作，因此使用抽象类定义模板模式更为妥当</li></ul><h2 id="二、自研组件-dbrouter-扩展声明式事务" tabindex="-1"><a class="header-anchor" href="#二、自研组件-dbrouter-扩展声明式事务" aria-hidden="true">#</a> 二、自研组件(DBRouter) - 扩展声明式事务</h2><ul><li>问题：如果一个场景需要在同一个事务下，连续操作不同的DAO操作，那么就会涉及到在 DAO 上使用注解 @DBRouter(key = &quot;uId&quot;) 反复切换路由的操作。虽然都是一个数据源，但这样切换后，事务就没法处理了。</li><li>解决：这里选择了一个较低的成本的解决方案，就是把数据源的切换放在事务处理前，而事务操作也通过声明式编码进行处理。<em>具体可以参考 db-router-spring-boot-starter 源码</em></li></ul><h3 id="_1-拆解路由算法策略-单独提供路由方法" tabindex="-1"><a class="header-anchor" href="#_1-拆解路由算法策略-单独提供路由方法" aria-hidden="true">#</a> 1. 拆解路由算法策略，单独提供路由方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDBRouterStrategy</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">doRouter</span><span class="token punctuation">(</span><span class="token class-name">String</span> dbKeyAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把路由算法拆解出来，无论是切面中还是硬编码，都通过这个方法进行计算路由</li></ul>`,7);function L(j,T){const t=s("ExternalLinkIcon");return o(),l("div",null,[d,e("p",null,[n("作者：小傅哥 "),u,n("博客："),e("a",h,[n("https://bugstack.cn"),r(t)])]),p,e("ul",null,[e("li",null,[n("应用分支："),e("a",_,[n("211001_xfg_ActivityPartake"),r(t)])]),e("li",null,[n("路由组件："),e("a",f,[n("db-router-spring-boot-starter#211001_xfg_TransactionTemplate "),g,r(t)])]),b]),k,e("ul",null,[e("li",null,[e("a",m,[n("声明事务领取活动领域开发 @一点江南"),r(t)])]),e("li",null,[e("a",v,[n("声明事务领取活动领域开发 @BerserkD"),r(t)])]),e("li",null,[e("a",x,[n("模板模式的核心就是通过抽象类定义抽象方法的执行顺序 @知行人"),r(t)])]),e("li",null,[e("a",q,[n("事务控制_领取活动领域开发 @Geroge Liu"),r(t)])]),e("li",null,[e("a",y,[n("声明事务领域、活动领域开发（完成第8节partake部分服务）@liuc"),r(t)])]),e("li",null,[e("a",z,[n('同一个事务下，连续操作不同的DAO操作，那么就会涉及到在 DAO 上使用注解 @DBRouter(key = "uId") 反复切换路由的操作。虽然都是一个数据源，但这样切换后，为什么事务就没法处理了？ @眼镜'),r(t)])]),e("li",null,[e("a",B,[n("业务接口 + 模板抽象类 + 数据支撑类 + 抽象方法实现类，职责明确 @AD钙奶"),r(t)])]),e("li",null,[e("a",D,[n("项目过程中遇到的bug以及经验总结 @锚"),r(t)])]),e("li",null,[e("a",A,[n("什么是编程式事务？@星期一"),r(t)])]),e("li",null,[e("a",I,[n("编程式事务，transactionTemplate.execute(status -> {}），代码控制回滚status.setRollbackOnly(); @learningJ"),r(t)])]),e("li",null,[e("a",R,[n("整体结构比较简单，即使用了模板方法，定义了活动领取流程，难点在于细节 @错否"),r(t)])]),e("li",null,[e("a",w,[n("Spring声明式事务引起的路由失效分析 @布丁"),r(t)])])]),N])}const O=a(c,[["render",L],["__file","di11jie：shengmingshiwulingquhuodonglingyukaifa.html.vue"]]);export{O as default};
