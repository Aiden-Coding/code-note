import{_ as e,r as c,o,c as l,a as s,b as n,d as t,e as p}from"./app-3RcBQnkC.js";const u={},i=s("h1",{id:"《程序员数学-杨辉三角》——-开方作法本源",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#《程序员数学-杨辉三角》——-开方作法本源","aria-hidden":"true"},"#"),n(" 《程序员数学：杨辉三角》—— 开方作法本源")],-1),r=s("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=s("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},b=p(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>杨辉三角的历史</code></p><p>杨辉三角按照杨辉于1261年所编写的《详解九章算法》一书，里面有一张图片，介绍此种算法来自于另外一个数学家贾宪所编写的《释锁算书》一书，但这本书早已失传无从考证。但可以肯定的是这一图形的发现我国不迟于1200年左右。在欧洲，这图形称为&quot;巴斯加(Pascal)三角&quot;。因为一般都认为这是巴斯加在1654年发明的。其实在巴斯加之前已经有许多人普及过，最早是德国人阿匹纳斯(Pertrus APianus)，他曾经把这个图形刻在1527年著的一本算术书封面上。但无论如何，杨辉三角的发现，在我国比在欧洲至少要早300年光景。</p><p>此外杨辉三角原来的名字也不是三角，而是叫做<strong>开方作法本源</strong>，后来也有人称为<strong>乘法求廉图</strong>。因为这些名称实在太古奥了些，所以后来简称为“三角”。</p><p>在小傅哥学习杨辉三角的过程中，找到了一本大数学家华罗庚的PDF<a href="">《从杨辉三角谈起 - 华罗庚》</a>。—— 这些数学真的非常重要，每每映射到程序中都是一段把for循环优化成算法的体现，提高执行效率。</p><h2 id="二、杨辉三角构造" tabindex="-1"><a class="header-anchor" href="#二、杨辉三角构造" aria-hidden="true">#</a> 二、杨辉三角构造</h2><p>在开始分享杨辉三角的特性和代码实现前，我们先来了解下杨辉三角的结构构造。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/pascal-triangle-01.png?raw=true" width="450px"></div><p>杨辉三角的结构和规律非常简单，除去每次两边的1，中间的数字都是上面两个数字的和。如图示意的三角区域。但也就是如此简单的结构，却有着诸多的数学逻辑体现。包括我们计算的二项式、N选X的种数还有斐波那契数列等，都可以在杨辉三角中体现出来。接下来我们就来看看这些特性。</p><h2 id="三、杨辉三角特性" tabindex="-1"><a class="header-anchor" href="#三、杨辉三角特性" aria-hidden="true">#</a> 三、杨辉三角特性</h2><p>为了方便学习杨辉三角的数学逻辑特性，我们把它按左对齐方式进行排列。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们就以这组杨辉三角数列，来展示它的数学逻辑特性。关于杨辉三角的Java代码放已到下文中，读者可以查阅。</p><h3 id="_1-二项式展开" tabindex="-1"><a class="header-anchor" href="#_1-二项式展开" aria-hidden="true">#</a> 1. 二项式展开</h3><p>大家在上学阶段一定学习过二项式展开，例如：<code>(x+y)^2 = x^2 + 2xy + y^2</code> 其实这个展开的数学逻辑在杨辉三角中可以非常好的展示出来。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/pascal-triangle-02.png?raw=true" width="650px"></div><ul><li>任意一个二项式展开后的数字乘积，都可以映射到杨辉三角对应的中的数字。</li><li>二项式展开公式是用来计算给定二项式的指数幂的展开式的公式。对于给定的二项式 (x + y)n，二项式展开公式为：<code>(x + y)^n = x^n + nx^{n-1}y + n(n-1)x^{n-2}y^2 + ... + y^n</code> 这个公式也正好符合杨辉三角的数字值。</li></ul><h3 id="_2-组合数" tabindex="-1"><a class="header-anchor" href="#_2-组合数" aria-hidden="true">#</a> 2. 组合数</h3><p>组合数是数学中定义的一种数学概念，用于计算有多少种选择可以从一组物品中选择出若干的物品。比如你早上有5种水果可以吃，但你吃不了那么多，让你5种水果中选2个，看看有多少种选择。通过使用公式 c(n,k) = n!/k!(n-k)! 可以计算出，5选2有10种选择。</p><p>那么这样一个计算也是可以体现在杨辉三角中的。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/pascal-triangle-03.png?raw=true" width="400px"></div><ul><li>5选2，在杨辉三角中可以找到第5行的第2列，结果是10。按照这个规律，5选3=10、5选4=5</li></ul><h3 id="_3-斐波那契数列" tabindex="-1"><a class="header-anchor" href="#_3-斐波那契数列" aria-hidden="true">#</a> 3. 斐波那契数列</h3>`,24),h={href:"https://bugstack.cn/md/algorithm/logic/math/2022-11-05-fibonacci.html",target:"_blank",rel:"noopener noreferrer"},g=p('<p>斐波那契数列可以由递归关系定义：<code>F0 = 0，F1 = 1，Fn = Fn-1 + Fn-2</code></p><table><thead><tr><th style="text-align:center;">F0</th><th style="text-align:center;">F1</th><th style="text-align:center;">F2</th><th style="text-align:center;">F3</th><th style="text-align:center;">F4</th><th style="text-align:center;">F5</th><th style="text-align:center;">F6</th><th style="text-align:center;">F7</th><th style="text-align:center;">F8</th><th style="text-align:center;">F9</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">5</td><td style="text-align:center;">8</td><td style="text-align:center;">13</td><td style="text-align:center;">21</td><td style="text-align:center;">34</td></tr></tbody></table><p>而这样一个有规律的斐波那契数列在杨辉三角中也是有所体现的。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/pascal-triangle-04.png?raw=true" width="550px"></div><ul><li>把斜对角的数字做加和，会得到一组斐波那契数列；1、1、2、3、5、8、13、15、33</li></ul><h3 id="_4-次方数" tabindex="-1"><a class="header-anchor" href="#_4-次方数" aria-hidden="true">#</a> 4. 次方数</h3><p>在杨辉三角中还有一个非常有意思的特性，就是有2的次方和11次方数。</p><p><strong>2次方</strong></p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/pascal-triangle-05.png?raw=true" width="550px"></div>',9),v=p(`<p><strong>11次方</strong></p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/pascal-triangle-06.png?raw=true" width="500px"></div><ul><li>另外一个是11的次幂，例如11的2次幂的结果正好是121这一排数字的组合。如果是11的5次幂，中间有连续的10，则是把后一位向前一位进位一下。</li></ul><h3 id="_5-平方数" tabindex="-1"><a class="header-anchor" href="#_5-平方数" aria-hidden="true">#</a> 5. 平方数</h3><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/pascal-triangle-07.png?raw=true" width="350px"></div><ul><li>在杨辉三角中还有一个平方数的规律体现。比如3的平方正好是右侧3+6的结果。4的平方是右侧6+10的结果。</li></ul><h2 id="四、杨辉三角实现" tabindex="-1"><a class="header-anchor" href="#四、杨辉三角实现" aria-hidden="true">#</a> 四、杨辉三角实现</h2><p>接下来我们实现下杨辉三角；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">pascalTriangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> lineNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> currentLine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentLine<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> currentLineSize <span class="token operator">=</span> lineNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> numberIdx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> numberIdx <span class="token operator">&lt;</span> currentLineSize<span class="token punctuation">;</span> numberIdx <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
         * https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/pascal-triangle/pascalTriangle.js
         * 第i行号中的第 -th 个条目lineNumber是 Binomial CoefficientC(lineNumber, i)并且所有行都以 value 开头1。这个思路是C(lineNumber, i)使用C(lineNumber, i-1). 它可以O(1)使用以下方法及时计算：
         * C(lineNumber, i)   = lineNumber! / ((lineNumber - i)! * i!)
         * C(lineNumber, i - 1) = lineNumber! / ((lineNumber - i + 1)! * (i - 1)!)
         *
         * 从以上两个表达式我们可以推导出下面的表达式：C(lineNumber, i) = C(lineNumber, i - 1) * (lineNumber - i + 1) / i
         * 所以C(lineNumber, i)可以从C(lineNumber, i - 1)时间上算出来O(1)
         */</span>
        currentLine<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>numberIdx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> currentLine<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numberIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> currentLine<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numberIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>lineNumber <span class="token operator">-</span> numberIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> numberIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> currentLine<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_PascalTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PascalTriangle</span> pascalTriangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PascalTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> currentLineMap <span class="token operator">=</span> pascalTriangle<span class="token punctuation">.</span><span class="token function">pascalTriangle</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>currentLineMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token number">252</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样我们可以得到一组杨辉三角数列了。</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2><ul><li>杨辉三角有哪些用途？</li><li>用代码实现下杨辉三角。—— 在LeetCode中也有这样的题目</li></ul>`,14);function x(_,y){const a=c("ExternalLinkIcon");return o(),l("div",null,[i,s("p",null,[n("作者：小傅哥 "),r,n("博客："),s("a",k,[n("https://bugstack.cn"),t(a)]),d,n("源码："),s("a",m,[n("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),b,s("p",null,[n("斐波那契数列出现在印度数学中，与梵文韵律有关。在梵语诗歌传统中，人们对列举所有持续时间为 2 单位的长 (L) 音节与 1 单位持续时间的短 (S) 音节并列的模式很感兴趣。关于更多斐波那契更多知识可以阅读小傅哥的："),s("a",h,[n("《程序员数学：斐波那契》—— 为什么不能用斐波那契散列，做数据库路由算法？"),t(a)])]),g,n(" - 杨辉三角每一行的数字加和，正好的2的0次方、1次方..n次方 "),v])}const w=e(u,[["render",x],["__file","2022-12-18-pascal-triangle.html.vue"]]);export{w as default};
