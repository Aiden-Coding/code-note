import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"数据结构-平衡二叉树-avl-tree",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-平衡二叉树-avl-tree","aria-hidden":"true"},"#"),s(" 数据结构：平衡二叉树 AVL Tree")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=430864533&bvid=BV1WG411g7Ub&cid=841753378&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=p('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>AVL树历史</code></p><p>在计算机科学中，AVL 树以其两位苏联发明家Georgy Adelson-Velsky和 Evgenii Landis的名字命名，他们在 1962 年的论文“信息组织算法”中发表了它。它是一种自平衡二叉搜索树(BST)，这是发明的第一个这样的数据结构。</p><h2 id="二、avl树数据结构" tabindex="-1"><a class="header-anchor" href="#二、avl树数据结构" aria-hidden="true">#</a> 二、AVL树数据结构</h2><p>AVL 自平衡二叉树的出现，其目的在于解决二叉搜索树退化成链表的问题。当我们向BST二叉搜索树顺序存入<code>1、2、3、4、5、6、7</code>个元素时，它会退化成一条链表，因而失去树查询的时间复杂度，所以我们需要AVL树平衡树高。如图所示</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-01.png?raw=true" width="500px"></div><p>那么AVL树是怎么平衡树高的呢？</p><p>当二叉树的左右分支树高差不为1时，需要进行左旋或者右旋，来调衡树高。这有点像开车的时候，如果车头偏左就往右打方向盘，车头偏右就往左打方向盘是一个道理。那这个方向盘(左旋、右旋)是怎么打的呢，主要分以下四种情况；</p><table><thead><tr><th style="text-align:left;">左旋（新增节点6）</th><th style="text-align:left;">右旋（新增节点1）</th><th style="text-align:left;">左旋+右旋（新增节点4）</th><th style="text-align:left;">右旋+左旋（新增节点3）</th></tr></thead><tbody><tr><td style="text-align:left;"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-02.png" alt=""></td><td style="text-align:left;"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-03.png" alt=""></td><td style="text-align:left;"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-04.png" alt=""></td><td style="text-align:left;"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-05.png" alt=""></td></tr><tr><td style="text-align:left;"><strong>条件</strong>：节点4，平衡因子为-2，左旋</td><td style="text-align:left;"><strong>条件</strong>：节点3，平衡因子为2，右旋</td><td style="text-align:left;"><strong>条件</strong>：节点5，平衡因子为2，右旋。但当节点2平衡因子-1先左旋。</td><td style="text-align:left;"><strong>条件</strong>：节点2，平衡因子为-2，左旋。但当节点5平衡因子1先右旋。</td></tr></tbody></table>',9),b=n("li",null,[n("p",null,"节点树高：以节点4为说明，最长的左右分支节点个数，就是节点4的最大树高。这里节点4左右孩子节点最长路径都为2，所以它的树高为2。同理可计算其他节点树高。")],-1),h=n("li",null,[n("p",null,"平衡因子：通过当前节点的左右子节点作差计算平衡因子，之后AVL树通过平衡因子，定义了什么时候进行左旋和右旋。")],-1),g={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree",target:"_blank",rel:"noopener noreferrer"},w=p(`<h2 id="三、avl树代码实现" tabindex="-1"><a class="header-anchor" href="#三、avl树代码实现" aria-hidden="true">#</a> 三、AVL树代码实现</h2><p>对于 AVL 树的实现与 BST 二叉搜索树相比，在树的节点定义上多了一个树高的属性。也有些AVL树使用的是平衡因子的属性，就是通过树高计算后的结果。树节点代码结构如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
    <span class="token comment">// AVL 树所需属性</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来小傅哥就分别通过代码讲解下一颗AVL树的左旋、右旋、左旋+右旋、右旋+左旋的代码操作。不要担心这没有多复杂，只要你能搞清楚左旋，就能搞清楚右旋。两旋弄懂组合就没啥难度了。</p>`,4),y={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree",target:"_blank",rel:"noopener noreferrer"},x={href:"https://visualgo.net/zh/bst?slide=1",target:"_blank",rel:"noopener noreferrer"},j=p(`<h3 id="_1-左旋" tabindex="-1"><a class="header-anchor" href="#_1-左旋" aria-hidden="true">#</a> 1. 左旋</h3><p>图解左旋操作；它就是一种摘链更换调整节点的处理过程，小傅哥把它分解展示，整个过程如下；</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-06.png?raw=true" width="500px"></div><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Node</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    temp<span class="token punctuation">.</span>parent <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
  
    node<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    temp<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>parent <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>左旋的作用，相当于通过向上迁移树高差大于1的右子节点来降低树高的操作。</li><li>通过节点4拿到父节点2和右子节点5，把父节点2和右子节点5建立关联</li><li>节点5的左子节点，相当于是大于4的那么一个值，只不过这里不体现。那么这个节点5的左子节点，应该被迁移到节点4的右子节点上。</li><li>整理节点5的关系，左子节点为4。左子节点4的父节点为5</li><li>如果说迁移上来的节点5无父节点，那么它就是父节点 root = temp</li><li>迁移上来的节点5，找到原节点4是对应父节点的左子节点还是右子节点，对应的设置节点5的左右位置</li></ol><h3 id="_2-右旋" tabindex="-1"><a class="header-anchor" href="#_2-右旋" aria-hidden="true">#</a> 2. 右旋</h3><p>图解右旋操作；它就是一种摘链更换调整节点的处理过程，小傅哥把它分解展示，整个过程如下；</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-07.png?raw=true" width="500px"></div><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Node</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    temp<span class="token punctuation">.</span>parent <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>left <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    temp<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>parent <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>右旋的作用，相当于通过向上迁移树高差大于1的右子节点来降低树高的操作。</li><li>通过节点3拿到父节点4和左子节点2，把父节点7和左子节点2建立关联</li><li>节点2的右子节点，相当于是大于2小于3的那么一个值，只不过这里不体现。那么这个节点2的右子节点，应该被迁移到节点3的左子节点上。</li><li>整理节点2的关系，右子节点为3。右子节点3的父节点为2</li><li>如果说迁移上来的节点2无父节点，那么它就是父节点 root = temp</li><li>迁移上来的节点2，找到原节点3是对应父节点的左子节点还是右子节点，对应的设置节点2的左右位置</li></ol><h3 id="_3-左旋-右旋" tabindex="-1"><a class="header-anchor" href="#_3-左旋-右旋" aria-hidden="true">#</a> 3. 左旋 + 右旋</h3><p>之所以会有左旋 + 右旋，是因为一次右旋操作没法平衡树高，而这种树的不平衡节点的左子节点的右子节点过长，所以要把不平衡节点的左子节点向左旋转一次，之后再进行右旋操作。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-08.png?raw=true" width="800px"></div><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">factor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> temp <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> temp <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>left <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    
    temp <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-右旋-左旋" tabindex="-1"><a class="header-anchor" href="#_4-右旋-左旋" aria-hidden="true">#</a> 4. 右旋 + 左旋</h3><p>之所以会有右旋 + 左旋，是因为一次左旋操作没法平衡树高，而这种树的不平衡节点的右子节点的左子节点过长，所以要把不平衡节点的右子节点向右旋转一次，之后再进行左旋操作。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-avl-09.png?raw=true" width="800px"></div><ul><li>fix：中间图为6</li></ul><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">factor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> temp <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> temp <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    
    temp <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refreshHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、avl树功能测试" tabindex="-1"><a class="header-anchor" href="#四、avl树功能测试" aria-hidden="true">#</a> 四、AVL树功能测试</h2><p>为了验证AVL树的实现正确与否，这里我们做一下随机节点的插入，如果它能一直保持平衡，那么它就是一颗可靠 AVL 平衡树。</p><p><strong>单元测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AVLTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入节点：<span class="token number">61</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">92</span>

                         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">96</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">95</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">92</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">87</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">84</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">82</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">75</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">70</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">69</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">69</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">65</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">61</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">56</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">55</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">53</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">50</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">42</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>       <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">38</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">34</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>                       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">28</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>               <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">24</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>               <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">22</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">18</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">11</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>       <span class="token operator">|</span>               \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">5</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">3</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
                 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                 <span class="token operator">|</span>       <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
                         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>


<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>随机插入30个节点，每个节点的顺序已经打印，经过AVL左右旋调衡后，二叉结构始终保持树高平衡因子不超过1，那么验证通过。</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2><ul><li>AVL 树平衡因子怎么计算？</li><li>AVL 树左旋操作的目的是什么？</li><li>AVL 树左旋操作的流程是什么？</li><li>AVL 树什么情况下要左旋+右旋？</li><li>AVL 树的插入和读取的时间复杂度？</li></ul>`,32);function L(V,A){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,m,v,n("ul",null,[b,h,n("li",null,[n("p",null,[s("源码地址："),n("a",g,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])])]),n("li",null,[n("p",null,[s("本章源码："),n("a",f,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree"),t(a)])])])]),w,n("ul",null,[n("li",null,[s("源码地址："),n("a",y,[s("https://github.com/fuzhengwei/java-algorithms"),t(a)])]),n("li",null,[s("本章源码："),n("a",_,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/stack"),t(a)])]),n("li",null,[s("动画演示："),n("a",x,[s("https://visualgo.net/zh/bst?slide=1"),t(a)]),s(" —— AVL树初次理解还是比较困难的，可以结合学习内容的同时做一些动画演示。")])]),j])}const z=e(i,[["render",L],["__file","2022-09-26-tree-avl.html.vue"]]);export{z as default};
