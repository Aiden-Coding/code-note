import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"asm字节码编程-用字节码增强技术给所有方法加上trycatch捕获异常并输出",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#asm字节码编程-用字节码增强技术给所有方法加上trycatch捕获异常并输出","aria-hidden":"true"},"#"),s(" ASM字节码编程 | 用字节码增强技术给所有方法加上TryCatch捕获异常并输出")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-asm-03-01.png" alt="深夜Diss，一级爱慕"></p><p>你开发的系统是裸奔的吗？深夜被老板 <strong>Diss</strong></p><p>一套系统是否稳定运行，取决于它的运行健康度，而这包括；调用量、可用率、影响时长以及服务器性能等各项指标的一个综合值。并且在系统出现异常问题时，可以抓取整个业务方法执行链路并输出；当时的入参、出参、异常信息等等。当然还包括一些JVM、Redis、Mysql的各项性能指标，以用于快速定位并解决问题。</p><p>那么要做到这样的事情有什么监控方案呢，这里面的做法比较多。比如；</p><ol><li>最简单粗暴的可能就是硬编码在方法中，收取执行耗时以及出入参和异常信息。但这样的成本实在太大，而且有一些不可预估的风险。</li><li>可以选择切面方式做一套统一监控的组件，相对来说还是好一些的。但也需要硬编码，同时维护成本不低。</li><li>市面上对于这样的监控其实是有整套的非入侵监控方案的，比如；Google Dapper、Zipkin等都可以实现，他们都是基于探针技术非入侵的采用字节码增强的方式进行监控。</li></ol><p><em>好</em>，那么这样非入侵的探针方式是怎么实现的呢？如何去做方法的<code>字节码增强</code>？</p><p>在字节码增强方面有三个框架；ASM、Javassist、ByteCode，各有优缺点按需选择。这在我们之前的字节码编程文章里也有所提到。</p><p>本文主要讲解关于 <code>ASM</code> 方式的字节码增强，接下来的案例会逐步讲解一个给方法添加 <code>TryCatch</code> 块，用于<em>采集异常信息以及正常的出参结果</em>的流程。</p><p>一步步向你展示通过指令码来改写你的方法！</p><h2 id="二、系统环境" tabindex="-1"><a class="header-anchor" href="#二、系统环境" aria-hidden="true">#</a> 二、系统环境</h2><ol><li>jdk1.8.0</li><li>asm-commons 6.2.1</li></ol><h2 id="三、技术目标" tabindex="-1"><a class="header-anchor" href="#三、技术目标" aria-hidden="true">#</a> 三、技术目标</h2><p>通过 <code>ASM</code> 字节码增强技术，使用指令码将方法修改为我们想要的效果。这部分原本需要使用 <code>JavaAgent</code> 技术，在工程启动加载时候进行修改字节码。这里为了将关于字节码核心内容展示出来，通过加载类名称获取字节码进行修改。</p><blockquote><p>这是修改之前的方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这是修改之后的方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> var2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MethodTest</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.test.MethodTest$Test.strToNumber&quot;</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> var2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MethodTest</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.test.MethodTest$Test.strToNumber&quot;</span><span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从修改前到修改后，可以看到。有如下几点修改；</p><ol><li>返回值赋值给新的参数，并做了输出</li><li>把方法包裹在一个 <code>TryCatch</code> 中，并将异常也做了输出</li></ol><p>好！如果你有很敏锐的嗅觉，或者很多小问号。那么你是否会想到如果使用到你自己的业务中，是不是就可以做一套非入侵的监控系统了？ <s>之后升职加薪</s></p><h2 id="四、实现过程" tabindex="-1"><a class="header-anchor" href="#四、实现过程" aria-hidden="true">#</a> 四、实现过程</h2><p>字节码增强的过程乍一看还是比较麻烦的，如果你没有阅读过JVM虚拟机规范等相关书籍，确实很不好理解。但是也就是这部分不那么容易理解的知识，才是你后续价值的体现。</p><p>接下来我会一步步的带着你通过字节码增强的方式，来实现我们的监控需求。最终的完整的代码，可以通过关注<strong>公众号</strong>：<code>bugstack虫洞栈</code> 回复<code>源码</code>获取。</p><h3 id="_1-搭建字节码框架" tabindex="-1"><a class="header-anchor" href="#_1-搭建字节码框架" aria-hidden="true">#</a> 1. 搭建字节码框架</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 字节码增强获取新的字节码
 */</span>
<span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>cr<span class="token punctuation">,</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">.</span><span class="token constant">COMPUTE_MAXS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassVisitor</span><span class="token punctuation">(</span><span class="token constant">ASM5</span><span class="token punctuation">,</span> cw<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> descriptor<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 方法过滤</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;strToNumber&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AdviceAdapter</span><span class="token punctuation">(</span><span class="token constant">ASM5</span><span class="token punctuation">,</span> mv<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                
                <span class="token comment">// 方法进入时修改字节码                                          </span>
                <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMethodEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
                 
                <span class="token comment">// 访问局部变量和操作数栈</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
                
                <span class="token comment">// 方法退出时修改字节码  </span>
                <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMethodExit</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">ClassReader</span><span class="token punctuation">.</span><span class="token constant">EXPAND_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这段代码就是 <code>ASM</code> 用于处理字节码增强的模版代码块。首先他会分别创建 <code>ClassReader</code>、<code>ClassWriter</code>，用于对类的加载和写入，这里的加载方式在构造方法中也提供的比较丰富。可以通过类名、字节码或者流的方式进行处理。</p><p>接下来是对方法的访问 <code>MethodVisitor</code> ，基本所有使用 <code>ASM</code> 技术的监控系统，都会在这里来实现字节码的注入。这里面目前用到了三个方法的，如下；</p><ol><li><code>onMethodEnter</code> 方法进入时设置一些基本内容，比如当前纳秒用于后续监控方法的执行耗时。还有就是一些 <code>Try</code> 块的开始。</li><li><code>visitMaxs</code> 这个是在方法结束前，用于添加 <code>Catch</code> 块。到这也就可以将整个方法进行包裹起来了。</li><li><code>onMethodExit</code> 最后是这个方法退出时，用于 <code>RETURN</code> 之前，可以注入结尾的字节码加强，比如调用外部方法输出监控信息。</li></ol><p>基本上所有的 <code>ASM</code> 字节码增强操作，都离不开这三个方法。下面我就一步步来用指令将方法改造。</p><h3 id="_2-获取方法返回值" tabindex="-1"><a class="header-anchor" href="#_2-获取方法返回值" aria-hidden="true">#</a> 2. 获取方法返回值</h3><p><strong>这是一个被测试的方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编写指令</strong></p><p>这个 <code>onMethodExit</code> 方法就是我们上面提到的字节码编写框架中的内容，在里面添加具体的字节码指令。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMethodExit</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">IRETURN</span> <span class="token operator">&lt;=</span> opcode <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> nextLocal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextLocal<span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> nextLocal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将栈顶引用类型值保存到局部变量indexbyte中。</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> nextLocal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从局部变量indexbyte中装载引用类型值入栈。</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>this.nextLocal</strong>，获取局部变量的索引值。这个值就让局部变量最后的值，也就是存放 <code>ARETURN</code> 的值(<em>ARETURN</em>，是返回对象类型，如果是返回 <code>int</code> 则需要使用 <em>IRETURN</em>)。</li><li><strong>ASTORE</strong>，将栈顶引用类型值保存到局部变量indexbyte中。这里就是把返回的结果，保存到局部变量。<em>在你头脑中可以想象这有两块区域，一个是局部变量、一个是操作数栈。他们不断的进行压栈和操作</em>。</li><li><strong>ALOAD</strong>，从局部变量indexbyte中装载引用类型值入栈。现在再将这个值放到操作数栈用，用于一会输出使用。</li></ol><p><strong>被初次增强后的方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> var2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> var2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先可以看到，原本的返回值被赋值到一个参数上，之后再由 <code>return</code> 将参数返回。这样也就可以让我们拿到了方法出参 <code>var2</code> 进行输出操作。</li></ul><h3 id="_3-输出方法返回值" tabindex="-1"><a class="header-anchor" href="#_3-输出方法返回值" aria-hidden="true">#</a> 3. 输出方法返回值</h3><p>在上面我们已经将返回内容赋值给参数，那么在 <code>return</code> 之前，我们就可以在添加一个方法来输出方法信息和出参了。</p><p><strong>定义输出结果方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Object</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;系统监控 :: [方法名称：&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot; 输出信息：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们使用字节码增强的方式来调用这个静态方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMethodExit</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">IRETURN</span> <span class="token operator">&lt;=</span> opcode <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        
        mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 类名.方法名</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> nextLocal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token function">getInternalName</span><span class="token punctuation">(</span><span class="token class-name">MethodTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;point&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;Ljava/lang/Object;)V&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>mv.visitLdcInsn(className + &quot;.&quot; + name);</strong>，常量池中的常量值（int, float, string reference, object reference）入栈。也就是我们把类名和方法名，写到常量池中。</li><li><strong>mv.visitVarInsn(ALOAD, nextLocal);</strong>，将上面我们提到的返回值加载到操作数栈。</li><li><strong>mv.visitMethodInsn(INVOKESTATIC, Type.getInternalName(MethodTest.class), &quot;point&quot;, &quot;(Ljava/lang/String;Ljava/lang/Object;)V&quot;, false);</strong>，调用静态方法。<code>INVOKESTATIC</code> 是调用指令，后面是方法的地址、方法名、方法描述。</li><li><code>(Ljava/lang/String;Ljava/lang/Object;)V</code>，表示 <code>String</code> 和 <code>Object</code> 类型的入参，<code>V</code> 是返回空。整体看也就是我们的方法；<code>void point(String methodName, Object response)</code></li></ol><p><strong>再次被增强后的方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token class-name">Integer</span> var2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">point</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.test.MethodTest.strToNumber&quot;</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> var2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在字节码增强后的方法，每次调用这个方法都会输出方法的名称和出参结果。可能还有一个问题就是，<em>如果抛异常了，那么就监控不到了！</em></li></ul><h3 id="_4-给方法加上trycatch" tabindex="-1"><a class="header-anchor" href="#_4-给方法加上trycatch" aria-hidden="true">#</a> 4. 给方法加上TryCatch</h3><p>如果需要抓住方法的异常信息并输出，那么就需要给原有的方法包上一层 <code>TryCatch</code> 捕获异常。接下来我们开始完成这样的指令码操作。</p><p><strong>添加 <code>TryCatch</code> 开始</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Label</span> from <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMethodEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//标志：try块开始位置</span>
    <span class="token function">visitLabel</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">visitTryCatchBlock</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>
            <span class="token keyword">to</span><span class="token punctuation">,</span>
            target<span class="token punctuation">,</span>
            <span class="token string">&quot;java/lang/Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <code>onMethodEnter()</code> 中，加入 <code>TryCatch</code> 开始块，在部分在 <code>ASM</code> 中固定的模式，按照需求添加即可。</li></ul><p><strong>添加 <code>TryCatch</code> 结尾</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//标志：try块结束</span>
    mv<span class="token punctuation">.</span><span class="token function">visitLabel</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//标志：catch块开始位置</span>
    mv<span class="token punctuation">.</span><span class="token function">visitLabel</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitFrame</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">F_SAME1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;java/lang/Exception&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token comment">// 异常信息保存到局部变量</span>
    <span class="token keyword">int</span> local <span class="token operator">=</span> <span class="token function">newLocal</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">LONG_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// 抛出异常</span>
    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ATHROW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span>maxStack<span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <code>visitMaxs</code> 方法中完成 <code>TryCatch</code> 的结尾，包住异常请抛出。</li><li><code>mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{&quot;java/lang/Exception&quot;});</code>，在指定方法操作数栈中将 <code>TryCatch</code> 处理完成。这里面的几个参数也可以动态拼装；局部变量、参数、栈、异常。</li><li><code>ASTORE</code>，将异常信息保存到局部变量，并使用指定 <code>ALOAD</code> 放到操作数栈，用于抛出。</li><li><code>ATHROW</code>，最后是抛出异常的指令，也就是 <code>throw var</code>;</li></ul><p><strong>这次增强后的方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> var2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">point</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.test.MethodTest.strToNumber&quot;</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> var2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这时离我们要的内容越来越近了，整个方法被包装到一个 <code>TryCatch</code> 中，并按照需要输出我们的信息。接下来就需要将异常信息，打印出来。</li></ul><h3 id="_5-输出异常信息" tabindex="-1"><a class="header-anchor" href="#_5-输出异常信息" aria-hidden="true">#</a> 5. 输出异常信息</h3><p>在我们使用 <code>ASM</code> 字节码增强后，已经可以将方法拓展的非常的适合于监控了。接下来我们定义一个静态方法，用于输出异常信息；</p><p><strong>定义输出异常方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;系统监控 :: [方法名称：&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot; 异常信息：&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的事情就很简单了，只需要在抛出异常的指令中，把调用外部方法的内容集成进去就可以了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// 输出信息</span>
    mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 类名.方法名</span>
    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token function">getInternalName</span><span class="token punctuation">(</span><span class="token class-name">MethodTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;point&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这一部分主要体现将异常信息进行输出，通过字节码指令来实现调用外部方法。</li><li><code>mv.visitLdcInsn</code>，加载常量。也就是类名和方法名。</li><li><code>ALOAD</code>，将异常信息加载到操作数栈用，用于输出。</li><li><code>INVOKESTATIC</code>，调用静态方法。调用方法除了这个指令外还有；<code>invokespecial</code>、<code>invokevirtual</code>、<code>invokeinterface</code>。</li></ul><p><strong>现在再看字节码增强后的方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">strToNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> var2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">point</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.test.MethodTest.strToNumber&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> var2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">point</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.test.MethodTest.strToNumber&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好！到这我们已经将这个方法彻底的通过字节码改造完成，可以非常方便的监控异常信息。对用外部输出的方法，后续可以通过 <code>MQ</code> 等机制推送出去，用于图表展示监控信息。</p><h2 id="五、测试验证" tabindex="-1"><a class="header-anchor" href="#五、测试验证" aria-hidden="true">#</a> 五、测试验证</h2><p>这是一个字符串转换成数字类型的方法，我们通过调用传输不同的参数进行验证。比如；数字类型字符串和非数字类型字符串。</p><p>另外这里是我们通过字节码增强的方式进行改造方法，改造后这个方法反馈给我们的仍然是字节码，所以需要使用到 <code>ClassLoader</code> 进行加载到执行。</p><p><strong>测试方法；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法字节码增强</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">MethodTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 输出方法新字节码</span>
    <span class="token function">outputClazz</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">MethodTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    

    <span class="token comment">// 测试方法</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.test.MethodTest&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Method</span> queryUserInfo <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;strToNumber&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            

    <span class="token comment">// 正确入参；测试验证结果输出</span>
    <span class="token class-name">Object</span> obj01 <span class="token operator">=</span> queryUserInfo<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;01 测试结果：&quot;</span> <span class="token operator">+</span> obj01<span class="token punctuation">)</span><span class="token punctuation">;</span>   

    <span class="token comment">// 异常入参；测试验证打印异常信息</span>
    <span class="token class-name">Object</span> obj02 <span class="token operator">=</span> queryUserInfo<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;02 测试结果：&quot;</span> <span class="token operator">+</span> obj02<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ASM</span>字节码增强后类输出路径：<span class="token operator">/</span><span class="token class-name">User</span><span class="token operator">/</span>itstack<span class="token operator">/</span>git<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token class-name">WormholePistachio</span><span class="token operator">/</span><span class="token constant">SQM</span><span class="token operator">/</span>target<span class="token operator">/</span>test<span class="token operator">-</span>classes<span class="token operator">/</span><span class="token class-name">MethodTestSQM</span><span class="token punctuation">.</span><span class="token keyword">class</span>

系统监控 <span class="token operator">::</span> <span class="token punctuation">[</span>方法名称：<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>MethodTest</span><span class="token punctuation">.</span>strToNumber 输出信息：<span class="token number">123</span><span class="token punctuation">]</span>

<span class="token number">01</span> 测试结果：<span class="token number">123</span>
系统监控 <span class="token operator">::</span> <span class="token punctuation">[</span>方法名称：<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>MethodTest</span><span class="token punctuation">.</span>strToNumber 异常信息：<span class="token class-name">For</span> input string<span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">]</span>         
    
<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-asm-03-02.gif" alt="ASM字节码增强，演示效果"></p><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2>`,81),v=n("li",null,[s("通过字节码指令控制代码的编写注入，是不是很酷？完成功能的同时，逐步也解了 "),n("code",null,"JVM虚拟机"),s(" 。至少不向以前那样只是去硬背一些理论，而是彻底的实践了。不要感觉这很难，嗯！")],-1),m=n("li",null,"在逐步的了解字节码编程后，你会在很多的场景领域中建设出高级的玩法。甚至去翻看源码也能更加容易阅读理解，并把这技巧复用给自己其他系统。",-1),b=n("code",null,"ASM",-1),g=n("code",null,"JVM虚拟机规范",-1),h={href:"http://asm.itstack.org/#/",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"七、彩蛋",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#七、彩蛋","aria-hidden":"true"},"#"),s(" 七、彩蛋")],-1),w=n("p",null,[s("最近将个人原创代码库资源整理出一份 "),n("code",null,"wiki"),s(" 文档，同时逐步将各类案例汇总集中，方便获取。")],-1),f=n("p",null,"本代码库是作者小傅哥多年从事一线互联网Java开发的学习历程技术汇总，旨在为大家提供一个清晰详细的学习教程，侧重点更倾向编写Java核心内容。如果本仓库能为您提供帮助，请给予支持(关注、点赞、分享，给个Star ✨)！",-1),T=n("strong",null,"链接",-1),j={href:"https://github.com/fuzhengwei/CodeGuide/wiki",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[n("img",{src:"https://bugstack.cn/assets/images/2020/itstack-demo-asm-03-03.png",alt:"CodeGuide Wiki，程序员编码指南"})],-1);function q(M,S){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),d,n("ul",null,[v,m,n("li",null,[s("比如我们常用的非入侵的监控系统，全链路监控，以及一些反射框架中，其实都用到了 "),b,s("，只是还没有注意到而已。最终多学习一些延申拓展的知识，关于这些技巧可以阅读 "),g,s("，也可以阅读ASM文档；"),n("a",h,[s("asm.itstack.org"),t(a)])])]),y,w,f,n("p",null,[T,s("："),n("a",j,[s("https://github.com/fuzhengwei/CodeGuide/wiki"),t(a)])]),x])}const I=p(i,[["render",q],["__file","2020-04-16-_ASMzijiemabiancheng_yongzijiemazengqiangjishugeisuoyoufangfajiashangTryCatchbuhuoyichangbingshuchu.html.vue"]]);export{I as default};
