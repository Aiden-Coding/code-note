import{_ as n,o as s,c as a,e as t}from"./app-3RcBQnkC.js";const p={},o=t(`<h1 id="_3-2-接口和组件" tabindex="-1"><a class="header-anchor" href="#_3-2-接口和组件" aria-hidden="true">#</a> 3.2 接口和组件</h1><h2 id="_3-2-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-2-1-介绍" aria-hidden="true">#</a> 3.2.1 介绍</h2><p>用于生成和转换已编译方法的 ASM API 是基于 MethodVisitor 抽象类的（见图 3.4），它由 ClassVisitor 的 visitMethod 方法返回。除了一些与注释和调试信息有关的方法之外（这些方法在下一章解释），这个类为每个字节代码指令类别定义了一个方法，其依据就是这些指令的参数个数和类型（这些类别并非对应于 3.1.2 节给出的类别）。这些方法必须按以下顺序调用（在 MethodVisitor 接口的 Javadoc 中还规定了其他一些约束条件）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>visitAnnotationDefault<span class="token operator">?</span>
<span class="token punctuation">(</span> visitAnnotation <span class="token operator">|</span> visitParameterAnnotation <span class="token operator">|</span> visitAttribute <span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">(</span> visitCode
<span class="token punctuation">(</span> visitTryCatchBlock <span class="token operator">|</span> visitLabel <span class="token operator">|</span> visitFrame <span class="token operator">|</span> visitXxxInsn <span class="token operator">|</span>
visitLocalVariable <span class="token operator">|</span> visitLineNumber <span class="token punctuation">)</span><span class="token operator">*</span>
visitMaxs <span class="token punctuation">)</span><span class="token operator">?</span>
visitEnd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就意味着，对于非抽象方法，如果存在注释和属性的话，必须首先访问它们，然后是该方法的字节代码。对于这些方法，其代码必须按<strong>顺序</strong>访问，位于对 <strong>visitCode</strong> 的调用（有且仅有一个调用）与对 <strong>visitMaxs</strong> 的调用（有且仅有一个调用）之间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span> <span class="token comment">// public accessors ommited MethodVisitor(int api);</span>
    <span class="token class-name">MethodVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotationDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitParameterAnnotation</span><span class="token punctuation">(</span><span class="token keyword">int</span> parameter<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitAttribute</span><span class="token punctuation">(</span><span class="token class-name">Attribute</span> attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitFrame</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> nLocal<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> local<span class="token punctuation">,</span> <span class="token keyword">int</span> nStack<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitIntInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token keyword">int</span> operand<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitTypeInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opc<span class="token punctuation">,</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opc<span class="token punctuation">,</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitInvokeDynamicInsn</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">Handle</span> bsm<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bsmArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitJumpInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token class-name">Label</span> label<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitLabel</span><span class="token punctuation">(</span><span class="token class-name">Label</span> label<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token class-name">Object</span> cst<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitIincInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token keyword">int</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitTableSwitchInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token class-name">Label</span> dflt<span class="token punctuation">,</span> <span class="token class-name">Label</span><span class="token punctuation">[</span><span class="token punctuation">]</span> labels<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitLookupSwitchInsn</span><span class="token punctuation">(</span><span class="token class-name">Label</span> dflt<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">,</span> <span class="token class-name">Label</span><span class="token punctuation">[</span><span class="token punctuation">]</span> labels<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitMultiANewArrayInsn</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token keyword">int</span> dims<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitTryCatchBlock</span><span class="token punctuation">(</span><span class="token class-name">Label</span> start<span class="token punctuation">,</span> <span class="token class-name">Label</span> end<span class="token punctuation">,</span> <span class="token class-name">Label</span> handler<span class="token punctuation">,</span> <span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitLocalVariable</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">Label</span> start<span class="token punctuation">,</span> <span class="token class-name">Label</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitLineNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token class-name">Label</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是，<strong>visitCode</strong> 和 <strong>visitMaxs</strong> 方法可用于检测该方法的字节代码在一个事件序列中的开始与结束。和类的情况一样，visitEnd 方法也必须在最后调用，用于检测一个方法在一个事件序列中的结束。</p><p>可以将 ClassVisitor 和 MethodVisitor 类合并，生成完整的类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassVisitor</span> cv <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodVisitor</span> mv1 <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&quot;m1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv1<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv1<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
mv1<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mv1<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodVisitor</span> mv2 <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&quot;m2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv2<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv2<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
mv2<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mv2<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，并不一定要在完成一个方法之后才能开始访问另一个方法。事实上，MethodVisitor实例是完全独立的，可按任意顺序使用（只要还没有调用 cv.visitEnd()）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassVisitor</span> cv <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodVisitor</span> mv1 <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&quot;m1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv1<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv1<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">MethodVisitor</span> mv2 <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&quot;m2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv2<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv2<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
mv1<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mv1<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
mv2<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mv2<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ASM 提供了三个基于 MethodVisitor API 的核心组件，用于生成和转换方法：</p><ul><li>ClassReader 类分析已编译方法的内容，在其 accept 方法的参数中传送了 ClassVisitor ， ClassReader 类将针 对 这一 ClassVisitor 返回的 MethodVisitor 对象调用相应方法。</li><li>ClassWriter 的 visitMethod 方法返回 MethodVisitor 接口的一个实现，它直接以二进制形式生成已编译方法。</li><li>MethodVisitor 类将它接收到的所有方法调用委托给另一个MethodVisitor 方法。可以将它看作一个事件筛选器。</li></ul><ol><li>ClassWriter 选项</li></ol><p>在 3.1.5 节已经看到，为一个方法计算栈映射帧并不是非常容易：必须计算所有帧，找出与跳转目标相对应的帧，或者跳在无条件跳转之后的帧，最后压缩剩余帧。与此类似，为一个方法计算局部变量与操作数栈部分的大小要容易一些，但依然算不上非常容易。</p><p>幸好 ASM 能为我们完成这一计算。在创建 ClassWriter 时，可以指定必须自动计算哪些内容：</p><ul><li>在使用 new ClassWriter(0)时，不会自动计算任何东西。必须自行计算帧、局部变量与操作数栈的大小。</li><li>在使用 new ClassWriter(ClassWriter.COMPUTE_MAXS)时，将为你计算局部变量与操作数栈部分的大小。还是必须调用 visitMaxs，但可以使用任何参数：它们将被忽略并重新计算。使用这一选项时，仍然必须自行计算这些帧。</li><li>在 new ClassWriter(ClassWriter.COMPUTE_FRAMES)时，一切都是自动计算。不再需要调用 visitFrame，但仍然必须调用 visitMaxs（参数将被忽略并重新计算）。</li></ul><p>这些选项的使用很方便，但有一个代价：COMPUTE_MAXS 选项使 ClassWriter 的速度降低 10%，而使用 COMPUTE_FRAMES 选项则使其降低一半。这必须与我们自行计算时所耗费的时间进行比较：在特定情况下，经常会存在一些比 ASM 所用算法更容易、更快速的计算方法，但 ASM 使用的算法必须能够处理所有情况。</p><p>注意，如果选择自行计算这些帧，可以让 ClassWriter 为你执行压缩步骤。为此，只需要用 visitFrame(F_NEW, nLocals, locals, nStack, stack)访问未压缩帧，其中的 nLocals 和 nStack 是局部变量的个数和操作数栈的大小，locals 和 stack 是包含相应类型的数组（更多细节请参阅 Javadoc）。</p><p>还要注意，为了自动计算帧，有时需要计算两个给定类的公共超类。默认情况下， ClassWriter 类会在 getCommonSuperClass 方法中进行这一计算，它会将两个类加载到 JVM 中，并使用反射 API。如果我们正在生成几个相互引用的类，那可能会导致问题，因为被引用的类可能尚未存在。在这种情况下，可以重写 getCommonSuperClass 方法来解决这一问题。</p><h2 id="_3-2-2-生成方法" tabindex="-1"><a class="header-anchor" href="#_3-2-2-生成方法" aria-hidden="true">#</a> 3.2.2 生成方法</h2><p>如果 mv 是一个 MethodVisitor，则 3.1.3 节定义的 getF 方法的字节代码可以用以下方法调用生成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mv<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETFIELD</span><span class="token punctuation">,</span> <span class="token string">&quot;pkg/Bean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">IRETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个调用启动字节代码的生成过程。然后是三个调用，生成这一方法的三条指令（可以看出，字节代码与 ASM API 之间的映射非常简单）。对 visitMaxs 的调用必须在已经访问了所有这些指令后执行。它用于为这个方法的执行帧定义局部变量和操作数栈部分的大小。在 3.1.3 节 可以看出，这些大小为每部分 1 个槽，最后一次调用用于结束此方法的生成过程。</p><p>setF 方法和构造器的字节代码可以用一种类似方法生成。一个更有意义的示例是 checkAndSetF 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mv<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Label</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitJumpInsn</span><span class="token punctuation">(</span><span class="token constant">IFLT</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTFIELD</span><span class="token punctuation">,</span> <span class="token string">&quot;pkg/Bean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Label</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitJumpInsn</span><span class="token punctuation">(</span><span class="token constant">GOTO</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitFrame</span><span class="token punctuation">(</span><span class="token constant">F_SAME</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span><span class="token constant">NEW</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/IllegalArgumentException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">DUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESPECIAL</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/IllegalArgumentException&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;init&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()V&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ATHROW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitLabel</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitFrame</span><span class="token punctuation">(</span><span class="token constant">F_SAME</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
mv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <strong>visitCode</strong> 和 <strong>visitEnd</strong> 调用之间，可以看到恰好映射到 3.1.5 节末尾所示字节代码的方法调用：每条指令、标记或帧分别有个调用（仅有的例外是 label 和 end Label 对象的声明和构造）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：Label 对象规定了跟在这一标记的 visitLabel 之后的指令。例如，end 规定了 RETURN 指令， 而不是随后马上要访问的帧，因为它不是一条指令。用几条标记指定同一指令是完全合法的，但一个标记只能恰好指定一条指令。换句话说，有可能用不同标记对 visitLabel 进行连续调用，但一条指令中的一个标记则必须用 visitLabel 恰好访问一次。最后一条约束是，标记不能共享，每个方法都必须拥有自己的标记。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-2-3-转换方法" tabindex="-1"><a class="header-anchor" href="#_3-2-3-转换方法" aria-hidden="true">#</a> 3.2.3 转换方法</h2><p>你现在应当已经猜到，方法可以像类一样进行转换，也就是使用一个方法适配器将它收到的方法调用转发出去，并进行一些修改：改变参数可用于改变各具体指令；不转发某一收到的调用将删除一条指令；在接收到的调用之间插入调用，将增加新的指令。MethodVisitor 类提供了这样一种方法适配器的基本实现，它只是转发它接收到的所有方法，而未做任何其他事情。</p><p>为了理解可以如何使用方法适配器，让我们考虑一种非常简单的适配器，删除方法中的 NOP 指令（因为它们不做任何事情，所以删除它们没有任何问题）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveNopAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">RemoveNopAdapter</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">!=</span> <span class="token constant">NOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个适配器可以在一个类适配器内部使用，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveNopClassAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">RemoveNopClassAdapter</span><span class="token punctuation">(</span><span class="token class-name">ClassVisitor</span> cv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">;</span>
        mv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoveNopAdapter</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换言之，类适配器只是构造一个方法适配器（封装链中下一个类访问器返回的方法访问器），并返回这个适配器。其效果就是构造了一个类似于类适配器链的方法适配器链（见图 3.5）。</p><p><img src="http://asm.itstack.org/assets/img/2020/3.1-4.png" alt="图 3.5 RemoveNopAdapter 的程序图"></p><p>但注意，这种相似性并非强制的：完全有可能构造一个与类适配器链不相似的方法适配器链。每种方法甚至还可以有一个不同的方法适配器链。例如，类适配器可以选择仅删除方法中的 NOP， 而不移除构造器中的该指令。可以执行如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mv<span class="token operator">=</span>cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span>name<span class="token punctuation">,</span>desc<span class="token punctuation">,</span>signature<span class="token punctuation">,</span>exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;init&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    mv  <span class="token keyword">new</span> <span class="token class-name">RemoveNopAdapter</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，构造器的适配器链更短一些。与之相反，构造器的适配器链也可以更长一些， 在 visitMethod 内部创建几个链接在一起的适配器。方法适配器链的拓扑结构甚至都可以不同于类适配器。例如，类适配器可能是线性的，而方法适配器链具有分支：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MethodVisitor</span> mv1<span class="token punctuation">,</span> mv2<span class="token punctuation">;</span>
    mv1 <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv2 <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MultiMethodAdapter</span><span class="token punctuation">(</span>mv1<span class="token punctuation">,</span> mv2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在已经明白了如何使用方法适配器，将它们合并在一个类适配器内部，现在就来看看如何实现一个比 RemoveNopAdapter 更有意义的适配器。</p><h2 id="_3-2-4-无状态转换" tabindex="-1"><a class="header-anchor" href="#_3-2-4-无状态转换" aria-hidden="true">#</a> 3.2.4 无状态转换</h2><p>假设我们需要测量一个程序中的每个类所花费的时间。我们需要在每个类中添加一个静态计时器字段，并需要将这个类中每个方法的执行时间添加到这个计时器字段中。换句话说，有这样一个类 C：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> 
    <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望将它转换为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> timer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        timer <span class="token operator">-=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer <span class="token operator">+=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了了解可以如何在 ASM 中实现它，可以编译这两个类，并针对这两个版本比较 TraceClassVisitor 的输出（或者是使用默认的 Textifier 后端，或者是使用 ASMifier 后端）。使用默认后端时，得到下面的差异之处（以粗体表示）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">GETSTATIC</span> <span class="token class-name">C</span><span class="token punctuation">.</span>timer <span class="token operator">:</span> <span class="token class-name">J</span>
<span class="token constant">INVOKESTATIC</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">J</span> <span class="token constant">LSUB</span>
<span class="token constant">PUTSTATIC</span> <span class="token class-name">C</span><span class="token punctuation">.</span>timer <span class="token operator">:</span> <span class="token class-name">J</span>
<span class="token constant">LDC</span> <span class="token number">100</span>
<span class="token constant">INVOKESTATIC</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">J</span><span class="token punctuation">)</span><span class="token class-name">V</span>
<span class="token constant">GETSTATIC</span> <span class="token class-name">C</span><span class="token punctuation">.</span>timer <span class="token operator">:</span> <span class="token class-name">J</span>
<span class="token constant">INVOKESTATIC</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">J</span> <span class="token constant">LADD</span>
<span class="token constant">PUTSTATIC</span> <span class="token class-name">C</span><span class="token punctuation">.</span>timer <span class="token operator">:</span> <span class="token class-name">J</span>
<span class="token class-name">RETURN</span> <span class="token constant">MAXSTACK</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token constant">MAXLOCALS</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们必须在方法的开头增加四条指令，在返回指令之前添加四条其他指令。还需要更新操作数栈的最大尺寸。此方法代码的开头部分用 visitCode 方法访问。因此，可以通过重写方法适配器的这一方法，添加前四条指令：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mv<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LSUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的 owner 必须被设定为所转换类的名字。现在必须在任意 RETURN 之前添加其他四条指令，还要在任何 xRETURN 或 ATHROW 之前添加，它们都是终止该方法执行过程的指令。这些指令没有任何参数，因此在 visitInsn 方法中访问。于是，可以重写这一方法，以增加指令：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opcode <span class="token operator">&gt;=</span> <span class="token constant">IRETURN</span> <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LADD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，必须更新操作数栈的最大大小。我们添加的指令压入两个 long 值，因此需要操作数 栈中的四个槽。在此方法的开头，操作数栈初始为空，所以我们知道在开头添加的四条指令需要一个大小为 4 的栈。还知道所插入的代码不会改变栈的状态（因为它弹出的值的数目与压入的数目相同）。因此，如果原代码需要一个大小为 s 的栈，那转换后的方法所需栈的最大大小为 max(4, s)。遗憾的是，我们还在返回指令前面添加了四条指令，我们并不知道操作数栈恰在执行这些指令之前时的大小。只知道它小于或等于 s。因此，我们只能说，在返回指令之前添加的代码可能要求操作数栈的大小达到 s+4。这种最糟情景在实际中很少发生：使用常见编译器时，RETURN 之前的操作数栈仅包含返回值，即，它的大小最多为 0、1 或 2。但如果希望处理所有可能情景， 那就需要考虑最糟情景。①必须重写 visitMaxs 方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span>maxStack <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以不需要为最大栈大小操心，而是依赖 COMPUTE_MAXS 选项，此外，它会计算最优值，而不是最差情景中的值。但对于这种简单的转换，以人工更新 maxStack 并不需要花费太多精力。</p><p>现在就出现一个很有意义的问题：栈映射帧怎么样呢？原代码不包含任何帧，转换后的代码也没有包含，但这是因为我们用作示例的特定代码造成的吗？是否在某些情况下必须更新帧呢？ 答案是否定的，因为 1)插入的代码并没有改变操作数栈，2) 插入代码中没有包含跳转指令，3) 原代码的跳转指令（或者更正式地说，是控制流图）没有被修改。这意味着原帧没有发生变化，而且不需要为插入代码存储新帧，所以压缩后的原帧也没有发生变化。</p><p>现在可以将所有元素一起放入相关联的 <strong>ClassVisitor</strong> 和 <strong>MethodVisitor</strong> 子类中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddTimerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> owner<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isInterface<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddTimerAdapter</span><span class="token punctuation">(</span><span class="token class-name">ClassVisitor</span> cv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">int</span> version<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span> superName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> superName<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
        owner <span class="token operator">=</span> name<span class="token punctuation">;</span>
        isInterface <span class="token operator">=</span> <span class="token punctuation">(</span>access <span class="token operator">&amp;</span> <span class="token constant">ACC_INTERFACE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isInterface <span class="token operator">&amp;&amp;</span> mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;init&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddTimerMethodAdapter</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">FieldVisitor</span> fv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitField</span><span class="token punctuation">(</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_STATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">AddTimerMethodAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">AddTimerMethodAdapter</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LSUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opcode <span class="token operator">&gt;=</span> <span class="token constant">IRETURN</span> <span class="token operator">&amp;&amp;</span> opcode <span class="token operator">&lt;=</span> <span class="token constant">RETURN</span><span class="token punctuation">)</span> <span class="token operator">||</span> opcode <span class="token operator">==</span> <span class="token constant">ATHROW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;currentTimeMillis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">LADD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">PUTSTATIC</span><span class="token punctuation">,</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span>maxStack <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>① 幸好，并不一定要给出最优操作数栈大小。有可能给出任何大于或等于这个最优值的值，尽管这样可能会浪费该线程执行栈上的内存。</em></p><p>这个类适配器用于实例化方法适配器（构造器除外），还用于添加计时器字段，并将被转换的类的名字存储在一个可以由方法适配器访问的字段中。</p><h2 id="_3-2-5-有状态转换" tabindex="-1"><a class="header-anchor" href="#_3-2-5-有状态转换" aria-hidden="true">#</a> 3.2.5 有状态转换</h2><p>上一节看到的转换是局部的，不会依赖于在当前指令之前访问的指令：在开头添加的代码总是相同的，而且总会被添加，对于在每个 <strong>RETURN</strong> 指令之前添加的代码也是如此。这种转换称为<strong>无状态</strong>转换。它们的实现很简单，但只有最简单的转换具有这一性质。</p><p>更复杂的转换需要记忆在当前指令之前已访问指令的状态。例如，考虑这样一个转换，它将删除所有出现的 ICONST_0 IADD 序列，这个序列的操作就是加入 0，没有什么实际效果。显然， 在访问一条 IADD 指令时，只有当上一条被访问的指令是 <strong>ICONST_0</strong> 时，才必须删除该指令。这就要求在方法适配器中存储状态。因此，这种转换被称为<strong>有状态</strong>转换。</p><p>让我们更仔细地研究一下这个例子。在访问 <strong>ICONST_0</strong> 时，只有当下一条指令是 <strong>IADD</strong> 时才必须将其删除。问题是，下一条指令还是未知的。解决方法是将是否删除它的决定推迟到下一条指令：如果下一指令是 <strong>IADD</strong>，则删除两条指令，否则，发出 <strong>ICONST_0</strong> 和当前指令。</p><p>要实现一些删除或替代某一指令序列的转换，比较方便的做法是引入一个 <strong>MethodVisitor</strong> 子类，它的 <strong>visitXxx Insn</strong> 方法调用一个公用的 <strong>visitInsn()</strong> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PatternMethodAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">SEEN_NOTHING</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PatternMethodAdapter</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Overrid</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitIntInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token keyword">int</span> operand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitIntInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> operand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，上述转换可实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveAddZeroAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">PatternMethodAdapter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">SEEN_ICONST_0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveAddZeroAdapter</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">SEEN_ICONST_0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">IADD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                state <span class="token operator">=</span> <span class="token constant">SEEN_NOTHING</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">ICONST_0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            state <span class="token operator">=</span> <span class="token constant">SEEN_ICONST_0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">SEEN_ICONST_0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ICONST_0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        state <span class="token operator">=</span> <span class="token constant">SEEN_NOTHING</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>visitInsn(int)</strong> 方法首先判断是否已经检测到该序列。在这种情况下，它重新初始化 <strong>state</strong>，并立即返回，其效果就是删除该序列。在其他情况下，它会调用公用的 <strong>visitInsn</strong> 方法，如果 <strong>ICONST_0</strong> 是最后一条被访问序列，它就会发出该指令。于是，如果当前指令是 <strong>ICONST_0</strong>，它会记住这个事实并返回，延迟关于这一指令的决定。在所有其他情况下，当前指令都被转发到下一访问器。</p><ol><li>标记和帧</li></ol><p>在前几节已经看到，对标记和帧的访问是恰在它们的相关指令之前进行。换句话说，尽管它们本身并不是指令，但它们是与指令同时受到访问的。这对于检测指令序列的转换会有影响，但这一影响实际上是一种优势。事实上，如果删除的指令之一是一条跳转指令的目标，会发生什么情况呢？如果某一指令可能跳转到 ICONST_0，这意味着有一个指定这一指令的标记。在删除了这两条指令后，这个标记将指向跟在被删除 IADD 之后的指令，这正是我们希望的。但如果某一指令可能跳转到 IADD，我们就不能删除这个指令序列（不能确保在这一跳转之前， 已经在栈中压入了一个 0）。幸好，在这种情况下，<strong>ICONST_0</strong> 和 <strong>IADD</strong> 之间必然有一个标记，可以很轻松地检测到它。</p><p>这一推理过程对于栈映射帧是一样的：如果访问介于两条指令之间的一个栈映射帧，那就不能删除它们。要处理这两种情况，可以将标记和帧看作是模型匹配算法中的指令。这一点可以在 PatternMethodAdapter 中完成（注意，visitMaxs 也会调用公用的 visitInsn 方法；它用于处理的情景是：方法的末尾是必须被检测序列的一个前缀）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PatternMethodAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitFrame</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> nLocal<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> local<span class="token punctuation">,</span> <span class="token keyword">int</span> nStack<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFrame</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> nLocal<span class="token punctuation">,</span> local<span class="token punctuation">,</span> nStack<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitLabel</span><span class="token punctuation">(</span><span class="token class-name">Label</span> label<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxStack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span>maxStack<span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下一章将会看到，编译后的方法中可能包含有关源文件行号的信息，比如用于异常栈轨迹。这一信息用 <strong>visitLineNumber</strong> 方法访问，它也与指令同时被调用。但是，在一个指令序列的中间给出行号，对于转换或删除该指令的可能性不会产生任何影响。解决方法是在模式匹配算法中完全忽略它们。</p><ol start="2"><li>一个更复杂的例子</li></ol><p>上面的例子可以很轻松地推广到更复杂的指令序列。例如，考虑一个转换，它会删除对字段进行自我赋值的操作，这种操作通常是因为键入错误，比如 f = f;，或者是在字节代码中，<code>ALOAD 0</code> <code>ALOAD 0</code> <code>GETFIELD f</code> <code>PUTFIELD f</code>。在实现这一转换之前，最好是将状态机设计为能够识别这一序列（见图 3.6）。</p><p><img src="http://asm.itstack.org/assets/img/2020/3.1-5.png" alt="图 3.6 ALOAD 0 ALOAD 0 GETFIELD f PUTFIELD f 的状态机"></p><p>每个转换都标有一个条件（当前指令的值）和一个操作（必须发出的指令序列，以粗体表示）。例如，如果当前指令不是 ALOAD 0，则由 S1 转换到 S0。在这种情况下，导致进入这一状态的ALOAD 0 将被发出。注意从 S2 到其自身的转换：在发现三个或三个以上的连续 ALOAD 0 时会发生这一情况。在这种情况下，将停留在已经访问两个 ALOAD 0 的状态中，并发出第三个 ALOAD 0。找到状态机之后，相应方法适配器的编写就简单了。（8 种 Switch 情景对应于图中的 8 种转换）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">RemoveGetFieldPutFieldAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">PatternMethodAdapter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">SEEN_ALOAD_0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0GETFIELD</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fieldOwner<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fieldDesc<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveGetFieldPutFieldAdapter</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_NOTHING</span><span class="token operator">:</span> <span class="token comment">// S0 -&gt; S1</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">ALOAD</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">var</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    state <span class="token operator">=</span> <span class="token constant">SEEN_ALOAD_0</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_ALOAD_0</span><span class="token operator">:</span> <span class="token comment">// S1 -&gt; S2</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">ALOAD</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">var</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    state <span class="token operator">=</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0</span><span class="token operator">:</span> <span class="token comment">// S2 -&gt; S2</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">ALOAD</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">var</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0</span><span class="token operator">:</span> <span class="token comment">// S2 -&gt; S3</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">GETFIELD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    state <span class="token operator">=</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0GETFIELD</span><span class="token punctuation">;</span>
                    fieldOwner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
                    fieldName <span class="token operator">=</span> name<span class="token punctuation">;</span>
                    fieldDesc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0GETFIELD</span><span class="token operator">:</span> <span class="token comment">// S3 -&gt; S0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token constant">PUTFIELD</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    state <span class="token operator">=</span> <span class="token constant">SEEN_NOTHING</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_ALOAD_0</span><span class="token operator">:</span> <span class="token comment">// S1 -&gt; S0 mv.visitVarInsn(ALOAD, 0); break;</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0</span><span class="token operator">:</span> <span class="token comment">// S2 -&gt; S0</span>
                mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">SEEN_ALOAD_0ALOAD_0GETFIELD</span><span class="token operator">:</span> <span class="token comment">// S3 -&gt; S0</span>
                mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETFIELD</span><span class="token punctuation">,</span> fieldOwner<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> fieldDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        state <span class="token operator">=</span> <span class="token constant">SEEN_NOTHING</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，出于和 3.2.4 节中 <strong>AddTimerAdapter</strong> 同样的原因，本节给出的有状态转换也不需要转换栈映射帧：原帧在转换后仍然有效。它们甚至不需要转换局部变量和操作数栈大小。最后， 还必须注意，有状态转换并不限于检测和转换指令序列的转换。许多其他类型的转换也是有状态的。比如，下一节介绍的方法适配器就属于这种情景。</p>`,80),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","3.2jiekouhezujian.html.vue"]]);export{k as default};
