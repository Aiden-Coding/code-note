import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"数据库分库分表路由组件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据库分库分表路由组件","aria-hidden":"true"},"#"),s(" 数据库分库分表路由组件")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=911880460&bvid=BV1fM4y1e7xe&cid=1152400081&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=n("p",null,"本文的宗旨在于通过简单干净实践的方式教会读者，如何实现一个分库分表的路由组件。这里包括；AOP、路由散列算法、动态数据源切换等相关知识。",-1),b=n("p",null,"本文涉及的工程：",-1),g={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-db-router",target:"_blank",rel:"noopener noreferrer"},h=l(`<h2 id="一、需求分析" tabindex="-1"><a class="header-anchor" href="#一、需求分析" aria-hidden="true">#</a> 一、需求分析</h2><p><code>如果要做一个数据库路由，都需要做什么技术点？</code></p><p>首先我们要知道为什么要用分库分表，其实就是由于业务体量较大，数据增长较快，所以需要把用户数据拆分到不同的库表中去，减轻数据库压力。</p><p>分库分表操作主要有垂直拆分和水平拆分：</p><ul><li>垂直拆分：指按照业务将表进行分类，分布到不同的数据库上，这样也就将数据的压力分担到不同的库上面。最终一个数据库由很多表的构成，每个表对应着不同的业务，也就是专库专用。</li><li>水平拆分：如果垂直拆分后遇到单机瓶颈，可以使用水平拆分。相对于垂直拆分的区别是：垂直拆分是把不同的表拆到不同的数据库中，而水平拆分是把同一个表拆到不同的数据库中。如：user_001、user_002</li></ul><p>而本章节我们要实现的也是水平拆分的路由设计，如图 1-1</p><p><img src="https://bugstack.cn/assets/images/middleware/blog-4-1.png" alt="图 1-1"></p><p>那么，这样的一个数据库路由设计要包括哪些技术知识点呢？</p><ul><li>是关于 AOP 切面拦截的使用，这是因为需要给使用数据库路由的方法做上标记，便于处理分库分表逻辑。</li><li>数据源的切换操作，既然有分库那么就会涉及在多个数据源间进行链接切换，以便把数据分配给不同的数据库。</li><li>数据库表寻址操作，一条数据分配到哪个数据库，哪张表，都需要进行索引计算。在方法调用的过程中最终通过 ThreadLocal 记录。</li><li>为了能让数据均匀的分配到不同的库表中去，还需要考虑如何进行数据散列的操作，不能分库分表后，让数据都集中在某个库的某个表，这样就失去了分库分表的意义。</li></ul><p>综上，可以看到在数据库和表的数据结构下完成数据存放，我需要用到的技术包括：<code>AOP</code>、<code>数据源切换</code>、<code>散列算法</code>、<code>哈希寻址</code>、<code>ThreadLoca</code>l以及<code>SpringBoot的Starter开发方式</code>等技术。而像<code>哈希散列</code>、<code>寻址</code>、<code>数据存放</code>，其实这样的技术与 HashMap 有太多相似之处，<strong>那么学完源码造火箭的机会来了</strong> 如果你有过深入分析和学习过 HashMap 源码、Spring 源码、中间件开发，那么在设计这样的数据库路由组件时一定会有很多思路的出来。<em>接下来我们一起尝试下从源码学习到造火箭！</em></p><h2 id="二、技术调研" tabindex="-1"><a class="header-anchor" href="#二、技术调研" aria-hidden="true">#</a> 二、技术调研</h2><p>在 JDK 源码中，包含的数据结构设计有：数组、链表、队列、栈、红黑树，具体的实现有 ArrayList、LinkedList、Queue、Stack，而这些在数据存放都是顺序存储，并没有用到哈希索引的方式进行处理。而 HashMap、ThreadLocal，两个功能则用了哈希索引、散列算法以及在数据膨胀时候的拉链寻址和开放寻址，所以我们要分析和借鉴的也会集中在这两个功能上。</p><h3 id="_1-threadlocal" tabindex="-1"><a class="header-anchor" href="#_1-threadlocal" aria-hidden="true">#</a> 1. ThreadLocal</h3><p><img src="https://bugstack.cn/assets/images/middleware/blog-4-2.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_idx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hashCode <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">0x61c88647</span> <span class="token operator">+</span> <span class="token number">0x61c88647</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> hashCode <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;斐波那契散列：&quot;</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">&quot; 普通散列：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 

斐波那契散列：<span class="token number">7</span> 普通散列：<span class="token number">0</span>
斐波那契散列：<span class="token number">14</span> 普通散列：<span class="token number">1</span>
斐波那契散列：<span class="token number">5</span> 普通散列：<span class="token number">2</span>
斐波那契散列：<span class="token number">12</span> 普通散列：<span class="token number">3</span>
斐波那契散列：<span class="token number">3</span> 普通散列：<span class="token number">4</span>
斐波那契散列：<span class="token number">10</span> 普通散列：<span class="token number">5</span>
斐波那契散列：<span class="token number">1</span> 普通散列：<span class="token number">6</span>
斐波那契散列：<span class="token number">8</span> 普通散列：<span class="token number">7</span>
斐波那契散列：<span class="token number">15</span> 普通散列：<span class="token number">8</span>
斐波那契散列：<span class="token number">6</span> 普通散列：<span class="token number">9</span>
斐波那契散列：<span class="token number">13</span> 普通散列：<span class="token number">15</span>
斐波那契散列：<span class="token number">4</span> 普通散列：<span class="token number">0</span>
斐波那契散列：<span class="token number">11</span> 普通散列：<span class="token number">1</span>
斐波那契散列：<span class="token number">2</span> 普通散列：<span class="token number">2</span>
斐波那契散列：<span class="token number">9</span> 普通散列：<span class="token number">3</span>
斐波那契散列：<span class="token number">0</span> 普通散列：<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>数据结构</strong>：散列表的数组结构</li><li><strong>散列算法</strong>：斐波那契（Fibonacci）散列法</li><li><strong>寻址方式</strong>：Fibonacci 散列法可以让数据更加分散，在发生数据碰撞时进行开放寻址，从碰撞节点向后寻找位置进行存放元素。公式：<code>f(k) = ((k * 2654435769) &gt;&gt; X) &lt;&lt; Y对于常见的32位整数而言，也就是 f(k) = (k * 2654435769) &gt;&gt; 28 </code>，黄金分割点：<code>(√5 - 1) / 2 = 0.6180339887</code> <code>1.618:1 == 1:0.618</code></li><li><strong>学到什么</strong>：可以参考寻址方式和散列算法，但这种数据结构与要设计实现作用到数据库上的结构相差较大，不过 ThreadLocal 可以用于存放和传递数据索引信息。</li></ul><h3 id="_2-hashmap" tabindex="-1"><a class="header-anchor" href="#_2-hashmap" aria-hidden="true">#</a> 2. HashMap</h3><p><img src="https://bugstack.cn/assets/images/middleware/blog-4-3.png" alt=""></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">disturbHashIdx</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>数据结构</strong>：哈希桶数组 + 链表 + 红黑树</li><li><strong>散列算法</strong>：扰动函数、哈希索引，可以让数据更加散列的分布</li><li><strong>寻址方式</strong>：通过拉链寻址的方式解决数据碰撞，数据存放时会进行索引地址，遇到碰撞产生数据链表，在一定容量超过8个元素进行扩容或者树化。</li><li><strong>学到什么</strong>：可以把散列算法、寻址方式都运用到数据库路由的设计实现中，还有整个数组+链表的方式其实库+表的方式也有类似之处。</li></ul><h2 id="三、设计实现" tabindex="-1"><a class="header-anchor" href="#三、设计实现" aria-hidden="true">#</a> 三、设计实现</h2><h3 id="_1-定义路由注解" tabindex="-1"><a class="header-anchor" href="#_1-定义路由注解" aria-hidden="true">#</a> 1. 定义路由注解</h3><p><strong>定义</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DBRouter</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>

     <span class="token annotation punctuation">@DBRouter</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span>
     <span class="token class-name">User</span> <span class="token function">queryUserInfoByUserId</span><span class="token punctuation">(</span><span class="token class-name">User</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token annotation punctuation">@DBRouter</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span>
     <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先我们需要自定义一个注解，用于放置在需要被数据库路由的方法上。</li><li>它的使用方式是通过方法配置注解，就可以被我们指定的 AOP 切面进行拦截，拦截后进行相应的数据库路由计算和判断，并切换到相应的操作数据源上。</li></ul><h3 id="_2-解析路由配置" tabindex="-1"><a class="header-anchor" href="#_2-解析路由配置" aria-hidden="true">#</a> 2. 解析路由配置</h3><p><img src="https://bugstack.cn/assets/images/middleware/blog-4-4.png" alt=""></p><ul><li>以上就是我们实现完数据库路由组件后的一个数据源配置，在分库分表下的数据源使用中，都需要支持多数据源的信息配置，这样才能满足不同需求的扩展。</li><li>对于这种自定义较大的信息配置，就需要使用到 <code>org.springframework.context.EnvironmentAware</code> 接口，来获取配置文件并提取需要的配置信息。</li></ul><p><strong>数据源配置提取</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token string">&quot;router.jdbc.datasource.&quot;</span><span class="token punctuation">;</span>    

    dbCount <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;dbCount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tbCount <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;tbCount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    

    <span class="token class-name">String</span> dataSources <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dbInfo <span class="token operator">:</span> dataSources<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dataSourceProps <span class="token operator">=</span> <span class="token class-name">PropertyUtil</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> prefix <span class="token operator">+</span> dbInfo<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dbInfo<span class="token punctuation">,</span> dataSourceProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>prefix，是数据源配置的开头信息，你可以自定义需要的开头内容。</li><li>dbCount、tbCount、dataSources、dataSourceProps，都是对配置信息的提取，并存放到 dataSourceMap 中便于后续使用。</li></ul><h3 id="_3-数据源切换" tabindex="-1"><a class="header-anchor" href="#_3-数据源切换" aria-hidden="true">#</a> 3. 数据源切换</h3><p>在结合 SpringBoot 开发的 Starter 中，需要提供一个 DataSource 的实例化对象，那么这个对象我们就放在 DataSourceAutoConfig 来实现，并且这里提供的数据源是可以动态变换的，也就是支持动态切换数据源。</p><p><strong>创建数据源</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建数据源</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> targetDataSources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dbInfo <span class="token operator">:</span> dataSourceMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objMap <span class="token operator">=</span> dataSourceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dbInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        targetDataSources<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dbInfo<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span>objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>     

    <span class="token comment">// 设置数据源</span>
    <span class="token class-name">DynamicDataSource</span> dynamicDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dynamicDataSource<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>targetDataSources<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dynamicDataSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里是一个简化的创建案例，把基于从配置信息中读取到的数据源信息，进行实例化创建。</li><li>数据源创建完成后存放到 <code>DynamicDataSource</code> 中，它是一个继承了 AbstractRoutingDataSource 的实现类，这个类里可以存放和读取相应的具体调用的数据源信息。</li></ul><h3 id="_4-切面拦截" tabindex="-1"><a class="header-anchor" href="#_4-切面拦截" aria-hidden="true">#</a> 4. 切面拦截</h3><p>在 AOP 的切面拦截中需要完成；数据库路由计算、扰动函数加强散列、计算库表索引、设置到 ThreadLocal 传递数据源，整体案例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;aopPoint() &amp;&amp; @annotation(dbRouter)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doRouter</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">DBRouter</span> dbRouter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> dbKey <span class="token operator">=</span> dbRouter<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>dbKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;annotation DBRouter key is null！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算路由</span>
    <span class="token class-name">String</span> dbKeyAttr <span class="token operator">=</span> <span class="token function">getAttrValue</span><span class="token punctuation">(</span>dbKey<span class="token punctuation">,</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> dbRouterConfig<span class="token punctuation">.</span><span class="token function">getDbCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> dbRouterConfig<span class="token punctuation">.</span><span class="token function">getTbCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 扰动函数</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>dbKeyAttr<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>dbKeyAttr<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 库表索引</span>
    <span class="token keyword">int</span> dbIdx <span class="token operator">=</span> idx <span class="token operator">/</span> dbRouterConfig<span class="token punctuation">.</span><span class="token function">getTbCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tbIdx <span class="token operator">=</span> idx <span class="token operator">-</span> dbRouterConfig<span class="token punctuation">.</span><span class="token function">getTbCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>dbIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   

    <span class="token comment">// 设置到 ThreadLocal</span>
    <span class="token class-name">DBContextHolder</span><span class="token punctuation">.</span><span class="token function">setDBKey</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%02d&quot;</span><span class="token punctuation">,</span> dbIdx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DBContextHolder</span><span class="token punctuation">.</span><span class="token function">setTBKey</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%02d&quot;</span><span class="token punctuation">,</span> tbIdx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;数据库路由 method：{} dbIdx：{} tbIdx：{}&quot;</span><span class="token punctuation">,</span> <span class="token function">getMethod</span><span class="token punctuation">(</span>jp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dbIdx<span class="token punctuation">,</span> tbIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token comment">// 返回结果</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">DBContextHolder</span><span class="token punctuation">.</span><span class="token function">clearDBKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DBContextHolder</span><span class="token punctuation">.</span><span class="token function">clearTBKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>简化的核心逻辑实现代码如上，首先我们提取了库表乘积的数量，把它当成 HashMap 一样的长度进行使用。</li><li>接下来使用和 HashMap 一样的扰动函数逻辑，让数据分散的更加散列。</li><li>当计算完总长度上的一个索引位置后，还需要把这个位置折算到库表中，看看总体长度的索引因为落到哪个库哪个表。</li><li>最后是把这个计算的索引信息存放到 ThreadLocal 中，用于传递在方法调用过程中可以提取到索引信息。</li></ul><h2 id="四-测试验证" tabindex="-1"><a class="header-anchor" href="#四-测试验证" aria-hidden="true">#</a> 四. 测试验证</h2><h3 id="_1-库表创建" tabindex="-1"><a class="header-anchor" href="#_1-库表创建" aria-hidden="true">#</a> 1. 库表创建</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>create database \`bugstack_01\`<span class="token punctuation">;</span>
<span class="token constant">DROP</span> <span class="token class-name">TABLE</span> user_01<span class="token punctuation">;</span>
<span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> user_01 <span class="token punctuation">(</span> id bigint <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;自增ID&#39;</span><span class="token punctuation">,</span> userId <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户ID&#39;</span><span class="token punctuation">,</span> userNickName <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户昵称&#39;</span><span class="token punctuation">,</span> userHead <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户头像&#39;</span><span class="token punctuation">,</span> userPassword <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户密码&#39;</span><span class="token punctuation">,</span> createTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;创建时间&#39;</span><span class="token punctuation">,</span> updateTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;更新时间&#39;</span><span class="token punctuation">,</span> <span class="token class-name">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token constant">DROP</span> <span class="token class-name">TABLE</span> user_02<span class="token punctuation">;</span>
<span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> user_02 <span class="token punctuation">(</span> id bigint <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;自增ID&#39;</span><span class="token punctuation">,</span> userId <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户ID&#39;</span><span class="token punctuation">,</span> userNickName <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户昵称&#39;</span><span class="token punctuation">,</span> userHead <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户头像&#39;</span><span class="token punctuation">,</span> userPassword <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户密码&#39;</span><span class="token punctuation">,</span> createTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;创建时间&#39;</span><span class="token punctuation">,</span> updateTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;更新时间&#39;</span><span class="token punctuation">,</span> <span class="token class-name">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token constant">DROP</span> <span class="token class-name">TABLE</span> user_03<span class="token punctuation">;</span>
<span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> user_03 <span class="token punctuation">(</span> id bigint <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;自增ID&#39;</span><span class="token punctuation">,</span> userId <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户ID&#39;</span><span class="token punctuation">,</span> userNickName <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户昵称&#39;</span><span class="token punctuation">,</span> userHead <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户头像&#39;</span><span class="token punctuation">,</span> userPassword <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户密码&#39;</span><span class="token punctuation">,</span> createTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;创建时间&#39;</span><span class="token punctuation">,</span> updateTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;更新时间&#39;</span><span class="token punctuation">,</span> <span class="token class-name">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token constant">DROP</span> <span class="token class-name">TABLE</span> user_04<span class="token punctuation">;</span>
<span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> user_04 <span class="token punctuation">(</span> id bigint <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;自增ID&#39;</span><span class="token punctuation">,</span> userId <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户ID&#39;</span><span class="token punctuation">,</span> userNickName <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户昵称&#39;</span><span class="token punctuation">,</span> userHead <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户头像&#39;</span><span class="token punctuation">,</span> userPassword <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户密码&#39;</span><span class="token punctuation">,</span> createTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;创建时间&#39;</span><span class="token punctuation">,</span> updateTime datetime <span class="token constant">COMMENT</span> <span class="token char">&#39;更新时间&#39;</span><span class="token punctuation">,</span> <span class="token class-name">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建相同表结构的多个库存信息，bugstack_01、bugstack_02</li></ul><h3 id="_2-语句配置" tabindex="-1"><a class="header-anchor" href="#_2-语句配置" aria-hidden="true">#</a> 2. 语句配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;queryUserInfoByUserId&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;cn.bugstack.middleware.test.infrastructure.po.User&quot;</span>
        resultType<span class="token operator">=</span><span class="token string">&quot;cn.bugstack.middleware.test.infrastructure.po.User&quot;</span><span class="token operator">&gt;</span>
    <span class="token class-name">SELECT</span> id<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> userNickName<span class="token punctuation">,</span> userHead<span class="token punctuation">,</span> userPassword<span class="token punctuation">,</span> createTime
    <span class="token constant">FROM</span> user_$<span class="token punctuation">{</span>tbIdx<span class="token punctuation">}</span>
    where userId <span class="token operator">=</span> #<span class="token punctuation">{</span>userId<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>               

<span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">&quot;insertUser&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;cn.bugstack.middleware.test.infrastructure.po.User&quot;</span><span class="token operator">&gt;</span>
    insert into user_$<span class="token punctuation">{</span>tbIdx<span class="token punctuation">}</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> userNickName<span class="token punctuation">,</span> userHead<span class="token punctuation">,</span> userPassword<span class="token punctuation">,</span>createTime<span class="token punctuation">,</span> updateTime<span class="token punctuation">)</span>
    values <span class="token punctuation">(</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>userId<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>userNickName<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>userHead<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>userPassword<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 MyBatis 的语句使用上，唯一变化的需要在表名后面添加一个占位符，<code>\${tbIdx}</code> 用于写入当前的表ID。</li></ul><h3 id="_3-注解配置" tabindex="-1"><a class="header-anchor" href="#_3-注解配置" aria-hidden="true">#</a> 3. 注解配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DBRouter</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">User</span> <span class="token function">queryUserInfoByUserId</span><span class="token punctuation">(</span><span class="token class-name">User</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>   

<span class="token annotation punctuation">@DBRouter</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在需要使用分库分表的方法上添加注解，添加注解后这个方法就会被 AOP 切面管理。</li></ul><h3 id="_4-单元测试" tabindex="-1"><a class="header-anchor" href="#_4-单元测试" aria-hidden="true">#</a> 4. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">20.067</span>  <span class="token constant">INFO</span> <span class="token number">19900</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>db<span class="token punctuation">.</span>router<span class="token punctuation">.</span></span>DBRouterJoinPoint</span>        <span class="token operator">:</span> 数据库路由 method：queryUserInfoByUserId dbIdx：<span class="token number">2</span> tbIdx：<span class="token number">3</span>
<span class="token number">22</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">20.594</span>  <span class="token constant">INFO</span> <span class="token number">19900</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span>      <span class="token operator">:</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;createTime&quot;</span><span class="token operator">:</span><span class="token number">1615908803000</span><span class="token punctuation">,</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;01_50&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;980765512&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userNickName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userPassword&quot;</span><span class="token operator">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">}</span>
<span class="token number">22</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">20.620</span>  <span class="token constant">INFO</span> <span class="token number">19900</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>extShutdownHook<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>s<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolTaskExecutor</span>  <span class="token operator">:</span> <span class="token class-name">Shutting</span> down <span class="token class-name">ExecutorService</span> &#39;applicationTaskExecutor&#39;<span class="token number">1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上就是我们使用自己的数据库路由组件执行时的一个日志信息，可以看到这里包含了路由操作，在2库3表：<code>数据库路由 method：queryUserInfoByUserId dbIdx：2 tbIdx：3</code></li></ul>`,55);function f(T,y){const a=e("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),d,m,v,b,n("ul",null,[n("li",null,[s("xfg-dev-tech-db-router："),n("a",g,[s("https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-db-router"),t(a)])])]),h])}const E=p(u,[["render",f],["__file","db-router.html.vue"]]);export{E as default};
