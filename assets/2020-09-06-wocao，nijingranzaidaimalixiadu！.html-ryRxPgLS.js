import{_ as e,r as p,o,c,a as n,b as s,d as t,e as i}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"握草-你竟然在代码里下毒",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#握草-你竟然在代码里下毒","aria-hidden":"true"},"#"),s(" 握草，你竟然在代码里下毒！")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v={href:"https://mp.weixin.qq.com/s/q9goqjke-hTsx0_QSH_U1w",target:"_blank",rel:"noopener noreferrer"},m=i(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>学过的代码记不住？方式不对才记不住，你这么记！</code></p><ul><li><strong>Git</strong>：上厕所不叫上厕所，叫拉分支！</li><li><strong>Socket</strong>：厕所就是服务器，坑就是端口！</li><li><strong>队列</strong>：上厕所🚽叫入队列，先进先出！</li><li><strong>栈</strong>：去厨房🥣叫进栈，后进先出！</li><li><strong>架构</strong>：三居的格局叫MVC，四居的格局叫DDD！</li><li><strong>理论</strong>：系统结构设计定的好，有点bug没问题，能改。这就是茅坑跟坐便的区别。</li></ul><p><em>除了有点味道以外，这回是不记住了</em>，我们编程写代码的过程和我们日常生活的例子，往往都是这样可以对应上，有了真实可以触及的实物，再去了解编程就会更加容易，也很难忘记。<em>但可能会写着写着代码，就傻笑起来！</em></p><p>除了这些正能量学习的例子，我们接下来再看看哪些有毒的代码！</p><h2 id="二、代码有毒" tabindex="-1"><a class="header-anchor" href="#二、代码有毒" aria-hidden="true">#</a> 二、代码有毒！</h2><p><code>以下代码用好了升职加薪，用不好开除走人！</code></p><h3 id="_1-方法命名" tabindex="-1"><a class="header-anchor" href="#_1-方法命名" aria-hidden="true">#</a> 1. 方法命名</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryBitchUserInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐⭐⭐</li><li>解毒：小哥应该是想写批量查询用户的方法名，结果把<code>batch</code>(<em>批量</em>)，写成了<code>bitch</code>(<em>婊子</em>)</li><li>点评：接口是上午写的，人是下午走的！</li></ul><h3 id="_2-最佳排序" tabindex="-1"><a class="header-anchor" href="#_2-最佳排序" aria-hidden="true">#</a> 2. 最佳排序</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30000000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">40000000</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐⭐⭐</li><li>解毒：用数字休眠时常排序，谁醒来的时间早，谁就先输出。</li><li>点评：思路清奇，要不是这次排序等了一天，老板也不能踢他！</li></ul><h3 id="_3-有点烧脑" tabindex="-1"><a class="header-anchor" href="#_3-有点烧脑" aria-hidden="true">#</a> 3. 有点烧脑</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_idx_hashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;alderney&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;luminance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;chorology&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;carline&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;fluorosis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;angora&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;insititious&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;insincere&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;已实现服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;insincere&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;耗时(initialCapacity)：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><p>指数：⭐⭐⭐⭐⭐</p></li><li><p>解毒：这是一个定义<code>HashMap</code>存放业务实现key，通过key调用服务的功能。但这里的<code>key</code>，只有<code>insincere</code>有用，其他的都是未实现服务。那你看到有啥问题了吗？</p><ul><li>这点代码乍一看没什么问题，看明白了就是代码里下砒霜！<strong>它的目的就一个，要让所有的key成一个链表放到HashMap中，而且把有用的key放到链表的最后，增加get时的耗时！</strong></li><li>首先，<code>new HashMap&lt;&gt;(64);</code>为啥默认初始化64个长度？因为默认长度是8，插入元素时，当链表长度为8时候会进行扩容和链表树化判断，此时就会把原有的key散列了，不能让所有key构成一个时间复杂度较高的链表。</li><li>其次，所有的 <code>key</code> 都是刻意选出来的，因为他们在 <code>HashMap</code> 计算下标时，下标值都为0，idx = <code>(size - 1) &amp; (key.hashCode() ^ (key.hashCode() &gt;&gt;&gt; 16))</code>，这样就能让所有 <code>key</code> 都散列到同一个位置进行碰撞。<em>而且单词 <code>insincere</code> 的意思是；<code>不诚恳的、不真诚的</code>！</em></li><li>最后，前7个key其实都是废 <code>key</code>，不起任何作用，只有最后一个 key 有服务。那么这样就可以在HashMap中建出来很多这样耗时的碰撞链表，当然要满足<code>0.75</code>的负载因子，不要让HashMap扩容。</li><li>整体的效果如下图，key并没有均匀散列； <img src="https://bugstack.cn/assets/images/2020/interview/interview-all-00.png" alt=""></li></ul></li><li><p>点评：能写出这种代码就是薪资没给够，等着代码优化提加薪呢！</p></li></ul><h3 id="_4-迷之求和" tabindex="-1"><a class="header-anchor" href="#_4-迷之求和" aria-hidden="true">#</a> 4. 迷之求和</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐⭐</li><li>解毒：最终 <code>num</code> 结果为 0，<code>num++</code> 根本没起啥作用。因为后++，是先用结果，在++操作，不会给赋值。正确写法是：num = ++ num；</li><li>点评：这种错误就跟开车闯红灯似的，轻则扣分罚款，重则倾家荡产。</li></ul><h3 id="_5-花里胡哨" tabindex="-1"><a class="header-anchor" href="#_5-花里胡哨" aria-hidden="true">#</a> 5. 花里胡哨</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> result<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span><span class="token number">18</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        result<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        result<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐</li><li>解毒：代码可以运行，但是可以优化为<code>return age &gt; 18</code>。</li><li>点评：你们公司是按照代码行数打绩效？不做格式化、不整洁、不看IDEA工具提示，代码是写给人看的！啥有不是！</li></ul><h3 id="_6-数字判断" tabindex="-1"><a class="header-anchor" href="#_6-数字判断" aria-hidden="true">#</a> 6. 数字判断</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐⭐</li><li>解毒：判断是不是数字，不抛异常就是，抛异常就不是。这可以使用 <code>StringUtils</code> 工具包判断，也可以自己写正则判断。</li><li>点评：这代码真烧，用异常做业务。这不是把🍄蘑菇给狗狗吃吗！🐕狗狗没死你到是吃蘑菇呀，你吃狗粑粑。</li></ul><h3 id="_7-代码健壮" tabindex="-1"><a class="header-anchor" href="#_7-代码健壮" aria-hidden="true">#</a> 7. 代码健壮</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">neverStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//一直循环</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//业务处理流程</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//抓到异常，不处理、不打日志、就是不要停，继续跑</span>
            <span class="token keyword">continue</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐⭐⭐</li><li>解毒：把可能抛异常的代码用tryCatch包起来，一直跑，遇到异常也要跑。这个时候遇到异常，要做一些流程处理，最起码要打日志和报警。</li><li>点评：业务开发很多时候都是为了解决异常流程，就像<code>擦屁屁的纸80%的面积是保护手的。怎么滴，我看你这代码，是非要一直抠破呀！</code></li></ul><h3 id="_8-性能优化" tabindex="-1"><a class="header-anchor" href="#_8-性能优化" aria-hidden="true">#</a> 8. 性能优化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// APP首页查询，优化前</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryInitInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// APP首页查询，优化后</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryInitInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐⭐⭐</li><li>解毒：没啥解毒的，一公斤鹤顶红兑了一口口水！</li><li>点评：点评不了啦，抓到就开了吧！</li></ul><h3 id="_9-无用日志" tabindex="-1"><a class="header-anchor" href="#_9-无用日志" aria-hidden="true">#</a> 9. 无用日志</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 规则引擎校验</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">ruleEngine</span><span class="token punctuation">(</span><span class="token class-name">MatterReq</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 业务流程</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只打异常，不打入参信息</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐</li><li>解毒：日志里只打了异常，没有入参信息，当你的方法有大量的调用时，很难快速定位问题。</li><li>点评：下次记得把<code>产品经理</code>也打日志里去，要死一起死！</li></ul><h3 id="_10-耗时遍历" tabindex="-1"><a class="header-anchor" href="#_10-耗时遍历" aria-hidden="true">#</a> 10. 耗时遍历</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 初始化100万数据</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 遍历求和</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>指数：⭐⭐⭐⭐</li><li>解毒：乍一看可能觉得没什么问题，但是这个遍历求和会非常慢。主要因为链表的数据结构，每一次<code>list.get(i)</code>都是从链表的头开始查找，与<code>ArrayList</code>不同，<code>LinkedList</code>它时间复杂度是O(n)。那如果说你不知道对方传过来的是<code>LinkedList</code>还是<code>ArrayList</code>呢，其实可以通过<code>list instanceof RandomAccess</code> 进行判断。<code>ArrayList</code> 有随机访问的实现，<code>LinkedList</code> 是没有。同时也可以使用增强的for循环或者<code>Iterator</code>进行遍历。</li><li>点评： 根基不牢，地动山摇！一知半解，坑了老铁！</li></ul><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结" aria-hidden="true">#</a> 三、总结</h2><ul><li><em>好的代码千篇一律，差的程序升值加薪！</em>，这些有毒的代码，淋漓尽致的展示了程序员的才华出众，同时也严重怀疑就是钱给少了！</li><li><strong>敲黑板</strong>：想在这编码这条路上走的更远，还是需要脚踏实地的把根基打牢。所以非常推进你阅读以下系列专栏文章，夯实基础、拓展能力、提升眼界；Java核心突破瓶颈篇、重学Java设计模式篇</li><li><strong>好！</strong>，本篇文章就到这里，有意思的代码还有很多，欢迎在评论区留下你的鬼畜代码！</li></ul>`,50);function b(h,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)]),d,s("原文："),n("a",v,[s("https://mp.weixin.qq.com/s/q9goqjke-hTsx0_QSH_U1w"),t(a)])]),m])}const w=e(l,[["render",b],["__file","2020-09-06-wocao，nijingranzaidaimalixiadu！.html.vue"]]);export{w as default};
