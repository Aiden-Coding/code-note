import{_ as p,r as c,o,c as l,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战抽象工厂模式「替换redis双集群升级-代理类抽象场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战抽象工厂模式「替换redis双集群升级-代理类抽象场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战抽象工厂模式「替换Redis双集群升级，代理类抽象场景」")],-1),d=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=767337308&bvid=BV1ir4y1i7uf&cid=551397526&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),m=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>代码一把梭，兄弟来背锅。</code></p><p>大部分做开发的小伙伴初心都希望把代码写好，除了把编程当作工作以外他们还是具备工匠精神的从业者。但很多时候又很难让你把初心坚持下去，就像；接了个烂手的项目、产品功能要的急、个人能力不足，等等原因导致工程代码臃肿不堪，线上频出事故，最终离职走人。</p><p><code>看了很多书、学了很多知识，多线程能玩出花，可最后我还是写不好代码！</code></p><p>这就有点像家里装修完了买物件，我几十万的实木沙发，怎么放这里就不好看。同样代码写的不好并不一定是基础技术不足，也不一定是产品要得急 <code>怎么实现我不管明天上线</code>。而很多时候是我们对编码的经验的不足和对架构的把控能力不到位，我相信产品的第一个需求往往都不复杂，甚至所见所得。但如果你不考虑后续的是否会拓展，将来会在哪些模块继续添加功能，那么后续的代码就会随着你种下的第一颗恶性的种子开始蔓延。</p><p><code>学习设计模式的心得有哪些，怎么学才会用！</code></p><p>设计模式书籍，有点像考驾驶证的科一、家里装修时的手册、或者单身狗的恋爱宝典。但！你只要不实操，一定能搞的<strong>乱<code>码</code>七糟</strong>。因为这些指导思想都是从实际经验中提炼的，没有经过提炼的小白，很难驾驭这样的知识。所以在学习的过程中首先要有案例，之后再结合案例与自己实际的业务，尝试重构改造，慢慢体会其中的感受，从而也就学会了如果搭建出优秀的代码。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("strong",null,"公众号",-1),y={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"bugstack虫洞栈",-1),w=n("code",null,"源码下载",-1),_=t('<table><thead><tr><th>工程</th><th>描述</th></tr></thead><tbody><tr><td>itstack-demo-design-2-00</td><td>场景模拟工程，模拟出使用Redis升级为集群时类改造</td></tr><tr><td>itstack-demo-design-2-01</td><td>使用一坨代码实现业务需求，也是对ifelse的使用</td></tr><tr><td>itstack-demo-design-2-02</td><td>通过设计模式优化改造代码，产生对比性从而学习</td></tr></tbody></table><h2 id="三、抽象工厂模式介绍" tabindex="-1"><a class="header-anchor" href="#三、抽象工厂模式介绍" aria-hidden="true">#</a> 三、抽象工厂模式介绍</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-01.png" alt="抽象工厂模式，图片来自 refactoringguru.cn"></p>',3),x={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>抽象工厂模式与工厂方法模式虽然主要意图都是为了解决，<strong>接口选择</strong>问题。但在实现上，抽象工厂是一个中心工厂，创建其他工厂的模式。</p><p>可能在平常的业务开发中很少关注这样的设计模式或者类似的代码结构，但是这种场景确一直在我们身边，例如；</p><ol><li><p>不同系统内的回车换行</p><ol><li>Unix系统里，每行结尾只有 <strong>&lt;换行&gt;</strong>，即 <code>\\n</code>；</li><li>Windows系统里面，每行结尾是 <strong>&lt;换行&gt;&lt;回车&gt;</strong>，即 <code>\\n\\r</code>；</li><li>Mac系统里，每行结尾是 <strong>&lt;回车&gt;</strong></li></ol></li><li><p>IDEA 开发工具的差异展示(Win\\Mac)</p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-02.png" alt="不同系统下，IDEA 开发工具的展示差异点"></p></li></ol><p>**除了这样显而易见的例子外，我们的业务开发中时常也会遇到类似的问题，需要兼容做处理。**但大部分经验不足的开发人员，常常直接通过添加<code>ifelse</code>方式进行处理了。</p><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-03.png" alt="模拟企业级双套Redis集群升级"></p><p><code>很多时候初期业务的蛮荒发展，也会牵动着研发对系统的建设。</code></p><p>预估<code>QPS较低</code>、<code>系统压力较小</code>、<code>并发访问不大</code>、<code>近一年没有大动作</code>等等，在考虑时间投入成本的前提前，并不会投入特别多的人力去构建非常完善的系统。就像对 <code>Redis</code> 的使用，往往可能只要是单机的就可以满足现状。</p><p><code>不吹牛的讲百度首页我上学时候一天就能写完，等毕业工作了就算给我一年都完成不了！</code></p><p>但随着业务超过预期的快速发展，系统的负载能力也要随着跟上。原有的单机 <code>Redis</code> 已经满足不了系统需求。这时候就需要更换为更为健壮的Redis集群服务，虽然需要修改但是不能影响目前系统的运行，还要平滑过渡过去。</p><p>随着这次的升级，可以预见的问题会有；</p><ol><li>很多服务用到了Redis需要一起升级到集群。</li><li>需要兼容集群A和集群B，便于后续的灾备。</li><li>两套集群提供的接口和方法各有差异，需要做适配。</li><li>不能影响到目前正常运行的系统。</li></ol><h3 id="_1-场景模拟工程" tabindex="-1"><a class="header-anchor" href="#_1-场景模拟工程" aria-hidden="true">#</a> 1. 场景模拟工程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">00</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── matter
                │   ├── <span class="token constant">EGM</span><span class="token punctuation">.</span>java
                │   └── <span class="token constant">IIR</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>工程中的所有代码可以通过关注公众号：<code>bugstack虫洞栈</code>，回复<code>源码下载</code>进行获取。</em></p><h3 id="_2-场景简述" tabindex="-1"><a class="header-anchor" href="#_2-场景简述" aria-hidden="true">#</a> 2. 场景简述</h3><h4 id="_2-1-模拟单机服务-redisutils" tabindex="-1"><a class="header-anchor" href="#_2-1-模拟单机服务-redisutils" aria-hidden="true">#</a> 2.1 模拟单机服务 RedisUtils</h4><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-04.png" alt="Redis单机服务"></p><ul><li>模拟Redis功能，也就是假定目前所有的系统都在使用的服务</li><li>类和方法名次都固定写死到各个业务系统中，改动略微麻烦</li></ul><h4 id="_2-2-模拟集群-egm" tabindex="-1"><a class="header-anchor" href="#_2-2-模拟集群-egm" aria-hidden="true">#</a> 2.2 模拟集群 EGM</h4><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-05.png" alt="模拟集群 EGM"></p><ul><li>模拟一个集群服务，但是方法名与各业务系统中使用的方法名不同。有点像你mac，我用win。做一样的事，但有不同的操作。</li></ul><h4 id="_2-3-模拟集群-iir" tabindex="-1"><a class="header-anchor" href="#_2-3-模拟集群-iir" aria-hidden="true">#</a> 2.3 模拟集群 IIR</h4><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-06.png" alt="模拟集群 IIR"></p><ul><li>这是另外一套集群服务，有时候在企业开发中就很有可能出现两套服务，这里我们也是为了做模拟案例，所以添加两套实现同样功能的不同服务，来学习抽象工厂模式。</li></ul><p>综上可以看到，我们目前的系统中已经在大量的使用redis服务，但是因为系统不能满足业务的快速发展，因此需要迁移到集群服务中。而这时有两套集群服务需要兼容使用，又要满足所有的业务系统改造的同时不影响线上使用。</p><h3 id="_3-单集群代码使用" tabindex="-1"><a class="header-anchor" href="#_3-单集群代码使用" aria-hidden="true">#</a> 3. 单集群代码使用</h3><p>以下是案例模拟中原有的单集群Redis使用方式，后续会通过对这里的代码进行改造。</p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-07.png" alt="当前功能的类图结构"></p><h3 id="_3-1-定义使用接口" tabindex="-1"><a class="header-anchor" href="#_3-1-定义使用接口" aria-hidden="true">#</a> 3.1 定义使用接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CacheService</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-实现调用代码" tabindex="-1"><a class="header-anchor" href="#_3-2-实现调用代码" aria-hidden="true">#</a> 3.2 实现调用代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CacheService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">RedisUtils</span> redisUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisUtils<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>目前的代码对于当前场景下的使用没有什么问题，也比较简单。但是所有的业务系统都在使用同时，需要改造就不那么容易了。这里可以思考下，看如何改造才是合理的。</li></ul><h2 id="五、用一坨坨代码实现" tabindex="-1"><a class="header-anchor" href="#五、用一坨坨代码实现" aria-hidden="true">#</a> 五、用一坨坨代码实现</h2><p><code>讲道理没有ifelse解决不了的逻辑，不行就在加一行！</code></p><p>此时的实现方式并不会修改类结构图，也就是与上面给出的类层级关系一致。通过在接口中添加类型字段区分当前使用的是哪个集群，来作为使用的判断。可以说目前的方式非常难用，其他使用方改动颇多，这里只是做为例子。</p><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">01</span>
└── src
    └── main
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
                ├── impl
                │   └── <span class="token class-name">CacheServiceImpl</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">CacheService</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时的只有两个类，类结构非常简单。而我们需要的补充扩展功能也只是在 <code>CacheServiceImpl</code> 中实现。</li></ul><h3 id="_2-ifelse实现需求" tabindex="-1"><a class="header-anchor" href="#_2-ifelse实现需求" aria-hidden="true">#</a> 2. ifelse实现需求</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CacheService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">RedisUtils</span> redisUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">EGM</span> egm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EGM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">IIR</span> iir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> redisType<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> redisType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> egm<span class="token punctuation">.</span><span class="token function">gain</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> redisType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> iir<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> redisUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> redisType<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> redisType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            egm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> redisType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            iir<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        redisUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//... 同类不做太多展示，可以下载源码进行参考</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里的实现过程非常简单，主要根据类型判断是哪个Redis集群。</li><li>虽然实现是简单了，但是对使用者来说就麻烦了，并且也很难应对后期的拓展和不停的维护。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><p>接下来我们通过junit单元测试的方式验证接口服务，强调日常编写好单测可以更好的提高系统的健壮度。</p><p><strong>编写测试类：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_CacheService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CacheService</span> cacheService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cacheService<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user_name_01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> val01 <span class="token operator">=</span> cacheService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user_name_01&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val01<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">24.591</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>matter<span class="token punctuation">.</span><span class="token constant">EGM</span> <span class="token operator">-</span> <span class="token constant">EGM</span>写入数据 key：user_name_01 val：小傅哥
<span class="token number">22</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">24.593</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>matter<span class="token punctuation">.</span><span class="token constant">EGM</span> <span class="token operator">-</span> <span class="token constant">EGM</span>获取数据 key：user_name_01
测试结果：小傅哥

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从结果上看运行正常，并没有什么问题。但这样的代码只要到生成运行起来以后，想再改就真的难了！</li></ul><h2 id="六、抽象工厂模式重构代码" tabindex="-1"><a class="header-anchor" href="#六、抽象工厂模式重构代码" aria-hidden="true">#</a> 六、抽象工厂模式重构代码</h2><p><code>接下来使用抽象工厂模式来进行代码优化，也算是一次很小的重构。</code></p><p>这里的抽象工厂的创建和获取方式，会采用代理类的方式进行实现。所被代理的类就是目前的Redis操作方法类，让这个类在不需要任何修改下，就可以实现调用集群A和集群B的数据服务。</p><p>并且这里还有一点非常重要，由于集群A和集群B在部分方法提供上是不同的，因此需要做一个接口适配，而这个适配类就相当于工厂中的工厂，用于创建把不同的服务抽象为统一的接口做相同的业务。这一块与我们上一章节中的<code>工厂方法模型</code>类型，可以翻阅参考。</p><h3 id="_1-工程结构-1" tabindex="-1"><a class="header-anchor" href="#_1-工程结构-1" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">02</span>
└── src
    ├── main
    │   └── java
    │       └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
    │           ├── factory    
    │           │   ├── impl
    │           │   │   ├── <span class="token class-name">EGMCacheAdapter</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">IIRCacheAdapter</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ICacheAdapter</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">JDKInvocationHandler</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">JDKProxy</span><span class="token punctuation">.</span>java
    │           ├── impl
    │           │   └── <span class="token class-name">CacheServiceImpl</span><span class="token punctuation">.</span>java    
    │           └── <span class="token class-name">CacheService</span><span class="token punctuation">.</span>java 
    └── test
         └── java
             └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test
                 └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>抽象工厂模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-2-08.png" alt="抽象工厂模型结构"></p><ul><li>工程中涉及的部分核心功能代码，如下； <ul><li><code>ICacheAdapter</code>，定义了适配接口，分别包装两个集群中差异化的接口名称。<code>EGMCacheAdapter</code>、<code>IIRCacheAdapter</code></li><li><code>JDKProxy</code>、<code>JDKInvocationHandler</code>，是代理类的定义和实现，这部分也就是抽象工厂的另外一种实现方式。通过这样的方式可以很好的把原有操作Redis的方法进行代理操作，通过控制不同的入参对象，控制缓存的使用。</li></ul></li></ul><p><strong>好</strong>，那么接下来会分别讲解几个类的具体实现。</p><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-定义适配接口" tabindex="-1"><a class="header-anchor" href="#_2-1-定义适配接口" aria-hidden="true">#</a> 2.1 定义适配接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICacheAdapter</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个类的主要作用是让所有集群的提供方，能在统一的方法名称下进行操作。也方面后续的拓展。</li></ul><h4 id="_2-2-实现集群使用服务" tabindex="-1"><a class="header-anchor" href="#_2-2-实现集群使用服务" aria-hidden="true">#</a> 2.2 实现集群使用服务</h4><p><strong>EGMCacheAdapter</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EGMCacheAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ICacheAdapter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">EGM</span> egm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EGM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> egm<span class="token punctuation">.</span><span class="token function">gain</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        egm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        egm<span class="token punctuation">.</span><span class="token function">setEx</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        egm<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>IIRCacheAdapter</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IIRCacheAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ICacheAdapter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">IIR</span> iir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> iir<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        iir<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        iir<span class="token punctuation">.</span><span class="token function">setExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        iir<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上两个实现都非常容易，在统一方法名下进行包装。</li></ul><h4 id="_2-3-定义抽象工程代理类和实现" tabindex="-1"><a class="header-anchor" href="#_2-3-定义抽象工程代理类和实现" aria-hidden="true">#</a> 2.3 定义抽象工程代理类和实现</h4><p><strong>JDKProxy</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> interfaceClass<span class="token punctuation">,</span> <span class="token class-name">ICacheAdapter</span> cacheAdapter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDKInvocationHandler</span><span class="token punctuation">(</span>cacheAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>classes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里主要的作用就是完成代理类，同时对于使用哪个集群有外部通过入参进行传递。</li></ul><p><strong>JDKInvocationHandler</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ICacheAdapter</span> cacheAdapter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">JDKInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">ICacheAdapter</span> cacheAdapter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheAdapter <span class="token operator">=</span> cacheAdapter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ICacheAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ClassLoaderUtils</span><span class="token punctuation">.</span><span class="token function">getClazzByArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cacheAdapter<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在代理类的实现中其实也非常简单，通过穿透进来的集群服务进行方法操作。</li><li>另外在<code>invoke</code>中通过使用获取方法名称反射方式，调用对应的方法功能，也就简化了整体的使用。</li><li>到这我们就已经将整体的功能实现完成了，关于抽象工厂这部分也可以使用非代理的方式进行实现。</li></ul><h3 id="_3-测试验证-1" tabindex="-1"><a class="header-anchor" href="#_3-测试验证-1" aria-hidden="true">#</a> 3. 测试验证</h3><p><strong>编写测试类：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_CacheService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">CacheService</span> proxy_EGM <span class="token operator">=</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">CacheServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EGMCacheAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    proxy_EGM<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user_name_01&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> val01 <span class="token operator">=</span> proxy_EGM<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user_name_01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val01<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">CacheService</span> proxy_IIR <span class="token operator">=</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">CacheServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IIRCacheAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    proxy_IIR<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user_name_01&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> val02 <span class="token operator">=</span> proxy_IIR<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user_name_01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val02<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在测试的代码中通过传入不同的集群类型，就可以调用不同的集群下的方法。<code>JDKProxy.getProxy(CacheServiceImpl.class, new EGMCacheAdapter());</code></li><li>如果后续有扩展的需求，也可以按照这样的类型方式进行补充，同时对于改造上来说并没有改动原来的方法，降低了修改成本。</li></ul><p><strong>结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">06.953</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>matter<span class="token punctuation">.</span><span class="token constant">EGM</span> <span class="token operator">-</span> <span class="token constant">EGM</span>写入数据 key：user_name_01 val：小傅哥
<span class="token number">23</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">06.956</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>matter<span class="token punctuation">.</span><span class="token constant">EGM</span> <span class="token operator">-</span> <span class="token constant">EGM</span>获取数据 key：user_name_01
测试结果：小傅哥
<span class="token number">23</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">06.957</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>matter<span class="token punctuation">.</span><span class="token constant">IIR</span> <span class="token operator">-</span> <span class="token constant">IIR</span>写入数据 key：user_name_01 val：小傅哥
<span class="token number">23</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">06.957</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>matter<span class="token punctuation">.</span><span class="token constant">IIR</span> <span class="token operator">-</span> <span class="token constant">IIR</span>获取数据 key：user_name_01
测试结果：小傅哥

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行结果正常，这样的代码满足了这次拓展的需求，同时你的技术能力也给老板留下了深刻的印象。</li><li>研发自我能力的提升远不是外接的压力就是编写一坨坨代码的接口，如果你已经熟练了很多技能，那么可以在即使紧急的情况下，也能做出完善的方案。</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h2><ul><li>抽象工厂模式，所要解决的问题就是在一个产品族，存在多个不同类型的产品(Redis集群、操作系统)情况下，接口选择的问题。而这种场景在业务开发中也是非常多见的，只不过可能有时候没有将它们抽象化出来。</li><li><code>你的代码只是被ifelse埋上了！</code>当你知道什么场景下何时可以被抽象工程优化代码，那么你的代码层级结构以及满足业务需求上，都可以得到很好的完成功能实现并提升扩展性和优雅度。</li><li>那么这个设计模式满足了；单一职责、开闭原则、解耦等优点，但如果说随着业务的不断拓展，可能会造成类实现上的复杂度。但也可以说算不上缺点，因为可以随着其他设计方式的引入和代理类以及自动生成加载的方式降低此项缺点。</li></ul>`,86);function j(S,C){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)])]),r,v,m,n("ol",null,[b,g,n("li",null,[s("涉及工程三个，可以通过关注"),h,s("："),n("a",y,[f,e(a)]),s("，回复"),w,s("获取")])]),_,n("ul",null,[n("li",null,[s("图片来自："),n("a",x,[s("https://refactoringguru.cn/design-patterns/abstract-factory"),e(a)])])]),I])}const A=p(i,[["render",j],["__file","2020-05-24-zhongxueJavashejimoshi《chouxianggongchangmoshi》.html.vue"]]);export{A as default};
