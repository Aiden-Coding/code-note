import{_ as p,r as t,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-3RcBQnkC.js";const r={},i=n("h1",{id:"netty案例-netty4-1源码分析篇五《一行简单的writeandflush都做了哪些事》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#netty案例-netty4-1源码分析篇五《一行简单的writeandflush都做了哪些事》","aria-hidden":"true"},"#"),s(" netty案例，netty4.1源码分析篇五《一行简单的writeAndFlush都做了哪些事》")],-1),u=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="前言介绍" tabindex="-1"><a class="header-anchor" href="#前言介绍" aria-hidden="true">#</a> 前言介绍</h2><p>对于使用netty的小伙伴来说，ctx.writeAndFlush()再熟悉不过了，它可以将我们的消息发送出去。那么它都执行了那些行为呢，是怎么将消息发送出去的呢。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                                                <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> <span class="token class-name">Request</span>
                                           via <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">Channel</span><span class="token punctuation">}</span> or
                                       <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">}</span>
                                                     <span class="token operator">|</span>
 <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
 <span class="token operator">|</span>                           <span class="token class-name">ChannelPipeline</span>         <span class="token operator">|</span>               <span class="token operator">|</span>
 <span class="token operator">|</span>                                                  \\<span class="token operator">|</span><span class="token operator">/</span>              <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">|</span> <span class="token class-name">Inbound</span> <span class="token class-name">Handler</span>  <span class="token class-name">N</span>  <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token class-name">Outbound</span> <span class="token class-name">Handler</span>  <span class="token number">1</span>  <span class="token operator">|</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>              <span class="token operator">/</span><span class="token operator">|</span>\\                                  <span class="token operator">|</span>               <span class="token operator">|</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>                                  \\<span class="token operator">|</span><span class="token operator">/</span>              <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">|</span> <span class="token class-name">Inbound</span> <span class="token class-name">Handler</span> <span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token class-name">Outbound</span> <span class="token class-name">Handler</span>  <span class="token number">2</span>  <span class="token operator">|</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>              <span class="token operator">/</span><span class="token operator">|</span>\\                                  <span class="token punctuation">.</span>               <span class="token operator">|</span>
 <span class="token operator">|</span>               <span class="token punctuation">.</span>                                   <span class="token punctuation">.</span>               <span class="token operator">|</span>
 <span class="token operator">|</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">fireIN_EVT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">OUT_EVT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>
 <span class="token operator">|</span>        <span class="token punctuation">[</span> method call<span class="token punctuation">]</span>                       <span class="token punctuation">[</span>method call<span class="token punctuation">]</span>         <span class="token operator">|</span>
 <span class="token operator">|</span>               <span class="token punctuation">.</span>                                   <span class="token punctuation">.</span>               <span class="token operator">|</span>
 <span class="token operator">|</span>               <span class="token punctuation">.</span>                                  \\<span class="token operator">|</span><span class="token operator">/</span>              <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">|</span> <span class="token class-name">Inbound</span> <span class="token class-name">Handler</span>  <span class="token number">2</span>  <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token class-name">Outbound</span> <span class="token class-name">Handler</span> <span class="token class-name">M</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>              <span class="token operator">/</span><span class="token operator">|</span>\\                                  <span class="token operator">|</span>               <span class="token operator">|</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>                                  \\<span class="token operator">|</span><span class="token operator">/</span>              <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">|</span> <span class="token class-name">Inbound</span> <span class="token class-name">Handler</span>  <span class="token number">1</span>  <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token class-name">Outbound</span> <span class="token class-name">Handler</span>  <span class="token class-name">M</span>  <span class="token operator">|</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>
 <span class="token operator">|</span>              <span class="token operator">/</span><span class="token operator">|</span>\\                                  <span class="token operator">|</span>               <span class="token operator">|</span>
 <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
                 <span class="token operator">|</span>                                  \\<span class="token operator">|</span><span class="token operator">/</span>
 <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
 <span class="token operator">|</span>               <span class="token operator">|</span>                                   <span class="token operator">|</span>               <span class="token operator">|</span>
 <span class="token operator">|</span>       <span class="token punctuation">[</span> <span class="token class-name">Socket</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>                    <span class="token punctuation">[</span> <span class="token class-name">Socket</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>     <span class="token operator">|</span>
 <span class="token operator">|</span>                                                                   <span class="token operator">|</span>
 <span class="token operator">|</span>  <span class="token class-name">Netty</span> <span class="token class-name">Internal</span> <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> <span class="token class-name">Threads</span> <span class="token punctuation">(</span><span class="token class-name">Transport</span> <span class="token class-name">Implementation</span><span class="token punctuation">)</span>            <span class="token operator">|</span>
 <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><blockquote><p>1、由一行简单发送消息开始</p></blockquote><p>发送消息的代码非常简单，也是我们非常常用的发送消息的方式ctx.writeAndFlush</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token comment">//接收msg消息{与上一章节相比，此处已经不需要自己进行解码}</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 接收到消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//通知客户端链消息发送成功</span>
	<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;客户端收到[微信公众号：bugstack虫洞栈]：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>
	ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>2、跟进writeAndFlush | ChannelHandlerContext.writeAndFlush</p></blockquote><p><strong>AbstractChannelHandlerContext.java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ChannelFuture</span> <span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">writeAndFlush</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">newPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ChannelPromise</span> <span class="token function">newPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultChannelPromise</span><span class="token punctuation">(</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中我们可以看到，writeAndFlush方法里提供了一个默认的newPromise()作为参数传递。｛promise：v. 许诺;承诺;答应;保证;使很可能;预示｝在Netty中发送消息是一个异步操作，那么可以通过往hannelPromise中注册回调监听listener来得到该操作是否成功。</p><p><strong>在发送消息时添加监听</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token string">&quot;hi 微信公众号：bugstack虫洞栈 | 欢迎关注&amp;获取专题源码&quot;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">newProgressivePromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3、继续向下一层跟进代码 | AbstractChannelHandlerContext.invokeWriteAndFlush</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeWriteAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">invokeWrite0</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeFlush0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">writeAndFlush</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.1、首先通过invokeHandler()判断通道处理器已添加到管道</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Makes</span> best possible effort <span class="token keyword">to</span> <span class="token namespace">detect</span> <span class="token keyword">if</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">ChannelHandler</span>#<span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span><span class="token punctuation">}</span> was called
<span class="token class-name"><span class="token namespace">yet<span class="token punctuation">.</span></span> If</span> not <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> <span class="token boolean">false</span><span class="token punctuation">}</span> and <span class="token keyword">if</span> called or could not detect <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
<span class="token class-name">If</span> <span class="token keyword">this</span> method returns <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> <span class="token boolean">false</span><span class="token punctuation">}</span> we will not invoke the <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">}</span> but just forward the <span class="token class-name"><span class="token namespace">event<span class="token punctuation">.</span></span>
This</span> is needed as <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">DefaultChannelPipeline</span><span class="token punctuation">}</span> may already put the <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">}</span> in the linked<span class="token operator">-</span>list
but not called <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">ChannelHandler</span>#<span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.2、执行消息处理 invokeWrite0；首先将消息内容放入输出缓冲区中[ChannelOutboundBuffer] invokeFlush0；然后将输出缓冲区中的数据通过socket发送到网络中</p><blockquote><p>4、分析invokeWrite0执行内容 | AbstractChannelHandlerContext.invokeWrite0</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeWrite0</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelOutboundHandler</span><span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">notifyOutboundHandlerException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>((ChannelOutboundHandler) handler()).write是一个出站事件[ChannelOutboundHandler]，会由ChannelOutboundHandlerAdapter处理；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Calls <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">#</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to forward
 * to the next <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelOutboundHandler</span></span><span class="token punctuation">}</span> in the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>.
 *
 * Sub-classes may override this method to change behavior.
 */</span>
<span class="token annotation punctuation">@Skip</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来会走到ChannelPipeline中，来执行网络数据发送；| DefaultChannelPipeline &gt; HeadContext.write</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unsafe<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>5、unsafe.write执行分析</p></blockquote><p>unsafe是我们构建NioServerSocketChannel或NioSocketChannel对象时，一并构建一个成员属性，它会完成底层真正的网络操作等。NioServerSocketChannel中持有的unsafe成员变量是NioMessageUnsafe对象，而NioSocketChannel中持有的unsafe成员变量是NioSocketChannelUnsafe对象。这里我们要看的是NioSocketChannel的write流程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ChannelOutboundBuffer</span> outboundBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>outboundBuffer<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>outboundBuffer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// If the outboundBuffer is null we know the channel was closed and so</span>
        <span class="token comment">// need to fail the future right away. If it is not null the handling of th</span>
        <span class="token comment">// will be done in flush0()</span>
        <span class="token comment">// See https://github.com/netty/netty/issues/2362</span>
        <span class="token function">safeSetFailure</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> <span class="token function">newWriteException</span><span class="token punctuation">(</span>initialCloseCause<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// release message now to prevent resource-leak</span>
        <span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        msg <span class="token operator">=</span> <span class="token function">filterOutboundMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">estimatorHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">safeSetFailure</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    outboundBuffer<span class="token punctuation">.</span><span class="token function">addMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> size<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>https://github.com/netty/netty/issues/2362</strong></p><p><img src="https://bugstack.cn/assets/images/pic-content/2019/09/netty4-1.png" alt=""></p><ul><li>获取该NioSocketChannel的ChannelOutboundBuffer成员属性。（确切地来说ChannelOutboundBuffer是NioSocketChannelUnsafe对象中的成员属性，而NioSocketChannelUnsafe才是NioSocketChannel的成员属性。）每一个NioSocketChannel会维护一个它们自己的ChannelOutboundBuffer，用于存储待出站写请求。 判断该outboundBuffer是否为null，如果为null则说明该NioSocketChannel已经关闭了，那么就会标志该异步写操作为失败完成，并释放写消息后返回。</li></ul><p><strong>AbstractNioByteChannel.java</strong> | filterOutboundMessage过滤待发送的消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">filterOutboundMessage</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">isDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">newDirectBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">FileRegion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>
            <span class="token string">&quot;unsupported message type: &quot;</span> <span class="token operator">+</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">simpleClassName</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">EXPECTED_TYPES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤待发送的消息，只有ByteBuf（堆 or 非堆）以及 FileRegion可以进行最终的Socket网络传输，其他类型的数据是不支持的，会抛UnsupportedOperationException异常。并且会把堆ByteBuf转换为一个非堆的ByteBuf返回。也就说，最后会通过socket传输的对象时非堆的ByteBuf和FileRegion。 [size = pipeline.estimatorHandle().size(msg);]估计待发送数据的大小：</p><p><strong>DefaultMessageSizeEstimator.java</strong> | 通过ByteBuf.readableBytes()判断消息内容大小，估计待发送消息数据的大小，如果是FileRegion的话直接饭0，否则返回ByteBuf中可读取字节数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HandleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Handle</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> unknownSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">HandleImpl</span><span class="token punctuation">(</span><span class="token keyword">int</span> unknownSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>unknownSize <span class="token operator">=</span> unknownSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBufHolder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ByteBufHolder</span><span class="token punctuation">)</span> msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">FileRegion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> unknownSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ChannelOutboundBuffer.java</strong> | ChannelOutboundBuffer.addMessage将消息加入outboundBuffer中等待发送</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Add given message to this <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelOutboundBuffer</span></span><span class="token punctuation">}</span>. The given <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPromise</span></span><span class="token punctuation">}</span> will be notified once
 * the message was written.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMessage</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">Entry</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token function">total</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tailEntry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flushedEntry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Entry</span> tail <span class="token operator">=</span> tailEntry<span class="token punctuation">;</span>
        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> entry<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    tailEntry <span class="token operator">=</span> entry<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>unflushedEntry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        unflushedEntry <span class="token operator">=</span> entry<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// increment pending bytes after adding message to the unflushed arrays.</span>
    <span class="token comment">// See https://github.com/netty/netty/issues/1619</span>
    <span class="token function">incrementPendingOutboundBytes</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>pendingSize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>6、ChannelOutboundBuffer出栈</p></blockquote><p>一个内部的数据结构，被AbstractChannel用于存储它的待出站写请求。 ChannelOutboundBuffer中有两个属性private Entry unflushedEntry、private Entry flushedEntry。它们都是用Entry对象通过next指针来维护的一个单向链表。以及一个private Entry tailEntry;对象表示始终指向最后一个Entry对象（即，最后加入到该ChannelOutboundBuffer中的写请求的数据消息） unflushedEntry表示还未刷新的ByteBuf的链表头；flushedEntry表示调用flush()操作时将会进行刷新的ByteBuf的链表头。</p><blockquote><p>7、Entry对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Recycler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> <span class="token constant">RECYCLER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Recycler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">protected</span> <span class="token class-name">Entry</span> <span class="token function">newObject</span><span class="token punctuation">(</span><span class="token class-name">Handle</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Handle</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> handle<span class="token punctuation">;</span>
	<span class="token class-name">Entry</span> next<span class="token punctuation">;</span>
	<span class="token class-name">Object</span> msg<span class="token punctuation">;</span>
	<span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufs<span class="token punctuation">;</span>
	<span class="token class-name">ByteBuffer</span> buf<span class="token punctuation">;</span>
	<span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">;</span>
	<span class="token keyword">long</span> progress<span class="token punctuation">;</span>
	<span class="token keyword">long</span> total<span class="token punctuation">;</span>
	<span class="token keyword">int</span> pendingSize<span class="token punctuation">;</span>
	<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">boolean</span> cancelled<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">Handle</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">static</span> <span class="token class-name">Entry</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">long</span> total<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token constant">RECYCLER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		entry<span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
		entry<span class="token punctuation">.</span>pendingSize <span class="token operator">=</span> size <span class="token operator">+</span> <span class="token constant">CHANNEL_OUTBOUND_BUFFER_ENTRY_OVERHEAD</span><span class="token punctuation">;</span>
		entry<span class="token punctuation">.</span>total <span class="token operator">=</span> total<span class="token punctuation">;</span>
		entry<span class="token punctuation">.</span>promise <span class="token operator">=</span> promise<span class="token punctuation">;</span>
		<span class="token keyword">return</span> entry<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">int</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cancelled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> pSize <span class="token operator">=</span> pendingSize<span class="token punctuation">;</span>

			<span class="token comment">// release message and replace with an empty buffer</span>
			<span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">safeRelease</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
			msg <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token constant">EMPTY_BUFFER</span><span class="token punctuation">;</span>

			pendingSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			progress <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			bufs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			buf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> pSize<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">void</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		bufs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		buf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		msg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		promise <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		progress <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		pendingSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		cancelled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		handle<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token class-name">Entry</span> <span class="token function">recycleAndGetNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Entry</span> next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Entry是ChannelOutboundBunffer的一个内部类，它是对真实的写消息数据以及其相关信息的一个封装。大致封装了如下信息： a) pendingSize：记录有该ByteBuf or ByteBufs 中待发送数据大小 和 对象本身内存大小 的累加和; b) promise：该异步写操作的ChannelPromise（用于在完成真是的网络层write后去标识异步操作的完成以及回调已经注册到该promise上的listeners）; c) total：待发送数据包的总大小（该属性与pendingSize的区别在于，如果是待发送的是FileRegion数据对象，则pengdingSize中只有对象内存的大小，即真实的数据大小被记录为0；但total属性则是会记录FileRegion中数据大小，并且total属性是不包含对象内存大小，仅仅是对数据本身大小的记录）; e) msg：原始消息对象的引用; f) count：写消息数据个数的记录（如果写消息数据是个数组的话，该值会大于1） 这里说明下，pendingSize属性记录的不单单是写请求数据的大小，记录的是这个写请求对象的大小。这是什么意思了？这里做个简单的介绍： 一个对象占用的内存大小除了实例数据（instance data），还包括对象头（header）以及对齐填充（padding）。所以一个对象所占的内存大小为『对象头 + 实例数据 + 对齐填充』，即</p><p><strong>CHANNEL_OUTBOUND_BUFFER_ENTRY_OVERHEAD</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Assuming a 64-bit JVM:</span>
<span class="token comment">//  - 16 bytes object header</span>
<span class="token comment">//  - 8 reference fields</span>
<span class="token comment">//  - 2 long fields</span>
<span class="token comment">//  - 2 int fields</span>
<span class="token comment">//  - 1 boolean field</span>
<span class="token comment">//  - padding</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CHANNEL_OUTBOUND_BUFFER_ENTRY_OVERHEAD</span> <span class="token operator">=</span>
        <span class="token class-name">SystemPropertyUtil</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;io.netty.transport.outboundBufferEntrySizeOverhead&quot;</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设的是64位操作系统下，且没有使用各种压缩选项的情况。对象头的长度占16字节；引用属性占8字节；long类型占8字节；int类型占4字节；boolean类型占1字节。同时，由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是说对象的大小必须是8字节的整数倍，如果最终字节数不为8的倍数，则padding会补足至8的倍数。</p><p>addMessage方法主要就是将请求写出的数据封装为Entry对象，然后加入到tailEntry和unflushedEntry中。 然后调用『incrementPendingOutboundBytes(entry.pendingSize, false);』对totalPendingSize属性以及unwritable字段做调整。 totalPendingSize字段记录了该ChannelOutboundBuffer中所有带发送Entry对象的占的总内存大小和所有带发送数据的大小。unwritable用来标示当前该Channel要发送的数据是否已经超过了设定 or 默认的WriteBufferWaterMark的high值。如果当前操作导致了待写出的数据（包括Entry对象大小以及真实需要传输数据的大小）超过了设置写缓冲区的高水位，那么将会触发fireChannelWritabilityChanged事件。</p><p>微信搜索「<strong>bugstack虫洞栈</strong>」公众号，关注后回复「<strong>rpc案例源码</strong>」获取本文源码&amp;更多原创专题案例！</p>`,48);function v(m,b){const a=t("ExternalLinkIcon");return e(),o("div",null,[i,n("p",null,[s("作者：小傅哥 "),u,s("博客："),n("a",k,[s("https://bugstack.cn"),c(a)])]),d])}const f=p(r,[["render",v],["__file","2019-09-14-nettyanli，netty4.1yuanmafenxipianwu《yixingjiandandewriteAndFlushduzuoliaonaxieshi》.html.vue"]]);export{f as default};
