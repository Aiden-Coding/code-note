import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"字节码编程-byte-buddy篇一《基于byte-buddy语法创建的第一个helloworld》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字节码编程-byte-buddy篇一《基于byte-buddy语法创建的第一个helloworld》","aria-hidden":"true"},"#"),s(" 字节码编程，Byte-buddy篇一《基于Byte Buddy语法创建的第一个HelloWorld》")],-1),d=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},r=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！")],-1),v=n("h2",{id:"一、前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言","aria-hidden":"true"},"#"),s(" 一、前言")],-1),m={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"小傅哥",-1),y=n("code",null,"ASM",-1),h=n("code",null,"Javassist",-1),g=n("code",null,"Byte Buddy",-1),_=n("code",null,"指令码",-1),f=n("em",null,"LDC、LOAD、STORE、IRETURN...",-1),w=e("<p><code>Byte Buddy</code> 是一个代码生成和操作库，用于在 <code>Java</code> 应用程序运行时创建和修改 <code>Java</code> 类，而无需编译器的帮助。除了 <code>Java</code> 类库附带的代码生成实用程序外，<code>Byte Buddy</code> 还允许创建任意类，并且不限于实现用于创建运行时代理的接口。此外，<code>Byte Buddy</code> 提供了一种方便的 API，可以使用 <code>Java</code> 代理或在构建过程中手动更改类。</p><ul><li>无需理解字节码指令，即可使用简单的 API 就能很容易操作字节码，控制类和方法。</li><li>已支持Java 11，库轻量，仅取决于Java字节代码解析器库ASM的访问者API，它本身不需要任何其他依赖项。</li><li>比起JDK动态代理、cglib、Javassist，Byte Buddy在性能上具有一定的优势。</li></ul><blockquote><p>2015年10月，Byte Buddy被 Oracle 授予了 Duke&#39;s Choice大奖。该奖项对Byte Buddy的“ Java技术方面的巨大创新 ”表示赞赏。我们为获得此奖项感到非常荣幸，并感谢所有帮助Byte Buddy取得成功的用户以及其他所有人。我们真的很感激！</p></blockquote>",3),B={href:"https://bytebuddy.net/#/",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"https://bytebuddy.net",-1),j=n("code",null,"Byte Buddy",-1),H=n("p",null,[s("**好！**那么接下来，我们开始从 "),n("code",null,"HelloWorld"),s(" 开始。深入了解一个技能前，先多多运行，这样总归能让找到学习的快乐。")],-1),x=n("h2",{id:"二、开发环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、开发环境","aria-hidden":"true"},"#"),s(" 二、开发环境")],-1),W=n("li",null,"JDK 1.8.0",-1),S=n("li",null,"byte-buddy 1.10.9",-1),T=n("li",null,"byte-buddy-agent 1.10.9",-1),C=n("code",null,"itstack-demo-bytecode-2-01",-1),I=n("strong",null,"公众号",-1),M={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"bugstack虫洞栈",-1),J=n("code",null,"你会获得一个下载链接列表，打开后里面的第17个「因为我有好多开源代码」",-1),L=n("code",null,"Star",-1),P=e(`<h2 id="三、案例目标" tabindex="-1"><a class="header-anchor" href="#三、案例目标" aria-hidden="true">#</a> 三、案例目标</h2><p>每一个程序员，都运行过 <code>N</code> 多个<code> HelloWorld</code>，就像很熟悉的 <code>Java</code>；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hi</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Byte-buddy Hi HelloWorld By 小傅哥(bugstack.cn)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们接下来就通过使用动态字节码生成的方式，来创建出可以输出 <code>HelloWorld</code> 的程序。</p><p><em>新知识点的学习不要慌，最主要是找到一个可以入手的点，通过这样的一个点去慢慢解开整个程序的面纱。</em></p><h2 id="四、技术实现" tabindex="-1"><a class="header-anchor" href="#四、技术实现" aria-hidden="true">#</a> 四、技术实现</h2><h3 id="_1-官网经典例子" tabindex="-1"><a class="header-anchor" href="#_1-官网经典例子" aria-hidden="true">#</a> 1. 官网经典例子</h3><p>在我们看官网文档中，从它的介绍了就已经提供了一个非常简单的例子，用于输出 <code>HelloWorld</code>，我们在这展示并讲解下。</p><p><strong>案例代码：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> helloWorld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBuddy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">subclass</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">FixedValue</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他的运行结果就是一行，<code>Hello World!</code>，整个代码块核心功能就是通过 <code>method(named(&quot;toString&quot;))</code>，找到 <em>toString</em> 方法，再通过拦截 <code>intercept</code>，设定此方法的返回值。<code>FixedValue.value(&quot;Hello World!&quot;)</code>。到这里其实一个基本的方法就通过 <code>Byte-buddy</code> ，改造完成。</p><p>接下来的这一段主要是用于加载生成后的 <code>Class</code> 和执行，以及调用方法 <code>toString()</code>。也就是最终我们输出了想要的结果。那么，如果你不能看到这样一段方法块，把我们的代码改造后的样子，心里还是有点虚。那么，我们通过字节码输出到文件，看下具体被改造后的样子，如下；</p><p><strong>编译后的Class文件</strong>，<code>ByteBuddyHelloWorld.class</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在官网来看，这是一个非常简单并且能体现 <code>Byte buddy</code> 的例子。但是与我们平时想创建出来的 <code>main</code> 方法相比，还是有些差异。那么接下来，我们尝试使用字节码编程技术创建出这样一个方法。</p><h3 id="_2-字节码创建类和方法" tabindex="-1"><a class="header-anchor" href="#_2-字节码创建类和方法" aria-hidden="true">#</a> 2. 字节码创建类和方法</h3><p>接下来的例子会通过一点点的增加代码梳理，不断的把一个方法完整的创建出来。</p><h4 id="_2-1-定义输出字节码方法" tabindex="-1"><a class="header-anchor" href="#_2-1-定义输出字节码方法" aria-hidden="true">#</a> 2.1 定义输出字节码方法</h4><p>为了可以更加清晰的看到每一步对字节码编程后，所创建出来的方法样子(clazz)，我们需要输出字节码生成 <code>clazz</code>。在Byte buddy中默认提供了一个 <code>dynamicType.saveIn()</code> 方法，我们暂时先不使用，而是通过字节码进行保存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">outputClazz</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> pathName <span class="token operator">=</span> <span class="token class-name">ApiTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ByteBuddyHelloWorld.class&quot;</span><span class="token punctuation">;</span>
        out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;类输出路径：&quot;</span> <span class="token operator">+</span> pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> out<span class="token punctuation">)</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个方法我们在之前也用到过，主要就是一个 <code>Java</code> 基础的内容，输出字节码到文件中。</li></ul><h4 id="_2-2-创建类信息" tabindex="-1"><a class="header-anchor" href="#_2-2-创建类信息" aria-hidden="true">#</a> 2.2 创建类信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DynamicType<span class="token punctuation">.</span>Unloaded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> dynamicType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBuddy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subclass</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.bytebuddy.HelloWorld&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出类字节码</span>
<span class="token function">outputClazz</span><span class="token punctuation">(</span>dynamicType<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建类和定义类名，如果不写类名会自动生成要给类名。</li></ul><p><strong>此时class文件：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-创建main方法" tabindex="-1"><a class="header-anchor" href="#_2-3-创建main方法" aria-hidden="true">#</a> 2.3 创建main方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DynamicType<span class="token punctuation">.</span>Unloaded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> dynamicType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBuddy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subclass</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.bytebuddy.HelloWorld&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">defineMethod</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;args&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">FixedValue</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与上面相比新增的代码片段；</p><ul><li><code>defineMethod(&quot;main&quot;, void.class, Modifier.PUBLIC + Modifier.STATIC)</code>，定义方法；名称、返回类型、属性<em>public static</em></li><li><code>withParameter(String[].class, &quot;args&quot;)</code>，定义参数；参数类型、参数名称</li><li><code>intercept(FixedValue.value(&quot;Hello World!&quot;))</code>，拦截设置返回值，但此时还能满足我们的要求。</li></ul><p>这里有一个知识点，<code>Modifier.PUBLIC + Modifier.STATIC</code>，这是一个是二进制相加，每一个类型都在二进制中占有一位。例如 <code>1 2 4 8 ...</code> 对应的二进制占位 <code>1111</code>。所以可以执行相加运算，并又能保留原有单元的属性。</p><p><strong>此时class文件：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> var10000 <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时基本已经可以看到我们平常编写的 <code>Hello World</code> 影子了，但还能输出结果。</p><h4 id="_2-4-委托函数使用" tabindex="-1"><a class="header-anchor" href="#_2-4-委托函数使用" aria-hidden="true">#</a> 2.4 委托函数使用</h4><p>为了能让我们使用字节码编程创建的方法去输出一段 <code>Hello World</code> ，那么这里需要使用到<code>委托</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DynamicType<span class="token punctuation">.</span>Unloaded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> dynamicType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBuddy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subclass</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;org.itstack.demo.bytebuddy.HelloWorld&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">defineMethod</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;args&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">MethodDelegation</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">Hi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>整体来看变化并不大，只有 <code>intercept(MethodDelegation.to(Hi.class))</code>，使用了一段委托函数，真正去执行输出的是另外的函数方法。</p><ul><li>MethodDelegation，需要是 <code>public</code> 类</li><li>被委托的方法与需要与原方法有着一样的入参、出参、方法名，否则不能映射上</li></ul></li></ul><p><strong>此时class文件：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Hi</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>var0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>那么此时就可以输出我们需要的内容了，<code>Hi.main</code> 是定义出来的委托函数。也就是一个 <code>HelloWorld</code></li></ul><h2 id="五、测试结果" tabindex="-1"><a class="header-anchor" href="#五、测试结果" aria-hidden="true">#</a> 五、测试结果</h2><p>为了可以让整个方法运行起来，我们需要添加字节码加载和反射调用的代码块，如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 加载类</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> dynamicType<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">GenerateClazzMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 反射调用</span>
clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>类输出路径：<span class="token operator">/</span><span class="token class-name">User</span><span class="token operator">/</span>xiaofuge<span class="token operator">/</span>itstack<span class="token operator">/</span>git<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>bytecode<span class="token operator">/</span>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>bytecode<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">/</span>target<span class="token operator">/</span>test<span class="token operator">-</span>classes<span class="token operator">/</span><span class="token class-name">ByteBuddyHelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span>
helloWorld

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果图</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-bytecode-2-01-1.png" alt="Byte buddy HelloWorld 效果图"></p><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2>`,49),A=n("li",null,[s("在本章节 "),n("code",null,"Byte buddy"),s(" 中，需要掌握几个关键信息；创建方法、定义属性、拦截委托、输出字节码，以及最终的运行。这样的一个简单过程，可以很快的了解到如何使用 "),n("code",null,"Byte buddy"),s("。")],-1),D=n("code",null,"Byte buddy",-1),O={href:"https://bytebuddy.net",target:"_blank",rel:"noopener noreferrer"},N=n("li",null,"在学习整理的过程中发现，关于字节码编程方面的资料并不是很全，主要源于大家平时的开发中基本是用不到的，谁也不可能总去修改字节码。但对于补全这样的成体系完善技术栈资料，却可以帮助很多需要的人。因此我也会持续输出类似这样空白的技术文章。",-1);function U(V,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",k,[s("https://bugstack.cn"),t(a)])]),r,v,n("p",null,[s("相对于"),n("a",m,[b,t(a)]),s("之前编写的字节码编程； "),y,s("、"),h,s(" 系列，"),g,s(" 玩法上更加高级，你可以完全不需要了解一个类和方法块是如何通过 "),_,s(),f,s(" 生成出来的。就像它的官网介绍；")]),w,n("p",null,[s("除了这些简单的介绍外，还可以通过官网："),n("a",B,[q,t(a)]),s("，去了解更多关于 "),j,s(" 的内容。")]),H,x,n("ol",null,[W,S,T,n("li",null,[s("本章涉及源码在："),C,s("，可以关注"),I,s("："),n("a",M,[z,t(a)]),s("，回复源码下载获取。"),J,s("，记得给个"),L,s("！")])]),P,n("ul",null,[A,n("li",null,[s("本系列文章后续会继续更新，把常用的 "),D,s(" 方法通过实际的案例去模拟建设，在这个过程中加强学习使用。一些基础知识也可以通过官方文档进行学习；"),n("a",O,[s("https://bytebuddy.net"),t(a)]),s("。")]),N])])}const R=p(i,[["render",U],["__file","2020-05-08-zijiemabiancheng，Byte-buddypianyi《jiyuByte BuddyyufachuangjiandediyigeHelloWorld》.html.vue"]]);export{R as default};
