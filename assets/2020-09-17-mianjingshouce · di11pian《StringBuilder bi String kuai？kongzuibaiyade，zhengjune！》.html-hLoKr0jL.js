import{_ as p,r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const l={},u=n("h1",{id:"面经手册-·-第11篇《stringbuilder-比-string-快-空嘴白牙的-证据呢-》",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面经手册-·-第11篇《stringbuilder-比-string-快-空嘴白牙的-证据呢-》","aria-hidden":"true"},"#"),s(" 面经手册 · 第11篇《StringBuilder 比 String 快？空嘴白牙的，证据呢！》")],-1),r=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=e(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>聊的是八股的文，干的是搬砖的活！</code></p><p>面我的题开发都用不到，你为什么要问？可能这是大部分程序员求职时的经历，甚至也是大家讨厌和烦躁的点。明明给的是拧螺丝的钱、明明做的是写CRUD的事、明明担的是成工具的人！</p><p><strong>明明... 有很多</strong>，可明明公司不会招5年开发做3年经验的事、明明公司也更喜欢具有附加价值的研发。有些小公司不好说，但在一些互联网大厂中，我们都希望招聘到具有培养价值的，也更喜欢能快速打怪升级的，也更愿意让这样的人承担更大的职责。</p><p><strong>但，你酸了！</strong> 别人看源码你打游戏、别人学算法你刷某音、别人写博客你浪98。<code>所以，没有把时间用到个人成长上，就一直会被别人榨取。</code></p><h2 id="二、面试题" tabindex="-1"><a class="header-anchor" href="#二、面试题" aria-hidden="true">#</a> 二、面试题</h2><p><code>谢飞机</code>，总感觉自己有技术瓶颈、有知识盲区，但是又不知道在哪。所以约面试官聊天，虽然也面不过去！</p><p><strong>面试官</strong>：飞机，你又抱着大脸，来白嫖我了啦？</p><p><strong>谢飞机</strong>：嘿嘿，我需要知识，我渴。</p><p><strong>面试官</strong>：好，那今天聊聊最常用的 <code>String</code> 吧，你怎么初始化一个字符串类型。</p><p><strong>谢飞机</strong>：<code>String str = &quot;abc&quot;; </code></p><p><strong>面试官</strong>：还有吗？</p><p><strong>谢飞机</strong>：还有？啊，这样 <code>String str = new String(&quot;abc&quot;);</code> 😄</p><p><strong>面试官</strong>：还有吗？</p><p><strong>谢飞机</strong>：啊！？还有！不知道了！</p><p><strong>面试官</strong>：你不懂 <code>String</code>，你没看过源码。还可以这样；<code>new String(new char[]{&#39;c&#39;, &#39;d&#39;});</code> 回家再学学吧，下次记得给我买<em>百事</em>，我不喝<em>可口</em>。</p><h2 id="三、stringbuilder-比-string-快吗" tabindex="-1"><a class="header-anchor" href="#三、stringbuilder-比-string-快吗" aria-hidden="true">#</a> 三、StringBuilder 比 String 快吗？</h2><h3 id="_1-stringbuilder-比-string-快-证据呢" tabindex="-1"><a class="header-anchor" href="#_1-stringbuilder-比-string-快-证据呢" aria-hidden="true">#</a> 1. StringBuilder 比 String 快，证据呢？</h3><p>老子代码一把梭，总有人絮叨这么搞不好，那 <code>StringBuilder</code> 到底那快了！</p><h4 id="_1-1-string" tabindex="-1"><a class="header-anchor" href="#_1-1-string" aria-hidden="true">#</a> 1.1 String</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String 耗时：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;毫秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_1-2-stringbuilder" aria-hidden="true">#</a> 1.2 StringBuilder</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuilder</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;StringBuilder 耗时&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;毫秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-stringbuffer" tabindex="-1"><a class="header-anchor" href="#_1-3-stringbuffer" aria-hidden="true">#</a> 1.3 StringBuffer</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;StringBuffer 耗时&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;毫秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>综上</strong>，分别使用了 <code>String</code>、<code>StringBuilder</code>、<code>StringBuffer</code>，做字符串链接操作(<em>100个、1000个、1万个、10万个、100万个</em>)，记录每种方式的耗时。最终汇总图表如下；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-12-01.png" alt="小傅哥 &amp; 耗时对比"></p><p>从上图可以得出以下结论；</p><ol><li><code>String</code> 字符串链接是耗时的，尤其数据量大的时候，简直没法使用了。<em>这是做实验，基本也不会有人这么干！</em></li><li><code>StringBuilder</code>、<code>StringBuffer</code>，因为没有发生多线程竞争也就没有🔒锁升级，所以两个类耗时几乎相同，当然在单线程下更推荐使用 <code>StringBuilder</code> 。</li></ol><h3 id="_2-stringbuilder-比-string-快-为什么" tabindex="-1"><a class="header-anchor" href="#_2-stringbuilder-比-string-快-为什么" aria-hidden="true">#</a> 2. StringBuilder 比 String 快， 为什么？</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码就是三种字符串拼接方式，最慢的一种。不是说这种<code>+</code>加的符号，会被优化成 <code>StringBuilder</code> 吗，那怎么还慢？</p><p>确实会被JVM编译期优化，但优化成什么样子了呢，先看下字节码指令；<code>javap -c ApiTest.class</code></p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-12-02.png" alt="小傅哥 &amp; 反编译"></p><p>一看指令码，这不是在循环里(<em>if_icmpgt</em>)给我 <code>new</code> 了 <code>StringBuilder</code> 了吗，怎么还这么慢呢？再仔细看，其实你会发现，这new是在循环里吗呀，我们把这段代码写出来再看看；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在再看这段代码就很清晰了，所有的字符串链接操作，都需要实例化一次<code>StringBuilder</code>，所以非常耗时。<strong>并且你可以验证，这样写代码耗时与字符串直接链接是一样的。</strong> 所以把<code>StringBuilder</code> 提到上一层 <code>for</code> 循环外更快。</p><h2 id="四、string-源码分析" tabindex="-1"><a class="header-anchor" href="#四、string-源码分析" aria-hidden="true">#</a> 四、String 源码分析</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** The value is used for character storage. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Cache the hash code for the string */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0</span>

    <span class="token doc-comment comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6849794470754667710L</span><span class="token punctuation">;</span>
 	
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-初始化" tabindex="-1"><a class="header-anchor" href="#_1-初始化" aria-hidden="true">#</a> 1. 初始化</h3><p>在与 <code>谢飞机</code> 的面试题中，我们聊到了 <code>String</code> 初始化的问题，按照一般我们应用的频次上，能想到的只有直接赋值，<code>String str = &quot;abc&quot;; </code>，但因为 String 的底层数据结构是数组<code>char value[]</code>，所以它的初始化方式也会有很多跟数组相关的，如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str_01 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;默认方式：&quot;</span> <span class="token operator">+</span> str_01<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> str_02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;char方式：&quot;</span> <span class="token operator">+</span> str_02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> str_03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;int方式：&quot;</span> <span class="token operator">+</span> str_03<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> str_04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;byte方式：&quot;</span> <span class="token operator">+</span> str_04<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这些方式都可以初始化，并且最终的结果是一致的，<code>abc</code>。如果说初始化的方式没用让你感受到它是数据结构，那么<code>str_01.charAt(0);</code>呢，只要你往源码里一点，就会发现它是 <code>O(1)</code> 的时间复杂度从数组中获取元素，所以效率也是非常高，源码如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-不可变-final" tabindex="-1"><a class="header-anchor" href="#_2-不可变-final" aria-hidden="true">#</a> 2. 不可变(final)</h3><p>字符串创建后是不可变的，你看到的<code>+加号</code>连接操作，都是创建了新的对象把数据存放过去，通过源码就可以看到；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-12-03.png" alt="小傅哥 &amp; String 不可变"></p><p>从源码中可以看到，<code>String</code> 的类和用于存放字符串的方法都用了 <code>final</code> 修饰，也就是创建了以后，这些都是不可变的。</p><p><strong>举个例子</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str_01 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str_02 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str_03 <span class="token operator">=</span> str_01 <span class="token operator">+</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不考虑其他情况，对于程序初始化。以上这些代码 <code>str_01</code>、<code>str_02</code>、<code>str_03</code>，都会初始化几个对象呢？<em>其实这个初始化几个对象从侧面就是反应对象是否可变性。</em></p><p>接下来我们把上面代码反编译，通过指令码看到底创建了几个对象。</p><p><strong>反编译下</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String abc</span>
       <span class="token number">2</span><span class="token operator">:</span> astore_1
       <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String abcdef</span>
       <span class="token number">5</span><span class="token operator">:</span> astore_2
       <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">4</span>                  <span class="token comment">// class java/lang/StringBuilder</span>
       <span class="token number">9</span><span class="token operator">:</span> dup
      <span class="token number">10</span><span class="token operator">:</span> invokespecial #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
      <span class="token number">13</span><span class="token operator">:</span> aload_1
      <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
      <span class="token number">17</span><span class="token operator">:</span> ldc           #<span class="token number">7</span>                  <span class="token comment">// String def</span>
      <span class="token number">19</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
      <span class="token number">22</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
      <span class="token number">25</span><span class="token operator">:</span> astore_3
      <span class="token number">26</span><span class="token operator">:</span> <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>str_01 = &quot;abc&quot;</code>，指令码：<code>0: ldc</code>，创建了一个对象。</li><li><code>str_02 = &quot;abc&quot; + &quot;def&quot;</code>，指令码：<code>3: ldc // String abcdef</code>，得益于JVM编译期的优化，两个字符串会进行相连，创建一个对象存储。</li><li><code>str_03 = str_01 + &quot;def&quot;</code>，指令码：<code>invokevirtual</code>，这个就不一样了，它需要把两个字符串相连，会创建<code>StringBuilder</code>对象，直至最后<code>toString:()</code>操作，共创建了三个对象。</li></ul><p><strong>所以</strong>，我们看到，字符串的创建是不能被修改的，相连操作会创建出新对象。</p><h3 id="_3-intern" tabindex="-1"><a class="header-anchor" href="#_3-intern" aria-hidden="true">#</a> 3. intern()</h3><h4 id="_3-1-经典题目" tabindex="-1"><a class="header-anchor" href="#_3-1-经典题目" aria-hidden="true">#</a> 3.1 经典题目</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str_3 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str_1 <span class="token operator">==</span> str_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str_1 <span class="token operator">==</span> str_2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str_1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str_2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str_1 <span class="token operator">==</span> str_3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str_1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str_3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一道经典的 <code>String</code> 字符串面试题，乍一看可能还会有点晕。答案如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token boolean">false</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-源码分析" tabindex="-1"><a class="header-anchor" href="#_3-2-源码分析" aria-hidden="true">#</a> 3.2 源码分析</h4><p>看了答案有点感觉了吗，其实可能你了解方法 <code>intern()</code>，这里先看下它的源码；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Returns a canonical representation for the string object.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * A pool of strings, initially empty, is maintained privately by the
 * class <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span>.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * When the intern method is invoked, if the pool already contains a
 * string equal to this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object as determined by
 * the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> method, then the string from the pool is
 * returned. Otherwise, this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object is added to the
 * pool and a reference to this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object is returned.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * It follows that for any two strings <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">t</span></span><span class="token punctuation">}</span>,
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>
 * if and only if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * All literal strings and string-valued constant expressions are
 * interned. String literals are defined in section 3.10.5 of the
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">&gt;</span></span>The Java<span class="token entity named-entity" title="™">&amp;trade;</span> Language Specification<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">&gt;</span></span>.
 *
 * <span class="token keyword">@return</span>  a string that has the same contents as this string, but is
 *          guaranteed to be from a pool of unique strings.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码和注释什么意思呢？</p><p><strong>native</strong>，说明 <code>intern()</code> 是一个本地方法，底层通过JNI调用C++语言编写的功能。</p><p><strong>\\openjdk8\\jdk\\src\\share\\native\\java\\lang\\String.c</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>Java_java_lang_String_intern(JNIEnv *env, jobject this)  
{  
    return JVM_InternString(env, this);  
}  

oop result = StringTable::intern(string, CHECK_NULL);

oop StringTable::intern(Handle string_or_null, jchar* name,  
                        int len, TRAPS) {  
  unsigned int hashValue = java_lang_String::hash_string(name, len);  
  int index = the_table()-&gt;hash_to_index(hashValue);  
  oop string = the_table()-&gt;lookup(index, name, len, hashValue);  
  if (string != NULL) return string;   
  return the_table()-&gt;basic_add(index, string_or_null, name, len,  
                                hashValue, CHECK_NULL);  
}  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70),v={href:"https://codeload.github.com/abhijangda/OpenJDK8/zip/master",target:"_blank",rel:"noopener noreferrer"},m={href:"https://bugstack.cn/interview/2020/08/13/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C-%E7%AC%AC4%E7%AF%87-HashMap%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5-%E6%9F%A5%E6%89%BE-%E5%88%A0%E9%99%A4-%E9%81%8D%E5%8E%86-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,[s("StringTable 是一个固定长度的数组 "),n("code",null,"1009"),s(" 个大小，jdk1.6不可调、jdk1.7可以设置"),n("code",null,"-XX:StringTableSize"),s("，按需调整。")],-1),b=e(`<h4 id="_3-3-问题图解" tabindex="-1"><a class="header-anchor" href="#_3-3-问题图解" aria-hidden="true">#</a> 3.3 问题图解</h4><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-12-04.png" alt="小傅哥 &amp; 图解true/false"></p><p>看图说话，如下；</p><ol><li>先说 <code>==</code>，基础类型比对的是值，引用类型比对的是地址。另外，equal 比对的是哈希值。</li><li>两个new出来的对象，地址肯定不同，所以是false。</li><li>intern()，直接把值推进了常量池，所以两个对象都做了 <code>intern()</code> 操作后，比对是常量池里的值。</li><li><code>str_3 = &quot;ab&quot;</code>，赋值，JVM编译器做了优化，不会重新创建对象，直接引用常量池里的值。所以<code>str_1.intern() == str_3</code>，比对结果是true。</li></ol><p>理解了这个结构，根本不需要死记硬背应对面试，让懂了就是真的懂，大脑也会跟着愉悦。</p><h2 id="五、stringbuilder-源码分析" tabindex="-1"><a class="header-anchor" href="#五、stringbuilder-源码分析" aria-hidden="true">#</a> 五、StringBuilder 源码分析</h2><h3 id="_1-初始化-1" tabindex="-1"><a class="header-anchor" href="#_1-初始化-1" aria-hidden="true">#</a> 1. 初始化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这几种方式都可以初始化，你可以传一个初始化容量，也可以初始化一个默认的字符串。它的源码如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">AbstractStringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定睛一看，这就是在初始化数组呀！那是不操作起来跟使用 <code>ArrayList</code> 似的呀！</p><h3 id="_2-添加元素" tabindex="-1"><a class="header-anchor" href="#_2-添加元素" aria-hidden="true">#</a> 2. 添加元素</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加元素的操作很简单，使用 <code>append</code> 即可，那么它是怎么往数组中存放的呢，需要扩容吗？</p><h4 id="_2-1-入口方法" tabindex="-1"><a class="header-anchor" href="#_2-1-入口方法" aria-hidden="true">#</a> 2.1 入口方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count <span class="token operator">+=</span> len<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个是 <code>public final class StringBuilder extends AbstractStringBuilder</code>，的父类与 <code>StringBuffer</code> 共用这个方法。</li><li>这里包括了容量检测、元素拷贝、记录 <code>count</code> 数量。</li></ul><h4 id="_2-2-扩容操作" tabindex="-1"><a class="header-anchor" href="#_2-2-扩容操作" aria-hidden="true">#</a> 2.2 扩容操作</h4><p><strong>ensureCapacityInternal(count + len);</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * This method has the same contract as ensureCapacity, but is
 * never synchronized.
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// overflow-conscious code</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">-</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">expandCapacity</span><span class="token punctuation">(</span>minimumCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * This implements the expansion semantics of ensureCapacity with no
 * size check or synchronization.
 */</span>
<span class="token keyword">void</span> <span class="token function">expandCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minimumCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        newCapacity <span class="token operator">=</span> minimumCapacity<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newCapacity <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，<code>StringBuilder</code>，就跟操作数组的原理一样，都需要检测容量大小，按需扩容。扩容的容量是 n * 2 + 2，另外把原有元素拷贝到新新数组中。</p><h4 id="_2-3-填充元素" tabindex="-1"><a class="header-anchor" href="#_2-3-填充元素" aria-hidden="true">#</a> 2.3 填充元素</h4><p><strong>str.getChars(0, len, value, count);</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getChars</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> srcBegin<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> dstBegin<span class="token punctuation">,</span> srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加元素的方式是基于 <code>System.arraycopy</code> 拷贝操作进行的，这是一个本地方法。</p><h4 id="_2-4-tostring" tabindex="-1"><a class="header-anchor" href="#_2-4-tostring" aria-hidden="true">#</a> 2.4 toString()</h4><p>既然 <code>stringBuilder</code> 是数组，那么它是怎么转换成字符串的呢？</p><p><code>stringBuilder.toString();</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Create a copy, don&#39;t share the array</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实需要用到它是 <code>String</code> 字符串的时候，就是使用 <code>String</code> 的构造函数传递数组进行转换的，这个方法在我们上面讲解 <code>String</code> 的时候已经介绍过。</p><h2 id="六、stringbuffer-源码分析" tabindex="-1"><a class="header-anchor" href="#六、stringbuffer-源码分析" aria-hidden="true">#</a> 六、StringBuffer 源码分析</h2><p><code>StringBuffer</code> 与 <code>StringBuilder</code>，API的使用和底层实现上基本一致，维度不同的是 <code>StringBuffer</code> 加了 <code>synchronized</code> 🔒锁，所以它是线程安全的。源码如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    toStringCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，<code>synchronized</code> 不是重量级锁吗，JVM对它有什么优化呢？</p><p>其实为了减少获得锁与释放锁带来的性能损耗，从而引入了偏向锁、轻量级锁、重量级锁来进行优化，它的进行一个锁升级，如下图(此图引自互联网用户：<strong>韭韭韭韭菜</strong>，画的非常优秀)；</p><p><img src="https://bugstack.cn/assets/images/2020/interview/interview-12-05.png" alt="小傅哥 &amp; 此图引自互联网，画的非常漂亮"></p><ol><li>从无锁状态开始，当线程进入 <code>synchronized</code> 同步代码块，会检查对象头和栈帧内是否有当前线下ID编号，无则使用 <code>CAS</code> 替换。</li><li>解锁时，会使用 <code>CAS</code> 将 <code>Displaced Mark Word</code> 替换回到对象头，如果成功，则表示竞争没有发生，反之则表示当前锁存在竞争锁就会升级成重量级锁。</li><li>另外，大多数情况下锁🔒是不发生竞争的，基本由一个线程持有。所以，为了避免获得锁与释放锁带来的性能损耗，所以引入锁升级，升级后不能降级。</li></ol><h2 id="七、常用api" tabindex="-1"><a class="header-anchor" href="#七、常用api" aria-hidden="true">#</a> 七、常用API</h2><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>str.concat(&quot;cde&quot;)</code></td><td>字符串连接，替换+号</td></tr><tr><td>2</td><td><code>str.length()</code></td><td>获取长度</td></tr><tr><td>3</td><td><code>isEmpty()</code></td><td>判空</td></tr><tr><td>4</td><td><code>str.charAt(0)</code></td><td>获取指定位置元素</td></tr><tr><td>5</td><td><code>str.codePointAt(0)</code></td><td>获取指定位置元素，并返回ascii码值</td></tr><tr><td>6</td><td>str.getBytes()</td><td>获取byte[]</td></tr><tr><td>7</td><td>str.equals(&quot;abc&quot;)</td><td>比较</td></tr><tr><td>8</td><td>str.equalsIgnoreCase(&quot;AbC&quot;)</td><td>忽略大小写，比对</td></tr><tr><td>9</td><td>str.startsWith(&quot;a&quot;)</td><td>开始位置值判断</td></tr><tr><td>10</td><td>str.endsWith(&quot;c&quot;)</td><td>结尾位置值判断</td></tr><tr><td>11</td><td>str.indexOf(&quot;b&quot;)</td><td>判断元素位置，开始位置</td></tr><tr><td>12</td><td>str.lastIndexOf(&quot;b&quot;)</td><td>判断元素位置，结尾位置</td></tr><tr><td>13</td><td>str.substring(0, 1)</td><td>截取</td></tr><tr><td>14</td><td>str.split(&quot;,&quot;)</td><td>拆分，可以支持正则</td></tr><tr><td>15</td><td>str.replace(&quot;a&quot;,&quot;d&quot;)、replaceAll</td><td>替换</td></tr><tr><td>16</td><td>str.toUpperCase()</td><td>转大写</td></tr><tr><td>17</td><td>str.toLowerCase()</td><td>转小写</td></tr><tr><td>18</td><td>str.toCharArray()</td><td>转数组</td></tr><tr><td>19</td><td>String.format(str, &quot;&quot;)</td><td>格式化，%s、%c、%b、%d、%x、%o、%f、%a、%e、%g、%h、%%、%n、%tx</td></tr><tr><td>20</td><td>str.valueOf(&quot;123&quot;)</td><td>转字符串</td></tr><tr><td>21</td><td>trim()</td><td>格式化，首尾去空格</td></tr><tr><td>22</td><td>str.hashCode()</td><td>获取哈希值</td></tr></tbody></table><h2 id="八、总结" tabindex="-1"><a class="header-anchor" href="#八、总结" aria-hidden="true">#</a> 八、总结</h2><ul><li><code>业精于勤,荒于嬉</code>，你学到的知识不一定只是为了面试准备，还更应该是拓展自己的技术深度和广度。这个过程可能很痛苦，但总得需要某一个烧脑的过程，才让其他更多的知识学起来更加容易。</li><li>本文介绍了 <code>String、StringBuilder、StringBuffer</code>，的数据结构和源码分析，更加透彻的理解后，也能更加准确的使用，不会被因为不懂而犯错误。</li><li>想把代码写好，至少要有这四面内容，包括；数据结构、算法、源码、设计模式，这四方面在加上业务经验与个人视野，才能真的把一个需求、一个大项目写的具备良好的扩展性和易维护性。</li></ul>`,41);function h(f,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",d,[s("https://bugstack.cn"),t(a)])]),k,n("ul",null,[n("li",null,[s("代码块有点长这里只截取了部分内容，源码可以学习开源jdk代码，连接： "),n("a",v,[s("https://codeload.github.com/abhijangda/OpenJDK8/zip/master"),t(a)])]),n("li",null,[s("C++这段代码有点像HashMap的哈希桶+链表的数据结构，用来存放字符串，所以如果哈希值冲突严重，就会导致链表过长。这在我们讲解hashMap中已经介绍，可以回看 "),n("a",m,[s("HashMap源码"),t(a)])]),g]),b])}const w=p(l,[["render",h],["__file","2020-09-17-mianjingshouce · di11pian《StringBuilder bi String kuai？kongzuibaiyade，zhengjune！》.html.vue"]]);export{w as default};
