import{_ as t,r as p,o as c,c as o,a as n,b as s,d as e,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"第18章-挂印封刀-数据类型转换工厂设计实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第18章-挂印封刀-数据类型转换工厂设计实现","aria-hidden":"true"},"#"),s(" 第18章：挂印封刀，数据类型转换工厂设计实现")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v={href:"https://articles.zsxq.com/id_d0cpbs31880x.html",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("h2",{id:"零、优秀作业",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#零、优秀作业","aria-hidden":"true"},"#"),s(" 零、优秀作业")],-1),g={href:"https://t.zsxq.com/06jiAub2n",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/07vFe2vJ6",target:"_blank",rel:"noopener noreferrer"},h={href:"https://t.zsxq.com/08YsTAwMZ",target:"_blank",rel:"noopener noreferrer"},f={href:"https://t.zsxq.com/09SaqdeaX",target:"_blank",rel:"noopener noreferrer"},j=l(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>值得的，总是在精雕细琢！</code></p><p>在你写的程序开发中，你有为一个类名、方法名、属性名，反复斟酌吗？代码格式间隔大小、编写方式、注释描述不断的提升吗？你有为一个功能逻辑的实现不断的重构吗？<strong>我有，我一直都有</strong>，为了能写好一块代码，甚至会忘记时间从上午到下午，当能实现完成后，会欣赏似的看待自己的代码，<em>也根本不舍得把他交给别人</em>！</p><p>如果你也是这样的工程师，其实在你不去刻意追求大厂、高薪、好职位的时候，也会把你送到那个位置上去。想不被这个已经有些内卷的行业打下去，那么基本就需要选择一条能沉淀下来核心知识的路径来提升自己，做好长期规划，让以后你的30岁有30岁的能力，35岁有35岁的经历！</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>其实实现到本章节，关于IOC、AOP在日常使用和面试中高频出现的技术点都该涵盖了。那么为了补全整个框架内容的结构，方便读者后续在阅读 Spring 时不至于对<code>类型转换</code>的知识体系陌生，这里再添加一些关于此类知识的实现。</p><p>类型转换也可以叫做数据转换，比如从String到Integer、从String到Date、从Dubbo到Long等等，但这些操作不能在已经使用框架的情况下还需要手动处理，所以我们要把这样的功能扩展到Spring框架中。</p><h2 id="三、设计" tabindex="-1"><a class="header-anchor" href="#三、设计" aria-hidden="true">#</a> 三、设计</h2><p>如果我们来把只是看上去一个简单的类型转换操作抽象成框架，那么它就需要一个标准的接口，谁实现这个接口就具备类型转换的具体实现，提供类型转换的能力。那么在有了这样接口后，还需要类型转换服务的注册、工厂等内容，才可以把类型转换抽象成一个组件服务。整体设计结构如下图：</p><p><img src="https://bugstack.cn/assets/images/spring/spring-18-01.png" alt=""></p><ul><li>首先从工厂出发我们需要实现一个 <code>ConversionServiceFactoryBean</code> 来对类型转换服务进行操作。</li><li>而实现类型转换的服务，需要定义 <code>Converter</code> 转换类型、<code>ConverterRegistry</code> 注册类型转换功能，另外转换类型的操作较多，所以这里也会需要定义一个类型转换工厂 <code>ConverterFactory</code> 各个具体的转换操作来实现这个工厂接口。</li></ul><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>small<span class="token operator">-</span>spring<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">17</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework
    │           ├── aop
    │           │   ├── aspectj
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   ├── framework 
    │           │   │   ├── adapter
    │           │   │   │   └── <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">.</span>java
    │           │   │   ├── autoproxy
    │           │   │   │   └── <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Cglib2AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">AdvisedSupport</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Advisor</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ClassFilter</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodMatcher</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Pointcut</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">TargetSource</span><span class="token punctuation">.</span>java
    │           ├── beans
    │           │   ├── factory  
    │           │   │   ├── annotation
    │           │   │   │   ├── <span class="token class-name">Autowired</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">Qualifier</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">Value</span><span class="token punctuation">.</span>java
    │           │   │   ├── config
    │           │   │   │   ├── <span class="token class-name">AutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanReference</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   ├── support
    │           │   │   │   ├── <span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">FactoryBeanRegistrySupport</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">.</span>java  
    │           │   │   ├── support
    │           │   │   │   └── <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Aware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanNameAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">DisposableBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">FactoryBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">HierarchicalBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">InitializingBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ObjectFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">PropertyPlaceholderConfigurer</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeansException</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PropertyValue</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">PropertyValues</span><span class="token punctuation">.</span>java 
    │           ├── context
    │           │   ├── annotation
    │           │   │   ├── <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ClassPathScanningCandidateComponentProvider</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">Scope</span><span class="token punctuation">.</span>java 
    │           │   ├── event
    │           │   │   ├── <span class="token class-name">AbstractApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextClosedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   ├── support
    │           │   │   ├── <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractRefreshableApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">ConversionServiceFactoryBean</span><span class="token punctuation">.</span>java     
    │           │   ├── <span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEvent</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span>java 
    │           │   └── <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span>java
    │           ├── core
    │           │   ├── convert
    │           │   │   ├── converter
    │           │   │   │   ├── <span class="token class-name">Converter</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">ConverterFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">ConverterRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">GenericConverter</span><span class="token punctuation">.</span>java    
    │           │   │   ├── support  
    │           │   │   │   ├── <span class="token class-name">DefaultConversionService</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">GenericConversionService</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">StringToNumberConverterFactory</span><span class="token punctuation">.</span>java      
    │           │   │   └── <span class="token class-name">ConversionService</span><span class="token punctuation">.</span>java     
    │           │   └── io    
    │           │   	  ├── <span class="token class-name">ClassPathResource</span><span class="token punctuation">.</span>java 
    │           │       ├── <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">.</span>java 
    │           │       ├── <span class="token class-name">FileSystemResource</span><span class="token punctuation">.</span>java 
    │           │       ├── <span class="token class-name">Resource</span><span class="token punctuation">.</span>java 
    │           │       ├── <span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span>java
    │           │       └── <span class="token class-name">UrlResource</span><span class="token punctuation">.</span>java
    │           ├── stereotype
    │           │   └── <span class="token class-name">Component</span><span class="token punctuation">.</span>java
    │           └── utils
    │               ├── <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span>java
    │               └── <span class="token class-name">StringValueResolver</span><span class="token punctuation">.</span>java
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test
                ├── bean
                │   └── <span class="token class-name">Husband</span><span class="token punctuation">.</span>java
                ├── bean
                │   ├── <span class="token class-name">ConvertersFactoryBean</span><span class="token punctuation">.</span>java
                │   ├── <span class="token class-name">StringToIntegerConverter</span><span class="token punctuation">.</span>java  
                │   └── <span class="token class-name">StringToLocalDateConverter</span><span class="token punctuation">.</span>java  
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：Spring 专栏，获取完整源码</code></p><h3 id="_2-定义类型转换接口" tabindex="-1"><a class="header-anchor" href="#_2-定义类型转换接口" aria-hidden="true">#</a> 2. 定义类型转换接口</h3><p><strong>包：cn.bugstack.springframework.core.convert.converter</strong></p><p><strong>类型转换处理接口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** Convert the source object of type <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">S</span></span></span><span class="token punctuation">}</span> to target type <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">T</span></span></span><span class="token punctuation">}</span>. */</span>
    <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">S</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类型转换工厂</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConverterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Get the converter to convert from S to target type T, where T is also an instance of R.
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the target type
     * <span class="token keyword">@param</span> <span class="token parameter">targetType</span> the target type to convert to
     * <span class="token keyword">@return</span> a converter from S to T
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getConverter</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类型转换注册接口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConverterRegistry</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Add a plain converter to this registry.
     * The convertible source/target type pair is derived from the Converter&#39;s parameterized types.
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the parameterized types could not be resolved
     */</span>
    <span class="token keyword">void</span> <span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Add a generic converter to this registry.
     */</span>
    <span class="token keyword">void</span> <span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token class-name">GenericConverter</span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Add a ranged converter factory to this registry.
     * The convertible source/target type pair is derived from the ConverterFactory&#39;s parameterized types.
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the parameterized types could not be resolved
     */</span>
    <span class="token keyword">void</span> <span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">ConverterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converterFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Converter、ConverterFactory、ConverterRegistry，都是用于定义类型转换操作的相关接口，后续所有的实现都需要围绕这些接口来实现，具体的代码功能可以进行调试验证。</li></ul><h3 id="_3-实现类型转换服务" tabindex="-1"><a class="header-anchor" href="#_3-实现类型转换服务" aria-hidden="true">#</a> 3. 实现类型转换服务</h3><p><strong>cn.bugstack.springframework.core.convert.support.DefaultConversionService</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultConversionService</span> <span class="token keyword">extends</span> <span class="token class-name">GenericConversionService</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">DefaultConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addDefaultConverters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addDefaultConverters</span><span class="token punctuation">(</span><span class="token class-name">ConverterRegistry</span> converterRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加各类类型转换工厂</span>
        converterRegistry<span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringToNumberConverterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>DefaultConversionService 是继承 GenericConversionService 的实现类，而 GenericConversionService 实现了 ConversionService, ConverterRegistry 两个接口，用于 canConvert 判断和转换接口 convert 操作。</li></ul><h3 id="_4-创建类型转换工厂" tabindex="-1"><a class="header-anchor" href="#_4-创建类型转换工厂" aria-hidden="true">#</a> 4. 创建类型转换工厂</h3><p><strong>cn.bugstack.springframework.context.support.ConversionServiceFactoryBean</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConversionServiceFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConversionService</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">GenericConversionService</span> conversionService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ConversionService</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> conversionService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> conversionService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>conversionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">registerConverters</span><span class="token punctuation">(</span>converters<span class="token punctuation">,</span> conversionService<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerConverters</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">,</span> <span class="token class-name">ConverterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>converters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> converter <span class="token operator">:</span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericConverter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">GenericConverter</span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">ConverterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    registry<span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConverterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Each converter object must implement one of the &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;Converter, ConverterFactory, or GenericConverter interfaces&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConverters</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>converters <span class="token operator">=</span> converters<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有了 FactoryBean 的实现就可以完成工程对象的操作，可以提供出转换对象的服务 GenericConversionService，另外在 afterPropertiesSet 中调用了注册转换操作的类。最终这个类会被配置到 spring.xml 中在启动的过程加载。</li></ul><h3 id="_5-类型转换服务使用" tabindex="-1"><a class="header-anchor" href="#_5-类型转换服务使用" aria-hidden="true">#</a> 5. 类型转换服务使用</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">PropertyValues</span> propertyValues <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyValue</span> propertyValue <span class="token operator">:</span> propertyValues<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> value <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">BeanReference</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// A 依赖 B，获取 B 的实例化</span>
                <span class="token class-name">BeanReference</span> beanReference <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanReference</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
                value <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>beanReference<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 类型转换</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> sourceType <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ConversionService</span> conversionService <span class="token operator">=</span> <span class="token function">getConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>conversionService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>conversionService<span class="token punctuation">.</span><span class="token function">canConvert</span><span class="token punctuation">(</span>sourceType<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        value <span class="token operator">=</span> conversionService<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 反射设置属性填充</span>
             <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">&quot;Error setting property values：&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot; message：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 AbstractAutowireCapableBeanFactory#applyPropertyValues 填充属性的操作中，具体使用了类型转换的功能。</li><li>在 AutowiredAnnotationBeanPostProcessor#postProcessPropertyValues 也有同样的属性类型转换操作。</li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Husband</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> wifiName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Date</span> marriageDate<span class="token punctuation">;</span> <span class="token comment">// 添加一个日期类的转换操作</span>
 		
    <span class="token comment">// ... get/set</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>转换时间的操作类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToLocalDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LocalDate</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DateTimeFormatter</span> <span class="token constant">DATE_TIME_FORMATTER</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">StringToLocalDateConverter</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token constant">DATE_TIME_FORMATTER</span> <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token constant">DATE_TIME_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Husband 是一个基础对象类设置了时间属性，之后再添加一个类型转换的操作用于转换时间信息。</li></ul><h3 id="_2-属性配置文件" tabindex="-1"><a class="header-anchor" href="#_2-属性配置文件" aria-hidden="true">#</a> 2. 属性配置文件</h3><p><strong>spring.xml</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>husband<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.test.bean.Husband<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wifiName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>你猜<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>marriageDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2021-08-08<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>conversionService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>converters<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>converters<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>converters<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.test.converter.ConvertersFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置基础Bean对象，设置属性的日期，同时再添加类型转换的服务和自己实现的 <code>ConvertersFactoryBean</code></li></ul><h3 id="_3-单元测试" tabindex="-1"><a class="header-anchor" href="#_3-单元测试" aria-hidden="true">#</a> 3. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Husband</span> husband <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;husband&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Husband</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> husband<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_StringToIntegerConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringToIntegerConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringToIntegerConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> num <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_StringToNumberConverterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringToNumberConverterFactory</span> converterFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringToNumberConverterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stringToIntegerConverter <span class="token operator">=</span> converterFactory<span class="token punctuation">.</span><span class="token function">getConverter</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> stringToIntegerConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> stringToLongConverter <span class="token operator">=</span> converterFactory<span class="token punctuation">.</span><span class="token function">getConverter</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> stringToLongConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>测试结果：<span class="token class-name">Husband</span><span class="token punctuation">{</span>wifiName<span class="token operator">=</span><span class="token char">&#39;你猜&#39;</span><span class="token punctuation">,</span> marriageDate<span class="token operator">=</span><span class="token class-name">Sun</span> <span class="token class-name">Aug</span> <span class="token number">08</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">CST</span> <span class="token number">2021</span><span class="token punctuation">}</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个测试内容还是比较简单的，可以自行验证结果，虽然最终的结果看上去比较简单，但整个框架结构实现设计还是蛮复杂的，把这么一个转换操作抽象为接口适配、工厂模型等方式，还是很值得借鉴的。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>本章节实现的类型转换操作如果只是功能性的开发，就像你自己承接的需求那样，可能只是简单的if判断就搞定了，但放在一个成熟的框架要中要考虑的是可复用性、可扩展性，所以会看到接口的定义、工厂的使用等等设计模式在这里体现。</li><li>最后非常感谢你能坚持学习到这个章节，如果你在学习的过程也是每一个章节都是对着文章、写着代码代码、调试着bug，感悟着设计，那么你一定会在这个过程中得到很多很多，以后再阅读Spring的源码也就不会感觉那么难了。</li></ul>`,53);function w(C,S){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)]),d,s("星球："),n("a",v,[s("https://articles.zsxq.com/id_d0cpbs31880x.html"),e(a)])]),m,b,n("ul",null,[n("li",null,[n("a",g,[s("类型转换机制设计 @Rechie"),e(a)])]),n("li",null,[n("a",y,[s("Spring 全核心类图总结 @NibNait"),e(a)])]),n("li",null,[n("a",h,[s("逐渐完善Spring全体系流程图 @Alex"),e(a)])]),n("li",null,[n("a",f,[s("类型转换也就是数据转换，从 String 转为 Integer、String 转为 Date、Double 转为 Long 都是很常用的功能 @水中捞月"),e(a)])])]),j])}const A=t(i,[["render",w],["__file","2021-08-09-di18zhang：guayinfengdao，shujuleixingzhuanhuangongchangshejishixian.html.vue"]]);export{A as default};
