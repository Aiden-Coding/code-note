import{_ as p,o as e,c as a,e as i}from"./app-3RcBQnkC.js";const g={},t=i(`<h1 id="汇编语言-debug-实战" tabindex="-1"><a class="header-anchor" href="#汇编语言-debug-实战" aria-hidden="true">#</a> 汇编语言 Debug 实战</h1><ul><li><a href="#debug-%E5%AE%9E%E6%88%98">Debug 实战</a><ul><li><a href="#debug-%E6%98%AF%E4%BB%80%E4%B9%88">Debug 是什么</a></li><li><a href="#debug-%E5%AE%9E%E6%88%98-1">Debug 实战</a><ul><li><a href="#debug--r">Debug -r</a></li><li><a href="#debug--d">Debug -d</a></li><li><a href="#debug--e">Debug -e</a></li><li><a href="#debug--u">Debug -u</a></li><li><a href="#debug--t">Debug -t</a></li><li><a href="#debug--a">Debug -a</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><p>我们上篇文章了解了一下基本的寄存器，这篇文章我们来进行实际操作一下。</p><p>我们以后将会用到很多 Debug 命令，这里我们先来熟悉一下它们。</p><h2 id="debug-是什么" tabindex="-1"><a class="header-anchor" href="#debug-是什么" aria-hidden="true">#</a> Debug 是什么</h2><p>Debug 是 Windows / Dos 操作系统提供的一种功能。使用 Debug 能让我们方便查看 CPU 各种寄存器的值、内存情况，方便我们调试指令、跟踪程序的运行过程。</p><p>接下来我们会用到很多 debug 命令，但是使用这些命令的前提是，你需要在电脑上安装一下 debug，Windows/Mac 都可以安装，获取链接我已经给你找出来了。阿，忘记说了，我们这里使用的是 <em>Dos box</em>来模拟汇编的操作环境。</p><p>传送门（Mac 和 Windows 都是）：https://www.dosbox.com/download.php?main=1</p><p><img src="http://www.cxuan.vip/image-20230121114414410.png" alt=""></p><p>下载完成后打开 DosBox ，打开之后是这样的。</p><p><img src="http://www.cxuan.vip/image-20230121114426459.png" alt=""></p><p>此时我们输入 debug 命令应该提示的是</p><p><img src="http://www.cxuan.vip/image-20230121114439214.png" alt=""></p><p>因为我们还没有进行连接和挂载，此时我们执行</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>mount c D<span class="token operator">:</span>\\debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行这条命令时，你需要现在 D 盘下创建一个 debug 文件夹，然后我们挂载到 debug 下面。</p><p>并且执行 <code>C:</code> 切换到 C 盘路径下。</p><p><img src="http://www.cxuan.vip/image-20230121114452423.png" alt=""></p><p>此时我们就可以执行 debug 命令了。</p><p><img src="http://www.cxuan.vip/image-20230121114502260.png" alt=""></p><p>这里需要注意一点，我在 Windows 10 系统下搭建 Debug 环境时，在挂载完成后输入 debug ，还是提示 <em>Illegal command:debug</em> ，此时你需要再下载一个 debug.exe ，贴心的我也把下载地址给你了。</p><blockquote><p>下载地址：https://pan.baidu.com/s/177arSA34plWqV-iyffWpEw#list/path=%2F 密码：3akd</p></blockquote><p>需要下载里面的 <em>debug.exe</em>，然后把它放在你挂载的路径下，这里我挂载的路径时 D 盘下的 debug 文件夹。</p><p>放置完成之后，再输入 debug 就可以了。</p><hr><p>因为每次打开 Dosbox 都会执行上面这些命令，真的好烦，那怎么办呢？一个简单的办法是在 Dosbox 安装路径下找到</p><p><img src="http://www.cxuan.vip/image-20230121114533023.png" alt=""></p><p>打开之后，在末尾键入</p><p><img src="http://www.cxuan.vip/image-20230121114540587.png" alt=""></p><p>就 OK 了，下次直接打开 Dosbox ，会默认执行这三条命令，至此，就是我搭建 Dosbox 遇到的所有问题了。</p><h2 id="debug-实战" tabindex="-1"><a class="header-anchor" href="#debug-实战" aria-hidden="true">#</a> Debug 实战</h2><p>玩儿汇编得学会用 Debug ，Debug 是一种<strong>调试程序</strong>，通过 Debug 能让我们能够看到内存值，跟踪堆栈情况，看到寄存器所暂存的内容等，同时也能够更好地帮助我们理解汇编代码，所以学会 Debug ，<strong>非常重要</strong>，这是一种不可或缺的动手能力。</p><p>下面我们会用到几种 Debug 命令，这里先简单介绍下。</p><img src="http://www.cxuan.vip/image-20230121115607334.png" style="zoom:50%;"><p>Debug 命令有很多，不过常用的一般就上面这几个。</p><p>好了，现在我们直接进入正题，开始在 Dosbox 上正式进行 Debug 操作，首先打开 Dosbox。</p><p>嗯。。。。。。这个界面我们打开很多次了。</p><p>那我写个命令呢？ 好吧，没演示过，下面就来了！</p><h3 id="debug-r" tabindex="-1"><a class="header-anchor" href="#debug-r" aria-hidden="true">#</a> Debug -r</h3><p>亲，用 <strong>Debug -r</strong> 就可以查看和修改 CPU 寄存器内容了呢。</p><img src="http://www.cxuan.vip/image-20230121114727857.png" style="zoom:50%;"><p>查看寄存器内容。</p><img src="http://www.cxuan.vip/image-20230121114739831.png" style="zoom:50%;"><blockquote><p>这里需要注意一下 -r 大小写的问题，Debug -r 是查看寄存器内容。而 -R 则是无效指令。</p></blockquote><p>上图列出来了很多寄存器，你可能觉得无从下手，不要乱，我们先从最基本的开始入手，也就是 CS 和 IP，CS（Code Segment）是代码段寄存器，一般也被称为段基址，可以认为是程序访问的入口，CPU 需要从 CS 中找到从哪个位置开始取指执行，但是我们还不知道要取哪一段，这时候 IP 的作用就体现出来了，IP（Instruction Pointer）就是指令指针寄存器，也叫做偏移地址，它会告诉我们从段基址开始，取哪一段的地址。</p><p>可以使用段基址:偏移地址来确定内存中的指定地址。</p><blockquote><p>这里我们只是简单聊一下这两个寄存器的概念，要了解这两个寄存器的具体作用，可以看笔者的上一篇文章</p></blockquote><p>使用 -r 也能够修改寄存器的内容，如下所示</p><p><img src="http://www.cxuan.vip/image-20230121114753527.png" alt=""></p><p>-r 一般的格式是 <strong>-r 寄存器</strong>，然后系统会进行冒号提示，后面就是你要修改的内容。</p><h3 id="debug-d" tabindex="-1"><a class="header-anchor" href="#debug-d" aria-hidden="true">#</a> Debug -d</h3><p>使用 -d 指令可以查看内存中的内容。</p><p><img src="http://www.cxuan.vip/image-20230121114804629.png" alt=""></p><p>输出的内存值默认是按照 CS:IP 的地址开始的，由于 CS 的值默认是 073F，而 IP 默认是 0100，所以 -d 的内存值是 073F:0100 。</p><p>-d 的格式很多，下面只介绍一下常用的几种格式。</p><p>形似 -d 1000:0 这种 <strong>-d 段基址 偏移地址</strong>的格式可以产生如下输出。</p><p><img src="http://www.cxuan.vip/image-20230121114816080.png" alt=""></p><p>如上图所示，Debug 会列出指定内存单元中的的内容。上图中的每一个 00 都表示 8 位，如果是 4A，那么这八位展开来说就是 0010 1011 。每一行有 16 个 8 位，所以构成了 128 位内存地址。</p><blockquote><p>为什么都是 00 呢，因为内存单元的值没有被改写，说白了就是这块内存区域没有存值，如何改写我们后面回收。</p></blockquote><p>每一行的中间都有一个 <code>-</code>，这个是为了便于我们阅读来设置的，- 号前后都有 8 个内存单元，这样便于查看。</p><p>右侧几个 ...... 表示每个内存单元可显示的 ASCII 码字符，因为内存没有值，所以也没有对应的 ASCII 码。我们可以数一下，每行有 16 个 . ，这表示每一个 00 都对应了一个 ASCII 码。</p><p>我们可以使用 -d 1000:9 这种 <strong>-d 段基址:起始偏移地址</strong> 格式来显示从 1000 的第几位开始。</p><p><img src="http://www.cxuan.vip/image-20230121114829242.png" alt=""></p><p>Debug 从 1000:9 开始，一直到 1000:88，一共是 128 个字节，第一行中的 1000:0 ~ 1000:8 中的内容没有显示。</p><p>还可以使用 -d 1000:0 9 这种 <strong>-d 段基址:起始偏移地址 结尾偏移地址</strong>的格式来输出。</p><p><img src="http://www.cxuan.vip/image-20230121114844377.png" alt=""></p><p>还可以是使用 -d 偏移地址来在不指定段基址的情况下，查看内存值。</p><p><img src="http://www.cxuan.vip/image-20230121114854065.png" alt=""></p><h3 id="debug-e" tabindex="-1"><a class="header-anchor" href="#debug-e" aria-hidden="true">#</a> Debug -e</h3><p>上面说的都是查看内存中指定位置或者区域的值，下面我们要来改写一下内存值。</p><p>使用 <code>-e</code> 可以改写内存值，比如我们想要改写 1000:0 ~ 1000:f 中的内容，可以使用 -e 1000:0 0 1 2 3 4 5 6 7 8 9 0 a b c d e f 这种方式，如下图所示。</p><p><img src="http://www.cxuan.vip/image-20230121114909453.png" alt=""></p><p>这里需要注意下，在进行 -e 改写的时候，每个值中间都有一个空格，如果没有空格的话，会当做一个内存值来看待。</p><p>然后用 -d 1000:0 看到我们刚改写的内存值。</p><p>还可以使用提问的方式来逐个修改从某一地址开始的内存单元的内容。</p><p>还是用 1000:100 来举例子，输出 -e 1000:100 后按下回车键。</p><p><img src="http://www.cxuan.vip/image-20230121114920508.png" alt=""></p><p>如上图所示，可以看到我们先输入了一次 -e 1000:100 这个指令，然后按下了回车键。</p><blockquote><p>注意，如果这里你按下了回车键，就相当于整个 -e 改写的过程已经完成。</p></blockquote><p>如果你想要继续改写后面内存中的值，你需要按下空格键。</p><p>我们改写了 1000:100 之后的内存值，然后使用 -d 1000:100 查看我们改写的内容是否生效。</p><p>-e 命令还可以支持写入字符，比如我们可以向 1000:0 这个位置开始写入数值和字符，-e 1000:0 1 &#39;a&#39; 2 &#39;b&#39; e &#39;c&#39; 。</p><p><img src="http://www.cxuan.vip/image-20230121114933044.png" alt=""></p><p>如上图所示，当我们向内存写入字符 &#39;a&#39; &#39;b&#39; &#39;c&#39; 的时候，会自动转换为 ASCII 码进行存储，在最右侧可以找到刚刚写入的字符。</p><h3 id="debug-u" tabindex="-1"><a class="header-anchor" href="#debug-u" aria-hidden="true">#</a> Debug -u</h3><p>如何向内存中写入一段机器码呢？比如我们想要在内存中写入一段机器码。</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code># 机器码		汇编指令
b80100		mov ax,0001
b90200		mov cx,0002
01c8			add ax,cx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 -e 来进行写入，向内存中写入 b8 01 00 b9 02 00 01 c8 这个机器码，如下所示</p><p><img src="http://www.cxuan.vip/image-20230121115046146.png" alt=""></p><p>我们使用 -e 写入之后，使用 -d 查看内存值，可以发现我们刚刚写入的值，但是却看不到机器码，所以机器码该如何看呢？</p><p>别急，还有个 -u 命令，这个就是看机器码的，如下图所示，我们使用 -u 命令显示我们写入的机器码。</p><p><img src="http://www.cxuan.vip/image-20230121115424651.png" alt=""></p><p>可以看到 1000:0000 ~ 1000:0006 这个内存地址使我们写入的机器码，-u 这个命令就是将内存单元的内容翻译为汇编指令并显示。</p><p>-u 输出的结果分为三部分显示：</p><ul><li>最左侧是每一条机器指令的地址；</li><li>中间是机器指令；</li><li>最右侧是机器指令执行的汇编指令。</li></ul><p>1000:0 处存放的是写入的机器码 B8 01 00 组成的机器指令，对应的汇编指令是 MOV AX,0001。</p><p>1000:0003 处存放的是写入的机器码 B9 02 00 组成的机器指令，对应的汇编指令是 MOV CX,0002。</p><p>1000:0006 处存放的是写入的机器码 C1 C8 所组成的机器指令，对应的汇编指令是 add ax,cx。</p><h3 id="debug-t" tabindex="-1"><a class="header-anchor" href="#debug-t" aria-hidden="true">#</a> Debug -t</h3><p>上面介绍的一系列指令包括我们上面提到的 Debug -e 机器码都是向内存中进行写入，那么如何执行这些指令呢？</p><p>我们可以使用 Debug -t 来执行写入的指令。使用 Debug -t 可以执行由 CS:IP 指向的指令。</p><p>既然是 -t 能够执行从 CS:IP 指向的命令，所以我们有必要将 CS:IP 指向 1000:0（因为我们前面将指令写在了 1000:0 处）。</p><p>首先我们需要执行 -r cs 1000 ，-r ip 0 把 CS:IP 赋值为 1000:0。</p><p>然后执行 -t 指令，下图是已经执行过的指令截图。</p><p><img src="http://www.cxuan.vip/image-20230121115437929.png" alt=""></p><p>可以看到，执行完 -t 指令之后，MOV AX,0001 这条指令被执行，当前 AX 寄存器的内容变为了 0001，这条汇编指令的意思就是把 0001 移动到 AX 寄存器中。</p><p>继续执行 -t 之后，我们可以看到寄存器的变化。</p><p><img src="http://www.cxuan.vip/image-20230121115449886.png" alt=""></p><h3 id="debug-a" tabindex="-1"><a class="header-anchor" href="#debug-a" aria-hidden="true">#</a> Debug -a</h3><p>毕竟机器指令不是那么好懂，写入很不方便，所以有没有办法能够支持我们直接写入汇编指令呢？还真有，Debug 提供了 -a 这种方式来实现汇编指令的写入。如下图所示</p><p><img src="http://www.cxuan.vip/image-20230121115458997.png" alt=""></p><p>可以看到，我们使用了 -a 命令来对 1000:0 进行写入，分别输入 mov ax,1 mov bx,2 mov cx,3 add ax,bx add ax,cx add ax,ax 指令，然后按回车进行确定执行。</p><p>我们使用 -d 1000:0 f 可以看到从偏移地址 0 处开始的第 f 个内存指令（因为最大写入的地址只是 f）。</p><p><img src="http://www.cxuan.vip/image-20230121115517796.png" alt=""></p><p>上图中的 1000:000F 为什么有值呢，因为我们上面已经执行过这个写入了。</p><p>另外，使用 -a 可以从一个预设的地址处开始输入指令。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>今天和大家聊了一下 Debug 的基本用法，主要包括</p><ul><li>-r 查看、修改寄存器中的内容</li><li>-d 查看内存中的指令</li><li>-e 修改内存中的内容</li><li>-u 可以将内存中的内容解释为机器指令和对应的汇编指令</li><li>-t 执行 CS:IP 处的指令</li><li>-a 以汇编得形式向内存写入内容</li></ul><p>汇编指令的选项有很多，上面介绍的这些属于经常用到的指令，这些指令要能够熟练使用。</p><p>如果你在阅读文章的过程中发现错误和问题，请及时与我联系！</p><p>如果文章对你有帮助，希望小伙伴们三连走起！</p>`,122),d=[t];function u(n,r){return e(),a("div",null,d)}const l=p(g,[["render",u],["__file","assembly03-debug.html.vue"]]);export{l as default};
