import{_ as p,r as o,o as l,c as i,a as n,b as s,d as t,e}from"./app-3RcBQnkC.js";const c={},u=n("h1",{id:"这种场景你还写ifelse你跟孩子坐一桌去吧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#这种场景你还写ifelse你跟孩子坐一桌去吧","aria-hidden":"true"},"#"),s(" 这种场景你还写ifelse你跟孩子坐一桌去吧")],-1),d=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=e(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><img src="https://bugstack.cn/assets/images/2020/drools-1.2-00.png" alt=""></p><hr><p><strong>你见过这样的代码嘛？类似的呢？嗯，那么恭喜你被这个世界温柔以待！</strong></p><p><code>if else</code>，并不是一个非常坏的关键字，只不过有人把他用坏了。尤其在接到产品需求如下这样；</p><table><thead><tr><th style="text-align:center;">日期</th><th style="text-align:left;">需求</th><th style="text-align:left;">紧急程度</th><th style="text-align:left;">程序员(话外音)</th></tr></thead><tbody><tr><td style="text-align:center;">星期一.早上</td><td style="text-align:left;">猿哥哥，老板说要搞一下营销拉拉量，给男生女生发不同的优惠券，促活消费。</td><td style="text-align:left;">很紧急，下班就要</td><td style="text-align:left;">行吧，也不难，加下判断就上线</td></tr><tr><td style="text-align:center;">星期二.下午</td><td style="text-align:left;">小哥哥，咱们上线后非常好。要让咱们按照年轻、中年、成年，不同年龄加下判断，准确刺激消费。</td><td style="text-align:left;">超紧急，明天就要</td><td style="text-align:left;">也不难，加就加吧</td></tr><tr><td style="text-align:center;">星期三.晚上</td><td style="text-align:left;">喂，小哥哥！睡了吗！老板说咱们这次活动很成功，可以不可以在细分下，把单身、结婚、有娃的都加上不同判断。这样更能刺激用户消费。</td><td style="text-align:left;">贼紧急，最快上线。</td><td style="text-align:left;">已经意识到<code>ifelse</code>越来越多了</td></tr><tr><td style="text-align:center;">星期四.凌晨</td><td style="text-align:left;">哇！小哥哥你们太棒了，上的真快。嘻嘻！有个小请求，需要调整下年龄段，因为现在学生处对象的都比较早，有对象的更容易买某某某东西。要改下值！辛苦辛苦！</td><td style="text-align:left;">老板，在等着呢！</td><td style="text-align:left;">一大片的值要修改，哎！这么多<code>ifelse</code>了</td></tr><tr><td style="text-align:center;">星期五.半夜</td><td style="text-align:left;">歪歪喂！巴巴，坏了，怎么发的优惠券不对了，有客诉了，很多女生都来投诉。你快看看。老板，他...</td><td style="text-align:left;">(一头汗)，哎，值粘错位置了！</td><td style="text-align:left;">终究还是一个人扛下了所有</td></tr></tbody></table><p>这样的场景你是否有遇到过呢，那么是产品给你代沟里去了，还是你把项目带沟里去了。可能会觉得，这东西这么着急要，我也没办法呀。其实不止你没有办法，是为了打下市场，让每一个人都很匆忙。只有合理的评估、铺垫、架设，才会不断满足业务需求、产品形态的变化。否则往后的路越来越难！</p><h2 id="二、场景" tabindex="-1"><a class="header-anchor" href="#二、场景" aria-hidden="true">#</a> 二、场景</h2><p>对于上面所提到的这种场景，在我们实际开发中是经常会遇到的。尤其是在一些；营销、风控、人群等，各种用户信息决策树关系时，都会出现这样的业务逻辑。而且对于一些较大场景是肯定不会直接硬编码<code>if else</code>，因为太难以维护。当然除非你这东西就写一次用一次，下次不用了那无所谓。</p><p>接下来我们把上面的场景进行转换一种树结构图，依次来体现出这个需求的全貌，如下；</p><p><img src="https://bugstack.cn/assets/images/2020/drools-1.2-01.png" alt=""></p><ul><li>从上图我们看到，把产品一周提的需求汇总后就一张树形的决策流。每一种不同的因子都可以导致结果不同的走向。</li><li>而如果这个产品整体的内容，从一点点交给你，和一整套交给你，你所做出来的研发设计是不同的。当然也有相同的，因为还有一部分很有远见的程序员，他们常年踩坑！而这份相同的高等的设计，就是踩坑踩出来的经验。</li><li>那么，除了<code>if else</code>你还能在自己掌握的技术栈中想到什么解决方案吗？接下来，我们会写出两种实现方式，用作比对。</li></ul><h2 id="三、if、else编码" tabindex="-1"><a class="header-anchor" href="#三、if、else编码" aria-hidden="true">#</a> 三、if、else编码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_ifelse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getUserSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getUserMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getUserParenting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getUserSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄色A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄色B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getUserMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄色C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄色D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>policy<span class="token punctuation">.</span><span class="token function">getUserParenting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄色E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄色F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;决策结果(IfElse)：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这就不用说了，只要会<code>if else</code>写出来还是没问题的，只不过写错不错就不一定了，毕竟一层套一层。这还算少的！</li></ul><h2 id="四、规则引擎drools" tabindex="-1"><a class="header-anchor" href="#四、规则引擎drools" aria-hidden="true">#</a> 四、规则引擎Drools</h2><p>关于规则引擎简单说呢就是，将你业务逻辑中那些行为规则流程变化的部分，分离出来。交给单独的规则引擎进行处理。最终你只需要按照约定提供配置和入参，就可以达到规则的执行结果。</p><blockquote><p>Drools（JBoss Rules ）具有一个易于访问企业策略、易于调整以及易于管理的开源业务规则引擎，符合业内标准，速度快、效率高。业务分析师或审核人员可以利用它轻松查看业务规则，从而检验是否已编码的规则执行了所需的业务规则。</p></blockquote><p>上去就是一巴掌，然后在问为什么。好，先来把上面的代码用<code>Drools</code>处理下，之后再解释。</p><h3 id="_1-环境配置" tabindex="-1"><a class="header-anchor" href="#_1-环境配置" aria-hidden="true">#</a> 1. 环境配置</h3>`,21),v=n("li",null,"jdk1.8.0",-1),m=n("li",null,"idea + maven3.x",-1),b=n("li",null,"drools 7.32.0.Final",-1),g={href:"https://bugstack.cn/assets/images/qrcode.png?x-oss-process=style/may",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"源码获取",-1),h={href:"http://flowdiagram.itstack.org/",target:"_blank",rel:"noopener noreferrer"},f=e(`<h3 id="_2-工程结构" tabindex="-1"><a class="header-anchor" href="#_2-工程结构" aria-hidden="true">#</a> 2. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>drools<span class="token operator">-</span><span class="token number">02</span>
└── src
    ├── main
    │   ├── java
    │   │   └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo
    │   │       ├── model
    │   │       │	└── <span class="token class-name">Policy</span><span class="token punctuation">.</span>java
    │   │       └── <span class="token class-name">Result</span><span class="token punctuation">.</span>java
    │   ├── resources
    │   │   ├── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span>
    │   │   │   └── kmodule<span class="token punctuation">.</span>xml
    │   │   └── rules
    │   │       └── tree<span class="token punctuation">.</span>drl
    │   └── webapp
    │       └── index<span class="token punctuation">.</span>html
    └── test
         └── java
             └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                 └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于案例中出现的代码，可以通过关注公众号获取：<strong>bugstack虫洞栈</strong>，回复关键字**&lt;获取源码&gt;**</li><li>以上是我们关于使用<code>Drools</code>规则引擎的的基本工程，规则引擎使用的方式并不复杂，只要按照约定的方式进行设置即可。</li></ul><h3 id="_3-代码讲解" tabindex="-1"><a class="header-anchor" href="#_3-代码讲解" aria-hidden="true">#</a> 3. 代码讲解</h3><blockquote><p>Policy.java &amp; 定义决策属性，同时这也是Fact对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Policy</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>            <span class="token comment">// 性别；男、女</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>           <span class="token comment">// 年龄</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> userSingle<span class="token punctuation">;</span>    <span class="token comment">// 单身；是/否</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> userMarry<span class="token punctuation">;</span>     <span class="token comment">// 结婚；是/否</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> userParenting<span class="token punctuation">;</span> <span class="token comment">// 育儿；是/否</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>get<span class="token operator">/</span>set
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Result.java &amp; 定义结果输出</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>META-INF/kmodule.xml &amp; 配置文件</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kmodule</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.drools.org/xsd/kmodule<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbase</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rules<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ksession</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>all-rules<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbase</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kmodule</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>kmodule 可以包含多个<code>kbase</code>，分别对应<code>drl</code>的规则文件</li><li><code>kbase name=&quot;rules&quot;</code>，name名称需要保证唯一</li><li>kbase下面可以有一个或多个ksession，ksession的name属性必须设置，且必须唯一</li><li>kbase的default属性，表示当前KieBase是不是默认的，如果是默认的则不用名称就可以查找到该KieBase，但每个module最多只能有一个默认KieBase</li></ul><blockquote><p>rules/tree.drl &amp; 规则文件</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>package rules;

import org.itstack.demo.model.Policy
import org.itstack.demo.Result;

global org.itstack.demo.Result res;

rule &quot;红A&quot;
when
    Policy(sex == &quot;男&quot;, age &lt; 18, userSingle)
    then
    res.setResult(&quot;A&quot;,&quot;红色A&quot;);
    end

rule &quot;红B&quot;
when
    Policy(sex == &quot;男&quot;, age &lt; 18, !userSingle)
    then
    res.setResult(&quot;B&quot;,&quot;红色B&quot;);
    end

rule &quot;红C&quot;
when
    Policy(sex == &quot;男&quot;, age &gt;= 18, age &lt;= 30, userMarry)
    then
    res.setResult(&quot;C&quot;,&quot;红色C&quot;);
    end

rule &quot;红D&quot;
when
    Policy(sex == &quot;男&quot;, age &gt;= 18, age &lt;= 30, !userMarry)
    then
    res.setResult(&quot;D&quot;,&quot;红色D&quot;);
    end

rule &quot;红E&quot;
when
    Policy(sex == &quot;男&quot;, age &gt; 30, userParenting)
    then
    res.setResult(&quot;E&quot;,&quot;红色E&quot;);
    end

rule &quot;红F&quot;
when
    Policy(sex == &quot;男&quot;, age &gt; 30, !userParenting)
    then
    res.setResult(&quot;F&quot;,&quot;红色F&quot;);
    end

rule &quot;黄A&quot;
when
    Policy(sex == &quot;女&quot;, age &lt; 18, userSingle)
    then
    res.setResult(&quot;A&quot;,&quot;黄色A&quot;);
    end

rule &quot;黄B&quot;
when
    Policy(sex == &quot;女&quot;, age &lt; 18, !userSingle)
    then
    res.setResult(&quot;B&quot;,&quot;黄色B&quot;);
    end

rule &quot;黄C&quot;
when
    Policy(sex == &quot;女&quot;, age &gt;= 18, age &lt;= 30, userMarry)
    then
    res.setResult(&quot;C&quot;,&quot;黄色C&quot;);
    end

rule &quot;黄D&quot;
when
    Policy(sex == &quot;女&quot;, age &gt;= 18, age &lt;= 30, !userMarry)
    then
    res.setResult(&quot;D&quot;,&quot;黄色D&quot;);
    end

rule &quot;黄E&quot;
when
    Policy(sex == &quot;女&quot;, age &gt; 30, userParenting)
    then
    res.setResult(&quot;E&quot;,&quot;黄色E&quot;);
    end

rule &quot;黄F&quot;
when
    Policy(sex == &quot;女&quot;, age &gt; 30, !userParenting)
    then
    res.setResult(&quot;F&quot;,&quot;黄色F&quot;);
    end  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>rule 规则名称、when then end 一套组合拳，什么条件下输出什么结果</li><li><code>sex == &quot;女&quot;, age &gt; 30, !userParenting</code>，英文逗号隔开的是and的条件，相当你的且。当不完全是，因为在后续处理中，逗号的处理逻辑在drools是有优化的。</li><li>then中处理结果，将结果信息返回，这个结果使用是我们设置的一个<code>global</code>全局引入。最后结尾end关键字。</li><li>也许你会觉得这不是很像你的<code>if else</code>吗。但千万不要这么觉得，因为这只是冰山一角。而且我们前面截图一个树形结构，而这个属性结构是可以自动化生成<code>DRL</code>规则文件的。</li></ul><h3 id="_4-测试执行" tabindex="-1"><a class="header-anchor" href="#_4-测试执行" aria-hidden="true">#</a> 4. 测试执行</h3><blockquote><p>ApiTest.java &amp; 单元测试中会设置Drools的启动过程</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">KieContainer</span> kieContainer<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Policy</span> policy<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构建KieServices</span>
        <span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kieContainer <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">getKieClasspathContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        policy<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        policy<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        policy<span class="token punctuation">.</span><span class="token function">setUserSingle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        policy<span class="token punctuation">.</span><span class="token function">setUserMarry</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        policy<span class="token punctuation">.</span><span class="token function">setUserParenting</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;决策请求：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_drools</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">KieSession</span> kieSession <span class="token operator">=</span> kieContainer<span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token string">&quot;all-rules&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kieSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kieSession<span class="token punctuation">.</span><span class="token function">setGlobal</span><span class="token punctuation">(</span><span class="token string">&quot;res&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> kieSession<span class="token punctuation">.</span><span class="token function">fireAllRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Fire rule(s)：&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;决策结果(Drools)：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        kieSession<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>init() 初始化</strong></p><ol><li>在初始化方法中，构建<code>KieServices.Factory.get();</code>，这个过程是比较耗费资源，实际业务使用中也不会频繁的构建。</li><li>从<code>KieServices</code>中获取<code>KieContainer</code>，用于给定KieModule的所有kiebase的容器。</li><li>设置FACT对象，其实就是你的决策对象的一些条件值。</li></ol><p><strong>test_drools() 执行规则</strong></p><ol><li>获取kmodule.xml中配置中名称为all-rules的session，默认为有状态的。</li><li>设置决策对象<code>kieSession.insert(policy);</code></li><li>设置全局对象<code> kieSession.setGlobal(&quot;res&quot;, result);</code>，用于最终把结果输出</li><li>开始执行规则<code>kieSession.fireAllRules()</code></li><li>最终输出结果，到最后释放资源<code>kieSession.dispose()</code></li></ol><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>决策请求：<span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userMarry&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;userParenting&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;userSingle&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>
<span class="token class-name">Fire</span> <span class="token function">rule</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>：<span class="token number">1</span>
决策结果<span class="token punctuation">(</span><span class="token class-name">Drools</span><span class="token punctuation">)</span>：<span class="token class-name">B</span><span class="token operator">|</span>红色<span class="token class-name">B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在测试过程中可以尝试修改入参信息，以此验证不同的结果。</li></ul><h2 id="五、rete-算法了解" tabindex="-1"><a class="header-anchor" href="#五、rete-算法了解" aria-hidden="true">#</a> 五、Rete 算法了解</h2><blockquote><p>Drools 是用 Java 语言编写的开放源码规则引擎，使用 Rete 算法对所编写的规则求值。Drools 允许使用声明方式表达业务逻辑。可以使用非 XML 的本地语言编写规则，从而便于学习和理解。并且，还可以将 Java 代码直接嵌入到规则文件中，这令 Drools 的学习更加吸引人。</p></blockquote><p>好！那么这样你就知道，Drools的核心内容是关于 Rete 算法的实现。接下来我们再来了解下 Rete。</p><p>为了解决生产式推理引擎效率底下的问题，Forgy 在1979年提出 Rete 算法，作为生产式系统的高效模式匹配算法。Rete 算法的初衷是：利用规则之间各个域的公用部分减少规则存储，同时保存匹配过程的临时结果以加快匹配速度。为了达到这种效果，算法将规则拆分，其中每个条件单元作为基本单位(节点)连接成一个数据辨别网络，然后将事实经过网络筛选并传播，最终所有条件都有事实匹配的规则被激活。</p><p>Rete 算法自从 1979 年提出以来，已经经历过各种改进与推广。除了对自身规则网络结构的优化外，对一些功能扩展如模糊推理、事件推理、并行化等也有很多研究。</p><h3 id="_1-结构优化" tabindex="-1"><a class="header-anchor" href="#_1-结构优化" aria-hidden="true">#</a> 1. 结构优化</h3><ol><li><p>混合逻辑符的处理</p><p>逻辑操作符(operators)是指注入and、or、not等，的逻辑运算符处理。</p></li><li><p>规则前件的重排序</p><p>规则前件顺序是指规则体哦啊见中的各个约束的排列顺序，它决定了条件链接操作的执行顺序，影响中间结果的大小，是决定规则匹配效率的关键因素。</p></li><li><p>索引方法</p><p>索引方法是指对 Rete 网络的节点建立当前节点对后继 的索引，在事实断言时可以通过索引快速找到对应的后继节 点而无需逐个查找。</p></li></ol><h3 id="_2-功能扩展" tabindex="-1"><a class="header-anchor" href="#_2-功能扩展" aria-hidden="true">#</a> 2. 功能扩展</h3><ol><li><p>处理其他逻辑 Rete 最初只是用于处理一阶布尔逻辑，目前有很多 Rete 的扩展被用来处理其他逻辑。</p></li><li><p>带时间信息的事件处理 Rete 通过事实来表达当前状态，但是很多应用包括一些事件流中的时间，在事件并行执行中起到关键作用。所以需要 Rete 算法对这些信息进行处理。</p></li></ol><h3 id="_3-特殊数据的推理" tabindex="-1"><a class="header-anchor" href="#_3-特殊数据的推理" aria-hidden="true">#</a> 3. 特殊数据的推理</h3><ol><li><p>瑕疵数据与不确定性推理</p><ul><li>不正确性</li><li>不精准性</li><li>不一致性</li></ul></li><li><p>快速变化数据与机器学习</p><p>除了数据瑕疵，对于变化剧烈的数据也成为Rete算法需要解决的问题。</p></li></ol><h3 id="_4-并行化" tabindex="-1"><a class="header-anchor" href="#_4-并行化" aria-hidden="true">#</a> 4. 并行化</h3><p>Rete 算法从提出至今，性能提升问题一直是研究重点。多核多处理器问世后，将推理过程分配到不同机器上并行处理成为一种常见的效率提升方法</p><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>优秀的产品、优秀的研发，从来不只是传话筒也不是工具机器。而是有灵魂的工匠，需要有谋有段，决策、远见。</li><li>Drools的使用还不止是这一点，他还丰富的很，我们本章节主要是一个开篇，后续会继续完善。关于工程代码可以关注公众号(bugstack虫洞栈)进行获取。</li><li>只有你的技术识栈足够的全面，才能让你在遇到一个问题的时候，有N中的方案。但学习一定是自己的事，无论是忙与闲，都要让自己充充电。娱乐不是不可以，只不过要适当的控制下自己。<code>如果你控制不住自己，就会有别人控制你</code></li></ul><h2 id="七、彩蛋" tabindex="-1"><a class="header-anchor" href="#七、彩蛋" aria-hidden="true">#</a> 七、彩蛋</h2><p>过年期间放假不愿意闲着没事，所以只能吭哧吭哧编码，写了一个GitChat专栏。所以还是要推广一下，哪怕有点点收入也是非常开心的。</p><blockquote><p>本项目是作者小傅哥使用JavaFx、Netty4.x、SpringBoot、Mysql等技术栈和偏向于DDD领域驱动设计方式，搭建的仿桌面版微信聊天工程实现通信核心功能。如果本项目能为您提供帮助，请给予支持(关注、点赞、分享)！</p></blockquote>`,42),y={href:"https://gitbook.cn/gitchat/column/5e5d29ac3fbd2d3f5d05e05f",target:"_blank",rel:"noopener noreferrer"},x=n("img",{src:"http://chat.itstack.org/assets/img/2020/invite.jpg",alt:""},null,-1);function w(_,R){const a=o("ExternalLinkIcon");return l(),i("div",null,[u,n("p",null,[s("作者：小傅哥 "),d,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),k,n("ol",null,[v,m,b,n("li",null,[s("案例源码下载，"),n("a",g,[s("关注公众号：bugstack虫洞栈"),t(a)]),s(" 回复："),q]),n("li",null,[s("可视化流程图解决方案；"),n("a",h,[s("flowdiagram.itstack.org"),t(a)])])]),f,n("ul",null,[n("li",null,[n("a",y,[s("《Netty + JavaFx 实战：仿桌面版微信聊天》"),t(a)]),x])])])}const j=p(c,[["render",w],["__file","2020-03-07-zhezhongchangjingnihuaixieifelsenigenhaizizuoyizhuoquba.html.vue"]]);export{j as default};
