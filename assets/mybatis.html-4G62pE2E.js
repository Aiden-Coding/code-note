import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"mybatis-使用教程和插件开发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mybatis-使用教程和插件开发","aria-hidden":"true"},"#"),s(" MyBatis 使用教程和插件开发")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=955906479&bvid=BV1DW4y1o7Vd&cid=1198523013&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=n("p",null,"本文的宗旨在于通过简单干净实践的方式教会读者，使用 SpringBoot 配置 MyBatis 并完成对插入、批量插入、修改、查询以及注解事务和编程事务的使用，通过扩展插件开发对置顶字段进行加解处理。",-1),b=n("p",null,"此外本文也通过此案例，渗透讲解 DDD 模型中的聚合对象、实体对象和值对象在领域模型中的实践。",-1),y=n("p",null,"本文涉及的工程：",-1),g={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-mybatis",target:"_blank",rel:"noopener noreferrer"},f={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-mybatis/-/blob/master/road-map.sql",target:"_blank",rel:"noopener noreferrer"},h=p('<h2 id="一、案例背景" tabindex="-1"><a class="header-anchor" href="#一、案例背景" aria-hidden="true">#</a> 一、案例背景</h2><p><code>说一千道一万，给小卡拉米写的教程，得简单还好看！</code></p><p>为了更好的把 MyBatis 常用的各项功能体现的清晰明了，小傅哥这里设定了公司雇员和对应薪酬关系的一个开发场景。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-mybatis-01.png?raw=true" width="750px"></div><ul><li>首先，雇员员工和对应的薪资待遇，是一个1v1的关系。</li><li>之后，薪资表与调薪表，是一个1vn的关系。每次晋升、普调，都会有一条对应的调薪记录。</li><li>最后，有了这样3个表，我们就可以很好的完成，员工的插入、批量插入，和事务操作调薪。</li></ul><h2 id="二、领域模型" tabindex="-1"><a class="header-anchor" href="#二、领域模型" aria-hidden="true">#</a> 二、领域模型</h2>',6),S=n("strong",null,"模型定义",-1),q={href:"https://bugstack.cn/md/road-map/ddd.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://bugstack.cn/md/road-map/ddd.html",target:"_blank",rel:"noopener noreferrer"},A=p(`<div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-mybatis-02.png?raw=true" width="650px"></div><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-mybatis-03.png?raw=true" width="450px"></div><p>此场景的业务用于对指定的用户进行<strong>晋升加薪调幅</strong>，但因为加薪会需要操作3个表，包括；雇员表 - 修改个人Title、薪资表 - 修改薪酬、调薪记录表 - 每一次加薪都写一条记录。</p><h3 id="_1-model" tabindex="-1"><a class="header-anchor" href="#_1-model" aria-hidden="true">#</a> 1. model</h3><h4 id="_1-1-值对象" tabindex="-1"><a class="header-anchor" href="#_1-1-值对象" aria-hidden="true">#</a> 1.1 值对象</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EmployeePostVO</span> <span class="token punctuation">{</span>

    <span class="token function">T1</span><span class="token punctuation">(</span><span class="token string">&quot;T-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;初级工程师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">T2</span><span class="token punctuation">(</span><span class="token string">&quot;T-2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;初级工程师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">T3</span><span class="token punctuation">(</span><span class="token string">&quot;T-3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;中级工程师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">T4</span><span class="token punctuation">(</span><span class="token string">&quot;T-4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;中级工程师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">T5</span><span class="token punctuation">(</span><span class="token string">&quot;T-5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;高级工程师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">T6</span><span class="token punctuation">(</span><span class="token string">&quot;T-6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;高级工程师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">T7</span><span class="token punctuation">(</span><span class="token string">&quot;T-7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">T8</span><span class="token punctuation">(</span><span class="token string">&quot;T-8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

		<span class="token comment">// 省略部分</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当一个实体对象中的一个值，是有多个范围时候，则需要定义出值对象。由于此类的值对象更贴近于当前的场景业务，所以一般不会被定义为共用的枚举。如此此类值范围，都会被定义为值对象。</li></ul><h4 id="_1-2-实体对象" tabindex="-1"><a class="header-anchor" href="#_1-2-实体对象" aria-hidden="true">#</a> 1.2 实体对象</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeEntity</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** 雇员级别 */</span>
    <span class="token keyword">private</span> <span class="token class-name">EmployeePostVO</span> employeeLevel<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 雇员岗位Title */</span>
    <span class="token keyword">private</span> <span class="token class-name">EmployeePostVO</span> employeeTitle<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeSalaryAdjustEntity</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** 总额调薪 */</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> adjustTotalAmount<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 基础调薪 */</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> adjustBaseAmount<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 绩效调薪 */</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> adjustMeritAmount<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实体对象是对数据库对象的抽象，大多数时候是 1:1 的关系结构，在一些复杂的模型场景中会是1:n的结构。</li></ul><h4 id="_1-3-聚合对象" tabindex="-1"><a class="header-anchor" href="#_1-3-聚合对象" aria-hidden="true">#</a> 1.3 聚合对象</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdjustSalaryApplyOrderAggregate</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** 雇员编号 */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> employeeNumber<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 调薪单号 */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 雇员实体 */</span>
    <span class="token keyword">private</span> <span class="token class-name">EmployeeEntity</span> employeeEntity<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 雇员实体 */</span>
    <span class="token keyword">private</span> <span class="token class-name">EmployeeSalaryAdjustEntity</span> employeeSalaryAdjustEntity<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>聚合对象是对实体对象和值对象的封装，代表着一类业务的聚合。通常是作为 service 服务层中入参出现。</li></ul><h3 id="_2-repository" tabindex="-1"><a class="header-anchor" href="#_2-repository" aria-hidden="true">#</a> 2. repository</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISalaryAdjustRepository</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">adjustSalary</span><span class="token punctuation">(</span><span class="token class-name">AdjustSalaryApplyOrderAggregate</span> adjustSalaryApplyOrderAggregate<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>仓储在 DDD 中的设计，是一种依赖倒置关系，由 domain 定义接口，之后由引入 domain 包的基层层 infrastructure 实现功能。</li><li>此外，因为是依赖倒置，所以天然的隔离了 PO 数据库持久化对象，不会被对外使用。这个设计是非常巧妙的。当我们从结构上定义了原则，就不会有人乱引用对象了。</li></ul><h3 id="_3-service" tabindex="-1"><a class="header-anchor" href="#_3-service" aria-hidden="true">#</a> 3. service</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISalaryAdjustApplyService</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">execSalaryAdjust</span><span class="token punctuation">(</span><span class="token class-name">AdjustSalaryApplyOrderAggregate</span> adjustSalaryApplyOrderAggregate<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当前场景简单，所以不需要额外的设计模式使用。但如果是复杂场景，必须考虑设计模式，否则代码都写到 SalaryAdjustApplyService 实现类里，那么将非常难维护。</li><li>不要只是把聚合对象当充血模型，你的充血结构是整个 domain 下的每一个领域包，也就是让这里的状态与行为看做为一整个结构。</li></ul><p>📢 <strong>综上</strong>，有了这样的模型结构设计定义，相信你也可以很好的拆分自己的业务对象并完成领域功能实现了。</p><h2 id="三、配置文件" tabindex="-1"><a class="header-anchor" href="#三、配置文件" aria-hidden="true">#</a> 三、配置文件</h2><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-mybatis-04.png?raw=true" width="950px"></div><ul><li>工程中关于 MyBatis 的使用，在 xfg-dev-tech-app 下进行统一配置。因为所有配置信息都放到一起，比较方便管理，也利于线上上线后，提取配置文件。</li></ul><h2 id="四、功能实现" tabindex="-1"><a class="header-anchor" href="#四、功能实现" aria-hidden="true">#</a> 四、功能实现</h2><p>接下来我们介绍一些关于 MyBatis 的使用功能，但你可以带着 DDD 的思想来看这些内容实现时所在的位置，这会让你不只是学习 MyBatis 也能学会一些 DDD 的设计。</p><h3 id="_1-插入-批量插入" tabindex="-1"><a class="header-anchor" href="#_1-插入-批量插入" aria-hidden="true">#</a> 1. 插入&amp;批量插入</h3><p><strong>源码</strong>：<code>cn.bugstack.xfg.dev.tech.infrastructure.dao.IEmployeeDAO</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEmployeeDAO</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">EmployeePO</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EmployeePO</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">EmployeePO</span> employeePO<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">EmployeePO</span> <span class="token function">queryEmployeeByEmployNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> employNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>xml</strong>：<code>employee_mapper.xml</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insert<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.xfg.dev.tech.infrastructure.po.EmployeePO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    INSERT INTO employee(employee_number, employee_name, employee_level, employee_title, create_time, update_time)
    VALUES(#{employeeNumber}, #{employeeName}, #{employeeLevel}, #{employeeTitle}, now(), now())
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.util.List<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    INSERT INTO employee(employee_number, employee_name, employee_level, employee_title, create_time, update_time)
    VALUES
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        (#{item.employeeNumber}, #{item.employeeName}, #{item.employeeLevel}, #{item.employeeTitle}, now(), now())
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用配置文件的方式比较好维护，当然如果也可以尝试使用 MyBatis 提供的注解方式，完成数据的操作。</li></ul><h3 id="_2-事务-注解编程" tabindex="-1"><a class="header-anchor" href="#_2-事务-注解编程" aria-hidden="true">#</a> 2. 事务&amp;注解编程</h3><p>Spring 提供的事务分为注解事务和编程事务，编程事务可以更细粒度的控制。</p><p>Spring Boot 事务管理的级别可以通过 <code>@Transactional</code> 注解的 <code>isolation</code> 属性进行配置。常见的事务隔离级别有以下几种：</p><ol><li><code>DEFAULT</code>：使用底层数据库的默认隔离级别。MySQL 默认为 <code>REPEATABLE READ</code>，Oracle 默认为 <code>READ COMMITTED</code>。</li><li><code>READ_UNCOMMITTED</code>：最低的隔离级别，允许读取未提交的数据变更，可能会导致脏读、不可重复读和幻读问题。</li><li><code>READ_COMMITTED</code>：允许读取已经提交的数据变更，可以避免脏读问题，但可能会出现不可重复读和幻读问题。</li><li><code>REPEATABLE_READ</code>：保证同一事务中多次读取同一数据时，结果始终一致，可以避免脏读和不可重复读问题，但可能会出现幻读问题。</li><li><code>SERIALIZABLE</code>：最高的隔离级别，可以避免脏读、不可重复读和幻读问题，但会影响并发性能。</li></ol><p>在 Spring Boot 中，默认的事务隔离级别为 <code>DEFAULT</code>。如果没有特殊需求，建议使用默认隔离级别。</p><p>SpringBoot 事务的传播行为可以通过 <code>@Transactional</code> 注解的 <code>propagation</code> 属性进行配置。常用的传播行为有以下几种：</p><ol><li><code>Propagation.REQUIRED</code>：默认的传播行为，如果当前存在事务，则加入该事务，否则新建一个事务；</li><li><code>Propagation.SUPPORTS</code>：如果当前存在事务，则加入该事务，否则以非事务的方式执行；</li><li><code>Propagation.MANDATORY</code>：如果当前存在事务，则加入该事务，否则抛出异常；</li><li><code>Propagation.REQUIRES_NEW</code>：无论当前是否存在事务，都会新建一个事务，如果当前存在事务，则将当前事务挂起；</li><li><code>Propagation.NOT_SUPPORTED</code>：以非事务的方式执行操作，如果当前存在事务，则将当前事务挂起；</li><li><code>Propagation.NEVER</code>：以非事务的方式执行操作，如果当前存在事务，则抛出异常；</li><li><code>Propagation.NESTED</code>：如果当前存在事务，则在该事务的嵌套事务中执行，否则新建一个事务。嵌套事务是独立于外部事务的，但是如果外部事务回滚，则嵌套事务也会回滚。</li></ol><p>除了传播行为，<code>@Transactional</code> 注解还可以配置其他属性，例如隔离级别、超时时间、只读等。</p><h4 id="_2-1-注解事务" tabindex="-1"><a class="header-anchor" href="#_2-1-注解事务" aria-hidden="true">#</a> 2.1 注解事务</h4><p><strong>源码</strong>：<code>cn.bugstack.xfg.dev.tech.infrastructure.repository.SalaryAdjustRepository</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">350</span><span class="token punctuation">,</span> propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span> isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">adjustSalary</span><span class="token punctuation">(</span><span class="token class-name">AdjustSalaryApplyOrderAggregate</span> adjustSalaryApplyOrderAggregate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> employeeNumber <span class="token operator">=</span> adjustSalaryApplyOrderAggregate<span class="token punctuation">.</span><span class="token function">getEmployeeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> orderId <span class="token operator">=</span> adjustSalaryApplyOrderAggregate<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EmployeeEntity</span> employeeEntity <span class="token operator">=</span> adjustSalaryApplyOrderAggregate<span class="token punctuation">.</span><span class="token function">getEmployeeEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EmployeeSalaryAdjustEntity</span> employeeSalaryAdjustEntity <span class="token operator">=</span> adjustSalaryApplyOrderAggregate<span class="token punctuation">.</span><span class="token function">getEmployeeSalaryAdjustEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EmployeePO</span> employeePO <span class="token operator">=</span> <span class="token class-name">EmployeePO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeNumber</span><span class="token punctuation">(</span>employeeNumber<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeLevel</span><span class="token punctuation">(</span>employeeEntity<span class="token punctuation">.</span><span class="token function">getEmployeeLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeTitle</span><span class="token punctuation">(</span>employeeEntity<span class="token punctuation">.</span><span class="token function">getEmployeeTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 更新岗位</span>
    employeeDAO<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>employeePO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EmployeeSalaryPO</span> employeeSalaryPO <span class="token operator">=</span> <span class="token class-name">EmployeeSalaryPO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeNumber</span><span class="token punctuation">(</span>employeeNumber<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">salaryTotalAmount</span><span class="token punctuation">(</span>employeeSalaryAdjustEntity<span class="token punctuation">.</span><span class="token function">getAdjustTotalAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">salaryMeritAmount</span><span class="token punctuation">(</span>employeeSalaryAdjustEntity<span class="token punctuation">.</span><span class="token function">getAdjustMeritAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">salaryBaseAmount</span><span class="token punctuation">(</span>employeeSalaryAdjustEntity<span class="token punctuation">.</span><span class="token function">getAdjustBaseAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 更新薪酬</span>
    employeeSalaryDAO<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>employeeSalaryPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EmployeeSalaryAdjustPO</span> employeeSalaryAdjustPO <span class="token operator">=</span> <span class="token class-name">EmployeeSalaryAdjustPO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeNumber</span><span class="token punctuation">(</span>employeeNumber<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">adjustOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">adjustTotalAmount</span><span class="token punctuation">(</span>employeeSalaryAdjustEntity<span class="token punctuation">.</span><span class="token function">getAdjustTotalAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">adjustBaseAmount</span><span class="token punctuation">(</span>employeeSalaryAdjustEntity<span class="token punctuation">.</span><span class="token function">getAdjustMeritAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">adjustMeritAmount</span><span class="token punctuation">(</span>employeeSalaryAdjustEntity<span class="token punctuation">.</span><span class="token function">getAdjustBaseAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写入流水</span>
    employeeSalaryAdjustDAO<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>employeeSalaryAdjustPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> orderId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个事务所做的内容，就是前面小傅哥提到的调整薪资的处理。它的具体操作就是放到仓储层实现。</li><li>注意事务注解的配置。</li></ul><h4 id="_2-2-编程事务" tabindex="-1"><a class="header-anchor" href="#_2-2-编程事务" aria-hidden="true">#</a> 2.2 编程事务</h4><h5 id="_2-2-1-事务模板" tabindex="-1"><a class="header-anchor" href="#_2-2-1-事务模板" aria-hidden="true">#</a> 2.2.1 事务模板</h5><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-mybatis-05.png?raw=true" width="950px"></div><ul><li>使用编程事务，需要在这里创建出一个事务模板，当然你不创建也可以使用。只不过这样统一的配置会更加方便。</li></ul><h5 id="_2-2-2-事务使用" tabindex="-1"><a class="header-anchor" href="#_2-2-2-事务使用" aria-hidden="true">#</a> 2.2.2 事务使用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEmployeeInfo</span><span class="token punctuation">(</span><span class="token class-name">EmployeeInfoEntity</span> employeeInfoEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">EmployeePO</span> employeePO <span class="token operator">=</span> <span class="token class-name">EmployeePO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">employeeNumber</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getEmployeeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">employeeName</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getEmployeeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">employeeLevel</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getEmployeeLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">employeeTitle</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getEmployeeTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                employeeDAO<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>employeePO<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">EmployeeSalaryPO</span> employeeSalaryPO <span class="token operator">=</span> <span class="token class-name">EmployeeSalaryPO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">employeeNumber</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getEmployeeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">salaryTotalAmount</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getSalaryTotalAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">salaryMeritAmount</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getSalaryMeritAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">salaryBaseAmount</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">.</span><span class="token function">getSalaryBaseAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                employeeSalaryDAO<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>employeeSalaryPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>之后就可以手动处理事务了，因为手动的处理可以更细节的控制，也可以根据返回的结果，手动回滚。而不非得异常回滚。</li></ul><h3 id="_3-插件-数据加密" tabindex="-1"><a class="header-anchor" href="#_3-插件-数据加密" aria-hidden="true">#</a> 3. 插件&amp;数据加密</h3><p>使用 MyBatis 时，也会经常会用到插件开发。尤其是做一些数据的加解密、路由、日志等，都可以基于插件实现。</p><p>那么这里小傅哥就带着你实现一个对指定字段加解密的处理，比如雇员的姓名、薪资、级别是可以隐藏的，避免被有心之人盗取。</p><p><strong>源码</strong>：<code>cn.bugstack.xfg.dev.tech.plugin.FieldEncryptionAndDecryptionMybatisPlugin</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldEncryptionAndDecryptionMybatisPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 密钥，必须是16位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;1898794876567654&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 偏移量，必须是16位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">IV</span> <span class="token operator">=</span> <span class="token string">&quot;1233214566547891&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> parameter <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sqlId <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sqlId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;insert&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> sqlId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> columnName <span class="token operator">=</span> <span class="token string">&quot;employeeName&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> parameterList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parameter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> parameterList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> columnName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">String</span> fieldValue <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">String</span> encryptedValue <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>fieldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> columnName<span class="token punctuation">,</span> encryptedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasField</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> columnName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> fieldValue <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> encryptedValue <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>fieldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> columnName<span class="token punctuation">,</span> encryptedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sqlId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 查询操作，解密</span>
            <span class="token class-name">String</span> columnName <span class="token operator">=</span> <span class="token string">&quot;employeeName&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> resultList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> columnName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> fieldValue <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>fieldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> decryptedValue <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>fieldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> columnName<span class="token punctuation">,</span> decryptedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw <span class="token operator">=</span> <span class="token constant">KEY</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SecretKeySpec</span> secretKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IvParameterSpec</span> ivParameterSpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span><span class="token constant">IV</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">,</span> ivParameterSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * AES解密
     *
     * <span class="token keyword">@param</span> <span class="token parameter">content</span> 密文
     * <span class="token keyword">@return</span> 明文
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> 异常
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw <span class="token operator">=</span> <span class="token constant">KEY</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SecretKeySpec</span> secretKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IvParameterSpec</span> ivParameterSpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span><span class="token constant">IV</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">,</span> ivParameterSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasField</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                clazz <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-mybatis-06.png?raw=true" width="850px"></div>`,56),E=n("code",null,"Intercepts",-1),j={href:"https://item.jd.com/13811216.html",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"《手写MyBatis：渐进式源码实践》",-1),O=n("li",null,"有了 AES 的加解密，就可以对指定的字段 employeeName 对插入数据库的字段进行加密，同时还可以在读取的时候解密。",-1),T=p(`<h2 id="五、测试验证" tabindex="-1"><a class="header-anchor" href="#五、测试验证" aria-hidden="true">#</a> 五、测试验证</h2><h3 id="_1-调薪" tabindex="-1"><a class="header-anchor" href="#_1-调薪" aria-hidden="true">#</a> 1. 调薪</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_execSalaryAdjust</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AdjustSalaryApplyOrderAggregate</span> adjustSalaryApplyOrderAggregate <span class="token operator">=</span> <span class="token class-name">AdjustSalaryApplyOrderAggregate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeNumber</span><span class="token punctuation">(</span><span class="token string">&quot;10000001&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">orderId</span><span class="token punctuation">(</span><span class="token string">&quot;100908977676001&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeEntity</span><span class="token punctuation">(</span><span class="token class-name">EmployeeEntity</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">employeeLevel</span><span class="token punctuation">(</span><span class="token class-name">EmployeePostVO</span><span class="token punctuation">.</span><span class="token constant">T3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">employeeTitle</span><span class="token punctuation">(</span><span class="token class-name">EmployeePostVO</span><span class="token punctuation">.</span><span class="token constant">T3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">employeeSalaryAdjustEntity</span><span class="token punctuation">(</span><span class="token class-name">EmployeeSalaryAdjustEntity</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">adjustTotalAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">adjustBaseAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">adjustMeritAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> orderId <span class="token operator">=</span> salaryAdjustApplyService<span class="token punctuation">.</span><span class="token function">execSalaryAdjust</span><span class="token punctuation">(</span>adjustSalaryApplyOrderAggregate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;调薪测试 req: {} res: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>adjustSalaryApplyOrderAggregate<span class="token punctuation">)</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">15.13</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">11.514</span> <span class="token punctuation">[</span>main            <span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">HikariDataSource</span>       <span class="token operator">-</span> <span class="token class-name">HikariPool</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token class-name">Start</span> completed<span class="token punctuation">.</span>
<span class="token number">23</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">15.13</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">11.910</span> <span class="token punctuation">[</span>main            <span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">ISalaryAdjustApplyServiceTest</span> <span class="token operator">-</span> 调薪测试 req<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;employeeEntity&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;employeeLevel&quot;</span><span class="token operator">:</span><span class="token string">&quot;T3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;employeeTitle&quot;</span><span class="token operator">:</span><span class="token string">&quot;T3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;employeeNumber&quot;</span><span class="token operator">:</span><span class="token string">&quot;10000001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;employeeSalaryAdjustEntity&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;adjustBaseAmount&quot;</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">&quot;adjustMeritAmount&quot;</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&quot;adjustTotalAmount&quot;</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;orderId&quot;</span><span class="token operator">:</span><span class="token string">&quot;100908977676002&quot;</span><span class="token punctuation">}</span> res<span class="token operator">:</span> <span class="token number">100908977676002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查询" tabindex="-1"><a class="header-anchor" href="#_2-查询" aria-hidden="true">#</a> 2. 查询</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_queryEmployInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">EmployeeInfoEntity</span> employeeInfoEntity <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">queryEmployInfo</span><span class="token punctuation">(</span><span class="token string">&quot;10000001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>employeeInfoEntity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">15.13</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">54.000</span> <span class="token punctuation">[</span>main            <span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">HikariDataSource</span>       <span class="token operator">-</span> <span class="token class-name">HikariPool</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token class-name">Start</span> completed<span class="token punctuation">.</span>
<span class="token number">23</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">15.13</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">54.490</span> <span class="token punctuation">[</span>main            <span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name">IEmployeeServiceTest</span>   <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;employeeLevel&quot;</span><span class="token operator">:</span><span class="token string">&quot;T-3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;employeeName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;employeeNumber&quot;</span><span class="token operator">:</span><span class="token string">&quot;10000001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;employeeTitle&quot;</span><span class="token operator">:</span><span class="token string">&quot;中级工程师&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;salaryBaseAmount&quot;</span><span class="token operator">:</span><span class="token number">5200.00</span><span class="token punctuation">,</span><span class="token string">&quot;salaryMeritAmount&quot;</span><span class="token operator">:</span><span class="token number">5200.00</span><span class="token punctuation">,</span><span class="token string">&quot;salaryTotalAmount&quot;</span><span class="token operator">:</span><span class="token number">5200.00</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行完调薪后，就可以来看下这个用户的薪资待遇是多少了。</li></ul>`,8);function x(P,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),d,m,v,b,y,n("ul",null,[n("li",null,[s("xfg-dev-tech-mybatis："),n("a",g,[s("https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-mybatis"),t(a)])]),n("li",null,[s("导入测试库表："),n("a",f,[s("road-map.sql"),t(a)])])]),h,n("p",null,[s("🌶 "),S,s("："),n("a",q,[s("https://bugstack.cn/md/road-map/ddd.html"),t(a)]),s(" - 你可以先参考小傅哥的 "),n("a",w,[s("DDD"),t(a)]),s(" 篇，这样可以更好的理解模型概念和设计原则。")]),A,n("ul",null,[n("li",null,[s("首先通过注解配置，拦截指定范围内的信息 "),E,s(" 之后在 intercept 接口实现方法中，获取 MappedStatement 这个 MyBatis的映射核心类。"),n("a",j,[_,t(a)]),s(" - 跟小傅哥学MyBatis，从零手写源码级复杂项目，提升架构思维与设计逻辑，锻炼编码能力！")]),O]),T])}const B=e(i,[["render",x],["__file","mybatis.html.vue"]]);export{B as default};
