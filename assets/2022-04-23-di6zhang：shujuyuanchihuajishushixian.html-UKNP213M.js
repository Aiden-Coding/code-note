import{_ as p,r as o,o as e,c,a as n,b as s,d as t,e as l}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"《mybatis-手撸专栏》第6章-数据源池化技术实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《mybatis-手撸专栏》第6章-数据源池化技术实现","aria-hidden":"true"},"#"),s(" 《Mybatis 手撸专栏》第6章：数据源池化技术实现")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://mp.weixin.qq.com/s/cvW7V-wd86DV-Rzs-Fdv1w",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),b=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=898079301&bvid=BV1dN4y1g789&cid=761584030&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),g=l(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>码农，只会做不会说？</code></p><p>你有发现吗，其实很大一部分码农，都只是会写代码，不会讲东西。一遇到述职、答辩、分享、汇报，就很难流畅且有高度、有深度，并融合一部分引入入胜的趣味性来让观众更好的接受和理解你要传递的信息。</p><p>那为什么已经做了还讲不出来呢？因为做只是在已确定目标和既定路线下的执行，但为什么确定这个目标、为什么制定这个路线、横向的参照对比、纵向的深度设计，都没有在一个执行者的头脑中形成过程的推演，更多的时候都只是执行。所以也就很难把一个事完整的表述出来。</p><p>所以，只有当你经历的足够多，阅历的足够丰富，才能有更好的表述能力和临场应变技巧，也就更能更清楚的传递出你要表达的信息。</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>在上一章节我们解析了 XML 中数据源配置信息，并使用 Druid 创建数据源完成数据库的操作。但其实在 Mybatis 中是有自己的数据源实现的，包括无池化的 UnpooledDataSource 实现方式和有池化的 PooledDataSource 实现方式。</p><p>那么本章节我们就来实现一下关于池化数据源的处理，通过这些实现读者也能更好的理解在我们日常开发中一些关于数据源的配置属性到底意欲何为，包括：最大活跃连接数、空闲连接数、检测时长等，在连接池中所起到的作用。</p><h2 id="三、设计" tabindex="-1"><a class="header-anchor" href="#三、设计" aria-hidden="true">#</a> 三、设计</h2><p>首先你可以把池化技术理解为享元模式的具体实现方案，通常我们对一些需要较高创建成本且高频使用的资源，需要进行缓存或者也称预热处理。并把这些资源存放到一个预热池子中，需要用的时候从池子中获取，使用完毕再进行使用。通过池化可以非常有效的控制资源的使用成本，包括；资源数量、空闲时长、获取方式等进行统一控制和管理。如图 6-1 所示</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220423-01.png" alt="图 6-1 池化数据源设计"></p><ul><li>通过提供统一的连接池中心，存放数据源链接，并根据配置按照请求获取链接的操作，创建连接池的数据源链接数量。这里就包括了最大空闲链接和最大活跃链接，都随着创建过程被控制。</li><li>此外由于控制了连接池中连接的数量，所以当外部从连接池获取链接时，如果链接已满则会进行循环等待。这也是大家日常使用DB连接池，如果一个SQL操作引起了慢查询，则会导致整个服务进入瘫痪的阶段，各个和数据库相关的接口调用，都不能获得到链接，接口查询TP99陡然增高，系统开始大量报警。<em>那连接池可以配置的很大吗，也不可以，因为连接池要和数据库所分配的连接池对应上，避免应用配置连接池超过数据库所提供的连接池数量，否则会出现夯住不能分配链接的问题，导致数据库拖垮从而引起连锁反应。</em></li></ul><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mybatis<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">05</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis
    │           ├── binding
    │           ├── builder
    │           ├── datasource
    │           │   ├── druid
    │           │   │   └── <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span>java
    │           │   ├── pooled
    │           │   │   ├── <span class="token class-name">PooledConnection</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">PooledDataSource</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">PooledDataSourceFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">PoolState</span><span class="token punctuation">.</span>java
    │           │   ├── unpooled
    │           │   │   ├── <span class="token class-name">UnpooledDataSource</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">UnpooledDataSourceFactory</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">DataSourceFactory</span><span class="token punctuation">.</span>java
    │           ├── io
    │           ├── mapping
    │           ├── session
    │           │   ├── defaults
    │           │   │   ├── <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Configuration</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlSession</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">TransactionIsolationLevel</span><span class="token punctuation">.</span>java  
    │           ├── transaction
    │           └── type
    └── test
        ├── java
        │   └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span>dao
        │       ├── dao
        │       │   └── <span class="token class-name">IUserDao</span><span class="token punctuation">.</span>java
        │       ├── po
        │       │   └── <span class="token class-name">User</span><span class="token punctuation">.</span>java
        │       └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
        └── resources
            ├── mapper
            │   └──<span class="token class-name">User_Mapper</span><span class="token punctuation">.</span>xml
            └── mybatis<span class="token operator">-</span>config<span class="token operator">-</span>datasource<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：手写Mybatis，获取完整源码</code></p><p>池化数据源核心类关系，如图 6-2 所示</p><p><img src="https://bugstack.cn/images/article/spring/mybatis-220423-02.png" alt="图 6-2 池化数据源核心类关系"></p><ul><li>在 Mybatis 数据源的实现中，包括两部分分为无池化的 UnpooledDataSource 实现类和有池化的 PooledDataSource 实现类，池化的实现类 PooledDataSource 以对无池化的 UnpooledDataSource 进行扩展处理。把创建出来的链接保存到内存中，记录为空闲链接和活跃链接，在不同的阶段进行使用。</li><li>PooledConnection 是对链接的代理操作，通过invoke方法的反射调用，对关闭的链接进行回收处理，并使用 notifyAll 通知正在等待链接的用户进行抢链接。</li><li>另外是对 DataSourceFactory 数据源工厂接口的实现，由无池化工厂实现后，有池化工厂继承的方式进行处理，这里没有太多的复杂操作，池化的处理主要集中在 PooledDataSource 类中进行处理。</li></ul><h3 id="_2-无池化链接实现" tabindex="-1"><a class="header-anchor" href="#_2-无池化链接实现" aria-hidden="true">#</a> 2. 无池化链接实现</h3><p>对于数据库连接池的实现，不一定非得提供池化技术，对于某些场景可以只使用无池化的连接池。那么在实现的过程中，可以把无池化的实现和池化实现拆分解耦，在需要的时候只需要配置对应的数据源即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnpooledDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ClassLoader</span> driverClassLoader<span class="token punctuation">;</span>
    <span class="token comment">// 驱动配置，也可以扩展属性信息 driver.encoding=UTF8</span>
    <span class="token keyword">private</span> <span class="token class-name">Properties</span> driverProperties<span class="token punctuation">;</span>
    <span class="token comment">// 驱动注册器</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> registeredDrivers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 驱动</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>
    <span class="token comment">// DB 链接地址</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token comment">// 账号</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token comment">// 密码</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token comment">// 是否自动提交</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> autoCommit<span class="token punctuation">;</span>
    <span class="token comment">// 事务级别</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> defaultTransactionIsolationLevel<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> drivers <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>drivers<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Driver</span> driver <span class="token operator">=</span> drivers<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            registeredDrivers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Connection</span> <span class="token function">doGetConnection</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token function">initializerDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>autoCommit <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> autoCommit <span class="token operator">!=</span> connection<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span>autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultTransactionIsolationLevel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            connection<span class="token punctuation">.</span><span class="token function">setTransactionIsolation</span><span class="token punctuation">(</span>defaultTransactionIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 初始化驱动
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">initializerDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registeredDrivers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> driverType <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> driverClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// https://www.kfu.com/~nsayer/Java/dyn-jdbc.html</span>
                <span class="token class-name">Driver</span> driverInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">)</span> driverType<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DriverProxy</span><span class="token punctuation">(</span>driverInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                registeredDrivers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> driverInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">&quot;Error setting driver on UnpooledDataSource. Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>无池化的数据源链接实现比较简单，核心在于 initializerDriver 初始化驱动中使用了 Class.forName 和 newInstance 的方式创建了数据源链接操作。</li><li>在创建完成连接以后，把链接存放到驱动注册器中，方便后续使用中可以直接获取链接，避免重复创建所带来的资源消耗。</li></ul><h3 id="_3-有池化链接实现" tabindex="-1"><a class="header-anchor" href="#_3-有池化链接实现" aria-hidden="true">#</a> 3. 有池化链接实现</h3><p>有池化的数据源链接，核心在于对无池化链接的包装，同时提供了相应的池化技术实现，包括：pushConnection、popConnection、forceCloseAll、pingConnection 的操作处理。</p><p>这样当用户想要获取链接的时候，则会从连接池中进行获取，同时判断是否有空闲链接、最大活跃链接多少，以及是否需要等待处理或是最终抛出异常。</p><h4 id="_3-1-池化连接的代理" tabindex="-1"><a class="header-anchor" href="#_3-1-池化连接的代理" aria-hidden="true">#</a> 3.1 池化连接的代理</h4><p>由于我们需要对连接进行池化处理，所以当链接调用一些 CLOSE 方法的时候，也需要把链接从池中关闭和恢复可用，允许其他用户获取到链接。那么这里就需要对连接类进行代理包装，处理 CLOSE 方法。</p><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.datasource.pooled.PooledConnection</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PooledConnection</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果是调用 CLOSE 关闭链接方法，则将链接加入连接池中，并返回null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CLOSE</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> methodName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">CLOSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dataSource<span class="token punctuation">.</span><span class="token function">pushConnection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 除了toString()方法，其他方法调用之前要检查connection是否还是合法的,不合法要抛出SQLException</span>
                <span class="token function">checkConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 其他方法交给connection去调用</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>realConnection<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 PooledConnection 实现 InvocationHandler#invoke 方法，包装代理链接，这样就可以对具体的调用方法进行控制了。</li><li>在 invoke 方法中处理对 CLOSE 方法控制以外，排除 toString 等Object 的方法后，则是其他真正需要被 DB 链接处理的方法了。</li><li>那么这里有一个对于 CLOSE 方法的数据源回收操作 dataSource.pushConnection(this); 有一个具体的实现方法，在池化实现类 PooledDataSource 中进行处理。</li></ul><h4 id="_3-2-pushconnection-回收链接" tabindex="-1"><a class="header-anchor" href="#_3-2-pushconnection-回收链接" aria-hidden="true">#</a> 3.2 pushConnection 回收链接</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.datasource.pooled.PooledDataSource</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">pushConnection</span><span class="token punctuation">(</span><span class="token class-name">PooledConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>activeConnections<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断链接是否有效</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果空闲链接小于设定数量，也就是太少时</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>idleConnections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> poolMaximumIdleConnections <span class="token operator">&amp;&amp;</span> connection<span class="token punctuation">.</span><span class="token function">getConnectionTypeCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> expectedConnectionTypeCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                state<span class="token punctuation">.</span>accumulatedCheckoutTime <span class="token operator">+=</span> connection<span class="token punctuation">.</span><span class="token function">getCheckoutTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    connection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 实例化一个新的DB连接，加入到idle列表</span>
                <span class="token class-name">PooledConnection</span> newConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PooledConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                state<span class="token punctuation">.</span>idleConnections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                newConnection<span class="token punctuation">.</span><span class="token function">setCreatedTimestamp</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getCreatedTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                newConnection<span class="token punctuation">.</span><span class="token function">setLastUsedTimestamp</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getLastUsedTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                connection<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Returned connection &quot;</span> <span class="token operator">+</span> newConnection<span class="token punctuation">.</span><span class="token function">getRealHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; to pool.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 通知其他线程可以来抢DB连接了</span>
                state<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 否则，空闲链接还比较充足</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                state<span class="token punctuation">.</span>accumulatedCheckoutTime <span class="token operator">+=</span> connection<span class="token punctuation">.</span><span class="token function">getCheckoutTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    connection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 将connection关闭</span>
                connection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Closed connection &quot;</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span><span class="token function">getRealHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                connection<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;A bad connection (&quot;</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span><span class="token function">getRealHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) attempted to return to the pool, discarding connection.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            state<span class="token punctuation">.</span>badConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 PooledDataSource#pushConnection 数据源回收的处理中，核心在于判断链接是否有效，以及进行相关的空闲链接校验，判断是否把连接回收到 idle 空闲链接列表中，并通知其他线程来抢占。</li><li>如果现在空闲链接充足，那么这个回收的链接则会进行回滚和关闭的处理中。connection.getRealConnection().close();</li></ul><h4 id="_3-3-popconnection-获取链接" tabindex="-1"><a class="header-anchor" href="#_3-3-popconnection-获取链接" aria-hidden="true">#</a> 3.3 popConnection 获取链接</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.datasource.pooled.PooledDataSource</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">PooledConnection</span> <span class="token function">popConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> countedWait <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">PooledConnection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> localBadConnectionCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果有空闲链接：返回第一个</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>idleConnections<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                conn <span class="token operator">=</span> state<span class="token punctuation">.</span>idleConnections<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Checked out connection &quot;</span> <span class="token operator">+</span> conn<span class="token punctuation">.</span><span class="token function">getRealHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; from pool.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果无空闲链接：创建新的链接</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 活跃连接数不足</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>activeConnections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> poolMaximumActiveConnections<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PooledConnection</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Created connection &quot;</span> <span class="token operator">+</span> conn<span class="token punctuation">.</span><span class="token function">getRealHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 活跃连接数已满</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 取得活跃链接列表的第一个，也就是最老的一个连接</span>
                    <span class="token class-name">PooledConnection</span> oldestActiveConnection <span class="token operator">=</span> state<span class="token punctuation">.</span>activeConnections<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">long</span> longestCheckoutTime <span class="token operator">=</span> oldestActiveConnection<span class="token punctuation">.</span><span class="token function">getCheckoutTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果checkout时间过长，则这个链接标记为过期</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>longestCheckoutTime <span class="token operator">&gt;</span> poolMaximumCheckoutTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        state<span class="token punctuation">.</span>claimedOverdueConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>
                        state<span class="token punctuation">.</span>accumulatedCheckoutTimeOfOverdueConnections <span class="token operator">+=</span> longestCheckoutTime<span class="token punctuation">;</span>
                        state<span class="token punctuation">.</span>accumulatedCheckoutTime <span class="token operator">+=</span> longestCheckoutTime<span class="token punctuation">;</span>
                        state<span class="token punctuation">.</span>activeConnections<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>oldestActiveConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldestActiveConnection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            oldestActiveConnection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">// 删掉最老的链接，然后重新实例化一个新的链接</span>
                        conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PooledConnection</span><span class="token punctuation">(</span>oldestActiveConnection<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        oldestActiveConnection<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Claimed overdue connection &quot;</span> <span class="token operator">+</span> conn<span class="token punctuation">.</span><span class="token function">getRealHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 如果checkout超时时间不够长，则等待</span>
                    <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>countedWait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                state<span class="token punctuation">.</span>hadToWaitCount<span class="token operator">++</span><span class="token punctuation">;</span>
                                countedWait <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Waiting as long as &quot;</span> <span class="token operator">+</span> poolTimeToWait <span class="token operator">+</span> <span class="token string">&quot; milliseconds for connection.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">long</span> wt <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            state<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>poolTimeToWait<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            state<span class="token punctuation">.</span>accumulatedWaitTime <span class="token operator">+=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> wt<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 获得到链接</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conn<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        conn<span class="token punctuation">.</span><span class="token function">getRealConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    conn<span class="token punctuation">.</span><span class="token function">setConnectionTypeCode</span><span class="token punctuation">(</span><span class="token function">assembleConnectionTypeCode</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 记录checkout时间</span>
                    conn<span class="token punctuation">.</span><span class="token function">setCheckoutTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    conn<span class="token punctuation">.</span><span class="token function">setLastUsedTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    state<span class="token punctuation">.</span>activeConnections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    state<span class="token punctuation">.</span>requestCount<span class="token operator">++</span><span class="token punctuation">;</span>
                    state<span class="token punctuation">.</span>accumulatedRequestTime <span class="token operator">+=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;A bad connection (&quot;</span> <span class="token operator">+</span> conn<span class="token punctuation">.</span><span class="token function">getRealHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) was returned from the pool, getting another connection.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果没拿到，统计信息：失败链接 +1</span>
                    state<span class="token punctuation">.</span>badConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>
                    localBadConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>
                    conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token comment">// 失败次数较多，抛异常</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>localBadConnectionCount <span class="token operator">&gt;</span> <span class="token punctuation">(</span>poolMaximumIdleConnections <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;PooledDataSource: Could not get a good connection to the database.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">&quot;PooledDataSource: Could not get a good connection to the database.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> conn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>popConnection 获取链接是一个 while 死循环操作，只有获取到链接抛异常才会退出循环，如果仔细阅读这些异常代码，是不是也是你在做一些开发的时候所遇到的异常呢。</li><li>获取链接的过程会使用 synchronized 进行加锁，因为所有线程在资源竞争的情况下，都需要进行加锁处理。在加锁的代码块中通过判断是否还有空闲链接进行返回，如果没有则会判断活跃连接数是否充足，不充足则进行创建后返回。在这里也会遇到活跃链接已经进行循环等待的过程，最后再不能获取则抛出异常。</li></ul><h3 id="_4-数据源工厂" tabindex="-1"><a class="header-anchor" href="#_4-数据源工厂" aria-hidden="true">#</a> 4. 数据源工厂</h3><p>数据源工厂包括两部分，分别是无池化和有池化，有池化的工厂继承无池化工厂，因为在 Mybatis 源码的实现类中，这样就可以减少对 Properties 统一包装的反射方式的属性处理。由于我们暂时没有对这块逻辑进行开发，只是简单的获取属性传参，所以还不能体现出这样的继承有多便捷，读者可以参考源码进行理解。源码类：UnpooledDataSourceFactory</p><h4 id="_4-1-无池化工厂" tabindex="-1"><a class="header-anchor" href="#_4-1-无池化工厂" aria-hidden="true">#</a> 4.1 无池化工厂</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.datasource.unpooled.UnpooledDataSourceFactory</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnpooledDataSourceFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DataSourceFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">Properties</span> props<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UnpooledDataSource</span> unpooledDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnpooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        unpooledDataSource<span class="token punctuation">.</span><span class="token function">setDriver</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        unpooledDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        unpooledDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        unpooledDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> unpooledDataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>简单包装 getDataSource 获取数据源处理，把必要的参数进行传递过去。在 Mybatis 源码中这部分则是进行了大量的反射字段处理的方式进行存放和获取的。</li></ul><h4 id="_4-2-有池化工厂" tabindex="-1"><a class="header-anchor" href="#_4-2-有池化工厂" aria-hidden="true">#</a> 4.2 有池化工厂</h4><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.datasource.pooled.PooledDataSourceFactory</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PooledDataSourceFactory</span> <span class="token keyword">extends</span> <span class="token class-name">UnpooledDataSourceFactory</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PooledDataSource</span> pooledDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pooledDataSource<span class="token punctuation">.</span><span class="token function">setDriver</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pooledDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pooledDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pooledDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> pooledDataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有池化的数据源工厂实现的也比较简单，只是继承 UnpooledDataSourceFactory 共用获取属性的能力，以及实例化出池化数据源即可。</li></ul><h3 id="_5-新增类型别名注册器" tabindex="-1"><a class="header-anchor" href="#_5-新增类型别名注册器" aria-hidden="true">#</a> 5. 新增类型别名注册器</h3><p>当我们新开发了两个数据源和对应的工厂实现类以后，则需要把它们配置到 Configuration 中，这样才能在解析 XML 时候根据不同的数据源类型获取和实例化对应的实现类。</p><p><strong>源码详见</strong>：<code>cn.bugstack.mybatis.session.Configuration</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span>

    <span class="token comment">// 类型别名注册机</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">TypeAliasRegistry</span> typeAliasRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        typeAliasRegistry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">&quot;JDBC&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        typeAliasRegistry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">&quot;DRUID&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        typeAliasRegistry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">&quot;UNPOOLED&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UnpooledDataSourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        typeAliasRegistry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">&quot;POOLED&quot;</span><span class="token punctuation">,</span> <span class="token class-name">PooledDataSourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在构造方法 Configuration 添加 UNPOOLED、POOLED 两个数据源注册到类型注册器中，方便后续使用 XMLConfigBuilder#environmentsElement 方法解析 XML 处理数据源时候进行使用。</li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><h4 id="_1-1-创建库表" tabindex="-1"><a class="header-anchor" href="#_1-1-创建库表" aria-hidden="true">#</a> 1.1 创建库表</h4><p>创建一个数据库名称为 mybatis 并在库中创建表 user 以及添加测试数据，如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span>
    <span class="token keyword">USER</span>
    <span class="token punctuation">(</span>
        id <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;自增ID&#39;</span><span class="token punctuation">,</span>
        userId <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户ID&#39;</span><span class="token punctuation">,</span>
        userHead <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户头像&#39;</span><span class="token punctuation">,</span>
        createTime <span class="token keyword">TIMESTAMP</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
        updateTime <span class="token keyword">TIMESTAMP</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
        userName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
    
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> userHead<span class="token punctuation">,</span> createTime<span class="token punctuation">,</span> updateTime<span class="token punctuation">,</span> userName<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1_04&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-04-13 00:00:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-04-13 00:00:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小傅哥&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-配置数据源" tabindex="-1"><a class="header-anchor" href="#_1-2-配置数据源" aria-hidden="true">#</a> 1.2 配置数据源</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DRUID<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <code>mybatis-config-datasource.xml</code> 配置数据源信息，包括：driver、url、username、password</li><li>在这里 dataSource 的配置又上一章节的 DRUID 修改为，UNPOOLED 和 POOLED 进行测试验证。这两个数据源也就是我们本章节自己实现的数据源。</li></ul><h4 id="_1-3-配置mapper" tabindex="-1"><a class="header-anchor" href="#_1-3-配置mapper" aria-hidden="true">#</a> 1.3 配置Mapper</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryUserInfoById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Long<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.mybatis.test.po.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    SELECT id, userId, userName, userHead
    FROM user
    where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Mapper 的配置内容在上一章节的解析学习中已经做了配置，本章节做了简单的调整。</li></ul><h3 id="_2-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-单元测试" aria-hidden="true">#</a> 2. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_SqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 从SqlSessionFactory中获取SqlSession</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config-datasource.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 2. 获取映射器对象</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 3. 测试验证</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfoById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在无池化和有池化的测试中，基础的单元测试类不需要改变，仍是通过 SqlSessionFactory 中获取 SqlSession 并获得映射对象和执行方法调用。另外这里是添加了50次的查询调用，便于验证连接池的创建和获取以及等待。</li><li>变化的在于 mybatis-config-datasource.xml 中 dataSource 数据源类型的调整 <code>dataSource type=&quot;POOLED/UNPOOLED&quot;</code></li></ul><h4 id="_2-1-无池化测试" tabindex="-1"><a class="header-anchor" href="#_2-1-无池化测试" aria-hidden="true">#</a> 2.1 无池化测试</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UNPOOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">11</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">48.604</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">48.618</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">48.622</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">48.632</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">48.637</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">48.642</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">48.649</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>无池化的连接池操作，会不断的与数据库建立新的链接并执行 SQL 操作，这个过程中只要数据库还有链接可以被链接，就可以创建链接。</li></ul><h4 id="_2-2-有池化测试" tabindex="-1"><a class="header-anchor" href="#_2-2-有池化测试" aria-hidden="true">#</a> 2.2 有池化测试</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">22.536</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">PooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">22.541</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">PooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">22.541</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">PooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">22.541</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">PooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">22.860</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">540642172.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">22.996</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.009</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">140799417.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.011</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.018</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">110431793.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.019</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.032</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">1053631449.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.033</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.041</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">1693847660.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.042</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.047</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">212921632.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.048</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.055</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">682376643.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.056</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.060</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">334203599.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.062</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.067</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">1971851377.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.068</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.073</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Created</span> connection <span class="token number">399534175.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.074</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">23.074</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Waiting</span> as <span class="token keyword">long</span> as <span class="token number">20000</span> milliseconds <span class="token keyword">for</span> connection<span class="token punctuation">.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">43.078</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span></span>PooledDataSource</span> <span class="token operator">-</span> <span class="token class-name">Claimed</span> overdue connection <span class="token number">540642172.</span>
<span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">43.079</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userHead&quot;</span><span class="token operator">:</span><span class="token string">&quot;1_04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;小傅哥&quot;</span><span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过使用连接池的配置可以看到，在调用和获取连接的过程中，当调用次数打到10次以后，连接池中就有了10个活跃的链接，再调用的时候则需要等待连接释放后才能使用并执行 SQL 操作。</li><li>测试的过程中还包括了连接的空闲数量、活跃数量、关闭、异常等，读者伙伴也可以在学习的过程中进行验证处理。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>本章节我们完成了 Mybatis 数据源池化的设计和实现，也能通过这样的分析、实现、验证的过程让大家更好的理解我们平常使用的连接池所遇到的一些真实问题都是怎么发生的，做到知其然知其所以然。</li><li>另外关于连接池的实现重点可以随着调试验证的过程中进行学习，包括：synchronized 加锁、创建连接、活跃数量控制、休眠等待时长，抛异常逻辑等，这些都与我们日常使用连接池时的配置息息相关。</li><li>这一章节的内容可以算作是 Mybatis 核心功能实现过程上的重要分支，虽然可以使用 Druid 替代数据源的处理，但只有动手自己实现一遍数据源连接池才能更好的理解池化技术的落地方案，也能为以后做此类功能时，有一个可落地的具体方案。</li></ul><h2 id="七、优秀作业" tabindex="-1"><a class="header-anchor" href="#七、优秀作业" aria-hidden="true">#</a> 七、优秀作业</h2>`,81),q={href:"https://t.zsxq.com/05AiEAMfu",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/05JUnEYrR",target:"_blank",rel:"noopener noreferrer"},h={href:"https://t.zsxq.com/05JujAQZn",target:"_blank",rel:"noopener noreferrer"},f={href:"https://t.zsxq.com/06Y7Uniia",target:"_blank",rel:"noopener noreferrer"},w={href:"https://t.zsxq.com/07KmJnHXs",target:"_blank",rel:"noopener noreferrer"},C={href:"https://t.zsxq.com/08NdOTppd",target:"_blank",rel:"noopener noreferrer"},S={href:"https://t.zsxq.com/0bOLO8aNq",target:"_blank",rel:"noopener noreferrer"};function D(_,x){const a=o("ExternalLinkIcon");return e(),c("div",null,[i,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)]),d,s("原文："),n("a",m,[s("https://mp.weixin.qq.com/s/cvW7V-wd86DV-Rzs-Fdv1w"),t(a)])]),v,b,g,n("ul",null,[n("li",null,[n("a",q,[s("池化连接池执行过程 @JabesYang"),t(a)])]),n("li",null,[n("a",y,[s("为什么要进行数据库的池化呢？ @晓伟"),t(a)])]),n("li",null,[n("a",h,[s("重新设置数据源属性的时候，强制关闭活跃连接和空闲连接 @欧阳宇"),t(a)])]),n("li",null,[n("a",f,[s("完成Mybatis 中自己的数据源实现，包括无池化的 UnpooledDataSource 实现方式和有池化的 PooledDataSource 实现方式。"),t(a)])]),n("li",null,[n("a",w,[s("实现Mybatis自己的数据库连接池 @W"),t(a)])]),n("li",null,[n("a",C,[s("数据源池化技术实现 @liuc"),t(a)])]),n("li",null,[n("a",S,[s("实现Mybatis 自己的数据源，包括无池化的 UnpooledDataSource 实现方式和有池化的 PooledDataSource 实现方式 @小猪碎碎念"),t(a)])])])])}const I=p(u,[["render",D],["__file","2022-04-23-di6zhang：shujuyuanchihuajishushixian.html.vue"]]);export{I as default};
