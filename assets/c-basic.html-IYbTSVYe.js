import{_ as o,o as a,c as n,f as i,e}from"./app-3RcBQnkC.js";const c={},d=e(`<h1 id="c-语言教程" tabindex="-1"><a class="header-anchor" href="#c-语言教程" aria-hidden="true">#</a> C 语言教程</h1><ul><li><a href="#c-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B">C 语言教程</a><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#c-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">C 语言特性</a><ul><li><a href="#c-%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%BE%E8%AE%A1">C 语言的设计</a></li><li><a href="#c-%E8%AF%AD%E8%A8%80%E5%85%B7%E6%9C%89%E9%AB%98%E6%95%88%E6%80%A7">C 语言具有高效性</a></li><li><a href="#c-%E8%AF%AD%E8%A8%80%E5%85%B7%E6%9C%89%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7">C 语言具有可移植性</a></li><li><a href="#c-%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9">C 语言特点</a></li></ul></li><li><a href="#%E5%85%A5%E9%97%A8%E7%BA%A7-c-%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F">入门级 C 语言程序</a></li><li><a href="#c-%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B">C 语言执行流程</a><ul><li><a href="#%E4%BD%A0%E9%9C%80%E8%A6%81%E7%90%86%E8%A7%A3%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88">你需要理解编译系统做了什么</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90">系统硬件组成</a></li><li><a href="#%E5%89%96%E6%9E%90-hello-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B">剖析 hello 程序的执行过程</a></li><li><a href="#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E6%98%AF%E5%85%B3%E9%94%AE">高速缓存是关键</a></li></ul></li><li><a href="#again%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%E7%BB%86%E8%8A%82">Again：入门程序细节</a><ul><li><a href="#includestdioh">#include&lt;stdio.h&gt;</a></li><li><a href="#c-%E6%A0%87%E5%87%86%E5%BA%93">C 标准库</a></li><li><a href="#main-%E5%87%BD%E6%95%B0">main() 函数</a></li><li><a href="#%E6%B3%A8%E9%87%8A">注释</a></li><li><a href="#%E5%87%BD%E6%95%B0%E4%BD%93">函数体</a></li><li><a href="#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">变量声明</a></li><li><a href="#printf-%E5%87%BD%E6%95%B0">printf 函数</a></li><li><a href="#return-%E8%AF%AD%E5%8F%A5">return 语句</a></li><li><a href="#%E5%88%86%E5%8F%B7">分号</a></li><li><a href="#%E5%85%B3%E9%94%AE%E5%AD%97">关键字</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%85%B3%E9%94%AE%E5%AD%97">数据类型关键字</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E5%85%B3%E9%94%AE%E5%AD%97">控制语句关键字</a></li><li><a href="#%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B%E5%85%B3%E9%94%AE%E5%AD%97">存储类型关键字</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%85%B3%E9%94%AE%E5%AD%97">其他关键字</a></li></ul></li></ul></li><li><a href="#%E5%90%8E%E8%AE%B0">后记</a></li><li><a href="#c-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE">C 中的数据</a><ul><li><a href="#%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F">变量和常量</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></li></ul></li></ul></li></ul><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>C 语言是一门<code>抽象的</code>、<code>面向过程</code>的语言，C 语言广泛应用于<code>底层开发</code>，C 语言在计算机体系中占据着不可替代的作用，可以说 C 语言是编程的基础，也就是说，不管你学习任何语言，都应该把 C 语言放在<code>首先要学</code>的位置上。下面这张图更好的说明 C 语言的重要性</p><img src="https://s1.ax1x.com/2020/09/10/wG83gx.png" alt="01" border="0" style="zoom:50%;"><p>可以看到，C 语言是一种底层语言，是一种系统层级的语言，操作系统就是使用 C 语言来编写的，比如 Windows、Linux、UNIX 。如果说其他语言是光鲜亮丽的外表，那么 C 语言就是灵魂，永远那么朴实无华。</p><h2 id="c-语言特性" tabindex="-1"><a class="header-anchor" href="#c-语言特性" aria-hidden="true">#</a> C 语言特性</h2><p>那么，既然 C 语言这么重要，它有什么值得我们去学的地方呢？我们不应该只因为它重要而去学，我们更在意的是学完我们能学会什么，能让我们获得什么。</p><h3 id="c-语言的设计" tabindex="-1"><a class="header-anchor" href="#c-语言的设计" aria-hidden="true">#</a> C 语言的设计</h3><p>C 语言是 1972 年，由贝尔实验室的<code>丹尼斯·里奇(Dennis Ritch)</code>和<code>肯·汤普逊(Ken Thompson)</code>在开发 UNIX 操作系统时设计了C语言。C 语言是一门流行的语言，它把计算机科学理论和工程实践理论完美的融合在一起，使用户能够完成模块化的编程和设计。</p><blockquote><p>计算机科学理论：简称 CS、是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科。</p></blockquote><h3 id="c-语言具有高效性" tabindex="-1"><a class="header-anchor" href="#c-语言具有高效性" aria-hidden="true">#</a> C 语言具有高效性</h3><p>C 语言是一门高效性语言，它被设计用来充分发挥计算机的优势，因此 C 语言程序运行速度很快，C 语言能够合理了使用内存来获得最大的运行速度</p><h3 id="c-语言具有可移植性" tabindex="-1"><a class="header-anchor" href="#c-语言具有可移植性" aria-hidden="true">#</a> C 语言具有可移植性</h3><p>C 语言是一门具有可移植性的语言，这就意味着，对于在一台计算机上编写的 C 语言程序可以在另一台计算机上轻松地运行，从而极大的减少了程序移植的工作量。</p><h3 id="c-语言特点" tabindex="-1"><a class="header-anchor" href="#c-语言特点" aria-hidden="true">#</a> C 语言特点</h3><ul><li>C 语言是一门简洁的语言，因为 C 语言设计更加靠近底层，因此不需要众多 Java 、C# 等高级语言才有的特性，程序的编写要求不是很严格。</li><li>C 语言具有结构化控制语句，C 语言是一门结构化的语言，它提供的控制语句具有结构化特征，如 for 循环、if⋯ else 判断语句和 switch 语句等。</li><li>C 语言具有丰富的数据类型，不仅包含有传统的<strong>字符型、整型、浮点型、数组</strong>类型等数据类型，还具有其他编程语言所不具备的数据类型，比如指针。</li><li>C 语言能够直接对内存地址进行读写，因此可以实现汇编语言的主要功能，并可直接操作硬件。</li><li>C 语言速度快，生成的目标代码执行效率高。</li></ul><p>下面让我们通过一个简单的示例来说明一下 C 语言</p><h2 id="入门级-c-语言程序" tabindex="-1"><a class="header-anchor" href="#入门级-c-语言程序" aria-hidden="true">#</a> 入门级 C 语言程序</h2><p>下面我们来看一个很简单的 C 语言程序，我是 mac 电脑，所以我使用的是 <code>xcode</code> 进行开发，我觉得工具无所谓大家用着顺手就行。</p><p>第一个 C 语言程序</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;my Name is cxuan \\n&quot;</span><span class="token punctuation">)</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d \\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能不知道这段代码是什么意思，不过别着急，我们先运行一下看看结果。</p><img src="https://s1.ax1x.com/2020/09/10/wG8B8I.png" alt="02" border="0"><p>这段程序输出了 <code>Hello,World!</code> 和 <code>My Name is cxuan</code>，最后一行是程序的执行结果，表示这段程序是否有错误。下面我们解释一下各行代码的含义。</p><p>首先，第一行的 <code>#include &lt;stdio.h&gt;</code>， 这行代码包含另一个文件，这一行告诉编译器把 <code>stdio.h</code> 的内容包含在当前程序中。 <code>stdio.h</code> 是 C 编译器软件包的标准部分，它能够提供键盘输入和显示器输出。</p><blockquote><p>什么是 C 标准软件包？C 是由 Dennis M 在1972年开发的通用，过程性，命令式计算机编程语言。C标准库是一组 C 语言内置函数，常量和头文件，例如&lt;stdio.h&gt;，&lt;stdlib.h&gt;，&lt;math.h&gt;等。此库将用作 C 程序员的参考手册。</p></blockquote><p>我们后面会介绍 stdio.h ，现在你知道它是什么就好。</p><p>在 stdio.h 下面一行代码就是 <code>main</code> 函数。</p><p>C 程序能够包含一个或多个函数，函数是 C 语言的根本，就和方法是 Java 的基本构成一样。<code>main()</code> 表示一个函数名，<code>int</code> 表示的是 main 函数返回一个整数。void 表明 main() 不带任何参数。这些我们后面也会详细说明，只需要记住 int 和 void 是标准 <code>ANSI C</code> 定义 main() 的一部分(如果使用 ANSI C 之前的编译器，请忽略 void)。</p><p>然后是 <code>/*一个简单的 C 语言程序*/</code> 表示的是注释，注释使用 <code>/**/</code> 来表示，注释的内容在两个符号之间。这些符号能够提高程序的可读性。</p><blockquote><p>注意：注释只是为了帮助程序员理解代码的含义，编译器会忽略注释</p></blockquote><p>下面就是 <code>{</code> ，这是左花括号，它表示的是函数体的开始，而最后的右花括号 <code>}</code> 表示函数体的结束。 <code>{ }</code> 中间是书写代码的地方，也叫做代码块。</p><p><code>int number</code> 表示的是将会使用一个名为 number 的变量，而且 number 是 <code>int</code> 整数类型。</p><p><code>number = 11</code> 表示的是把值 11 赋值给 number 的变量。</p><p><code>printf(Hello,world!\\n);</code> 表示调用一个函数，这个语句使用 <code>printf()</code> 函数，在屏幕上显示 <code>Hello,world</code> ， printf() 函数是 C 标准库函数中的一种，它能够把程序运行的结果输出到显示器上。而代码 <code>\\n</code> 表示的是 <code>换行</code>，也就是另起一行，把光标移到下一行。</p><p>然后接下来的一行 printf() 和上面一行是一样的，我们就不多说了。最后一行 printf() 有点意思，你会发现有一个 <code>%d</code> 的语法，它的意思表示的是使用整形输出字符串。</p><p>代码块的最后一行是 <code>return 0</code>，它可以看成是 main 函数的结束，最后一行是代码块 <code>}</code> ，它表示的是程序的结束。</p><p>好了，我们现在写完了第一个 C 语言程序，有没有对 C 有了更深的认识呢？肯定没有。。。这才哪到哪，继续学习吧。</p><p>现在，我们可以归纳为 C 语言程序的几个组成要素，如下图所示</p><img src="https://s1.ax1x.com/2020/09/10/wG8D2t.png" alt="03" border="0"><h2 id="c-语言执行流程" tabindex="-1"><a class="header-anchor" href="#c-语言执行流程" aria-hidden="true">#</a> C 语言执行流程</h2><p>C 语言程序成为高级语言的原因是它能够读取并理解人们的思想。然而，为了能够在系统中运行 <code>hello.c</code> 程序，则各个 C 语句必须由其他程序转换为一系列低级机器语言指令。这些指令被打包作为<code>可执行对象程序</code>，存储在二进制磁盘文件中。目标程序也称为可执行目标文件。</p><p>在 UNIX 系统中，从源文件到对象文件的转换是由<code>编译器</code>执行完成的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-o</span> hello hello.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>gcc 编译器驱动从源文件读取 <code>hello.c</code> ，并把它翻译成一个可执行文件 <code>hello</code>。这个翻译过程可用如下图来表示</p><img src="https://s1.ax1x.com/2020/09/10/wG80PA.png" alt="04" border="0"><p>这就是一个完整的 hello world 程序执行过程，会涉及几个核心组件：<strong>预处理器、编译器、汇编器、连接器</strong>，下面我们逐个击破。</p><ul><li><p><code> 预处理阶段(Preprocessing phase)</code>，预处理器会根据开始的 <code>#</code> 字符，修改源 C 程序。<strong>#include &lt;stdio.h&gt;</strong> 命令就会告诉预处理器去读系统头文件 <code>stdio.h</code> 中的内容，并把它插入到程序作为文本。然后就得到了另外一个 C 程序<code>hello.i</code>，这个程序通常是以 <code>.i</code>为结尾。</p></li><li><p>然后是 <code>编译阶段(Compilation phase)</code>，编译器会把文本文件 <code>hello.i</code> 翻译成文本<code>hello.s</code>，它包括一段<code>汇编语言程序(assembly-language program)</code>。</p></li><li><p>编译完成之后是<code>汇编阶段(Assembly phase)</code>，这一步，<code>汇编器 as</code>会把 hello.s 翻译成机器指令，把这些指令打包成<code>可重定位的二进制程序(relocatable object program)</code>放在 hello.c 文件中。它包含的 17 个字节是函数 main 的指令编码，如果我们在文本编辑器中打开 hello.o 将会看到一堆乱码。</p></li><li><p>最后一个是<code>链接阶段(Linking phase)</code>，我们的 hello 程序会调用 <code>printf</code> 函数，它是 C 编译器提供的 C 标准库中的一部分。printf 函数位于一个叫做 <code>printf.o</code>文件中，它是一个单独的预编译好的目标文件，而这个文件必须要和我们的 hello.o 进行链接，<code>连接器(ld)</code> 会处理这个合并操作。结果是，hello 文件，它是一个可执行的目标文件（或称为可执行文件），已准备好加载到内存中并由系统执行。</p></li></ul><h3 id="你需要理解编译系统做了什么" tabindex="-1"><a class="header-anchor" href="#你需要理解编译系统做了什么" aria-hidden="true">#</a> 你需要理解编译系统做了什么</h3><p>对于上面这种简单的 hello 程序来说，我们可以依赖<code>编译系统(compilation system)</code>来提供一个正确和有效的机器代码。然而，对于我们上面讲的程序员来说，编译器有几大特征你需要知道</p><ul><li><code>优化程序性能(Optimizing program performance)</code>，现代编译器是一种高效的用来生成良好代码的工具。对于程序员来说，你无需为了编写高质量的代码而去理解编译器内部做了什么工作。然而，为了编写出高效的 C 语言程序，我们需要了解一些基本的机器码以及编译器将不同的 C 语句转化为机器代码的过程。</li><li><code>理解链接时出现的错误(Understanding link-time errors)</code>，在我们的经验中，一些非常复杂的错误大多是由链接阶段引起的，特别是当你想要构建大型软件项目时。</li><li><code>避免安全漏洞(Avoiding security holes)</code>，近些年来，<code>缓冲区溢出(buffer overflow vulnerabilities)</code>是造成网络和 Internet 服务的罪魁祸首，所以我们有必要去规避这种问题。</li></ul><h3 id="系统硬件组成" tabindex="-1"><a class="header-anchor" href="#系统硬件组成" aria-hidden="true">#</a> 系统硬件组成</h3><p>为了理解 hello 程序在运行时发生了什么，我们需要首先对系统的硬件有一个认识。下面这是一张 Intel 系统产品的模型，我们来对其进行解释</p><img src="https://s1.ax1x.com/2020/09/10/wG8UVe.png" alt="05" border="0"><ul><li><code>总线(Buses)</code>：在整个系统中运行的是称为总线的电气管道的集合，这些总线在组件之间来回传输字节信息。通常总线被设计成传送定长的字节块，也就是 <code>字(word)</code>。字中的字节数（字长）是一个基本的系统参数，各个系统中都不尽相同。现在大部分的字都是 4 个字节（32 位）或者 8 个字节（64 位）。</li></ul><img src="https://s1.ax1x.com/2020/09/10/wG8tbD.png" alt="06" border="0"><ul><li><p><code>I/O 设备(I/O Devices)</code>：Input/Output 设备是系统和外部世界的连接。上图中有四类 I/O 设备：用于用户输入的键盘和鼠标，用于用户输出的显示器，一个磁盘驱动用来长时间的保存数据和程序。刚开始的时候，可执行程序就保存在磁盘上。</p><p>每个I/O 设备连接 I/O 总线都被称为<code>控制器(controller)</code> 或者是 <code>适配器(Adapter)</code>。控制器和适配器之间的主要区别在于封装方式。控制器是 I/O 设备本身或者系统的主印制板电路（通常称作主板）上的芯片组。而适配器则是一块插在主板插槽上的卡。无论组织形式如何，它们的最终目的都是彼此交换信息。</p></li><li><p><code>主存(Main Memory)</code>，主存是一个<code>临时存储设备</code>，而不是永久性存储，磁盘是 <code>永久性存储</code> 的设备。主存既保存程序，又保存处理器执行流程所处理的数据。从物理组成上说，主存是由一系列 <code>DRAM(dynamic random access memory)</code> 动态随机存储构成的集合。逻辑上说，内存就是一个线性的字节数组，有它唯一的地址编号，从 0 开始。一般来说，组成程序的每条机器指令都由不同数量的字节构成，C 程序变量相对应的数据项的大小根据类型进行变化。比如，在 Linux 的 x86-64 机器上，short 类型的数据需要 2 个字节，int 和 float 需要 4 个字节，而 long 和 double 需要 8 个字节。</p></li><li><p><code>处理器(Processor)</code>，<code>CPU(central processing unit)</code> 或者简单的处理器，是解释（并执行）存储在主存储器中的指令的引擎。处理器的核心大小为一个字的存储设备（或寄存器），称为<code>程序计数器(PC)</code>。在任何时刻，PC 都指向主存中的某条机器语言指令（即含有该条指令的地址）。</p><p>从系统通电开始，直到系统断电，处理器一直在不断地执行程序计数器指向的指令，再更新程序计数器，使其指向下一条指令。处理器根据其指令集体系结构定义的指令模型进行操作。在这个模型中，指令按照严格的顺序执行，执行一条指令涉及执行一系列的步骤。处理器从程序计数器指向的内存中读取指令，解释指令中的位，执行该指令指示的一些简单操作，然后更新程序计数器以指向下一条指令。指令与指令之间可能连续，可能不连续（比如 jmp 指令就不会顺序读取）</p><p>下面是 CPU 可能执行简单操作的几个步骤</p></li><li><p><code>加载(Load)</code>：从主存中拷贝一个字节或者一个字到内存中，覆盖寄存器先前的内容</p></li><li><p><code>存储(Store)</code>：将寄存器中的字节或字复制到主存储器中的某个位置，从而覆盖该位置的先前内容</p></li><li><p><code>操作(Operate)</code>：把两个寄存器的内容复制到 <code>ALU(Arithmetic logic unit) </code>。把两个字进行算术运算，并把结果存储在寄存器中，重写寄存器先前的内容。</p></li></ul><blockquote><p>算术逻辑单元（ALU）是对数字二进制数执行算术和按位运算的组合数字电子电路。</p></blockquote><ul><li><code>跳转(jump)</code>：从指令中抽取一个字，把这个字复制到<code>程序计数器(PC)</code> 中，覆盖原来的值</li></ul><h3 id="剖析-hello-程序的执行过程" tabindex="-1"><a class="header-anchor" href="#剖析-hello-程序的执行过程" aria-hidden="true">#</a> 剖析 hello 程序的执行过程</h3><p>前面我们简单的介绍了一下计算机的硬件的组成和操作，现在我们正式介绍运行示例程序时发生了什么，我们会从宏观的角度进行描述，不会涉及到所有的技术细节</p><p>刚开始时，shell 程序执行它的指令，等待用户键入一个命令。当我们在键盘上输入了 <code>./hello</code> 这几个字符时，shell 程序将字符逐一读入寄存器，再把它放到内存中，如下图所示</p><img src="https://s1.ax1x.com/2020/09/10/wG8d5d.png" alt="07" border="0"><p>当我们在键盘上敲击<code>回车键</code>的时候，shell 程序就知道我们已经结束了命令的输入。然后 shell 执行一系列指令来加载可执行的 hello 文件，这些指令将目标文件中的代码和数据从磁盘复制到主存。</p><p>利用 <code>DMA(Direct Memory Access)</code> 技术可以直接将磁盘中的数据复制到内存中，如下</p><img src="https://s1.ax1x.com/2020/09/10/wG8aUH.png" alt="08" border="0"><p>一旦目标文件中 hello 中的代码和数据被加载到主存，处理器就开始执行 hello 程序的 main 程序中的机器语言指令。这些指令将 <code>hello,world\\n</code> 字符串中的字节从主存复制到寄存器文件，再从寄存器中复制到显示设备，最终显示在屏幕上。如下所示</p><img src="https://s1.ax1x.com/2020/09/10/wG8YDO.png" alt="09" border="0"><h3 id="高速缓存是关键" tabindex="-1"><a class="header-anchor" href="#高速缓存是关键" aria-hidden="true">#</a> 高速缓存是关键</h3><p>上面我们介绍完了一个 hello 程序的执行过程，系统花费了大量时间把信息从一个地方搬运到另外一个地方。hello 程序的机器指令最初存储在<code>磁盘</code>上。当程序加载后，它们会<code>拷贝</code>到主存中。当 CPU 开始运行时，指令又从内存复制到 CPU 中。同样的，字符串数据 <code>hello,world \\n</code> 最初也是在磁盘上，它被复制到内存中，然后再到显示器设备输出。从程序员的角度来看，这种复制大部分是开销，这减慢了程序的工作效率。因此，对于系统设计来说，最主要的一个工作是让程序运行的越来越快。</p><p>由于物理定律，较大的存储设备要比较小的存储设备慢。而由于寄存器和内存的处理效率在越来越大，所以针对这种差异，系统设计者采用了更小更快的存储设备，称为<code>高速缓存存储器(cache memory, 简称为 cache 高速缓存)</code>，作为暂时的集结区域，存放近期可能会需要的信息。如下图所示</p><img src="https://s1.ax1x.com/2020/09/10/wG8JKK.png" alt="10" border="0"><p>图中我们标出了高速缓存的位置，位于高速缓存中的 <code>L1</code>高速缓存容量可以达到数万字节，访问速度几乎和访问寄存器文件一样快。容量更大的 <code>L2</code> 高速缓存通过一条特殊的总线链接 CPU，虽然 L2 缓存比 L1 缓存慢 5 倍，但是仍比内存要哦快 5 - 10 倍。L1 和 L2 是使用一种<code>静态随机访问存储器(SRAM)</code> 的硬件技术实现的。最新的、处理器更强大的系统甚至有三级缓存：L1、L2 和 L3。系统可以获得一个很大的存储器，同时访问速度也更快，原因是利用了高速缓存的 <code>局部性</code>原理。</p><h2 id="again-入门程序细节" tabindex="-1"><a class="header-anchor" href="#again-入门程序细节" aria-hidden="true">#</a> Again：入门程序细节</h2><p>现在，我们来探讨一下<code>入门级</code>程序的细节，由浅入深的来了解一下 C 语言的特性。</p><h3 id="include-stdio-h" tabindex="-1"><a class="header-anchor" href="#include-stdio-h" aria-hidden="true">#</a> #include&lt;stdio.h&gt;</h3><p>我们上面说到，<code>#include&lt;stdio.h&gt;</code> 是程序编译之前要处理的内容，称为<code>编译预处理</code>命令。</p><p>预处理命令是在编译之前进行处理。预处理程序一般以 <code>#</code> 号开头。</p><p>所有的 C 编译器软件包都提供 <code>stdio.h</code> 文件。该文件包含了给编译器使用的输入和输出函数，比如 println() 信息。该文件名的含义是<strong>标准输入/输出</strong> 头文件。通常，在 C 程序顶部的信息集合被称为 <code>头文件(header)</code>。</p><blockquote><p>C 的第一个标准是由 ANSI 发布的。虽然这份文档后来被国际标准化组织(ISO)采纳并且 ISO 发布的修订版也被 ANSI 采纳了，但名称 ANSI C(而不是 ISO C) 仍被广泛使用。一些软件开发者使用<strong>ISO C</strong>，还有一些使用 <strong>Standard C</strong>。</p></blockquote><h3 id="c-标准库" tabindex="-1"><a class="header-anchor" href="#c-标准库" aria-hidden="true">#</a> C 标准库</h3><p>除了 &lt;sdtio.h&gt; 外，C 标准库还包括下面这些头文件</p><img src="https://s1.ax1x.com/2020/09/10/wG88v6.png" alt="11" border="0"><p><strong>&lt;assert.h&gt;</strong></p><p>提供了一个名为 <code>assert</code> 的关键字，它用于验证程序作出的假设，并在假设为假输出诊断消息。</p><p><strong>&lt;ctype.h&gt;</strong></p><p>C 标准库的 ctype.h 头文件提供了一些函数，可以用于测试和映射字符。</p><p>这些字符接受 int 作为参数，它的值必须是 <code>EOF</code> 或者是一个无符号字符</p><blockquote><p>EOF是一个计算机术语，为 End Of File 的缩写，在操作系统中表示资料源无更多的资料可读取。资料源通常称为档案或串流。通常在文本的最后存在此字符表示资料结束。</p></blockquote><p><strong>&lt;errno.h&gt;</strong></p><p>C 标准库的 <strong>errno.h</strong> 头文件定义了整数变量 <strong>errno</strong>，它是通过系统调用设置的，这些库函数表明了什么发生了错误。</p><p><strong>&lt;float.h&gt;</strong></p><p>C 标准库的 <strong>float.h</strong> 头文件包含了一组与浮点值相关的依赖于平台的常量。</p><p><strong>&lt;limits.h&gt;</strong></p><p><strong>limits.h</strong> 头文件决定了各种变量类型的各种属性。定义在该头文件中的宏限制了各种变量类型（比如 char、int 和 long）的值。</p><p><strong>&lt;locale.h&gt;</strong></p><p><strong>locale.h</strong> 头文件定义了特定地域的设置，比如日期格式和货币符号</p><p><strong>&lt;math.h&gt;</strong></p><p><strong>math.h</strong> 头文件定义了各种数学函数和一个宏。在这个库中所有可用的功能都带有一个 <strong>double</strong> 类型的参数，且都返回 <strong>double</strong> 类型的结果。</p><p><strong>&lt;setjmp.h&gt;</strong></p><p><strong>setjmp.h</strong> 头文件定义了宏 <strong>setjmp()</strong>、函数 <strong>longjmp()</strong> 和变量类型 <strong>jmp_buf</strong>，该变量类型会绕过正常的函数调用和返回规则。</p><p><strong>&lt;signal.h&gt;</strong></p><p><strong>signal.h</strong> 头文件定义了一个变量类型 <strong>sig_atomic_t</strong>、两个函数调用和一些宏来处理程序执行期间报告的不同信号。</p><p><strong>&lt;stdarg.h&gt;</strong></p><p><strong>stdarg.h</strong> 头文件定义了一个变量类型 <strong>va_list</strong> 和三个宏，这三个宏可用于在参数个数未知（即参数个数可变）时获取函数中的参数。</p><p><strong>&lt;stddef.h&gt;</strong></p><p><strong>stddef .h</strong> 头文件定义了各种变量类型和宏。这些定义中的大部分也出现在其它头文件中。</p><p><strong>&lt;stdlib.h&gt;</strong></p><p><strong>stdlib .h</strong> 头文件定义了四个变量类型、一些宏和各种通用工具函数。</p><p><strong>&lt;string.h&gt;</strong></p><p><strong>string .h</strong> 头文件定义了一个变量类型、一个宏和各种操作字符数组的函数。</p><p><strong>&lt;time.h&gt;</strong></p><p><strong>time.h</strong> 头文件定义了四个变量类型、两个宏和各种操作日期和时间的函数。</p><h3 id="main-函数" tabindex="-1"><a class="header-anchor" href="#main-函数" aria-hidden="true">#</a> main() 函数</h3><p>main 函数听起来像是调皮捣蛋的孩子故意给方法名起一个 <code>主要的</code> 方法，来告诉他人他才是这个世界的中心。但事实却不是这样，而 <code>main()</code> 方法确实是世界的中心。</p><p>C 语言程序一定从 main() 函数开始执行，除了 main() 函数外，你可以随意命名其他函数。通常，main 后面的 <code>()</code> 中表示一些传入信息，我们上面的那个例子中没有传递信息，因为圆括号中的输入是 void 。</p><p>除了上面那种写法外，还有两种 main 方法的表示方式，一种是 <code>void main(){}</code> ，一种是 <code>int main(int argc, char* argv[]) {}</code></p><ul><li>void main() 声明了一个带有不确定参数的构造方法</li><li>int main(int argc, char* argv[]) {} 其中的 argc 是一个非负值，表示从运行程序的环境传递到程序的参数数量。它是指向 argc + 1 指针数组的第一个元素的指针，其中最后一个为null，而前一个（如果有的话）指向表示从主机环境传递给程序的参数的字符串。 如果argv [0]不是空指针（或者等效地，如果argc&gt; 0），则指向表示程序名称的字符串，如果在主机环境中无法使用程序名称，则该字符串为空。</li></ul><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><p>在程序中，使用 /**/ 的表示注释，注释对于程序来说没有什么实际用处，但是对程序员来说却非常有用，它能够帮助我们理解程序，也能够让他人看懂你写的程序，我们在开发工作中，都非常反感不写注释的人，由此可见注释非常重要。</p>`,121),l=e(`<p>C 语言注释的好处是，它可以放在任意地方，甚至代码在同一行也没关系。较长的注释可以多行表示，我们使用 /**/ 表示多行注释，而 // 只表示的是单行注释。下面是几种注释的表示形式</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 这是一个单行注释</span>

<span class="token comment">/* 多行注释用一行表示 */</span>

<span class="token comment">/*
 	多行注释用多行表示
 	 	多行注释用多行表示
 	 	 	多行注释用多行表示
 	 	 	 	多行注释用多行表示

*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数体" tabindex="-1"><a class="header-anchor" href="#函数体" aria-hidden="true">#</a> 函数体</h3><p>在头文件、main 方法后面的就是函数体（注释一般不算），函数体就是函数的执行体，是你编写大量代码的地方。</p><h3 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h3><p>在我们入门级的代码中，我们声明了一个名为 <code>number</code> 的变量，它的类型是 int，这行代码叫做 <code>声明</code>，声明是 C 语言最重要的特性之一。这个声明完成了两件事情：定义了一个名为 number 的变量，定义 number 的具体类型。</p><p>int 是 C 语言的一个 <code>关键字(keyword)</code>，表示一种基本的 C 语言数据类型。关键字是用于语言定义的。不能使用关键字作为变量进行定义。</p><p>示例中的 <code>number</code> 是一个 <code>标识符(identifier)</code>，也就是一个变量、函数或者其他实体的名称。</p><p>###变量赋值</p><p>在入门例子程序中，我们声明了一个 number 变量，并为其赋值为 11，赋值是 C 语言的基本操作之一。这行代码的意思就是把值 1 赋给变量 number。在执行 int number 时，编译器会在计算机内存中为变量 number 预留空间，然后在执行这行赋值表达式语句时，把值存储在之前预留的位置。可以给 number 赋不同的值，这就是 number 之所以被称为 <code>变量(variable)</code> 的原因。</p><img src="https://s1.ax1x.com/2020/09/10/wG8181.png" alt="12" border="0"><h3 id="printf-函数" tabindex="-1"><a class="header-anchor" href="#printf-函数" aria-hidden="true">#</a> printf 函数</h3><p>在入门例子程序中，有三行 printf()，这是 C 语言的标准函数。圆括号中的内容是从 main 函数传递给 printf 函数的。参数分为两种：<code>实际参数(actual argument)</code> 和 <code>形式参数(formal parameters)</code>。我们上面提到的 printf 函数括号中的内容，都是实参。</p><h3 id="return-语句" tabindex="-1"><a class="header-anchor" href="#return-语句" aria-hidden="true">#</a> return 语句</h3><p>在入门例子程序中，return 语句是最后一条语句。<code>int main(void)</code> 中的 int 表明 main() 函数应返回一个整数。有返回值的 C 函数要有 return 语句，没有返回值的程序也建议大家保留 return 关键字，这是一种好的习惯或者说统一的编码风格。</p><h3 id="分号" tabindex="-1"><a class="header-anchor" href="#分号" aria-hidden="true">#</a> 分号</h3><p>在 C 语言中，每一行的结尾都要用 <code>;</code> 进行结束，它表示一个语句的结束，如果忘记或者会略分号会被编译器提示错误。</p><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3><p>下面是 C 语言中的关键字，C 语言的关键字一共有 <code>32</code> 个，根据其作用不同进行划分</p><h4 id="数据类型关键字" tabindex="-1"><a class="header-anchor" href="#数据类型关键字" aria-hidden="true">#</a> 数据类型关键字</h4><p>数据类型的关键字主要有 12 个，分别是</p><ul><li><code>char</code>: 声明字符型变量或函数</li><li><code>double</code>: 声明双精度变量或函数</li><li><code>float</code>: 声明浮点型变量或函数</li><li><code>int</code> : 声明整型变量或函数</li><li><code>long</code>: 声明长整型变量或函数</li><li><code>short</code> : 声明短整型变量或函数</li><li><code>signed</code> : 声明有符号类型变量或函数</li><li><code>_Bool</code>: 声明布尔类型</li><li><code>_Complex</code> ：声明复数</li><li><code>_Imaginary</code>: 声明虚数</li><li><code>unsigned</code> : 声明无符号类型变量或函数</li><li><code>void</code> : 声明函数无返回值或无参数，声明无类型指针</li></ul><h4 id="控制语句关键字" tabindex="-1"><a class="header-anchor" href="#控制语句关键字" aria-hidden="true">#</a> 控制语句关键字</h4><p>控制语句循环的关键字也有 12 个，分别是</p><p><strong>循环语句</strong></p><ul><li><code>for</code> : for 循环，使用的最多</li><li><code>do</code> ：循环语句的前提条件循环体</li><li><code>while</code>：循环语句的循环条件</li><li><code>break</code> : 跳出当前循环</li><li><code>continue</code>：结束当前循环，开始下一轮循环</li></ul><p><strong>条件语句</strong></p><ul><li><code>if</code>：条件语句的判断条件</li><li><code>else</code> : 条件语句的否定分支，与 if 连用</li><li><code>goto</code>: 无条件跳转语句</li></ul><p><strong>开关语句</strong></p><ul><li><code>switch</code>: 用于开关语句</li><li><code>case</code>：开关语句的另外一种分支</li><li><code>default</code> : 开关语句中的其他分支</li></ul><p><strong>返回语句</strong></p><p><code>retur </code>：子程序返回语句（可以带参数，也看不带参数）</p><h4 id="存储类型关键字" tabindex="-1"><a class="header-anchor" href="#存储类型关键字" aria-hidden="true">#</a> 存储类型关键字</h4><ul><li><code>auto</code> : 声明自动变量 一般不使用</li><li><code>extern</code> : 声明变量是在其他文件正声明（也可以看做是引用变量）</li><li><code>register</code> : 声明寄存器变量</li><li><code>static</code>: 声明静态变量</li></ul><h4 id="其他关键字" tabindex="-1"><a class="header-anchor" href="#其他关键字" aria-hidden="true">#</a> 其他关键字</h4><ul><li><code>const</code>: 声明只读变量</li><li><code>sizeof</code> : 计算数据类型长度</li><li><code>typedef</code>: 用以给数据类型取别名</li><li><code>volatile</code> : 说明变量在程序执行中可被隐含地改变</li></ul><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记" aria-hidden="true">#</a> 后记</h2><p>这篇文章我们先介绍了 C 语言的特性，C 语言为什么这么火，C 语言的重要性，之后我们以一道 C 语言的入门程序讲起，我们讲了 C 语言的基本构成要素，C 语言在硬件上是如何运行的，C 语言的编译过程和执行过程等，在这之后我们又加深讲解了一下入门例子程序的组成特征。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivkbczxoj31l20t8al5.jpg" alt="image-20210716163352584"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsivl4khz9j31d60h8mze.jpg" alt="image-20210716163433337"></p>`,40);function s(t,r){return a(),n("div",null,[d,i(' <img src="/Users/mr.l/Library/Application Support/typora-user-images/image-20200830071857009.png" alt="image-20200830071857009" style="zoom:50%;" /> '),l])}const h=o(c,[["render",s],["__file","c-basic.html.vue"]]);export{h as default};
