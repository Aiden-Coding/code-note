import{_ as s,o as n,c as a,e as t}from"./app-3RcBQnkC.js";const e={},p=t(`<h1 id="_2-3-工具" tabindex="-1"><a class="header-anchor" href="#_2-3-工具" aria-hidden="true">#</a> 2.3 工具</h1><p>除了 <strong>ClassVisitor</strong> 类和相关的 <strong>ClassReader</strong>、<strong>ClassWriter</strong> 组件之外，<strong>ASM</strong> 还在 <code>org.objectweb.asm.util</code> 包中提供了几个工具，这些工具在开发类生成器或适配器时可能非常有用，但在运行时不需要它们。<strong>ASM</strong> 还提供了一个实用类，用于在运行时处理内部名、类型描述符和方法描述符。所有这些工具都将在下面介绍。</p><h2 id="_2-3-1-type" tabindex="-1"><a class="header-anchor" href="#_2-3-1-type" aria-hidden="true">#</a> 2.3.1 Type</h2><p>在前几节已经看到，<strong>ASM API</strong> 公开 <strong>Java</strong> 类型的形式就是它们在已编译类中的存储形式，也就是说，作为内部特性或类型描述符。也可以按照它们在源代码中的形式来公开它们，使代码更便于阅读。但这样就需要在 <strong>ClassReader</strong> 和 <strong>ClassWriter</strong> 中的两种表示形式之间进行系统转换，从而使性能降低。这就是为什么 <strong>ASM</strong> 没有透明地将内部名和类型描述符转换为它们等价的源代码形式。但它提供了 Type 类，可以在必要时进行手动转换。</p><p>一个 <strong>Type</strong> 对象表示一种 <strong>Java</strong> 类型，既可以由类型描述符构造，也可以由 <strong>Class</strong> 对象构建。 <strong>Type</strong> 类还包含表示基元类型的静态变量。例如，<strong>Type.INT_TYPE</strong> 是表示 <strong>int</strong> 类型的 <strong>Type</strong> 对象。</p><p><code>getInternalName</code> 方法返回一个 <code>Type</code> 的内部名。 例如， <code>Type.getType(String.class). getInternalName()</code> 给出 <code>String</code> 类的内部名，即 <code>&quot;java/lang/String&quot;</code>。这一方法只能对类或接口类型使用。</p><p><code>getDescriptor</code> 方法返回一个 <code>Type</code> 的描述符。 比如，在代码中可以不使用 <code>&quot;Ljava/lang/String;&quot;</code>，而是使用<code>Type.getType(String.class).getDescriptor()</code>。或者，可以不使用 <code>I</code>，而是使用 <code>Type.INT_TYPE.getDescriptor()</code>。</p><p><code>Type</code> 对象还可以表示方法类型。这种对象既可以从一个方法描述符构建，也可以由 <strong>Method</strong> 对象构建。 <strong>getDescriptor</strong> 方法返回与这一类型对应的方法描述符。此外， <strong>getArgumentTypes</strong> 和 <strong>getReturnType</strong> 方法可用于获取与一个方法的参数类型和返回类型相对应的 <strong>Type</strong> 对象。例如，<code>Type.getArgumentTypes(&quot;(I)V&quot;)</code>返回一个仅有一个元素 <strong>Type.INT_TYPE</strong> 的数组。与此类似，调用 <code>Type.getReturnType(&quot;(I)V&quot;)</code> 将返回 <strong>Type.VOID_TYPE</strong> 对象。</p><h2 id="_2-3-2-traceclassvisitor" tabindex="-1"><a class="header-anchor" href="#_2-3-2-traceclassvisitor" aria-hidden="true">#</a> 2.3.2 TraceClassVisitor</h2><p>要确认所生成或转换后的类符合你的预期，<strong>ClassWriter</strong> 返回的字母数组并没有什么真正的用处，因为它对人类来说是不可读的。如果有文本表示形式，那使用起来就容易多了。这正是 <strong>TraceClassVisitor</strong> 类提供的东西。从名字可以看出，这个类扩展了 <strong>ClassVisitor</strong> 类， 并生成所访问类的文本表示。因此，我们不是用 <strong>ClassWriter</strong> 来生成类，而是使用 <strong>TraceClassVisitor</strong>，以获得关于实际所生成内容的一个可读轨迹。甚至可以同时使用这两者，这样要更好一些。除了其默认行为之外，<strong>TraceClassVisitor</strong> 实际上还可以将对其方法的所有调用委托给另一个访问器，比如 <strong>ClassWriter</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TraceClassVisitor</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceClassVisitor</span><span class="token punctuation">(</span>cw<span class="token punctuation">,</span> printWriter<span class="token punctuation">)</span><span class="token punctuation">;</span> 
cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
cv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一代码创建了一个 <strong>TraceClassVisitor</strong>，将它自己接收到的所有调用都委托给 <strong>cw</strong>，然后将这些调用的一份文本表示打印到 <strong>printWriter</strong>。例如，如果在 2.2.3 节的例子中使用 <strong>TraceClassVisitor</strong>，将会得出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 类版本号 49.0 (49)</span>
<span class="token comment">// 访问标志 1537</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">interface</span> pkg<span class="token operator">/</span><span class="token class-name">Comparable</span> <span class="token keyword">implements</span> pkg<span class="token operator">/</span><span class="token class-name">Mesurable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 访问标志 25</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">I</span> <span class="token constant">LESS</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    
    <span class="token comment">//访问标志 25</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">I</span> <span class="token constant">EQUAL</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">//访问标志 25</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">I</span> <span class="token constant">GREATER</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token comment">//访问标志 1025</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">I</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，可以在生成链或转换链的任意位置使用 <strong>TraceClassVisitor</strong>，以查看在链中这一点发生了什么，并非一定要恰好在 <strong>ClassWriter</strong> 之前使用。还要注意，有了这个适配器生成的类的文本表示形式，可能很轻松地用 <code>String.equals()</code> 来对比两个类。</p><h2 id="_2-3-3-checkclassadapter" tabindex="-1"><a class="header-anchor" href="#_2-3-3-checkclassadapter" aria-hidden="true">#</a> 2.3.3 CheckClassAdapter</h2><p><strong>ClassWriter</strong> 类并不会核实对其方法的调用顺序是否恰当，以及参数是否有效。因此，有可能会生成一些被 <strong>Java</strong> 虚拟机验证器拒绝的无效类。为了尽可能提前检测出部分此类错误，可以使用 <strong>CheckClassAdapter</strong> 类。和 <strong>TraceClassVisitor</strong> 类似，这个类也扩展了 <strong>ClassVisitor</strong> 类，并将对其方法的所有调用都委托到另一个 <strong>ClassVisitor</strong>，比如一个 <strong>TraceClassVisitor</strong> 或一个 <strong>ClassWriter</strong>。但是，这个类并不会打印所访问类的文本表示， 而是验证其对方法的调用顺序是否适当，参数是否有效，然后才会委托给下一个访问器。当发生错误时，会抛出 <strong>IllegalStateException</strong> 或 <strong>IllegalArgumentException</strong>。</p><p>为核对一个类，打印这个类的文本表示形式，最终创建一个字节数组表示形式，应当使用类似于如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TraceClassVisitor</span> tcv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceClassVisitor</span><span class="token punctuation">(</span>cw<span class="token punctuation">,</span> printWriter<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">CheckClassAdapter</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckClassAdapter</span><span class="token punctuation">(</span>tcv<span class="token punctuation">)</span><span class="token punctuation">;</span> cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
cv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果以不同顺序将这些类访问器链在一起，那它们执行的操作也将以不同顺序完成。例如，利用以下代码，这些核对工作将在轨迹之后进行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CheckClassAdapter</span> cca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckClassAdapter</span><span class="token punctuation">(</span>cw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TraceClassVisitor</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceClassVisitor</span><span class="token punctuation">(</span>cca<span class="token punctuation">,</span> printWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和使用 <strong>TraceClassVisitor</strong> 时一样，也可以在一个生成链或转换链的任意位置使用 <strong>CheckClassAdapter</strong>，以查看该链中这一点的类，而不一定只是恰好在 <strong>ClassWriter</strong> 之前使用。</p><h2 id="_2-3-4-asmifier" tabindex="-1"><a class="header-anchor" href="#_2-3-4-asmifier" aria-hidden="true">#</a> 2.3.4 ASMifier</h2><p>这个类为 <strong>TraceClassVisitor</strong> 工具提供了一种替代后端（该工具在默认情况下使用 <strong>Textifier</strong> 后端，生成如上所示类型的输出）。这个后端使 <strong>TraceClassVisitor</strong> 类的每个方 法都会打印用于调用它的 <strong>Java</strong> 代码。例如，调用 <code>visitEnd()</code> 方法将打印 <code>cv.visitEnd();</code>。其结果是，当一个具有 <strong>ASMifier</strong> 后端的 <strong>TraceClassVisitor</strong> 访问器访问一个类时，它会打印用 <strong>ASM</strong> 生成这个类的源代码。如果用这个访问器来访问一个已经存在的类，那这一点是很有用的。例如，如果你不知道如何用 <strong>ASM</strong> 生成某个已编译类，可以编写相应的源代码，用 <strong>javac</strong> 编译它，并用 <strong>ASMifier</strong> 来访问这个编译后的类。将会得到生成这个已编译类的 <strong>ASM</strong> 代码！ <strong>ASMifier</strong> 类也可以在命令行中使用。例如，使用以下命令；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span>classpath asm<span class="token punctuation">.</span>jar<span class="token operator">:</span>asm<span class="token operator">-</span>util<span class="token punctuation">.</span>jar \\ <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ASMifier</span> \\ <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runnable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将会生成一些代码，经过缩进后，这些代码就是如下模样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">asm<span class="token punctuation">.</span>java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableDump</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FieldVisitor</span> fv<span class="token punctuation">;</span>
        <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">;</span>
        <span class="token class-name">AnnotationVisitor</span> av0<span class="token punctuation">;</span>
        cw<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token constant">V1_5</span><span class="token punctuation">,</span> <span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_ABSTRACT</span> <span class="token operator">+</span> <span class="token constant">ACC_INTERFACE</span><span class="token punctuation">,</span>
                <span class="token string">&quot;java/lang/Runnable&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span>
            mv <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_ABSTRACT</span><span class="token punctuation">,</span> <span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cw<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function c(l,i){return n(),a("div",null,o)}const u=s(e,[["render",c],["__file","2.3gongju.html.vue"]]);export{u as default};
