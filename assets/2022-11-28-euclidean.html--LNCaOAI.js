import{_ as o,r as p,o as i,c,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const l={},r=n("h1",{id:"《程序员数学-欧几里德算法》——-如何编码程序计算最大公约数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-欧几里德算法》——-如何编码程序计算最大公约数","aria-hidden":"true"},"#"),s(" 《程序员数学：欧几里德算法》—— 如何编码程序计算最大公约数")],-1),u=n("br",null,null,-1),d={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),h={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),v=n("h2",{id:"一、前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言","aria-hidden":"true"},"#"),s(" 一、前言")],-1),_=n("p",null,"嘿，小傅哥怎么突然讲到最大公约数了？",-1),b={href:"https://bugstack.cn/md/algorithm/logic/math/2022-11-20-primality.html",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"放心，你所有写的代码，都是对数学逻辑的具体实现，无非是难易不同罢了。所以如果你真的想学好编程思维而不只是CRUD，那就要把数据结构、算法逻辑等根基打牢。",-1),f=n("h2",{id:"二、短除法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、短除法","aria-hidden":"true"},"#"),s(" 二、短除法")],-1),w=n("p",null,"既然都说到这了，那你还记得怎么计算最大公约数吗，死鬼？",-1),y=n("div",{align:"center"},[n("img",{src:"https://bugstack.cn/images/article/algorithm/logic/euclidean-01.png?raw=true",width:"300px"})],-1),x=n("p",null,"以上这种方式就是我们在上学阶段学习的，这种计算方式叫做短除法。",-1),E=n("strong",null,"短除法",-1),j={href:"https://zh.wikipedia.org/wiki/%E7%9F%AD%E9%99%A4%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"三、欧几里德算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、欧几里德算法","aria-hidden":"true"},"#"),s(" 三、欧几里德算法")],-1),D=n("p",null,"短除法能解决计算最大公约数的问题，但放到程序编写中总是很别扭，总不能一个个数字去试算，这就显得很闹挺。其实除了短除法还有一种是计算公约数的办法，叫做欧几里德算法。",-1),A=n("strong",null,"欧几里德算法",-1),Y={href:"https://zh.wikipedia.org/wiki/%E7%9F%AD%E9%99%A4%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},B=t('<p>GCD，代表了两个数字的最大公约数，GCD(X,Y) = Z，那么就表示 X 和 Y 的最大公约数是 Z。由欧几里德算法给出 GCD(X,Y) = GCD(Y,XmodY) —— mod 表示求模计算余数。</p><p>其实简单来说就是，X和Y的公约数是Z，那么Y和Z的公约数也是Z。24和18的最大公约数是6，那么18和6的公约数也是6。嘿，就这么一个事。但就因为有了这一样一条推论，让编程代码变得优雅舒服，只需要不断地将X、Y两数作差，就能计算最大公约数。</p><p>😂 这让小傅哥想起，多年前上学时候，我也给出过一条推论；”任意一组所能构成等差数列的三个数字，所能组合出来的一个三位数，都能被3整除。“ 例如：等差数列 <code>16</code>、<code>31</code>、<code>46</code> 组合成三位数 <code>463116</code> 或者 <code>461631</code> 都能被3整除。</p><h2 id="四、辗转相除法代码实现" tabindex="-1"><a class="header-anchor" href="#四、辗转相除法代码实现" aria-hidden="true">#</a> 四、辗转相除法代码实现</h2>',4),z=n("strong",null,"欧几里德算法 = 辗转相除法法",-1),G={href:"https://en.wikipedia.org/wiki/Euclidean_algorithm",target:"_blank",rel:"noopener noreferrer"},X=t(`<p>在辗转相除法的实现中，计算最大公约数的方式，就是使用一个数字减去另外一个数字，直到两个数字相同或者有其中一个数字为0，那么最后不为零的那个数字就是两数的最大公约数。</p><p>小傅哥在这里提供了2种计算方式，一种是循环另外一种是递归。—— 方便很多看不懂递归的小伙伴可以用另外的方式学习。</p><h3 id="_1-循环实现" tabindex="-1"><a class="header-anchor" href="#_1-循环实现" aria-hidden="true">#</a> 1. 循环实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">gcd01</span><span class="token punctuation">(</span><span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m <span class="token operator">=</span> m <span class="token operator">-</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            n <span class="token operator">=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> n <span class="token operator">:</span> m<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两数循环处理中，条件为 <code>m != 0 &amp;&amp; n != 0 &amp;&amp; m != n</code> 直至循环结束。</li></ul><h3 id="_2-递归实现" tabindex="-1"><a class="header-anchor" href="#_2-递归实现" aria-hidden="true">#</a> 2. 递归实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">gcd02</span><span class="token punctuation">(</span><span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> k <span class="token operator">=</span> m<span class="token punctuation">;</span>
        m <span class="token operator">=</span> n<span class="token punctuation">;</span>
        n <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> temp <span class="token operator">=</span> m <span class="token operator">%</span> n<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">gcd02</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算方式逻辑和条件是一样的，只不过这个是使用了递归调用的方式进行处理。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_euclidean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Euclidean</span> euclidean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Euclidean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>euclidean<span class="token punctuation">.</span><span class="token function">gcd01</span><span class="token punctuation">(</span><span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>euclidean<span class="token punctuation">.</span><span class="token function">gcd02</span><span class="token punctuation">(</span><span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">4</span>
<span class="token number">4</span>


<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算 124 和 20 的最大公约数，两个计算方式结果都是 4 。好的，到这测试通过。</li><li>这并不是一个很难的知识点，但当你做一些技术分享、答辩述职等时候，能这样用技术语言而不是大白话的讲述出来后，其实高度就有了。兄弟！👬🏻</li></ul><h2 id="五、常见面试题" tabindex="-1"><a class="header-anchor" href="#五、常见面试题" aria-hidden="true">#</a> 五、常见面试题</h2><ul><li>最大公约数的使用用途？</li><li>如何使用代码实现最大公约数计算？</li><li>你是否了解欧几里德算法？</li><li>关于数论你还记得多少？</li><li>RSA 加密算法为什么需要用到公约数计算？</li></ul><hr>`,16),S={href:"https://en.wikipedia.org/wiki/Euclidean_algorithm",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://en.wikipedia.org/wiki/Linear_combination",target:"_blank",rel:"noopener noreferrer"},L={href:"https://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity",target:"_blank",rel:"noopener noreferrer"};function N(V,R){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[s("作者：小傅哥 "),u,s("博客："),n("a",d,[s("https://bugstack.cn"),e(a)]),k,s("源码："),n("a",h,[s("https://github.com/fuzhengwei/java-algorithms"),e(a)])]),m,v,_,n("p",null,[s("这么想你肯定是没有好好阅读前面章节中小傅哥讲到的"),n("a",b,[s("RSA算法"),e(a)]),s("，对于与欧拉结果计算的互为质数的公钥e，其实就需要使用到辗转相除法来计算出最大公约数。")]),g,f,w,y,x,n("p",null,[E,s("：是算术中除法的算法，将除法转换成一连串的运算。短除法是由长除法简化而来，当中会用到心算，因此除数较小的除法比较适用短除法。对大部分的人而言，若除以12或12以下的数，可以用记忆中乘法表的内容，用心算来进行短除法。也有些人可以处理除数更大的短除法。—— "),n("a",j,[s("来自维基百科"),e(a)])]),C,D,n("p",null,[A,s("：是计算两个整数（数字）的最大公约数【GCD(Greatest Common Divisor)】的有效方法，即能将它们整除而无余数的最大数。它以古希腊数学家 欧几里得的名字命名，欧几里德在他的几何原本（约公元前 300 年）中首次描述了它。它是算法的示例，是根据明确定义的规则执行计算的分步过程，并且是常用的最古老的算法之一。它可以用来减少分数到他们的最简单的形式，并且是许多其他数论和密码计算的一部分。—— "),n("a",Y,[s("来自维基百科"),e(a)])]),B,n("p",null,[z,s("："),n("a",G,[s("https://en.wikipedia.org/wiki/Euclidean_algorithm"),e(a)])]),X,n("ul",null,[n("li",null,[s("欧几里德算法："),n("a",S,[s("https://en.wikipedia.org/wiki/Euclidean_algorithm"),e(a)])]),n("li",null,[s("线性组合："),n("a",Z,[s("https://en.wikipedia.org/wiki/Linear_combination"),e(a)])]),n("li",null,[s("贝祖定理："),n("a",L,[s("https://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity"),e(a)])])])])}const I=o(l,[["render",N],["__file","2022-11-28-euclidean.html.vue"]]);export{I as default};
