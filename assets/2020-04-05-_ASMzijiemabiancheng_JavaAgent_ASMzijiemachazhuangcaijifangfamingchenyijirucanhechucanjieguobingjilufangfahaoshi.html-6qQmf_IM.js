import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"asm字节码编程-javaagent-asm字节码插桩采集方法名称以及入参和出参结果并记录方法耗时",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#asm字节码编程-javaagent-asm字节码插桩采集方法名称以及入参和出参结果并记录方法耗时","aria-hidden":"true"},"#"),s(" ASM字节码编程 | JavaAgent+ASM字节码插桩采集方法名称以及入参和出参结果并记录方法耗时")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=p(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>在我们实际的业务开发到上线的过程中，中间都会经过测试。那么怎么来保证测试质量呢？比如；提交了多少代码、提交了多少方法、有单元测试吗、影响了那些流程链路、有没有夹带上线。</p><p>大部分时候这些问题的汇总都是人为的方式进行提供，以依赖相信研发为主。剩下的就需要依赖有经验的测试进行白盒验证。所以即使是这样测试也会在上线后发生很多未知的问题，毕竟流程太长，影响面太广。很难用一个人去照顾到所有流程。</p><p><strong>所以</strong>，我很希望使用技术手段来解决这一问题，通过服务质量监控来在研发提测后，自动报告相关数据，例如；研发代码涉及流程链路展示、每个链路测试次数、通过次数、失败次数、当时的出入参信息以及对应的代码块在当前提测分支修改记录等各项信息。最终测试在执行验证时候，分配验证渠道扫描到所有分支节点，可以清晰的看到全链路的影响。那么，这样的测试才是可以保证系统的整体质量的。</p><p>好！接下来到后续一段时间，我会不断的去完善和开发这些功能。也欢迎你的加入！</p><h2 id="二、技术目标" tabindex="-1"><a class="header-anchor" href="#二、技术目标" aria-hidden="true">#</a> 二、技术目标</h2><p><strong><code>技术行为</code>都是为目标服务的，也就是实现务<code>产品功能</code>。</strong></p><p>而我们这个文章的目标是需要使用固定的技术栈 <code>JavaAgent</code> + <code>ASM</code>，来抓取方法执行时候的信息，包括：类名称、方法名称、入参信息和入参值、出参信息和出参值以及当前方法的耗时。</p><p><strong>JavaAgent</strong>，是一种探针技术可以通过 <code>premain</code> 方法，在类加载的过程中给指定的方法进行字节码增强。其实你的每一个类最终都是字节码指令的执行，而这种增强后的方法就可以输出我们想要的信息。这就相当于你硬编码时候输出了一些方法的耗时，日志等信息。</p><p><strong>ASM</strong>，是一个 Java 字节码操控框架。它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。说白了asm是直接通过字节码来修改class文件。另外除了 asm 可以操作字节码，还有javassist和Byte-code等，他们比 asm 要简单，但是执行效率还是 asm 高。因为 asm 是直接使用指令来控制字节码。</p><h2 id="三、实现方案" tabindex="-1"><a class="header-anchor" href="#三、实现方案" aria-hidden="true">#</a> 三、实现方案</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-asm-02-1.png" alt="字节码增强实现方案"></p><p>按照图中我们使用 <code>javaAgent</code> 的 <code>primain</code> 方法，使用 <code>asm</code> 进行字节码增强，以便于输出我们的监控信息。最终在我们把字节码增强后，程序所执行的就是我们的新的方法字节码，从而也就可以获取到我们需要的信息。那么，接下来我们开始一步步上线这些功能。</p><p><strong>关于实现方案中的所有源码，可以通过关注公众号：<code>bugstack虫洞栈</code>，回复源码下载进行获取</strong></p><h3 id="_1-定义测试方法" tabindex="-1"><a class="header-anchor" href="#_1-定义测试方法" aria-hidden="true">#</a> 1. 定义测试方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApiTest</span> apiTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> res01 <span class="token operator">=</span> apiTest<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> res01 <span class="token operator">+</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> uId<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;你好，bugstack虫洞栈 | 精神小伙！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们定义了一个查询用户信息的测试方法，后续不断将这个方法进行字节码增强。</li></ul><h3 id="_2-监控类入口" tabindex="-1"><a class="header-anchor" href="#_2-监控类入口" aria-hidden="true">#</a> 2. 监控类入口</h3><blockquote><p>PreMain.java &amp; 入口方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreMain</span> <span class="token punctuation">{</span>

    <span class="token comment">//JVM 首先尝试在代理类上调用以下方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProfilingTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>MANIFEST.MF &amp; 配置</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span>
<span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>sqm<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span>PreMain</span>
<span class="token class-name">Can</span><span class="token operator">-</span><span class="token class-name">Redefine</span><span class="token operator">-</span><span class="token class-name">Classes</span><span class="token operator">:</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上是固定的基础模板代码，所有的 <code>JavaAgent</code> 程序都需要从这里开始。</li></ul><h3 id="_3-字节码方法处理" tabindex="-1"><a class="header-anchor" href="#_3-字节码方法处理" aria-hidden="true">#</a> 3. 字节码方法处理</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfilingTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> classBeingRedefined<span class="token punctuation">,</span> <span class="token class-name">ProtectionDomain</span> protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalClassFormatException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

        	<span class="token comment">// 排除一些不需要处理的方法</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ProfilingFilter</span><span class="token punctuation">.</span><span class="token function">isNotNeedInject</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token function">getBytes</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> className<span class="token punctuation">,</span> classfileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),v=p(`<p>这里主要通过传入进行的类加载器、类名、字节码等，负责字节码的增强操作。而这里会使用 <code>ASM</code> 方式进行处理，如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>classfileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>cr<span class="token punctuation">,</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">.</span><span class="token constant">COMPUTE_MAXS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassVisitor</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProfilingClassAdapter</span><span class="token punctuation">(</span>cw<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">,</span> <span class="token class-name">ClassReader</span><span class="token punctuation">.</span><span class="token constant">EXPAND_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m=n("code",null,"ASM",-1),b={href:"http://asm.itstack.org",target:"_blank",rel:"noopener noreferrer"},g=p(`<h3 id="_4-字节码方法解析" tabindex="-1"><a class="header-anchor" href="#_4-字节码方法解析" aria-hidden="true">#</a> 4. 字节码方法解析</h3><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-asm-02-2.png" alt="字节码方法解析"></p><ul><li>当程序启动加载的时候，每个类的每一个方法都会被监控到。类的名称、方法的名称、方法入参出参的描述等，都可以在这里获取。</li><li>为了可以在后续监控处理不至于每一次都去传参（方法信息）浪费消耗性能，一般这里都会给每个方法生产一个全局防重的 <code>id</code> ，通过这个 <code>id</code> 就可以查询到对应的方法。</li><li>另外从这里可以看到的方法的入参和出参被描述成一段指定的码，<code>(II)Ljava/lang/String;</code> ，为了我们后续对参数进行解析，那么需要将这段字符串进行拆解。</li></ul><h4 id="_4-1-解析方法入参和出参" tabindex="-1"><a class="header-anchor" href="#_4-1-解析方法入参和出参" aria-hidden="true">#</a> 4.1 解析方法入参和出参</h4><p>在 <code>asm</code> 文档中说明过关于字节码结构和方法的信息，<code>I；int、Ljava/lang/String；String</code>，所以我们可以分析出这个方法的是两个 <code>int</code> 类型的入参和一个 <code>String</code> 类型的出参。也就是；<code>String queryUserInfo(int uId, int age)</code></p><p>那么这个方法的入参除了这么简单的，还会很复杂的，比如：<code>(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;IJ[I[[Ljava/lang/Object;Lorg/itstack/test/Req;)Ljava/lang/String;</code> 对于这样的字符串内容需要使用到正则表达式进行解析。</p><blockquote><p>正则解析方法描述</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token string">&quot;(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;IJ[I[[Ljava/lang/Object;Lorg/itstack/test/Req;)Ljava/lang/String;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(L.*?;|\\\\[{0,2}L.*?;|[ZCBSIFJD]|\\\\[{0,2}[ZCBSIFJD]{1})&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> desc<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> block <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>
<span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token class-name">I</span>
<span class="token class-name">J</span>
<span class="token punctuation">[</span><span class="token class-name">I</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>
<span class="token class-name">Lorg</span><span class="token operator">/</span>itstack<span class="token operator">/</span>test<span class="token operator">/</span><span class="token class-name">Req</span><span class="token punctuation">;</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到我们将所有的参数类型已经解析出来，因为只有通过这样的解析我们才能去处理方法中入参。这主要是8个基本类型需要进行类型转换为对象，填充到数组中，方便我们输出结果。</li></ul><h4 id="_4-2-提取类和方法生产标识id" tabindex="-1"><a class="header-anchor" href="#_4-2-提取类和方法生产标识id" aria-hidden="true">#</a> 4.2 提取类和方法生产标识ID</h4><p>接下来我们将解析的方法信息包括入参、出参结果生产方法的标识ID，这个ID是一个全局唯一的，每一个方法都有一个固定的标识。如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>methodId <span class="token operator">=</span> <span class="token class-name">ProfilingAspect</span><span class="token punctuation">.</span><span class="token function">generateMethodId</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodTag</span><span class="token punctuation">(</span>fullClassName<span class="token punctuation">,</span> simpleClassName<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> parameterTypeList<span class="token punctuation">,</span> desc<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">generateMethodId</span><span class="token punctuation">(</span><span class="token class-name">MethodTag</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> methodId <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodId <span class="token operator">&gt;</span> <span class="token constant">MAX_NUM</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    methodTagArr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>methodId<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> methodId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这是一个原子性用户自增的ID，<code>AtomicInteger</code>，同时也提供了一个对应的集合；<code>AtomicReferenceArray&lt;MethodTag&gt;</code></li><li>当我们每添加一个方法就会使用这个工具生产一个对应的ID，同时存放到集合中，并返回。这个生成的过程是一次性的，所以也不会影响执行时候的耗时。</li></ul><h3 id="_5-字节码增强「方法进入」" tabindex="-1"><a class="header-anchor" href="#_5-字节码增强「方法进入」" aria-hidden="true">#</a> 5. 字节码增强「方法进入」</h3><p>在 <code>ProfilingMethodVisitor extends AdviceAdapter</code> 中，可以重写方法 <code>onMethodEnter</code> 。也就是当方法进入时候设置开始时间和收集入参到数组中。而收集入参的过程相对会复杂一些，需要使用字节码指令创建数据，之后把每一个入参在使用字节码加载到数组中。这个过程有点像我们写代码，定义数组设置参数。</p><h4 id="_5-1-在方法里设置开始时间" tabindex="-1"><a class="header-anchor" href="#_5-1-在方法里设置开始时间" aria-hidden="true">#</a> 5.1 在方法里设置开始时间</h4><p><strong>这段代码我们需要使用字节码指令插桩到方法的开始处</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> var3 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>字节码插桩处理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nanoTime&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()J&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
startTimeIdentifier <span class="token operator">=</span> <span class="token function">newLocal</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">LONG_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">LSTORE</span><span class="token punctuation">,</span> startTimeIdentifier<span class="token punctuation">)</span><span class="token punctuation">;</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">字节码</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">INVOKESTATIC</td><td style="text-align:left;">调用静态方法</td></tr><tr><td style="text-align:left;">LSTORE</td><td style="text-align:left;">将栈顶long类型值保存到局部变量indexbyte中</td></tr></tbody></table><h4 id="_5-2-初始化入参装填数组" tabindex="-1"><a class="header-anchor" href="#_5-2-初始化入参装填数组" aria-hidden="true">#</a> 5.2 初始化入参装填数组</h4><p><strong>使用字节码的方式去初始化一个参数数量的数组</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过字节码的方式进行创建数组</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>parameterCount <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">BIPUSH</span><span class="token punctuation">,</span> parameterCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化数组长度</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>parameterCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ICONST_1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ICONST_2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ICONST_3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ICONST_0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
mv<span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span><span class="token constant">ANEWARRAY</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token function">getDescriptor</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">字节码</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">BIPUSH</td><td style="text-align:left;">valuebyte值带符号扩展成int值入栈</td></tr><tr><td style="text-align:left;">ANEWARRAY</td><td style="text-align:left;">创建引用类型的数组</td></tr></tbody></table><p><strong>这里有一个数组大小的判断</strong>，如果小于4会使用 <code>ICONST</code> 初始化长度。</p><h4 id="_5-3-给数组赋值" tabindex="-1"><a class="header-anchor" href="#_5-3-给数组赋值" aria-hidden="true">#</a> 5.3 给数组赋值</h4><p><strong>给数组赋值相当于如下效果，只不过需要经过一些字节码的方式进行处理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过字节码的方式进行初始化</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 给数组赋参数值</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">DUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">BIPUSH</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> type <span class="token operator">=</span> parameterTypeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;Z&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token operator">++</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Boolean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Z)Ljava/lang/Boolean;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token operator">++</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Character&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(C)Ljava/lang/Character;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token operator">++</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Byte&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(B)Ljava/lang/Byte;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token operator">++</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Short&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(S)Ljava/lang/Short;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token operator">++</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Integer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(I)Ljava/lang/Integer;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">FLOAD</span><span class="token punctuation">,</span> <span class="token operator">++</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Float&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(F)Ljava/lang/Float;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;J&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">LLOAD</span><span class="token punctuation">,</span> <span class="token operator">++</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Long&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(J)Ljava/lang/Long;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    cursor <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">DLOAD</span><span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(D)Ljava/lang/Double;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	    <span class="token operator">++</span>cursor<span class="token punctuation">;</span>
	    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取对应的参数</span>
	<span class="token punctuation">}</span>
	mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">AASTORE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> parameterIdentifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>这里在赋值的过程中，包括了对基本类型的转换，否则是不能放入到的 Object 数组中的。因为它们 <code>int</code> <code>long</code> ... 都不是对象类型</em></p><table><thead><tr><th style="text-align:left;">字节码</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">ILOAD</td><td style="text-align:left;">从局部变量indexbyte中装载int类型值入栈</td></tr><tr><td style="text-align:left;">INVOKESTATIC</td><td style="text-align:left;">调用静态方法</td></tr><tr><td style="text-align:left;">AASTORE</td><td style="text-align:left;">将栈顶引用类型值保存到指定引用类型数组的指定项</td></tr></tbody></table><p><strong>到这为止</strong>，我们就已经将参数初始化到数组中了，后面就可以将参数通过方法传递出去。</p><h3 id="_6-字节码增强「方法退出」" tabindex="-1"><a class="header-anchor" href="#_6-字节码增强「方法退出」" aria-hidden="true">#</a> 6. 字节码增强「方法退出」</h3><p>在方法结束后这里还提供给我们一个退出的方法 <code>onMethodExit</code> ，我们可以通过这个方法的重写，使用字节码获取出参并一起输出到外部。</p><h4 id="_6-1-获取-return-出参值" tabindex="-1"><a class="header-anchor" href="#_6-1-获取-return-出参值" aria-hidden="true">#</a> 6.1 获取 <code>return</code> 出参值</h4><p><strong>通过字节码的方式，实现下面出参赋值给一个属性，并最终把值给 <code>return</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> var7 <span class="token operator">=</span> <span class="token string">&quot;你好，bugstack虫洞栈 | 精神小伙！&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">ProfilingAspect</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>var3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> var6<span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> uId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过字节码方式进行处理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">RETURN</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">ARETURN</span><span class="token operator">:</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> <span class="token operator">++</span>localCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
        mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> localCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 6</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-最终将方法信息输出给外部" tabindex="-1"><a class="header-anchor" href="#_6-2-最终将方法信息输出给外部" aria-hidden="true">#</a> 6.2 最终将方法信息输出给外部</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">LLOAD</span><span class="token punctuation">,</span> startTimeIdentifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span>methodId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>parameterTypeList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token function">getInternalName</span><span class="token punctuation">(</span><span class="token class-name">ProfilingAspect</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;point&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(JI)V&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> parameterIdentifier<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>
    mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> localCount<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 6</span>
    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token function">getInternalName</span><span class="token punctuation">(</span><span class="token class-name">ProfilingAspect</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;point&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(JI[Ljava/lang/Object;Ljava/lang/Object;)V&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>LLOAD</code> ，从局部变量indexbyte中装载long类型值入栈。这里加载的就是方法的启动时间。</p></li><li><p><code>LDC</code> ， 常量池中的常量值（int, float, string reference, object reference）入栈。这里是加载方法ID；<code>methodId</code> 。</p></li><li><p><code>ALOAD</code> ，parameterIdentifier ，从局部变量indexbyte中装载引用类型值入栈。此时加载参数数组信息。</p></li><li><p><code>ALOAD</code> ，localCount ，加载的是返回值信息，也就是 <code>return</code> 的结果。</p></li><li><p><code>INVOKESTATIC</code> ，最后就是调用静态方法输出结果信息，这个静态方法是我们已经预设好的，如下；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> startNanos<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> methodId<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requests<span class="token punctuation">,</span> <span class="token class-name">Object</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MethodTag</span> method <span class="token operator">=</span> methodTagArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>methodId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - Begin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;类名：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getFullClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入参类型：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;入数[值]：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参类型：&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出参[值]：&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;耗时：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startNanos<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token string">&quot;(s)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监控 - End\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="四、测试验证" tabindex="-1"><a class="header-anchor" href="#四、测试验证" aria-hidden="true">#</a> 四、测试验证</h2><h3 id="_1-需要测试的方法" tabindex="-1"><a class="header-anchor" href="#_1-需要测试的方法" aria-hidden="true">#</a> 1. 需要测试的方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApiTest</span> apiTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> res01 <span class="token operator">=</span> apiTest<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> res01 <span class="token operator">+</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> uId<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;你好，bugstack虫洞栈 | 精神小伙！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置javaagent" tabindex="-1"><a class="header-anchor" href="#_2-配置javaagent" aria-hidden="true">#</a> 2. 配置javaagent</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>xiaofuge<span class="token operator">/</span>itstack<span class="token operator">/</span>git<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token constant">SQM</span><span class="token operator">/</span>target<span class="token operator">/</span><span class="token constant">SQM</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token operator">-</span><span class="token constant">SNAPSHOT</span><span class="token punctuation">.</span>jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>IDEA 运行时候配置到 <code>VM options</code> 中，jar包地址按照自己的路径进行配置。</li></ul><h3 id="_3-被字节码增强后的方法" tabindex="-1"><a class="header-anchor" href="#_3-被字节码增强后的方法" aria-hidden="true">#</a> 3. 被字节码增强后的方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">,</span> <span class="token keyword">int</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> var3 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> var7 <span class="token operator">=</span> <span class="token string">&quot;你好，bugstack虫洞栈 | 精神小伙！&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">ProfilingAspect</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>var3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> var6<span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> var7<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过编译后的方法可以看到，方法的执行信息全部通过静态方法输出到外部。这样就可以很方便的监控一个方法的执行信息。</li></ul><h3 id="_4-输出结果" tabindex="-1"><a class="header-anchor" href="#_4-输出结果" aria-hidden="true">#</a> 4. 输出结果</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ASM</span>类输出路径：<span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>xiaofuge<span class="token operator">/</span>itstack<span class="token operator">/</span>git<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token constant">SQM</span><span class="token operator">/</span>target<span class="token operator">/</span>test<span class="token operator">-</span>classes<span class="token operator">/</span>org<span class="token operator">/</span>itstack<span class="token operator">/</span>test<span class="token operator">/</span><span class="token class-name">ApiTest</span>$<span class="token number">1</span><span class="token constant">SQM</span><span class="token punctuation">.</span><span class="token keyword">class</span>
监控 <span class="token operator">-</span> <span class="token class-name">Begin</span>
类名：<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span>
方法：queryUserInfo
入参类型：<span class="token punctuation">[</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">]</span>
入数<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span>
出参类型：<span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
出参<span class="token punctuation">[</span>值<span class="token punctuation">]</span>：<span class="token string">&quot;你好，bugstack虫洞栈 | 精神小伙！&quot;</span>
耗时：<span class="token function">95</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
监控 <span class="token operator">-</span> <span class="token class-name">End</span>

测试结果：你好，bugstack虫洞栈 <span class="token operator">|</span> 精神小伙！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2>`,60),h=n("li",null,[s("综上使用了 "),n("code",null,"JavaAgent"),s(" 结合 "),n("code",null,"ASM"),s(" 对监控方法做了字节码增强，可以在方法执行的时候输出我们需要的信息。而这些信息的价值就是可以很好的让我们做一些程序的全链路监控以及工程质量验证。")],-1),f=n("li",null,[s("目前还是处于案例工程阶段，后续会不断突破一些技术难点，并完善服务质量监控工程，"),n("code",null,"SQM"),s("。也欢迎有此爱好的小伙伴加入开源建设。也许这能让你除了平时的 "),n("code",null,"CRUD"),s(" 技术外，扩展一项更加高级的领域。")],-1),y={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"};function q(I,j){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),t(a)])]),d,n("ul",null,[n("li",null,[v,n("ul",null,[n("li",null,[s("关于 "),m,s(" 的使用可以通过文档学习；"),n("a",b,[s("asm.itstack.org"),t(a)])])])])]),g,n("ul",null,[h,f,n("li",null,[s("如果你对字节码插桩感兴趣，并还没有入门，可以通过我的博客；"),n("a",y,[s("bugstack.cn"),t(a)]),s(" 中，架构师专题->调用链路监控，学习。")])])])}const S=e(i,[["render",q],["__file","2020-04-05-_ASMzijiemabiancheng_JavaAgent_ASMzijiemachazhuangcaijifangfamingchenyijirucanhechucanjieguobingjilufangfahaoshi.html.vue"]]);export{S as default};
