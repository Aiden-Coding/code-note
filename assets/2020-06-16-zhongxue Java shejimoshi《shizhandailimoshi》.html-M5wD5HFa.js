import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"重学-java-设计模式-实战代理模式「模拟mybatis-spring中定义dao接口-使用代理类方式操作数据库原理实现场景」",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重学-java-设计模式-实战代理模式「模拟mybatis-spring中定义dao接口-使用代理类方式操作数据库原理实现场景」","aria-hidden":"true"},"#"),s(" 重学 Java 设计模式：实战代理模式「模拟mybatis-spring中定义DAO接口，使用代理类方式操作数据库原理实现场景」")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("iframe",{id:"B-Video",src:"//player.bilibili.com/player.html?aid=383394282&bvid=BV1YZ4y117S7&cid=583161672&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",width:"100%",height:"480"}," ",-1),v=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>难以跨越的瓶颈期，把你拿捏滴死死的！</code></p><p>编程开发学习过程中遇到的瓶颈期，往往是由于看不到前进的方向。这个时候你特别希望能有人告诉你，你还欠缺些什么朝着哪个方向努力。而导致这一问题的主要原因是由于日常的业务开发太过于复制过去，日复一日的重复。没有太多的挑战，也没参与过较大体量的业务场景，除了这些开发场景因素外，还有缺少组内的技术氛围和技术分享，没有人做传播和布道者，也缺少自己对各项技术学习的热情，从而导致一直游荡在瓶颈之下，难以提升。</p><p><code>小公司与大公司，选择哪个？</code></p><p>刨除掉薪资以外你会选择什么，是不有人建议小公司，因为可以接触到各个环境，也有人建议大公司，因为正规体量大可以学习到更多。有些时候你的技术成长缓慢也是因为你的不同选择而导致的，小公司确实要接触各个环境，但往往如果你所做的业务体量不高，那么你会用到的技术栈就会相对较少，同时也会技术栈研究的深度也会较浅。大公司中确实有时候你不需要去关心一个集群的部署和维护、一个中间件的开发、全套服务监控等等，但如果你愿意了解这些技术在内部都是公开的，你会拥有无限的技术营养可以补充。而这最主要的是提升视野和事业。</p><p><code>除了业务中的CRUD开发，有些技术你真的很难接触到！</code></p><p>可能很多小伙伴认为技术开发就是承接下产品需求，写写CRUD，不会的百度一下，就完事了，总觉得别人问的东西像再造火箭一样。但在高体量、高并发的业务场景下，每一次的压测优化，性能提升，都像在研究一道数学题一样，反复的锤炼，压榨性能。不断的深究，找到最合适的设计。除了这些优化提升外，还有那么广阔的技术体系栈，都可能因为你只是注重CRUD而被忽略；字节码编程、领域驱动设计架构、代理模式中间件开发、JVM虚拟机实现原理等等。</p><h2 id="二、开发环境" tabindex="-1"><a class="header-anchor" href="#二、开发环境" aria-hidden="true">#</a> 二、开发环境</h2>',8),b=n("li",null,"JDK 1.8",-1),g=n("li",null,"Idea + Maven",-1),h=n("li",null,"Spring 4.3.24.RELEASE",-1),f=n("strong",null,"公众号",-1),y={href:"https://bugstack.cn/assets/images/qrcode.png",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"bugstack虫洞栈",-1),_=n("code",null,"源码下载",-1),B=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"工程"),n("th",null,"描述")])]),n("tbody",null,[n("tr",null,[n("td",null,"itstack-demo-design-12-00"),n("td",null,"模拟MyBatis开发中间件代理类部分")])])],-1),x=n("h2",{id:"三、代理模式介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、代理模式介绍","aria-hidden":"true"},"#"),s(" 三、代理模式介绍")],-1),D=n("p",null,[n("img",{src:"https://bugstack.cn/assets/images/2020/itstack-demo-design-12-01.png",alt:"代理模式，图片来自 refactoringguru.cn"})],-1),q={href:"https://refactoringguru.cn/design-patterns/proxy",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>代理模式有点像老大和小弟，也有点像分销商。主要解决的是问题是为某些资源的访问、对象的类的易用操作上提供方便使用的代理服务。而这种设计思想的模式经常会出现在我们的系统中，或者你用到过的组件中，它们都提供给你一种非常简单易用的方式控制原本你需要编写很多代码的进行使用的服务类。</p><p>类似这样的场景可以想到；</p><ol><li>你的数据库访问层面经常会提供一个较为基础的应用，以此来减少应用服务扩容时不至于数据库连接数暴增。</li><li>使用过的一些中间件例如；RPC框架，在拿到jar包对接口的描述后，中间件会在服务启动的时候生成对应的代理类，当调用接口的时候，实际是通过代理类发出的socket信息进行通过。</li><li>另外像我们常用的<code>MyBatis</code>，基本是定义接口但是不需要写实现类，就可以对<code>xml</code>或者自定义注解里的<code>sql</code>语句进行增删改查操作。</li></ol><h2 id="四、案例场景模拟" tabindex="-1"><a class="header-anchor" href="#四、案例场景模拟" aria-hidden="true">#</a> 四、案例场景模拟</h2><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-12-02.png" alt="场景模拟；实现mybatis-spring中代理类生成部分"></p><p><strong>在本案例中我们模拟实现mybatis-spring中代理类生成部分</strong></p><p>对于Mybatis的使用中只需要定义接口不需要写实现类就可以完成增删改查操作，有疑问的小伙伴，在本章节中就可以学习到这部分知识。接下来我们会通过实现一个这样的代理类交给spring管理的核心过程，来讲述代理类模式。</p><p>这样的案例场景在实际的业务开发中其实不多，因为这是将这种思想运用在中间件开发上，而很多小伙伴经常是做业务开发，所以对Spring的bean定义以及注册和对代理以及反射调用的知识了解的相对较少。但可以通过本章节作为一个入门学习，逐步了解。</p><h2 id="五、代理类模式实现过程" tabindex="-1"><a class="header-anchor" href="#五、代理类模式实现过程" aria-hidden="true">#</a> 五、代理类模式实现过程</h2><p>接下来会使用代理类模式来模拟实现一个Mybatis中对类的代理过程，也就是只需要定义接口，就可以关联到方法注解中的<code>sql</code>语句完成对数据库的操作。</p><p>这里需要注意一些知识点；</p><ol><li><code>BeanDefinitionRegistryPostProcessor</code>，spring的接口类用于处理对bean的定义注册。</li><li><code>GenericBeanDefinition</code>，定义bean的信息，在mybatis-spring中使用到的是；<code>ScannedGenericBeanDefinition</code> 略有不同。</li><li><code>FactoryBean</code>，用于处理bean工厂的类，这个类非常见。</li></ol><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>itstack<span class="token operator">-</span>demo<span class="token operator">-</span>design<span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">00</span>
└── src
    ├── main
    │   ├── java
    │   │   └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design
    │   │       ├── agent
    │   │       │	├── <span class="token class-name">MapperFactoryBean</span><span class="token punctuation">.</span>java
    │   │       │	├── <span class="token class-name">RegisterBeanFactory</span><span class="token punctuation">.</span>java
    │   │       │	└── <span class="token class-name">Select</span><span class="token punctuation">.</span>java
    │   │       └── <span class="token class-name">IUserDao</span><span class="token punctuation">.</span>java
    │   └── resources	
    │       └── spring<span class="token operator">-</span>config<span class="token punctuation">.</span>xml
    └── test
        └── java
            └── org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代理模式中间件模型结构</strong></p><p><img src="https://bugstack.cn/assets/images/2020/itstack-demo-design-12-03.png" alt="代理模式中间件模型结构"></p><ul><li>此模型中涉及的类并不多，但都是抽离出来的核心处理类。主要的事情就是对类的代理和注册到spring中。</li><li>上图中最上面是关于中间件的实现部分，下面对应的是功能的使用。</li></ul><h3 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2. 代码实现</h3><h4 id="_2-1-自定义注解" tabindex="-1"><a class="header-anchor" href="#_2-1-自定义注解" aria-hidden="true">#</a> 2.1 自定义注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Select</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// sql语句</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们定义了一个模拟mybatis-spring中的自定义注解，用于使用在方法层面。</li></ul><h4 id="_2-2-dao层接口" tabindex="-1"><a class="header-anchor" href="#_2-2-dao层接口" aria-hidden="true">#</a> 2.2 Dao层接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select userName from user where id = #{uId}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里定义一个Dao层接口，并把自定义注解添加上。这与你使用的mybatis组件是一样的。</li><li>2.1和2.2是我们的准备工作，后面开始实现中间件功能部分。</li></ul><h4 id="_2-3-代理类定义" tabindex="-1"><a class="header-anchor" href="#_2-3-代理类定义" aria-hidden="true">#</a> 2.3 代理类定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperFactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MapperFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MapperFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Select</span> select <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;SQL：{}&quot;</span><span class="token punctuation">,</span> select<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;#{uId}&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;,小傅哥,bugstack.cn - 沉淀、分享、成长，让自己和他人都能有所收获！&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>mapperInterface<span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mapperInterface<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果你有阅读过mybatis源码，是可以看到这样的一个类；<code>MapperFactoryBean</code>，这里我们也模拟一个这样的类，在里面实现我们对代理类的定义。</li><li>通过继承<code>FactoryBean</code>，提供bean对象，也就是方法；<code>T getObject()</code>。</li><li>在方法<code>getObject()</code>中提供类的代理以及模拟对sql语句的处理，这里包含了用户调用dao层方法时候的处理逻辑。</li><li>还有最上面我们提供构造函数来透传需要被代理类，<code>Class&lt;T&gt; mapperInterface</code>，在mybatis中也是使用这样的方式进行透传。</li><li>另外<code>getObjectType()</code>提供对象类型反馈，以及<code>isSingleton()</code>返回类是单例的。</li></ul><h4 id="_2-4-将bean定义注册到spring容器" tabindex="-1"><a class="header-anchor" href="#_2-4-将bean定义注册到spring容器" aria-hidden="true">#</a> 2.4 将Bean定义注册到Spring容器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        
        <span class="token class-name">GenericBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token class-name">MapperFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token string">&quot;singleton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> <span class="token string">&quot;userDao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// left intentionally blank</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们将代理的bean交给spring容器管理，也就可以非常方便让我们可以获取到代理的bean。这部分是spring中关于一个bean注册过程的源码。</li><li><code>GenericBeanDefinition</code>，用于定义一个bean的基本信息<code>setBeanClass(MapperFactoryBean.class);</code>，也包括可以透传给构造函数信息<code>addGenericArgumentValue(IUserDao.class);</code></li><li>最后使用 <code>BeanDefinitionReaderUtils.registerBeanDefinition</code>，进行bean的注册，也就是注册到<code>DefaultListableBeanFactory</code>中。</li></ul><h4 id="_2-5-配置文件spring-config" tabindex="-1"><a class="header-anchor" href="#_2-5-配置文件spring-config" aria-hidden="true">#</a> 2.5 配置文件spring-config</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/beans&quot;</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>
       <span class="token keyword">default</span><span class="token operator">-</span>autowire<span class="token operator">=</span><span class="token string">&quot;byName&quot;</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;userDao&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.itstack.demo.design.agent.RegisterBeanFactory&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接下来在配置文件中添加我们的bean配置，在mybatis的使用中一般会配置扫描的dao层包，这样就可以减少这部分的配置。</li></ul><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><h4 id="_3-1-编写测试类" tabindex="-1"><a class="header-anchor" href="#_3-1-编写测试类" aria-hidden="true">#</a> 3.1 编写测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_IUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> res <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token string">&quot;100001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试的过程比较简单，通过加载Bean工厂获取我们的代理类的实例对象，之后调用方法返回结果。</li><li>那么这个过程你可以看到我们是没有对接口先一个实现类的，而是使用代理的方式给接口生成一个实现类，并交给spring管理。</li></ul><h4 id="_3-2-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结果" aria-hidden="true">#</a> 3.2 测试结果</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">57.551</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span>StandardEnvironment</span> <span class="token operator">-</span> <span class="token class-name">Adding</span> <span class="token class-name">PropertySource</span> &#39;systemProperties&#39; <span class="token keyword">with</span> <span class="token namespace">lowest</span> search precedence
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">57.858</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>s<span class="token punctuation">.</span></span>ClassPathXmlApplicationContext</span> <span class="token operator">-</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">locate</span> <span class="token class-name">LifecycleProcessor</span> <span class="token keyword">with</span> <span class="token namespace">name</span> &#39;lifecycleProcessor&#39;<span class="token operator">:</span> using <span class="token keyword">default</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>DefaultLifecycleProcessor</span><span class="token annotation punctuation">@7bc1a03d</span><span class="token punctuation">]</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">57.859</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">.</span>s<span class="token punctuation">.</span></span>DefaultListableBeanFactory</span> <span class="token operator">-</span> <span class="token class-name">Returning</span> cached instance of singleton bean &#39;lifecycleProcessor&#39;
<span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">57.860</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>PropertySourcesPropertyResolver</span> <span class="token operator">-</span> <span class="token class-name">Could</span> not find key &#39;spring<span class="token punctuation">.</span>liveBeansView<span class="token punctuation">.</span>mbeanDomain&#39; in any property source
<span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">57.861</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">.</span>s<span class="token punctuation">.</span></span>DefaultListableBeanFactory</span> <span class="token operator">-</span> <span class="token class-name">Returning</span> cached instance of singleton bean &#39;userDao&#39;
<span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">57.915</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>i<span class="token punctuation">.</span>d<span class="token punctuation">.</span>design<span class="token punctuation">.</span>agent<span class="token punctuation">.</span></span>MapperFactoryBean</span> <span class="token operator">-</span> <span class="token constant">SQL</span>：select userName from user where id <span class="token operator">=</span> <span class="token number">100001</span>
<span class="token number">23</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">57.915</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>itstack<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>design<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>ApiTest</span> <span class="token operator">-</span> 测试结果：<span class="token number">100001</span><span class="token punctuation">,</span>小傅哥<span class="token punctuation">,</span>bugstack<span class="token punctuation">.</span>cn <span class="token operator">-</span> 沉淀、分享、成长，让自己和他人都能有所收获！

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从测试结果可以看到，我们打印了SQL语句，这部分语句是从自定义注解中获取的；<code>select userName from user where id = 100001</code>，我们做了简单的适配。在mybatis框架中会交给<code>SqlSession</code>的实现类进行逻辑处理返回操作数据库数据</li><li>而这里我们的测试结果是一个固定的，如果你愿意更加深入的研究可以尝试与数据库操作层进行关联，让这个框架可以更加完善。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>关于这部分代理模式的讲解我们采用了开发一个关于<code>mybatis-spring</code>中间件中部分核心功能来体现代理模式的强大之处，所以涉及到了一些关于代理类的创建以及spring中bean的注册这些知识点，可能在平常的业务开发中都是很少用到的，但是在中间件开发中确实非常常见的操作。</li><li>代理模式除了开发中间件外还可以是对服务的包装，物联网组件等等，让复杂的各项服务变为轻量级调用、缓存使用。你可以理解为你家里的电灯开关，我们不能操作220v电线的人肉连接，但是可以使用开关，避免触电。</li><li>代理模式的设计方式可以让代码更加整洁、干净易于维护，虽然在这部分开发中额外增加了很多类也包括了自己处理bean的注册等，但是这样的中间件复用性极高也更加智能，可以非常方便的扩展到各个服务应用中。</li></ul>`,42);function S(F,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)])]),d,m,v,n("ol",null,[b,g,h,n("li",null,[s("涉及工程三个，可以通过关注"),f,s("："),n("a",y,[w,e(a)]),s("，回复"),_,s("获取(打开获取的链接，找到序号18)")])]),B,x,D,n("ul",null,[n("li",null,[s("图片来自："),n("a",q,[s("https://refactoringguru.cn/design-patterns/proxy"),e(a)])])]),j])}const C=p(i,[["render",S],["__file","2020-06-16-zhongxue Java shejimoshi《shizhandailimoshi》.html.vue"]]);export{C as default};
