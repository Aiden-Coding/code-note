import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-3RcBQnkC.js";const u={},i=n("h1",{id:"数据结构-2-3树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构-2-3树","aria-hidden":"true"},"#"),s(" 数据结构：2-3树")],-1),k=n("br",null,null,-1),r={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),m=n("h2",{id:"一、前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言","aria-hidden":"true"},"#"),s(" 一、前言")],-1),v=n("p",null,[n("code",null,"不讲红黑树，先讲2-3树里呢？")],-1),b={href:"https://bugstack.cn/md/algorithm/data-structures/2022-09-26-tree-avl.html",target:"_blank",rel:"noopener noreferrer"},h=t('<p>这时候大部分资料会用<strong>2-3树</strong>来讲解<strong>红黑树</strong>，不过又不去实现一个<strong>2-3树</strong>，只是用了一个理论套另外一个理论。虽然能从理解上多一些参考，但始终感觉没有抓手呀。对于理科思维来说，你得给我东西呀。老是整这悬得楞的🥶谁能受了。<strong>所以这里我们先来用Java实现一个2-3树，有了基础再学习红黑树</strong></p><h2 id="二、2-3树数据结构" tabindex="-1"><a class="header-anchor" href="#二、2-3树数据结构" aria-hidden="true">#</a> 二、2-3树数据结构</h2><p>2–3树是一种树型数据结构，由约翰·霍普克洛夫特于1970年发明。它通过在一个节点存放1-2个元素来平衡树高。从而也使2-3树存在2叉节点和3叉节点。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-23-01.png?raw=true" width="400px"></div><p>这里要提到一点，在BST二叉搜索树可能退化成链表的基础上。引出了自平衡二叉树，也就是包括上一章实现的AVL树和Java API HashMap中用到的红黑树，它们都属于BalancedTree，也统称为B树，平衡的意思。</p><p>而本章实现的2-3树也是一种简单的平衡树，其中每个具有子节点（内部节点）的节点要么有两个子节点（2 节点）和一个数据元素，要么有三个子节点（3 节点）和两个数据元素。另外 2-3 树是3阶B 树，2-3-4 树是4阶B树。</p><hr><p>在实现2-3树之前，先通过图稿演示下在2-3树中顺序插入1、2、3、4、5、6、7，七个元素时，2-3树的调衡处理。</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-23-02.png?raw=true" width="600px"></div><ul><li>2-3 树的插入过程与 BST 树类似，会通过树的左右节点大小，找到自己的插入位置。</li><li>一个节点可以右1-3个元素，但当元素个数为3时，则需要调衡。把三个节点的中间节点晋升上来，其余两个节点为子节点。</li><li>如果进行一次调衡后，上一层父节点达到3个元素，则需要2次调衡，来满足2-3树的规则。</li></ul><p><strong>咋样</strong>，是不看过这个图之后对于2-3树的实现已经有感觉了，想动手写写试试了？</p>',11),w={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="三、2-3树结构实现" tabindex="-1"><a class="header-anchor" href="#三、2-3树结构实现" aria-hidden="true">#</a> 三、2-3树结构实现</h2><p>2-3 树的实现并不复杂，但在实现前要思考🤔以下几个问题；</p><ul><li>Node 节点属性信息都包括什么？</li><li>插入值，是否需要创建新的 Node？</li><li>插入后，节点内有3个元素后，怎么迁移元素？</li></ul><h3 id="_1-节点定义" tabindex="-1"><a class="header-anchor" href="#_1-节点定义" aria-hidden="true">#</a> 1. 节点定义</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node_2_3</span> <span class="token punctuation">{</span>

    <span class="token comment">// 元素</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>
    <span class="token comment">// 序号</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token comment">// 孩子</span>
    <span class="token keyword">public</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span>
    <span class="token comment">// 父亲【非必须】</span>
    <span class="token keyword">public</span> <span class="token class-name">Node_2_3</span> parent<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> e<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token operator">--</span>idx<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ... 省略部分代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2-3树的几点元素需要包括；一个数组的元素集合、元素的序号、孩子元素。因为一个节点最多可临时放入3个元素，那么就会最多有4个孩子元素，所以孩子元素也是一个数组并且在构造函数中按照4个元素进行初始化。</li><li>由于本身2-3树插入元素的开始阶段，并不是直接创建一个新的节点，而是在初始化的数组空间中存入元素。所以在节点中提供了一个插入元素的方法 insert 来处理新增元素。</li><li>另外2-3树的节点类，还提供了一个方便查询的方法。包括：获取左边元素、中间元素、右边元素，以及最小值、最大值和判断是否有孩子节点。这些内容可以源码。</li></ul><h3 id="_2-拆分节点" tabindex="-1"><a class="header-anchor" href="#_2-拆分节点" aria-hidden="true">#</a> 2. 拆分节点</h3><p>当一个节点内有3个元素的时候，就要发起拆分东西，拆分的过程分为；</p><ol><li>对3个节点的中间节点，插入到父节点上。</li><li>剩余2个节点创建出新的节点。</li><li>建立父节点和新创建的2个节点间关系。</li></ol><p>整个操作流程如图所示</p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/tree-23-03.png?raw=true" width="480px"></div><h4 id="_1-插入父节点" tabindex="-1"><a class="header-anchor" href="#_1-插入父节点" aria-hidden="true">#</a> 1. 插入父节点</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Node_2_3</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">Node_2_3</span> node<span class="token punctuation">,</span> <span class="token class-name">Node_2_3</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    parent<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getMiddleItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Node_2_3</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newNodes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triangle</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> node<span class="token punctuation">,</span> newNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整个2-3树拆分的过程就是在 split 这个方法里，第一步解决了是否有父节点，没有则创建。</li><li>之后将原节点的中间值插入到父节点中。接下来的操作就是拆分新节点和更换孩子节点建立新连接。</li></ul><h4 id="_2-拆分新节点" tabindex="-1"><a class="header-anchor" href="#_2-拆分新节点" aria-hidden="true">#</a> 2. 拆分新节点</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">triangle</span><span class="token punctuation">(</span><span class="token class-name">Node_2_3</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node_2_3</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    newNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span><span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 左孩子</span>
        newNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        newNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 右孩子</span>
        newNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        newNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newNodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基于传递进来的节点，将节点的左右孩子创建新节点，如果这个孩子节点还有分支节点，则一并更新。</li></ul><h4 id="_3-建立新连接" tabindex="-1"><a class="header-anchor" href="#_3-建立新连接" aria-hidden="true">#</a> 3. 建立新连接</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replaceChild</span><span class="token punctuation">(</span><span class="token class-name">Node_2_3</span> parent<span class="token punctuation">,</span> <span class="token class-name">Node_2_3</span> oldChild<span class="token punctuation">,</span> <span class="token class-name">Node_2_3</span> child01<span class="token punctuation">,</span> <span class="token class-name">Node_2_3</span> child02<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChild <span class="token operator">==</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> child02<span class="token punctuation">;</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> child01<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChild <span class="token operator">==</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> child02<span class="token punctuation">;</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> child01<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> child02<span class="token punctuation">;</span>
        parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> child01<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>建立新连接需要判断这个节点 oldChild 是父节点的左、中、右，之后进行依次的更换。</li><li>如拆分节点的介绍图中，用到的就是 <code>parent.children[1] = child02;parent.children[0] = child01;</code> 两步操作过程。</li></ul><h3 id="_3-新增节点" tabindex="-1"><a class="header-anchor" href="#_3-新增节点" aria-hidden="true">#</a> 3. 新增节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 记录元素</span>
    elementList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 插入元素</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node_2_3</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>number <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Node_2_3</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">,</span> <span class="token class-name">Node_2_3</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token class-name">Node_2_3</span> child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span><span class="token function">getMinItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            child <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            child <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span><span class="token function">getMinItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            child <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&gt;</span> parent<span class="token punctuation">.</span><span class="token function">getMiddleItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            child <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            child <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>number <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新增节点的过程就比较简单了，一种是使用递归找到可以插入的位置，另外一种就是 where 循环。我们再BST、AVL两种数据结构种都是用了 where 循环。</li><li>在2-3树中 insert 方法递归到对应的插入位置后，开始插入元素。当插入元素结束后判断这个节点是否已经达到了3个节点，如果是则进行拆分。<em>拆分就调用了上面的步骤</em></li></ul><h2 id="四、2-3树结构测试" tabindex="-1"><a class="header-anchor" href="#四、2-3树结构测试" aria-hidden="true">#</a> 四、2-3树结构测试</h2><p>为了让读者更好的理解2-3树的结构，小傅哥在程序的控制台打印了插入的过程。<em>网上没有2-3树在线的动画演示，如果读者看到也可以留言给小傅哥</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_insert_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Tree_2_3</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree_2_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>顺序插入10个节点，如果这是一颗BST树，它将会退化成链表。那么我们使用自平衡的2-3树，来看看它的插入效果。</li></ul><p><strong>测试效果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入节点<span class="token punctuation">(</span><span class="token number">1</span>个<span class="token punctuation">)</span>：<span class="token number">1</span>
 
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">2</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>
 
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">3</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>
 
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">4</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>
 
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">5</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span>
 
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">6</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>
 
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">7</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span>
 
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">8</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span>
 
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">9</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span>
 
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

输入节点<span class="token punctuation">(</span><span class="token number">10</span>个<span class="token punctuation">)</span>：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span>
 
         <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
 <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
 <span class="token operator">|</span>       <span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
 \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
         \\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>


<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有了这样的数据结构示意，是不是再来看2-3树就非常清晰了。—— 我说过，理科生 + 技术，不要只抛理论，要看效果的！东西到手了，能拿捏了，再补充理论。</li></ul><h2 id="五、常见面试问题" tabindex="-1"><a class="header-anchor" href="#五、常见面试问题" aria-hidden="true">#</a> 五、常见面试问题</h2><ul><li>2-3树的数据结构描述</li><li>2-3树一个节点最多可以存放几个元素</li><li>2-3树插入节点时间复杂度</li><li>2-3树一个节点有3个元素，如何迁移。<em>需要旋转吗</em></li><li>2-3树，你能手写一下吗？</li></ul>`,32);function f(y,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("作者：小傅哥 "),k,s("博客："),n("a",r,[s("https://bugstack.cn"),p(a)])]),d,m,v,n("p",null,[s("原本是想"),n("a",b,[s("AVL树"),p(a)]),s("讲解了左旋、右旋的操作，有了这样的基础就进入到红黑树的讲解，因为它们都是依靠旋转来调衡树高的。但红黑树的五条限定规则来的那么突然，没有原因，没有道理。")]),h,n("ul",null,[n("li",null,[s("源码地址："),n("a",w,[s("https://github.com/fuzhengwei/java-algorithms"),p(a)])]),n("li",null,[s("本章源码："),n("a",_,[s("https://github.com/fuzhengwei/java-algorithms/tree/main/data-structures/src/main/java/tree"),p(a)])])]),g])}const j=e(u,[["render",f],["__file","2022-10-01-tree-2-3.html.vue"]]);export{j as default};
