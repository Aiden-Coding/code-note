import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《程序员数学-割圆术》——-基于-n-gons-的近似-π-计算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《程序员数学-割圆术》——-基于-n-gons-的近似-π-计算","aria-hidden":"true"},"#"),s(" 《程序员数学：割圆术》—— 基于 N-gons 的近似 π 计算")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://github.com/fuzhengwei/java-algorithms",target:"_blank",rel:"noopener noreferrer"},v=t('<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>割圆术的历史</code></p><p>刘徽的π算法是由<strong>曹魏国的数学家刘徽</strong>（公元3世纪）发明的。在他之前，圆的周长与直径之比在中国常被实验取为3.0，而张衡（78-139）则将其定为3.1724（根据天球与地球直径的比例） , 92/29 ) 或作为 π ≈ √10 ≈ 3.162 但 刘辉对这个数值并不满意，评论说它太大了，超出了标准。</p><p>另一位数学家王凡(219–257) 给出了π ≈ 142/45 ≈ 3.156。所有这些经验π值都精确到两位数（即小数点后一位）。刘徽是第一位提供精确计算π的严格算法的中国数学家。刘辉自己用九十六边形计算，精度达到五位数：π≈3.1416。</p><h2 id="二、刘辉算法" tabindex="-1"><a class="header-anchor" href="#二、刘辉算法" aria-hidden="true">#</a> 二、刘辉算法</h2><p>刘徽从一个六边形开始。设是六边形<code>M</code>一侧的长度，是圆的半径。<code>AB``r</code></p><div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/liu-hui-01.png?raw=true" width="400px"></div><p><code>AB</code>用线平分<code>OPC</code>，<code>AC</code>成为十二边形（12 边形）的一侧，令其长度为<code>m</code>。让 be 的长度和be<code>PC</code>的<code>j</code>长度。`OP``G</p>',9),b=n("code",null,"AOP",-1),h=n("code",null,"APC",-1),g={href:"https://en.wikipedia.org/wiki/Pythagorean_theorem",target:"_blank",rel:"noopener noreferrer"},w=t(`<div align="center"><img src="https://bugstack.cn/images/article/algorithm/logic/liu-hui-02.png?raw=true" width="400px"></div><p>从这里开始，现在有一种从 确定的技术<code>m</code>，<code>M</code>它给出了具有两倍边数的多边形的边长。从六边形开始，刘辉可以用这个公式计算出十二边形的边长。然后在给定十二边形的边长的情况下继续重复确定 24 边形的边长。他可以根据需要递归多次执行此操作。知道了如何确定这些多边形的面积，刘辉就可以进行近似了<code>π</code>。</p><h2 id="三、算法实现" tabindex="-1"><a class="header-anchor" href="#三、算法实现" aria-hidden="true">#</a> 三、算法实现</h2><p>直到去测试验证割圆术我才体会到为啥要用那么多强大的计算机来计算π了，因为像我这样的电脑根本计算不出多少位π值，就把风扇🏃🏻的嗖嗖的了！</p><h3 id="_1-复杂度高" tabindex="-1"><a class="header-anchor" href="#_1-复杂度高" aria-hidden="true">#</a> 1. 复杂度高</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">liuHui01</span><span class="token punctuation">(</span><span class="token keyword">int</span> splitPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 圆的半径</span>
    <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token comment">// 正方形的边长</span>
    <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>
    <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算圆内随机生成的点的个数</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> splitPoint<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> x <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">-</span> r<span class="token punctuation">;</span>
        <span class="token keyword">double</span> y <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">-</span> r<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y <span class="token operator">&lt;=</span> r <span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 面积比 = 圆的面积 / 正方形的面积</span>
    <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> m <span class="token operator">/</span> splitPoint<span class="token punctuation">;</span>
    <span class="token comment">// 圆周率 = 面积比 * 4</span>
    <span class="token keyword">return</span> p <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>liuHui01使用了一个叫做重心法的算法，将圆划分成若干个小正方形，然后在每个小正方形内随机生成点，最后统计出有多少个点在圆内。</li><li>这个方法接收一个整数 splitPoint，表示圆内划分的小正方形的个数。它首先声明了一个叫做 r 的常量，表示圆的半径，然后计算出正方形的边长。然后，它创建了一个随机数生成器 rand，并循环 splitPoint 次，每次生成一个随机数对 (x, y)，表示在某个小正方形内的点的坐标。接着，它判断这个点是否在圆内，如果是，就将计数器 m 加 1。</li><li>最后，它计算出圆内的点的占比，并将这个占比乘以 4，得到圆周率的近似值。</li></ul><h3 id="_2-复杂度低" tabindex="-1"><a class="header-anchor" href="#_2-复杂度低" aria-hidden="true">#</a> 2. 复杂度低</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getNGonSideLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> sideLength<span class="token punctuation">,</span> <span class="token keyword">int</span> splitCounter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>splitCounter <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sideLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">double</span> halfSide <span class="token operator">=</span> sideLength <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用勾股定理（勾股定理）</span>
    <span class="token keyword">double</span> perpendicular <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>circleRadius<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>halfSide<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> excessRadius <span class="token operator">=</span> circleRadius <span class="token operator">-</span> perpendicular<span class="token punctuation">;</span>
    <span class="token keyword">double</span> splitSideLength <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>excessRadius<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>halfSide<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">getNGonSideLength</span><span class="token punctuation">(</span>splitSideLength<span class="token punctuation">,</span> splitCounter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNGonSideCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> splitCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内接六边形 (6-gon) 开始</span>
    <span class="token keyword">int</span> hexagonSidesCount <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token comment">// 在每次拆分迭代中，我们制作 N 边形：6 边形、12 边形、24 边形、48 边形等等。</span>
    <span class="token keyword">return</span> hexagonSidesCount <span class="token operator">*</span> <span class="token punctuation">(</span>splitCount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> splitCount<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">liuHui02</span><span class="token punctuation">(</span><span class="token keyword">int</span> splitCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> nGonSideLength <span class="token operator">=</span> <span class="token function">getNGonSideLength</span><span class="token punctuation">(</span>circleRadius<span class="token punctuation">,</span> splitCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nGonSideCount <span class="token operator">=</span> <span class="token function">getNGonSideCount</span><span class="token punctuation">(</span>splitCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> nGonPerimeter <span class="token operator">=</span> nGonSideLength <span class="token operator">*</span> nGonSideCount<span class="token punctuation">;</span>
    <span class="token keyword">double</span> approximateCircleArea <span class="token operator">=</span> <span class="token punctuation">(</span>nGonPerimeter <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> circleRadius<span class="token punctuation">;</span>
    <span class="token keyword">return</span> approximateCircleArea <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>circleRadius<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法 liuHui02 接收一个整数 splitCount，它表示圆内进行的拆分次数。在内部，这个方法调用了两个静态方法 getNGonSideLength 和 getNGonSideCount，分别用来计算所得多边形的边长和边数。然后，它使用这些值计算出多边形的周长，并利用这个周长来估算出圆的面积。最后，它返回圆的面积与多边形的面积之比。</li><li>静态方法 getNGonSideLength 递归地使用勾股定理来计算所得多边形的边长。这个方法的第一个参数是边长，第二个参数是拆分次数，在拆分次数不为正数时递归终止，并返回边长。否则，它会将边长分成两半，并使用勾股定理计算出所得多边形的新边长。然后，它会使用新边长继续进行递归，直到拆分次数变成正数为止。</li><li>静态方法 getNGonSideCount 使用与 splitCount 相关的算法来计算所得多边形的边数。在这个方法内，有一个常量 hexagonSidesCount 被初始化为 6，表示一个内接的 6 边形。然后，它会根据 splitCount 的值来进行计算。如果 splitCount 是正数，那么它会返回 hexagonSidesCount 乘以 2 的 splitCount 次方，否则就返回 hexagonSidesCount 本身。这个方法的返回值就是所得多边形的边数。</li><li>综上所述，这段代码通过计算内接的多边形的边长和边数，并使用这些信息估算圆的面积，最后计算圆的面积与多边形的面积之比。</li></ul><hr>`,11),_={href:"https://en.wikipedia.org/wiki/Liu_Hui%27s_%CF%80_algorithm",target:"_blank",rel:"noopener noreferrer"};function y(f,C){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)]),d,s("源码："),n("a",m,[s("https://github.com/fuzhengwei/java-algorithms"),e(a)])]),v,n("p",null,[b,s(","),h,s("是两个直角三角形。刘徽反复引用"),n("a",g,[s("勾股定理"),e(a)]),s("（勾股定理）：")]),w,n("p",null,[n("a",_,[s("https://en.wikipedia.org/wiki/Liu_Hui%27s_%CF%80_algorithm"),e(a)])])])}const S=p(i,[["render",y],["__file","2023-01-09-liu-hui.html.vue"]]);export{S as default};
