import{_ as s,o as n,c as a,e as t}from"./app-3RcBQnkC.js";const p={},e=t(`<h1 id="_4-1-泛型" tabindex="-1"><a class="header-anchor" href="#_4-1-泛型" aria-hidden="true">#</a> 4.1 泛型</h1><p>诸如 <code>List&lt;E&gt;</code> 之类的泛型类，以及使用它们的类，包含了有关它们所声明或使用的泛型的信息。这一信息不是由字节代码指令在运行时使用，但可通过反射 API 访问。它还可以供编译器使用，以进行分离编译。</p><h2 id="_4-1-1-结构" tabindex="-1"><a class="header-anchor" href="#_4-1-1-结构" aria-hidden="true">#</a> 4.1.1 结构</h2><p>出于后向兼容的原因，有关泛型的信息没有存储在类型或方法描述符中（它们的定义远早于Java 5 中对泛型的引入），而是保存在称为类型、方法和类<em>签名</em>的类似构造中。在涉及泛型时，除了描述符之外，这些签名也会存储在类、字段和方法<strong>声明</strong>中（泛型不会影响方法的字节代码： 编译器用它们执行静态类型检查，但会在必要时重新引入类型转换，就像这些方法未被使用一样进行编译）。</p><p>与类型和方法描述符不同，类型签名的语法非常复杂，这也是因为泛型的递归本质造成的（一个泛型可以将另一泛型作为参数——例如，考虑 <code>List&lt;List&lt;E&gt;&gt;</code> ）。其语法由以下规则给出（有关这些规则的完整描述，请参阅 <strong>《Java 虚拟机规范》</strong>）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TypeSignature</span><span class="token operator">:</span> <span class="token class-name">Z</span> <span class="token operator">|</span> <span class="token class-name">C</span> <span class="token operator">|</span> <span class="token class-name">B</span> <span class="token operator">|</span> <span class="token class-name">S</span> <span class="token operator">|</span> <span class="token class-name">I</span> <span class="token operator">|</span> <span class="token class-name">F</span> <span class="token operator">|</span> <span class="token class-name">J</span> <span class="token operator">|</span> <span class="token class-name">D</span> <span class="token operator">|</span> <span class="token class-name">FieldTypeSignature</span>
<span class="token class-name">FieldTypeSignature</span><span class="token operator">:</span> <span class="token class-name">ClassTypeSignature</span> <span class="token operator">|</span> <span class="token punctuation">[</span> <span class="token class-name">TypeSignature</span> <span class="token operator">|</span> <span class="token class-name">TypeVar</span> 
<span class="token class-name">ClassTypeSignature</span><span class="token operator">:</span> <span class="token class-name">L</span> <span class="token class-name">Id</span> <span class="token punctuation">(</span> <span class="token operator">/</span> <span class="token class-name">Id</span> <span class="token punctuation">)</span><span class="token operator">*</span> 
<span class="token class-name">TypeArgs</span><span class="token operator">?</span> <span class="token punctuation">(</span> <span class="token punctuation">.</span> <span class="token class-name">Id</span> <span class="token class-name">TypeArgs</span><span class="token operator">?</span> <span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">;</span> 
<span class="token class-name">TypeArgs</span><span class="token operator">:</span> <span class="token operator">&lt;</span> <span class="token class-name">TypeArg</span><span class="token operator">+</span> <span class="token operator">&gt;</span>
<span class="token class-name">TypeArg</span><span class="token operator">:</span> <span class="token operator">*</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token operator">+</span> <span class="token operator">|</span> <span class="token operator">-</span> <span class="token punctuation">)</span><span class="token operator">?</span> <span class="token class-name">FieldTypeSignature</span> 
<span class="token class-name">TypeVar</span><span class="token operator">:</span> <span class="token class-name">T</span> <span class="token class-name">Id</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一条规则表明，类型签名或者是一个基元类型描述符，或者是一个字段类型签名。第二条规则将一个字段类型签名定义为一个类类型签名、数组类型签名或类型变量。第三条规则定义类类型签名：它们是类类型描述符，在主类名之后或者内部类名之后的尖括号中可能带有类型参数 （以点为前缀）。其他规则定义了类型参数和类型变量。注意，一个类型参数可能是一个完整的字段类型签名，带有它自己的类型参数：因此，类型签名可能非常复杂（见图 4.1）。</p><table><thead><tr><th style="text-align:left;">Java 类型</th><th style="text-align:left;">相应的类型签名</th></tr></thead><tbody><tr><td style="text-align:left;"><code>List&lt;E&gt;</code></td><td style="text-align:left;"><code>Ljava/util/List&lt;TE;&gt;;</code></td></tr><tr><td style="text-align:left;"><code>List&lt;?&gt;</code></td><td style="text-align:left;"><code>Ljava/util/List&lt;*&gt;;</code></td></tr><tr><td style="text-align:left;"><code>List&lt;? extends Number&gt;</code></td><td style="text-align:left;"><code>Ljava/util/List&lt;+Ljava/lang/Number;&gt;;</code></td></tr><tr><td style="text-align:left;"><code>List&lt;? super Integer&gt;</code></td><td style="text-align:left;"><code>Ljava/util/List&lt;-Ljava/lang/Integer;&gt;;</code></td></tr><tr><td style="text-align:left;"><code>List&lt;List&lt;String&gt;[]&gt;</code></td><td style="text-align:left;"><code>Ljava/util/List&lt;[Ljava/util/List&lt;Ljava/lang/String;&gt;;&gt;;</code></td></tr><tr><td style="text-align:left;"><code>HashMap&lt;K, V&gt;.HashIterator&lt;K&gt;</code></td><td style="text-align:left;"><code>Ljava/util/HashMap&lt;TK;TV;&gt;.HashIterator&lt;TK;&gt;;</code></td></tr></tbody></table><p>方法签名扩展了方法描述符，就像类型签名扩展了类型描述符。<strong>方法签名</strong>描述了方法参数的类型签名及其返回类型的签名。与方法描述符不同的是，它还包含了该方法所抛出异常的签名， 前面带有^前缀，还可以在尖括号之间包含可选的形式类型参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MethodTypeSignature</span><span class="token operator">:</span>
<span class="token class-name">TypeParams</span><span class="token operator">?</span> <span class="token punctuation">(</span> <span class="token class-name">TypeSignature</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token class-name">TypeSignature</span> <span class="token operator">|</span> <span class="token class-name">V</span> <span class="token punctuation">)</span> <span class="token class-name">Exception</span><span class="token operator">*</span> 
<span class="token class-name">Exception</span><span class="token operator">:</span> <span class="token operator">^</span><span class="token class-name">ClassTypeSignature</span> <span class="token operator">|</span> <span class="token operator">^</span><span class="token class-name">TypeVar</span>
<span class="token class-name">TypeParams</span><span class="token operator">:</span> <span class="token operator">&lt;</span> <span class="token class-name">TypeParam</span><span class="token operator">+</span> <span class="token operator">&gt;</span>
<span class="token class-name">TypeParam</span><span class="token operator">:</span> <span class="token class-name">Id</span> <span class="token operator">:</span> <span class="token class-name">FieldTypeSignature</span><span class="token operator">?</span> <span class="token punctuation">(</span> <span class="token operator">:</span> <span class="token class-name">FieldTypeSignature</span> <span class="token punctuation">)</span><span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如以下泛型静态方法的方法签名，它以类型变量 T 为参数：</p><p><code>static &lt;T&gt; Class&lt;? extends T&gt; m (int n)</code></p><p>它是以下方法签名：</p><p><code>&lt;T:Ljava/lang/Object;&gt;(I)Ljava/lang/Class&lt;+TT;&gt;;</code></p><p>最后要说的是<strong>类签名</strong>，不要将它与类类型签名相混淆，它被定义为其超类的类型签名，后面跟有所实现接口的类型签名，以及可选的形式类型参数：</p><p><code>ClassSignature: TypeParams? ClassTypeSignature ClassTypeSignature*</code></p><p>例 如 ， 一 个 被 声 明 为 <code>C&lt;E&gt; extends List&lt;E&gt;</code> 的 类 的 类 签 名 就 是 <code>&lt;E:Ljava/lang/Object;&gt;Ljava/util/List&lt;TE;&gt;;</code>。</p><h2 id="_4-1-2-接口与组件" tabindex="-1"><a class="header-anchor" href="#_4-1-2-接口与组件" aria-hidden="true">#</a> 4.1.2 接口与组件</h2><p>和描述符的情况一样，也出于相同的效果原因（见 2.3.1 节），ASM API 公开签名的形式与它们在编译类中的存储形式相同（签名主要出现在 ClassVisitor 类的 visit、visitField 和 visitMethod 方法中，分别作为可选类、类型或方法签名参数 ）。幸好它还在 org.objectweb.asm.signature 包中提供了一些基于 SignatureVisitor 抽象类的工具，用于生成和转换签名（见图 4.2）。</p><blockquote><p>图 4.2 SignatureVisitor 类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SignatureVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token constant">EXTENDS</span> <span class="token operator">=</span> ’<span class="token operator">+</span>’<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token constant">SUPER</span> <span class="token operator">=</span> ’<span class="token operator">-</span>’<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token constant">INSTANCEOF</span> <span class="token operator">=</span> ’<span class="token operator">=</span>’<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitFormalTypeParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitClassBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitInterfaceBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitExceptionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitBaseType</span><span class="token punctuation">(</span><span class="token keyword">char</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitTypeVariable</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitArrayType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitClassType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInnerClassType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitTypeArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitTypeArgument</span><span class="token punctuation">(</span><span class="token keyword">char</span> wildcard<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个抽象类用于访问类型签名、方法签名和类签名。用于类型签名的方法以粗体显示，必须按以下顺序调用，它反映了前面的语法规则（注意，其中两个返回了 SignatureVisitor：这是因为类型签名的递归定义导致的）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>visitBaseType <span class="token operator">|</span> visitArrayType <span class="token operator">|</span> visitTypeVariable <span class="token operator">|</span> <span class="token punctuation">(</span> visitClassType visitTypeArgument<span class="token operator">*</span>
<span class="token punctuation">(</span> visitInnerClassType visitTypeArgument<span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">*</span> visitEnd <span class="token punctuation">)</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用于访问方法签名的方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span> visitFormalTypeParameter visitClassBound<span class="token operator">?</span> visitInterfaceBound<span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">*</span>
visitParameterType<span class="token operator">*</span> visitReturnType visitExceptionType<span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，用于访问类签名的方法为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span> visitFormalTypeParameter visitClassBound<span class="token operator">?</span> visitInterfaceBound<span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">*</span>
visitSuperClass visitInterface<span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法大多返回一个 SignatureVisitor：它是准备用来访问类型签名的。注意，不同于 ClassVisitor 返 回 的 MethodVisitors ， SignatureVisitor 返 回 的 SignatureVisitors 不得为 null，而且必须顺序使用：事实上，在完全访问一个嵌套签名之前，不得访问父访问器的任何方法。</p><p>和类的情况一样，ASM API 基于这个 API 提供了两个组件：SignatureReader 组件分析一个签名，并针对一个给定的签名访问器调用适当的访问方法；SignatureWriter 组件基于它接收到的方法调用生成一个签名。</p><p>利用与类和方法相同的原理，这两个类可用于生成和转换签名。例如，假定我们希望对出现在某些签名中的类名进行重命名。这一效果可以用以下签名适配器完成，除 visitClassType 和 visitInnerClassType 方法之外，它将自己接收到的所有其他方法调用都不加修改地加以转发（这里假设 sv 方法总是返回 this，SignatureWriter 就属于这种情况）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RenameSignatureAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">SignatureVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SignatureVisitor</span> sv<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> renaming<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> oldName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RenameSignatureAdapter</span><span class="token punctuation">(</span><span class="token class-name">SignatureVisitor</span> sv<span class="token punctuation">,</span>
                                  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> renaming<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">ASM4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sv <span class="token operator">=</span> sv<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>renaming <span class="token operator">=</span> renaming<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitFormalTypeParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sv<span class="token punctuation">.</span><span class="token function">visitFormalTypeParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitClassBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sv<span class="token punctuation">.</span><span class="token function">visitClassBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitInterfaceBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sv<span class="token punctuation">.</span><span class="token function">visitInterfaceBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitClassType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oldName <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token class-name">String</span> newName <span class="token operator">=</span> renaming<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sv<span class="token punctuation">.</span><span class="token function">visitClassType</span><span class="token punctuation">(</span>newName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> name <span class="token operator">:</span> newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInnerClassType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oldName <span class="token operator">=</span> oldName <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
        <span class="token class-name">String</span> newName <span class="token operator">=</span> renaming<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sv<span class="token punctuation">.</span><span class="token function">visitInnerClassType</span><span class="token punctuation">(</span>newName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> name <span class="token operator">:</span> newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitTypeArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sv<span class="token punctuation">.</span><span class="token function">visitTypeArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SignatureVisitor</span> <span class="token function">visitTypeArgument</span><span class="token punctuation">(</span><span class="token keyword">char</span> wildcard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sv<span class="token punctuation">.</span><span class="token function">visitTypeArgument</span><span class="token punctuation">(</span>wildcard<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，以下代码的结果为<code>&quot;LA&lt;TK;TV;&gt;.B&lt;TK;&gt;;&quot;</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Ljava/util/HashMap&lt;TK;TV;&gt;.HashIterator&lt;TK;&gt;;&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> renaming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
renaming<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;java/util/HashMap&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
renaming<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;java/util/HashMap.HashIterator&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">SignatureWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignatureWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SignatureVisitor</span> sa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RenameSignatureAdapter</span><span class="token punctuation">(</span>sw<span class="token punctuation">,</span> renaming<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">SignatureReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignatureReader</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
sr<span class="token punctuation">.</span><span class="token function">acceptType</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">;</span> 
sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-1-3-工具" tabindex="-1"><a class="header-anchor" href="#_4-1-3-工具" aria-hidden="true">#</a> 4.1.3 工具</h2><p>2.3 节给出的TraceClassVisitor 和 ASMifier 类以内部形式打印类文件中包含的签名。利用它们，可以通过以下方式找出与一个给定泛型相对应的签名：编写一个具有某一泛型的 Java 类，编译它，并用这些命令行工具来找出对应的签名。</p>`,35),o=[e];function c(l,i){return n(),a("div",null,o)}const r=s(p,[["render",c],["__file","4.1fanxing.html.vue"]]);export{r as default};
