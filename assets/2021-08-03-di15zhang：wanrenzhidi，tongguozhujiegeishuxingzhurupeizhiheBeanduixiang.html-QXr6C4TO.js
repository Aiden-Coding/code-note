import{_ as t,r as p,o,c,a as n,b as s,d as e,e as l}from"./app-3RcBQnkC.js";const i={},u=n("h1",{id:"《spring-手撸专栏》第-15-章-万人之敌-通过注解给属性注入配置和bean对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《spring-手撸专栏》第-15-章-万人之敌-通过注解给属性注入配置和bean对象","aria-hidden":"true"},"#"),s(" 《Spring 手撸专栏》第 15 章：万人之敌，通过注解给属性注入配置和Bean对象")],-1),r=n("br",null,null,-1),k={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v={href:"https://mp.weixin.qq.com/s/GNLA10AimmxUSZ0VoDI_xA",target:"_blank",rel:"noopener noreferrer"},m=l(`<blockquote><p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p></blockquote><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p><code>写代码，就是从能用到好用的不断折腾！</code></p><p>你听过扰动函数吗？你写过斐波那契（Fibonacci）散列吗？你实现过梅森旋转算法吗？<strong>怎么</strong> 没听过这些写不了代码吗！不会的，即使没听过你一样可以写的了代码，比如你实现的数据库路由数据总是落在1库1表它不散列分布、你实现的抽奖系统总是把运营配置的最大红包发出去提高了运营成本、你开发的秒杀系统总是在开始后的1秒就挂了货品根本给不出去。</p><p>除了一部分仅把编码当成搬砖应付工作外的程序员，还有一部分总是在追求极致的码农。<em>写代码还能赚钱，真开心！</em> 这样的码农总是会考虑🤔还有没有更好的实现逻辑能让代码不仅是能用，还要好用呢？其实这一点的追求到完成，需要大量扩展性学习和深度挖掘，这样你设计出来的系统才更你考虑的更加全面，也能应对各种复杂的场景。</p><h2 id="二、目标" tabindex="-1"><a class="header-anchor" href="#二、目标" aria-hidden="true">#</a> 二、目标</h2><p>在目前 IOC、AOP 两大核心功能模块的支撑下，完全可以管理 Bean 对象的注册和获取，不过这样的使用方式总感觉像是刀耕火种有点难用。因此在上一章节我们解决需要手动配置 <code>Bean</code> 对象到 <code>spring.xml</code> 文件中，改为可以自动扫描带有注解 <code>@Component</code> 的对象完成自动装配和注册到 <code>Spring</code> 容器的操作。</p><p>那么在自动扫描包注册 Bean 对象之后，就需要把原来在配置文件中通过 <code>property name=&quot;token&quot;</code> 配置属性和Bean的操作，也改为可以自动注入。这就像我们使用 Spring 框架中 <code>@Autowired</code>、<code>@Value</code> 注解一样，完成我们对属性和对象的注入操作。</p><h2 id="三、方案" tabindex="-1"><a class="header-anchor" href="#三、方案" aria-hidden="true">#</a> 三、方案</h2><p>其实从我们在完成 Bean 对象的基础功能后，后续陆续添加的功能都是围绕着 Bean 的生命周期进行的，比如修改 Bean 的定义 BeanFactoryPostProcessor，处理 Bean 的属性要用到 BeanPostProcessor，完成个性的属性操作则专门继承 BeanPostProcessor 提供新的接口，因为这样才能通过 instanceof 判断出具有标记性的接口。所以关于 Bean 等等的操作，以及监听 Aware、获取 BeanFactory，都需要在 Bean 的生命周期中完成。那么我们在设计属性和 Bean 对象的注入时候，也会用到 BeanPostProcessor 来完成在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值。整体设计结构如下图：</p><p><img src="https://bugstack.cn/assets/images/spring/spring-15-01.png" alt=""></p><ul><li>要处理自动扫描注入，包括属性注入、对象注入，则需要在对象属性 <code>applyPropertyValues</code> 填充之前 ，把属性信息写入到 PropertyValues 的集合中去。这一步的操作相当于是解决了以前在 spring.xml 配置属性的过程。</li><li>而在属性的读取中，需要依赖于对 Bean 对象的类中属性的配置了注解的扫描，<code>field.getAnnotation(Value.class);</code> 依次拿出符合的属性并填充上相应的配置信息。<em>这里有一点 ，属性的配置信息需要依赖于 BeanFactoryPostProcessor 的实现类 PropertyPlaceholderConfigurer，把值写入到 AbstractBeanFactory的embeddedValueResolvers集合中，这样才能在属性填充中利用 beanFactory 获取相应的属性值</em></li><li>还有一个是关于 @Autowired 对于对象的注入，其实这一个和属性注入的唯一区别是对于对象的获取 <code>beanFactory.getBean(fieldType)</code>，其他就没有什么差一点了。</li><li>当所有的属性被设置到 PropertyValues 完成以后，接下来就到了创建对象的下一步，属性填充，而此时就会把我们一一获取到的配置和对象填充到属性上，也就实现了自动注入的功能。</li></ul><h2 id="四、实现" tabindex="-1"><a class="header-anchor" href="#四、实现" aria-hidden="true">#</a> 四、实现</h2><h3 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1. 工程结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>small<span class="token operator">-</span>spring<span class="token operator">-</span>step<span class="token operator">-</span><span class="token number">14</span>
└── src
    ├── main
    │   └── java
    │       └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework
    │           ├── aop
    │           │   ├── aspectj
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   ├── framework 
    │           │   │   ├── adapter
    │           │   │   │   └── <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">.</span>java
    │           │   │   ├── autoproxy
    │           │   │   │   └── <span class="token class-name">MethodBeforeAdviceInterceptor</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Cglib2AopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">AdvisedSupport</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Advisor</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">ClassFilter</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">MethodMatcher</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">Pointcut</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">TargetSource</span><span class="token punctuation">.</span>java
    │           ├── beans
    │           │   ├── factory  
    │           │   │   ├── annotation
    │           │   │   │   ├── <span class="token class-name">Autowired</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">Qualifier</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">Value</span><span class="token punctuation">.</span>java
    │           │   │   ├── config
    │           │   │   │   ├── <span class="token class-name">AutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanReference</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   ├── support
    │           │   │   │   ├── <span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">FactoryBeanRegistrySupport</span><span class="token punctuation">.</span>java
    │           │   │   │   ├── <span class="token class-name">InstantiationStrategy</span><span class="token punctuation">.</span>java
    │           │   │   │   └── <span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">.</span>java  
    │           │   │   ├── support
    │           │   │   │   └── <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">Aware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">BeanNameAware</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">DisposableBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">FactoryBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">HierarchicalBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">InitializingBean</span><span class="token punctuation">.</span>java
    │           │   │   ├── <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">.</span>java
    │           │   │   └── <span class="token class-name">PropertyPlaceholderConfigurer</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">BeansException</span><span class="token punctuation">.</span>java
    │           │   ├── <span class="token class-name">PropertyValue</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">PropertyValues</span><span class="token punctuation">.</span>java 
    │           ├── context
    │           │   ├── annotation
    │           │   │   ├── <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ClassPathScanningCandidateComponentProvider</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">Scope</span><span class="token punctuation">.</span>java 
    │           │   ├── event
    │           │   │   ├── <span class="token class-name">AbstractApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextClosedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">.</span>java 
    │           │   ├── support
    │           │   │   ├── <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractRefreshableApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">AbstractXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   │   ├── <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">.</span>java 
    │           │   │   └── <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEvent</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span>java 
    │           │   └── <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span>java
    │           ├── core<span class="token punctuation">.</span>io
    │           │   ├── <span class="token class-name">ClassPathResource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">FileSystemResource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">Resource</span><span class="token punctuation">.</span>java 
    │           │   ├── <span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span>java
    │           │   └── <span class="token class-name">UrlResource</span><span class="token punctuation">.</span>java
    │           ├── stereotype
    │           │   └── <span class="token class-name">Component</span><span class="token punctuation">.</span>java
    │           └── utils
    │               ├── <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span>java
    │               └── <span class="token class-name">StringValueResolver</span><span class="token punctuation">.</span>java
    └── test
        └── java
            └── cn<span class="token punctuation">.</span>bugstack<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test
                ├── bean
                │   ├── <span class="token class-name">IUserService</span><span class="token punctuation">.</span>java
                │   └── <span class="token class-name">UserService</span><span class="token punctuation">.</span>java
                └── <span class="token class-name">ApiTest</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程源码</strong>：<code>公众号「bugstack虫洞栈」，回复：Spring 专栏，获取完整源码</code></p><p>自动扫描注入占位符配置和对象的类关系，如图 15-2</p><p><img src="https://bugstack.cn/assets/images/spring/spring-15-02.png" alt="图 15-2"></p><ul><li>在整个类图中以围绕实现接口 InstantiationAwareBeanPostProcessor 的类 AutowiredAnnotationBeanPostProcessor 作为入口点，被 AbstractAutowireCapableBeanFactory创建 Bean 对象过程中调用扫描整个类的属性配置中含有自定义注解 <code>Value</code>、<code>Autowired</code>、<code>Qualifier</code>，的属性值。</li><li>这里稍有变动的是关于属性值信息的获取，在注解配置的属性字段扫描到信息注入时，包括了占位符从配置文件获取信息也包括 Bean 对象，Bean 对象可以直接获取，但配置信息需要在 AbstractBeanFactory 中添加新的属性集合 embeddedValueResolvers，由 PropertyPlaceholderConfigurer#postProcessBeanFactory 进行操作填充到属性集合中。</li></ul><h3 id="_2-把读取到属性填充到容器" tabindex="-1"><a class="header-anchor" href="#_2-把读取到属性填充到容器" aria-hidden="true">#</a> 2. 把读取到属性填充到容器</h3><p><strong>定义解析字符串接口</strong></p><p><strong>cn.bugstack.springframework.util.StringValueResolver</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StringValueResolver</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">resolveStringValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> strVal<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接口 StringValueResolver 是一个解析字符串操作的接口</li></ul><p><strong>填充字符串</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyPlaceholderConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 加载属性文件</span>
            <span class="token class-name">DefaultResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Resource</span> resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// ... 占位符替换属性值、设置属性值</span>

            <span class="token comment">// 向容器中添加字符串解析器，供解析@Value注解使用</span>
            <span class="token class-name">StringValueResolver</span> valueResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlaceholderResolvingStringValueResolver</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">addEmbeddedValueResolver</span><span class="token punctuation">(</span>valueResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not load properties&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">PlaceholderResolvingStringValueResolver</span> <span class="token keyword">implements</span> <span class="token class-name">StringValueResolver</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">PlaceholderResolvingStringValueResolver</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">resolveStringValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> strVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">PropertyPlaceholderConfigurer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholder</span><span class="token punctuation">(</span>strVal<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在解析属性配置的类 PropertyPlaceholderConfigurer 中，最主要的其实就是这行代码的操作 <code>beanFactory.addEmbeddedValueResolver(valueResolver)</code> 这是把属性值写入到了 AbstractBeanFactory 的 embeddedValueResolvers 中。</li><li>这里说明下，embeddedValueResolvers 是 AbstractBeanFactory 类新增加的集合 <code>List&lt;StringValueResolver&gt; embeddedValueResolvers</code> String resolvers to apply e.g. to annotation attribute values</li></ul><h3 id="_3-自定义属性注入注解" tabindex="-1"><a class="header-anchor" href="#_3-自定义属性注入注解" aria-hidden="true">#</a> 3. 自定义属性注入注解</h3><p><strong>自定义注解，Autowired、Qualifier、Value</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Autowired</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Qualifier</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * The actual value expression: e.g. &quot;#<span class="token punctuation">{</span>systemProperties.myProp<span class="token punctuation">}</span>&quot;.
     */</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>3个注解在我们日常使用 Spring 也是非常常见的，注入对象、注入属性，而 Qualifier 一般与 Autowired 配合使用。</li></ul><h3 id="_4-扫描自定义注解" tabindex="-1"><a class="header-anchor" href="#_4-扫描自定义注解" aria-hidden="true">#</a> 4. 扫描自定义注解</h3><p><strong>cn.bugstack.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 处理注解 @Value</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        clazz <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isCglibProxyClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token operator">?</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> clazz<span class="token punctuation">;</span>

        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Value</span> valueAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> valueAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> valueAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                value <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveEmbeddedValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2. 处理注解 @Autowired</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Autowired</span> autowiredAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Autowired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> autowiredAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> fieldType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> dependentBeanName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token class-name">Qualifier</span> qualifierAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Qualifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> dependentBean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> qualifierAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dependentBeanName <span class="token operator">=</span> qualifierAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    dependentBean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>dependentBeanName<span class="token punctuation">,</span> fieldType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    dependentBean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>fieldType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> pvs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AutowiredAnnotationBeanPostProcessor 是实现接口 InstantiationAwareBeanPostProcessor 的一个用于在 Bean 对象实例化完成后，设置属性操作前的处理属性信息的类和操作方法。<em>只有实现了 BeanPostProcessor 接口才有机会在 Bean 的生命周期中处理初始化信息</em></li><li>核心方法 postProcessPropertyValues，主要用于处理类含有 @Value、@Autowired 注解的属性，进行属性信息的提取和设置。</li><li>这里需要注意一点因为我们在 AbstractAutowireCapableBeanFactory 类中使用的是 CglibSubclassingInstantiationStrategy 进行类的创建，所以在 AutowiredAnnotationBeanPostProcessor#postProcessPropertyValues 中需要判断是否为 CGlib 创建对象，否则是不能正确拿到类信息的。<code>ClassUtils.isCglibProxyClass(clazz) ? clazz.getSuperclass() : clazz;</code></li></ul><h3 id="_5-向beanfactory中注册autowiredannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#_5-向beanfactory中注册autowiredannotationbeanpostprocessor" aria-hidden="true">#</a> 5. 向BeanFactory中注册AutowiredAnnotationBeanPostProcessor</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathScanningCandidateComponentProvider</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> registry<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doScan</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> candidates <span class="token operator">=</span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 解析 Bean 的作用域 singleton、prototype</span>
                <span class="token class-name">String</span> beanScope <span class="token operator">=</span> <span class="token function">resolveBeanScope</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>beanScope<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>beanScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token function">determineBeanName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 注册处理注解的 BeanPostProcessor（@Autowired、@Value）</span>
        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;cn.bugstack.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由于AutowiredAnnotationBeanPostProcessor并没有标注@Component,所以是无法在类扫描时注入到beanFactory中的,此处需要我们手动进行注册.</li></ul><h3 id="_6-在bean的生命周期中调用属性注入" tabindex="-1"><a class="header-anchor" href="#_6-在bean的生命周期中调用属性注入" aria-hidden="true">#</a> 6. 在Bean的生命周期中调用属性注入</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAutowireCapableBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AutowireCapableBeanFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">InstantiationStrategy</span> instantiationStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibSubclassingInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断是否返回代理 Bean 对象</span>
            bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 实例化 Bean</span>
            bean <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值</span>
            <span class="token function">applyBeanPostProcessorsBeforeApplyingPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给 Bean 填充属性</span>
            <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span>
            bean <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">&quot;Instantiation of bean failed&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 注册实现了 DisposableBean 接口的 Bean 对象</span>
        <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">registerSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值
     *
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span>
     * <span class="token keyword">@param</span> <span class="token parameter">bean</span>
     * <span class="token keyword">@param</span> <span class="token parameter">beanDefinition</span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">applyBeanPostProcessorsBeforeApplyingPropertyValues</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanPostProcessor <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">PropertyValues</span> pvs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> beanPostProcessor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyValue</span> propertyValue <span class="token operator">:</span> pvs<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AbstractAutowireCapableBeanFactory#createBean 方法中有这一条新增加的方法调用，就是在<code>设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值</code> 的操作 <code>applyBeanPostProcessorsBeforeApplyingPropertyValues</code></li><li>那么这个 applyBeanPostProcessorsBeforeApplyingPropertyValues 方法中，首先就是获取已经注入的 BeanPostProcessor 集合并从中筛选出继承接口 InstantiationAwareBeanPostProcessor 的实现类。</li><li>最后就是调用相应的 postProcessPropertyValues 方法以及循环设置属性值信息，<code>beanDefinition.getPropertyValues().addPropertyValue(propertyValue);</code></li></ul><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><h3 id="_1-事先准备" tabindex="-1"><a class="header-anchor" href="#_1-事先准备" aria-hidden="true">#</a> 1. 事先准备</h3><p><strong>配置 Dao</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小傅哥，北京，亦庄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10002&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;八杯水，上海，尖沙咀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10003&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;阿毛，天津，东丽区&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>给类配置上一个自动扫描注册 Bean 对象的注解 <code>@Component</code>，接下来会把这个类注入到 UserService 中。</li></ul><p><strong>注解注入到 UserService</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${token}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserName</span><span class="token punctuation">(</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里包括了两种类型的注入，一个是占位符注入属性信息 <code> @Value(&quot;\${token}&quot;)</code>，另外一个是注入对象信息 <code>@Autowired</code></li></ul><h3 id="_2-属性配置文件" tabindex="-1"><a class="header-anchor" href="#_2-属性配置文件" aria-hidden="true">#</a> 2. 属性配置文件</h3><p><strong>token.properties</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>token<span class="token operator">=</span><span class="token class-name">RejDlI78hu223Opo983Ds</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>spring.xml</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
	         http://www.springframework.org/schema/beans/spring-beans.xsd
		 http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.beans.factory.PropertyPlaceholderConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>location<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:token.properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bugstack.springframework.test.bean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 spring.xml 中配置了扫描属性信息和自动扫描包路径范围。</li></ul><h3 id="_3-单元测试" tabindex="-1"><a class="header-anchor" href="#_3-单元测试" aria-hidden="true">#</a> 3. 单元测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IUserService</span> userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单元测试时候就可以完整的测试一个类注入到 Spring 容器，同时这个属性信息也可以被自动扫描填充上。</li></ul><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>测试结果：小傅哥，北京，亦庄，<span class="token class-name">RejDlI78hu223Opo983Ds</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bugstack.cn/assets/images/spring/spring-15-03.png" alt=""></p><ul><li>从测试结果可以看到现在我们的使用方式已经通过了，有自动扫描类，有注解注入属性。这与使用 Spring 框架越来越像了。</li></ul><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><ul><li>从整个注解信息扫描注入的实现内容来看，我们一直是围绕着在 Bean 的生命周期中进行处理，就像 BeanPostProcessor 用于修改新实例化 Bean 对象的扩展点，提供的接口方法可以用于处理 Bean 对象实例化前后进行处理操作。而有时候需要做一些差异化的控制，所以还需要继承 BeanPostProcessor 接口，定义新的接口 InstantiationAwareBeanPostProcessor 这样就可以区分出不同扩展点的操作了。</li><li>像是接口用 instanceof 判断，注解用 Field.getAnnotation(Value.class); 获取，都是相当于在类上做的一些标识性信息，便于可以用一些方法找到这些功能点，以便进行处理。所以在我们日常开发设计的组件中，也可以运用上这些特点。</li><li>当你思考把你的实现融入到一个已经细分好的 Bean 生命周期中，你会发现它的设计是如此的好，可以让你在任何初始化的时间点上，任何面上，都能做你需要的扩展或者改变，这也是我们做程序设计时追求的灵活性。</li></ul><h2 id="七、优秀作业" tabindex="-1"><a class="header-anchor" href="#七、优秀作业" aria-hidden="true">#</a> 七、优秀作业</h2>`,66),b={href:"https://t.zsxq.com/06zV7mA2Z",target:"_blank",rel:"noopener noreferrer"},g={href:"https://t.zsxq.com/06emaAAyf",target:"_blank",rel:"noopener noreferrer"},y={href:"https://t.zsxq.com/06yFieYJu",target:"_blank",rel:"noopener noreferrer"},f={href:"https://t.zsxq.com/08jh9bRRu",target:"_blank",rel:"noopener noreferrer"},h={href:"https://t.zsxq.com/086EpbbNg",target:"_blank",rel:"noopener noreferrer"},w={href:"https://t.zsxq.com/0aOUfSjv1",target:"_blank",rel:"noopener noreferrer"},P={href:"https://t.zsxq.com/0avuEX4HC",target:"_blank",rel:"noopener noreferrer"},B={href:"https://t.zsxq.com/0bH1pwMUE",target:"_blank",rel:"noopener noreferrer"};function A(j,x){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("作者：小傅哥 "),r,s("博客："),n("a",k,[s("https://bugstack.cn"),e(a)]),d,s("原文："),n("a",v,[s("https://mp.weixin.qq.com/s/GNLA10AimmxUSZ0VoDI_xA"),e(a)])]),m,n("ul",null,[n("li",null,[n("a",b,[s("利用 BeanPostProcessor 实现Bean属性的注解注入"),e(a)])]),n("li",null,[n("a",g,[s("解决属性注入，@Value和@Autowired注解 @Chin"),e(a)])]),n("li",null,[n("a",y,[s("使用注解来进行自动注入 @W"),e(a)])]),n("li",null,[n("a",f,[s("将原来在spring.xml中配置bean，改为在在类上添加@Component注解扫描 @liuc"),e(a)])]),n("li",null,[n("a",h,[s("在实现自动扫描带 @Component 注解的对象自动装配和注册的基础上，额可以使用 @Autowired、@Value 注解，完成对属性和对象的注入操作。@水中捞月"),e(a)])]),n("li",null,[n("a",w,[s("Component-scan定义扫描的包 @Liuliuliu"),e(a)])]),n("li",null,[n("a",P,[s("对自定义注解的相关属性进行了回顾与整理 @在九月"),e(a)])]),n("li",null,[n("a",B,[s("把代理对象的创建融入到 Bean 的生命周期中 @lucien"),e(a)])])])])}const q=t(i,[["render",A],["__file","2021-08-03-di15zhang：wanrenzhidi，tongguozhujiegeishuxingzhurupeizhiheBeanduixiang.html.vue"]]);export{q as default};
