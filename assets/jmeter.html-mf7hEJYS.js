import{_ as t,r as s,o,c as i,a as e,b as a,d as n,e as p}from"./app-3RcBQnkC.js";const l={},c=e("h1",{id:"jmeter-压测工具的配置和使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jmeter-压测工具的配置和使用","aria-hidden":"true"},"#"),a(" JMeter 压测工具的配置和使用")],-1),d=e("br",null,null,-1),h={href:"https://bugstack.cn",target:"_blank",rel:"noopener noreferrer"},m=e("blockquote",null,[e("p",null,"沉淀、分享、成长，让自己和他人都能有所收获！😄")],-1),u={href:"https://jmeter.apache.org",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,[a("压测是开发完成正式上线对外使用前非常重要的一环，尤其是各个互联网大厂，上线的核心应用和在618、双11以及各种大促时间节点下的应用，都需要进行压测摸底，知道一个系统的最大承载量，并基于这样的一个量的安全范围值内设置熔断、限流和降级的指标。—— 而且这也是面试过程中评估你是否真的做过上线系统的能力考察项；"),e("code",null,"你的系统负载量多大、部署多少台服务器、响应时间怎么样、峰值是多少")],-1),_=e("p",null,"本文涉及的工程：",-1),k={href:"https://gitcode.net/KnowledgePlanet/road-map/xfg-dev-tech-jmeter",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"一、工具安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、工具安装","aria-hidden":"true"},"#"),a(" 一、工具安装")],-1),b=e("p",null,[a("这个安装分为本地安装和云服务安装，一般正规的玩法是本地安装后来写测试计划看效果。之后把jmx文件放到云服务器来执行压测。这样才能不受GUI和本地的限制，压测的比较大。"),e("strong",null,"本文提供了Docker部署和执行 JMX 压测脚本")],-1),j=e("h3",{id:"_1-本地安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-本地安装","aria-hidden":"true"},"#"),a(" 1. 本地安装")],-1),x=e("li",null,[a("环境：JDK 1.8+ - "),e("code",null,"因为这是一个纯Java开发的软件，所以需要JDK环境")],-1),f={href:"https://jmeter.apache.org/download_jmeter.cgi",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"Mac 下载 apache-jmeter-5.6.2.tgz",-1),T=e("code",null,"Windows 下载 apache-jmeter-5.6.2.zip",-1),J={href:"https://mirrors.aliyun.com/apache/jmeter/binaries/",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"如果官网下载比较慢，也可以通过阿里云镜像下载",-1),M=p(`<h3 id="_2-云服务安装" tabindex="-1"><a class="header-anchor" href="#_2-云服务安装" aria-hidden="true">#</a> 2. 云服务安装</h3><p><strong>脚本</strong>：<code>xfg-dev-tech-jmeter/docs/dev-ops/docker-compose.yml</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>version<span class="token operator">:</span> <span class="token char">&#39;3&#39;</span>
services<span class="token operator">:</span>
  # <span class="token class-name">JMeter</span>是一个功能强大的性能测试工具，可以模拟多种类型的负载，并提供详细的测试报告
  # 官网：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jmeter<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>
  # 脚本：jmeter <span class="token operator">-</span>n <span class="token operator">-</span>t one<span class="token punctuation">.</span>jmx <span class="token operator">-</span>l one<span class="token punctuation">.</span>jtl
  <span class="token class-name">Jmeter</span><span class="token operator">:</span>
    image<span class="token operator">:</span> justb4<span class="token operator">/</span>jmeter<span class="token operator">:</span><span class="token number">5.5</span>
    container_name<span class="token operator">:</span> jmeter
    restart<span class="token operator">:</span> always
    environment<span class="token operator">:</span>
      <span class="token operator">-</span> <span class="token constant">DISPLAY</span><span class="token operator">=</span><span class="token operator">:</span><span class="token number">0</span>
      <span class="token operator">-</span> <span class="token constant">TZ</span><span class="token operator">=</span><span class="token class-name">Europe</span><span class="token operator">/</span><span class="token class-name">Paris</span>
    volumes<span class="token operator">:</span>
      <span class="token operator">-</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>bugstack<span class="token punctuation">.</span>cn<span class="token operator">/</span>images<span class="token operator">/</span>roadmap<span class="token operator">/</span>tutorial<span class="token operator">/</span>jmx<span class="token operator">/</span><span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>apache<span class="token operator">-</span>jmeter<span class="token operator">-</span><span class="token number">5.5</span><span class="token operator">/</span>jmx<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果你本地已经安装 Docker 那么直接执行 docker-compose.yml 即可完成安装。</li><li>注意，<code>xfg-dev-tech-jmeter/docs/dev-ops/jmx</code> 下是 JMeter 所保存的压测脚本。</li></ul><h3 id="_1-解压启动" tabindex="-1"><a class="header-anchor" href="#_1-解压启动" aria-hidden="true">#</a> 1. 解压启动</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-01.png?raw=true" width="550px"></div><p>进入到 apache-jmeter-5.5/bin 目录下；</p><ul><li>Mac 电脑，在 jmeter 上右键，选择终端启动。</li><li>Windows 电脑，直接点 jmeter.bat 启动。</li></ul><h3 id="_2-配置语言" tabindex="-1"><a class="header-anchor" href="#_2-配置语言" aria-hidden="true">#</a> 2. 配置语言</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-02.png?raw=true" width="550px"></div><p>修改语言有2个方式；</p><ul><li>进入 apache-jmeter-5.5/bin/jmeter.properties 设置 language=zh_CN</li><li>如图，进入页面，手动选择。</li></ul><h2 id="二、配置说明" tabindex="-1"><a class="header-anchor" href="#二、配置说明" aria-hidden="true">#</a> 二、配置说明</h2><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-03.png?raw=true" width="550px"></div><p>这是 JMeter 压测配置中非常简单的一个<strong>测试计划</strong>，在这个测试计划下需要包括<code>线程组 - 负责运行</code>、<code>取样器(压测的接口) - 负责调接口</code>和<code>至少一个监听器 - 负责看结果</code>。这样才能完成压测并获得结果。</p><h3 id="_1-线程组" tabindex="-1"><a class="header-anchor" href="#_1-线程组" aria-hidden="true">#</a> 1. 线程组</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-04.png?raw=true" width="550px"></div><p>通过线程组开启对HTTP接口的请求循环操作方式。它可以模拟配置出流量的负载均值请求、峰值请求、逐步加量等场景。</p><h4 id="_1-1-函数线程组" tabindex="-1"><a class="header-anchor" href="#_1-1-函数线程组" aria-hidden="true">#</a> 1.1 函数线程组</h4><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-05.png?raw=true" width="750px"></div><ul><li>Open Mode Thread Group 支持配置简单的配置和 Groovy 脚本 如；<code>\${__groovy((1..5).collect { &quot;rate(&quot; + it*10 + &quot;/sec) random_arrivals(10 sec) pause(1 sec)&quot; }.join(&quot; &quot;))}</code> - 请求10次，每次都递进。</li><li>你还可以配置这些参数；<code>rate(0/min) random_arrivals(10 min) rate(100/min)</code>、<code>rate(0/min) random_arrivals(5 min) rate(100/min)random_arrivals(100 min)rate(100/min) random_arrivals(5 min) rate(0/min)</code> - 通过这样的规律，就可以找到如何配置了。</li><li>此外还支持 JMeter 函数：<code>pause(2 min) rate(\${__Random(10,50,)}/min)random_arrivals(\${__Random(10,100,)} min) rate(\${__Random(10,1000,)}/min)</code> - 也可以多行配置。</li><li>负载举例；总时长为1分10秒。前10秒内，速率达到10/s，然后，在1分钟内吞吐量将保持在10/s。最大吞吐量为600个/分钟。配置：<code>rate(0/s) random_arrivals(20 s) rate(10/s) random_arrivals(1 m) rate(10/s)</code></li></ul><h4 id="_1-2-简单线程组" tabindex="-1"><a class="header-anchor" href="#_1-2-简单线程组" aria-hidden="true">#</a> 1.2 简单线程组</h4><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-06.png?raw=true" width="750px"></div><p>简单线程组配置起来更简单，也适合一些循环压测的场景。</p><ul><li>线程数：一个用户相当于一个线程。</li><li>Ramp-Up：预期线程组的所有线程从启动-运行-释放的总时间。ramp up=0时，表示瞬时加压，启动线程的时间无限趋近于0。在负载测试的时候，尽量把ramp up设置大一些，让性能曲线平缓，容易找到瓶颈点。</li><li>循环次数：线程组的循环次数，如果不设置，则表示在调度时间范围内一直循环(jmeter不停的发请求)。</li><li>调度器：执行的时间设置。</li></ul><hr><p>此外，JMeter 还可以安装插件，设置更多的线程组模型来压测。</p><h3 id="_2-取样器" tabindex="-1"><a class="header-anchor" href="#_2-取样器" aria-hidden="true">#</a> 2. 取样器</h3><p>JMeter 把对压测的内容，抽象为取样器。包括HTTP接口、FTP服务等。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-07.png?raw=true" width="750px"></div><p>如图你可以通过这样的方式，在创建好的线程组下，创建一个取样器(HTTP压测接口)。不过这里小傅哥更建议你使用 cURL 方式导入使用。</p><h4 id="_2-1-复制-curl" tabindex="-1"><a class="header-anchor" href="#_2-1-复制-curl" aria-hidden="true">#</a> 2.1 复制 cURL</h4><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-08.png?raw=true" width="650px"></div><h4 id="_2-2-导入-curl" tabindex="-1"><a class="header-anchor" href="#_2-2-导入-curl" aria-hidden="true">#</a> 2.2 导入 cURL</h4><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-09.png?raw=true" width="650px"></div><ul><li>导入以后，可以把HTTP请求拖到线程组下面。</li></ul><h3 id="_3-监听器" tabindex="-1"><a class="header-anchor" href="#_3-监听器" aria-hidden="true">#</a> 3. 监听器</h3><p>线程组是各类方式的模拟压测调用，取样器HTTP是压测的接口。那么监听器就是看线程组对取样器HTTP的压测结果。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-10.png?raw=true" width="650px"></div><h2 id="三、工程准备" tabindex="-1"><a class="header-anchor" href="#三、工程准备" aria-hidden="true">#</a> 三、工程准备</h2><p>为了让大家更加方便的测试，不用自己在折腾，可以直接使用测试工程。测试工程内提供了测试的接口，以及对应的 jmx 脚本。启动后就可以执行测试。</p><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-11.png?raw=true" width="750px"></div><ul><li>docker-compose.yml 是部署 JMeter 到 Docker 的脚本。并在脚本中映射了本地的压测脚本。</li><li>one.jmx 是在使用 JMeter 时导出的脚本，你可以直接复制 JMeter 脚本，也可以让 JMeter 保存脚本的时候选择到这个路径下。</li><li>注意 one.jmx 有压测对应接口的 IP，测试的时候需要修改为你的服务器/本机IP才可以。<code>&lt;stringProp name=&quot;HTTPSampler.domain&quot;&gt;127.0.0.1&lt;/stringProp&gt;</code></li></ul><h2 id="四、压测验证" tabindex="-1"><a class="header-anchor" href="#四、压测验证" aria-hidden="true">#</a> 四、压测验证</h2><h3 id="_1-本地压测" tabindex="-1"><a class="header-anchor" href="#_1-本地压测" aria-hidden="true">#</a> 1. 本地压测</h3><ul><li>开启服务：xfg-dev-tech-jmeter</li><li>启动压测：JMeter</li></ul><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-12.png?raw=true" width="450px"></div><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-13.png?raw=true" width="750px"></div><h3 id="_2-脚本压测" tabindex="-1"><a class="header-anchor" href="#_2-脚本压测" aria-hidden="true">#</a> 2. 脚本压测</h3><div align="center"><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-jmeter-14.png?raw=true" width="750px"></div><p>压测命令：<code>jmeter -n -t one.jmx -l one.jtl</code></p><h2 id="五、其他工具" tabindex="-1"><a class="header-anchor" href="#五、其他工具" aria-hidden="true">#</a> 五、其他工具</h2>`,52),q={href:"https://httpd.apache.org/docs/2.4/programs/ab.html",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"ab -n 10 -c 2 http://localhost:8091/api/jmeter/query_order_info?orderId=100001",-1),H=e("li",null,[e("a",{href:"#"},"Siege"),a("：是常用的HTTP性能测试工具，可以模拟多个并发用户发送请求。脚本："),e("code",null,"siege -c10 -r1 -p http://localhost:8091/api/jmeter/query_order_info?orderId=100001")],-1),I={href:"https://www.apipost.cn/",target:"_blank",rel:"noopener noreferrer"};function R(D,L){const r=s("ExternalLinkIcon");return o(),i("div",null,[c,e("p",null,[a("作者：小傅哥 "),d,a("博客："),e("a",h,[a("https://bugstack.cn"),n(r)])]),m,e("p",null,[a("本文的宗旨在于通过简单干净实践的方式教会读者，如何使用"),e("a",u,[a("JMeter"),n(r)]),a("进行工程的压测测试。也同时会介绍到；ApacheBench、Siege 两个更简单压测工具的使用。")]),g,_,e("ul",null,[e("li",null,[a("xfg-dev-tech-jmeter："),e("a",k,[a("xfg-dev-tech-jmeter"),n(r)])])]),v,b,j,e("ul",null,[x,e("li",null,[a("官网："),e("a",f,[a("https://jmeter.apache.org/download_jmeter.cgi"),n(r)]),a(" - "),w,a("、"),T,a(" 注意官网还有对应的文档，很清晰的介绍了使用方法。")]),e("li",null,[a("镜像："),e("a",J,[a("https://mirrors.aliyun.com/apache/jmeter/binaries/"),n(r)]),a(" - "),P])]),M,e("ul",null,[e("li",null,[e("a",q,[a("ApacheBench"),n(r)]),a("：一个轻量级的HTTP性能测试工具，可以模拟多种类型的负载，并提供详细的测试报告。脚本："),y]),H,e("li",null,[e("a",I,[a("ApiPost"),n(r)]),a("：自带接口简单压测模拟，安装更加简单，适合初步压测验证。")])])])}const N=t(l,[["render",R],["__file","jmeter.html.vue"]]);export{N as default};
