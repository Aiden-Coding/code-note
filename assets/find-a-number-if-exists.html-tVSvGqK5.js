import{_ as e,o as a,c as r,e as d}from"./app-3RcBQnkC.js";const t={},i=d('<h1 id="如何在大量的数据中判断一个数是否存在" tabindex="-1"><a class="header-anchor" href="#如何在大量的数据中判断一个数是否存在" aria-hidden="true">#</a> 如何在大量的数据中判断一个数是否存在？</h1><h3 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？</p><h3 id="解答思路" tabindex="-1"><a class="header-anchor" href="#解答思路" aria-hidden="true">#</a> 解答思路</h3><h4 id="方法一-分治法" tabindex="-1"><a class="header-anchor" href="#方法一-分治法" aria-hidden="true">#</a> 方法一：分治法</h4><p>依然可以用分治法解决，方法与前面类似，就不再次赘述了。</p><h4 id="方法二-位图法" tabindex="-1"><a class="header-anchor" href="#方法二-位图法" aria-hidden="true">#</a> 方法二：位图法</h4><p>由于 unsigned int 数字的范围是 <code>[0, 1 &lt;&lt; 32)</code>，我们用 <code>1&lt;&lt;32=4,294,967,296</code> 个 bit 来表示每个数字。初始位均为 0，那么总共需要内存：4,294,967,296b≈512M。</p><p>我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。</p><h3 id="方法总结" tabindex="-1"><a class="header-anchor" href="#方法总结" aria-hidden="true">#</a> 方法总结</h3><p><strong>判断数字是否存在、判断数字是否重复的问题</strong>，位图法是一种非常高效的方法。</p>',11),n=[i];function h(s,c){return a(),r("div",null,n)}const l=e(t,[["render",h],["__file","find-a-number-if-exists.html.vue"]]);export{l as default};
